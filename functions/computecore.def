HRESULT HcsEnumerateComputeSystems([Const] [In] [Optional] PWSTR query, [In] HCS_OPERATION operation);
HRESULT HcsEnumerateComputeSystemsInNamespace([Const] [In] PWSTR idNamespace, [Const] [In] [Optional] PWSTR query, [In] HCS_OPERATION operation);
HCS_OPERATION HcsCreateOperation([Const] [In] [Optional] void* context, [In] [Optional] HCS_OPERATION_COMPLETION callback);
void HcsCloseOperation([In] HCS_OPERATION operation);
void* HcsGetOperationContext([In] HCS_OPERATION operation);
HRESULT HcsSetOperationContext([In] HCS_OPERATION operation, [Const] [In] [Optional] void* context);
HCS_SYSTEM HcsGetComputeSystemFromOperation([In] HCS_OPERATION operation);
HCS_PROCESS HcsGetProcessFromOperation([In] HCS_OPERATION operation);
HCS_OPERATION_TYPE HcsGetOperationType([In] HCS_OPERATION operation);
ulong HcsGetOperationId([In] HCS_OPERATION operation);
HRESULT HcsGetOperationResult([In] HCS_OPERATION operation, [Out] [Optional] PWSTR* resultDocument);
HRESULT HcsGetOperationResultAndProcessInfo([In] HCS_OPERATION operation, [Out] [Optional] HCS_PROCESS_INFORMATION* processInformation, [Out] [Optional] PWSTR* resultDocument);
HRESULT HcsGetProcessorCompatibilityFromSavedState([Const] [In] PWSTR RuntimeFileName, [Out] [Optional] PWSTR* ProcessorFeaturesString);
HRESULT HcsWaitForOperationResult([In] HCS_OPERATION operation, [In] uint timeoutMs, [Out] [Optional] PWSTR* resultDocument);
HRESULT HcsWaitForOperationResultAndProcessInfo([In] HCS_OPERATION operation, [In] uint timeoutMs, [Out] [Optional] HCS_PROCESS_INFORMATION* processInformation, [Out] [Optional] PWSTR* resultDocument);
HRESULT HcsSetOperationCallback([In] HCS_OPERATION operation, [Const] [In] [Optional] void* context, [In] HCS_OPERATION_COMPLETION callback);
HRESULT HcsCancelOperation([In] HCS_OPERATION operation);
HRESULT HcsCreateComputeSystem([Const] [In] PWSTR id, [Const] [In] PWSTR configuration, [In] HCS_OPERATION operation, [Const] [In] [Optional] SECURITY_DESCRIPTOR* securityDescriptor, [Out] HCS_SYSTEM* computeSystem);
HRESULT HcsCreateComputeSystemInNamespace([Const] [In] PWSTR idNamespace, [Const] [In] PWSTR id, [Const] [In] PWSTR configuration, [In] HCS_OPERATION operation, [Const] [In] [Optional] HCS_CREATE_OPTIONS* options, [Out] HCS_SYSTEM* computeSystem);
HRESULT HcsOpenComputeSystem([Const] [In] PWSTR id, [In] uint requestedAccess, [Out] HCS_SYSTEM* computeSystem);
HRESULT HcsOpenComputeSystemInNamespace([Const] [In] PWSTR idNamespace, [Const] [In] PWSTR id, [In] uint requestedAccess, [Out] HCS_SYSTEM* computeSystem);
void HcsCloseComputeSystem([In] HCS_SYSTEM computeSystem);
HRESULT HcsStartComputeSystem([In] HCS_SYSTEM computeSystem, [In] HCS_OPERATION operation, [Const] [In] [Optional] PWSTR options);
HRESULT HcsShutDownComputeSystem([In] HCS_SYSTEM computeSystem, [In] HCS_OPERATION operation, [Const] [In] [Optional] PWSTR options);
HRESULT HcsTerminateComputeSystem([In] HCS_SYSTEM computeSystem, [In] HCS_OPERATION operation, [Const] [In] [Optional] PWSTR options);
HRESULT HcsCrashComputeSystem([In] HCS_SYSTEM computeSystem, [In] HCS_OPERATION operation, [Const] [In] [Optional] PWSTR options);
HRESULT HcsPauseComputeSystem([In] HCS_SYSTEM computeSystem, [In] HCS_OPERATION operation, [Const] [In] [Optional] PWSTR options);
HRESULT HcsResumeComputeSystem([In] HCS_SYSTEM computeSystem, [In] HCS_OPERATION operation, [Const] [In] [Optional] PWSTR options);
HRESULT HcsSaveComputeSystem([In] HCS_SYSTEM computeSystem, [In] HCS_OPERATION operation, [Const] [In] [Optional] PWSTR options);
HRESULT HcsGetComputeSystemProperties([In] HCS_SYSTEM computeSystem, [In] HCS_OPERATION operation, [Const] [In] [Optional] PWSTR propertyQuery);
HRESULT HcsModifyComputeSystem([In] HCS_SYSTEM computeSystem, [In] HCS_OPERATION operation, [Const] [In] PWSTR configuration, [In] [Optional] HANDLE identity);
HRESULT HcsWaitForComputeSystemExit([In] HCS_SYSTEM computeSystem, [In] uint timeoutMs, [Out] [Optional] PWSTR* result);
HRESULT HcsSetComputeSystemCallback([In] HCS_SYSTEM computeSystem, [In] HCS_EVENT_OPTIONS callbackOptions, [Const] [In] [Optional] void* context, [In] HCS_EVENT_CALLBACK callback);
HRESULT HcsCreateProcess([In] HCS_SYSTEM computeSystem, [Const] [In] PWSTR processParameters, [In] HCS_OPERATION operation, [Const] [In] [Optional] SECURITY_DESCRIPTOR* securityDescriptor, [Out] HCS_PROCESS* process);
HRESULT HcsOpenProcess([In] HCS_SYSTEM computeSystem, [In] uint processId, [In] uint requestedAccess, [Out] HCS_PROCESS* process);
void HcsCloseProcess([In] HCS_PROCESS process);
HRESULT HcsTerminateProcess([In] HCS_PROCESS process, [In] HCS_OPERATION operation, [Const] [In] [Optional] PWSTR options);
HRESULT HcsSignalProcess([In] HCS_PROCESS process, [In] HCS_OPERATION operation, [Const] [In] [Optional] PWSTR options);
HRESULT HcsGetProcessInfo([In] HCS_PROCESS process, [In] HCS_OPERATION operation);
HRESULT HcsGetProcessProperties([In] HCS_PROCESS process, [In] HCS_OPERATION operation, [Const] [In] [Optional] PWSTR propertyQuery);
HRESULT HcsModifyProcess([In] HCS_PROCESS process, [In] HCS_OPERATION operation, [Const] [In] PWSTR settings);
HRESULT HcsSetProcessCallback([In] HCS_PROCESS process, [In] HCS_EVENT_OPTIONS callbackOptions, [In] void* context, [In] HCS_EVENT_CALLBACK callback);
HRESULT HcsWaitForProcessExit([In] HCS_PROCESS computeSystem, [In] uint timeoutMs, [Out] [Optional] PWSTR* result);
HRESULT HcsGetServiceProperties([Const] [In] [Optional] PWSTR propertyQuery, [Out] PWSTR* result);
HRESULT HcsModifyServiceSettings([Const] [In] PWSTR settings, [Out] [Optional] PWSTR* result);
HRESULT HcsSubmitWerReport([Const] [In] PWSTR settings);
HRESULT HcsCreateEmptyGuestStateFile([Const] [In] PWSTR guestStateFilePath);
HRESULT HcsCreateEmptyRuntimeStateFile([Const] [In] PWSTR runtimeStateFilePath);
HRESULT HcsGrantVmAccess([Const] [In] PWSTR vmId, [Const] [In] PWSTR filePath);
HRESULT HcsRevokeVmAccess([Const] [In] PWSTR vmId, [Const] [In] PWSTR filePath);
HRESULT HcsGrantVmGroupAccess([Const] [In] PWSTR filePath);
HRESULT HcsRevokeVmGroupAccess([Const] [In] PWSTR filePath);
