int WSARecvEx([In] SOCKET s, [MemorySize(BytesParamIndex = 2)] [Out] PSTR buf, [In] int len, [In] [Out] int* flags);
BOOL TransmitFile([In] SOCKET hSocket, [In] HANDLE hFile, [In] uint nNumberOfBytesToWrite, [In] uint nNumberOfBytesPerSend, [In] [Out] [Optional] OVERLAPPED* lpOverlapped, [In] [Optional] TRANSMIT_FILE_BUFFERS* lpTransmitBuffers, [In] uint dwReserved);
BOOL AcceptEx([In] SOCKET sListenSocket, [In] SOCKET sAcceptSocket, [Out] void* lpOutputBuffer, [In] uint dwReceiveDataLength, [In] uint dwLocalAddressLength, [In] uint dwRemoteAddressLength, [Out] uint* lpdwBytesReceived, [In] [Out] OVERLAPPED* lpOverlapped);
void GetAcceptExSockaddrs([In] void* lpOutputBuffer, [In] uint dwReceiveDataLength, [In] uint dwLocalAddressLength, [In] uint dwRemoteAddressLength, [Out] SOCKADDR** LocalSockaddr, [Out] int* LocalSockaddrLength, [Out] SOCKADDR** RemoteSockaddr, [Out] int* RemoteSockaddrLength);
int EnumProtocolsA([In] [Optional] int* lpiProtocols, [MemorySize(BytesParamIndex = 2)] [Out] void* lpProtocolBuffer, [In] [Out] uint* lpdwBufferLength);
int EnumProtocolsW([In] [Optional] int* lpiProtocols, [MemorySize(BytesParamIndex = 2)] [Out] void* lpProtocolBuffer, [In] [Out] uint* lpdwBufferLength);
int GetAddressByNameA([In] uint dwNameSpace, [In] Guid* lpServiceType, [In] [Optional] PSTR lpServiceName, [In] [Optional] int* lpiProtocols, [In] uint dwResolution, [In] [Optional] SERVICE_ASYNC_INFO* lpServiceAsyncInfo, [MemorySize(BytesParamIndex = 7)] [Out] void* lpCsaddrBuffer, [In] [Out] uint* lpdwBufferLength, [NativeArrayInfo(CountParamIndex = 9)] [In] [Out] [Optional] PSTR lpAliasBuffer, [In] [Out] uint* lpdwAliasBufferLength);
int GetAddressByNameW([In] uint dwNameSpace, [In] Guid* lpServiceType, [In] [Optional] PWSTR lpServiceName, [In] [Optional] int* lpiProtocols, [In] uint dwResolution, [In] [Optional] SERVICE_ASYNC_INFO* lpServiceAsyncInfo, [MemorySize(BytesParamIndex = 7)] [Out] void* lpCsaddrBuffer, [In] [Out] uint* lpdwBufferLength, [NativeArrayInfo(CountParamIndex = 9)] [In] [Out] [Optional] PWSTR lpAliasBuffer, [In] [Out] uint* lpdwAliasBufferLength);
int GetTypeByNameA([In] PSTR lpServiceName, [In] [Out] Guid* lpServiceType);
int GetTypeByNameW([In] PWSTR lpServiceName, [In] [Out] Guid* lpServiceType);
int GetNameByTypeA([In] Guid* lpServiceType, [MemorySize(BytesParamIndex = 2)] [Out] PSTR lpServiceName, [In] uint dwNameLength);
int GetNameByTypeW([In] Guid* lpServiceType, [MemorySize(BytesParamIndex = 2)] [Out] PWSTR lpServiceName, [In] uint dwNameLength);
int SetServiceA([In] uint dwNameSpace, [In] SET_SERVICE_OPERATION dwOperation, [In] uint dwFlags, [In] SERVICE_INFOA* lpServiceInfo, [In] [Optional] SERVICE_ASYNC_INFO* lpServiceAsyncInfo, [Out] uint* lpdwStatusFlags);
int SetServiceW([In] uint dwNameSpace, [In] SET_SERVICE_OPERATION dwOperation, [In] uint dwFlags, [In] SERVICE_INFOW* lpServiceInfo, [In] [Optional] SERVICE_ASYNC_INFO* lpServiceAsyncInfo, [Out] uint* lpdwStatusFlags);
int GetServiceA([In] uint dwNameSpace, [In] Guid* lpGuid, [In] PSTR lpServiceName, [In] uint dwProperties, [MemorySize(BytesParamIndex = 5)] [Out] void* lpBuffer, [In] [Out] uint* lpdwBufferSize, [In] [Optional] SERVICE_ASYNC_INFO* lpServiceAsyncInfo);
int GetServiceW([In] uint dwNameSpace, [In] Guid* lpGuid, [In] PWSTR lpServiceName, [In] uint dwProperties, [MemorySize(BytesParamIndex = 5)] [Out] void* lpBuffer, [In] [Out] uint* lpdwBufferSize, [In] [Optional] SERVICE_ASYNC_INFO* lpServiceAsyncInfo);
