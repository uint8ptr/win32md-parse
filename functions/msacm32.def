uint acmGetVersion();
uint acmMetrics([In] HACMOBJ hao, [In] uint uMetric, [In] [Out] void* pMetric);
uint acmDriverEnum([In] ACMDRIVERENUMCB fnCallback, [In] nuint dwInstance, [In] uint fdwEnum);
uint acmDriverID([In] HACMOBJ hao, [In] [Out] nint* phadid, [In] uint fdwDriverID);
uint acmDriverAddA([In] [Out] nint* phadid, [In] HINSTANCE hinstModule, [In] LPARAM lParam, [In] uint dwPriority, [In] uint fdwAdd);
uint acmDriverAddW([In] [Out] nint* phadid, [In] HINSTANCE hinstModule, [In] LPARAM lParam, [In] uint dwPriority, [In] uint fdwAdd);
uint acmDriverRemove([In] HACMDRIVERID hadid, [In] uint fdwRemove);
uint acmDriverOpen([In] [Out] nint* phad, [In] HACMDRIVERID hadid, [In] uint fdwOpen);
uint acmDriverClose([In] HACMDRIVER had, [In] uint fdwClose);
LRESULT acmDriverMessage([In] HACMDRIVER had, [In] uint uMsg, [In] LPARAM lParam1, [In] LPARAM lParam2);
uint acmDriverPriority([In] HACMDRIVERID hadid, [In] uint dwPriority, [In] uint fdwPriority);
uint acmDriverDetailsA([In] HACMDRIVERID hadid, [In] [Out] ACMDRIVERDETAILSA* padd, [In] uint fdwDetails);
uint acmDriverDetailsW([In] HACMDRIVERID hadid, [In] [Out] ACMDRIVERDETAILSW* padd, [In] uint fdwDetails);
uint acmFormatTagDetailsA([In] HACMDRIVER had, [In] [Out] ACMFORMATTAGDETAILSA* paftd, [In] uint fdwDetails);
uint acmFormatTagDetailsW([In] HACMDRIVER had, [In] [Out] ACMFORMATTAGDETAILSW* paftd, [In] uint fdwDetails);
uint acmFormatTagEnumA([In] HACMDRIVER had, [In] [Out] ACMFORMATTAGDETAILSA* paftd, [In] ACMFORMATTAGENUMCBA fnCallback, [In] nuint dwInstance, [In] uint fdwEnum);
uint acmFormatTagEnumW([In] HACMDRIVER had, [In] [Out] ACMFORMATTAGDETAILSW* paftd, [In] ACMFORMATTAGENUMCBW fnCallback, [In] nuint dwInstance, [In] uint fdwEnum);
uint acmFormatDetailsA([In] HACMDRIVER had, [In] [Out] ACMFORMATDETAILSA* pafd, [In] uint fdwDetails);
uint acmFormatDetailsW([In] HACMDRIVER had, [In] [Out] tACMFORMATDETAILSW* pafd, [In] uint fdwDetails);
uint acmFormatEnumA([In] HACMDRIVER had, [In] [Out] ACMFORMATDETAILSA* pafd, [In] ACMFORMATENUMCBA fnCallback, [In] nuint dwInstance, [In] uint fdwEnum);
uint acmFormatEnumW([In] HACMDRIVER had, [In] [Out] tACMFORMATDETAILSW* pafd, [In] ACMFORMATENUMCBW fnCallback, [In] nuint dwInstance, [In] uint fdwEnum);
uint acmFormatSuggest([In] HACMDRIVER had, [In] [Out] WAVEFORMATEX* pwfxSrc, [In] [Out] WAVEFORMATEX* pwfxDst, [In] uint cbwfxDst, [In] uint fdwSuggest);
uint acmFormatChooseA([In] [Out] ACMFORMATCHOOSEA* pafmtc);
uint acmFormatChooseW([In] [Out] ACMFORMATCHOOSEW* pafmtc);
uint acmFilterTagDetailsA([In] HACMDRIVER had, [In] [Out] ACMFILTERTAGDETAILSA* paftd, [In] uint fdwDetails);
uint acmFilterTagDetailsW([In] HACMDRIVER had, [In] [Out] ACMFILTERTAGDETAILSW* paftd, [In] uint fdwDetails);
uint acmFilterTagEnumA([In] HACMDRIVER had, [In] [Out] ACMFILTERTAGDETAILSA* paftd, [In] ACMFILTERTAGENUMCBA fnCallback, [In] nuint dwInstance, [In] uint fdwEnum);
uint acmFilterTagEnumW([In] HACMDRIVER had, [In] [Out] ACMFILTERTAGDETAILSW* paftd, [In] ACMFILTERTAGENUMCBW fnCallback, [In] nuint dwInstance, [In] uint fdwEnum);
uint acmFilterDetailsA([In] HACMDRIVER had, [In] [Out] ACMFILTERDETAILSA* pafd, [In] uint fdwDetails);
uint acmFilterDetailsW([In] HACMDRIVER had, [In] [Out] ACMFILTERDETAILSW* pafd, [In] uint fdwDetails);
uint acmFilterEnumA([In] HACMDRIVER had, [In] [Out] ACMFILTERDETAILSA* pafd, [In] ACMFILTERENUMCBA fnCallback, [In] nuint dwInstance, [In] uint fdwEnum);
uint acmFilterEnumW([In] HACMDRIVER had, [In] [Out] ACMFILTERDETAILSW* pafd, [In] ACMFILTERENUMCBW fnCallback, [In] nuint dwInstance, [In] uint fdwEnum);
uint acmFilterChooseA([In] [Out] ACMFILTERCHOOSEA* pafltrc);
uint acmFilterChooseW([In] [Out] ACMFILTERCHOOSEW* pafltrc);
uint acmStreamOpen([In] [Out] nint* phas, [In] HACMDRIVER had, [In] [Out] WAVEFORMATEX* pwfxSrc, [In] [Out] WAVEFORMATEX* pwfxDst, [In] [Out] WAVEFILTER* pwfltr, [In] nuint dwCallback, [In] nuint dwInstance, [In] uint fdwOpen);
uint acmStreamClose([In] HACMSTREAM has, [In] uint fdwClose);
uint acmStreamSize([In] HACMSTREAM has, [In] uint cbInput, [In] [Out] uint* pdwOutputBytes, [In] uint fdwSize);
uint acmStreamReset([In] HACMSTREAM has, [In] uint fdwReset);
uint acmStreamMessage([In] HACMSTREAM has, [In] uint uMsg, [In] LPARAM lParam1, [In] LPARAM lParam2);
uint acmStreamConvert([In] HACMSTREAM has, [In] [Out] ACMSTREAMHEADER* pash, [In] uint fdwConvert);
uint acmStreamPrepareHeader([In] HACMSTREAM has, [In] [Out] ACMSTREAMHEADER* pash, [In] uint fdwPrepare);
uint acmStreamUnprepareHeader([In] HACMSTREAM has, [In] [Out] ACMSTREAMHEADER* pash, [In] uint fdwUnprepare);
