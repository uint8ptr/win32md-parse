IMAGE_NT_HEADERS64* ImageNtHeader([In] void* Base);
IMAGE_SECTION_HEADER* ImageRvaToSection([In] IMAGE_NT_HEADERS64* NtHeaders, [In] void* Base, [In] uint Rva);
void* ImageRvaToVa([In] IMAGE_NT_HEADERS64* NtHeaders, [In] void* Base, [In] uint Rva, [In] [Optional] IMAGE_SECTION_HEADER** LastRvaSection);
BOOL MiniDumpWriteDump([In] HANDLE hProcess, [In] uint ProcessId, [In] HANDLE hFile, [In] MINIDUMP_TYPE DumpType, [In] [Optional] MINIDUMP_EXCEPTION_INFORMATION* ExceptionParam, [In] [Optional] MINIDUMP_USER_STREAM_INFORMATION* UserStreamParam, [In] [Optional] MINIDUMP_CALLBACK_INFORMATION* CallbackParam);
BOOL MiniDumpReadDumpStream([In] void* BaseOfDump, [In] uint StreamNumber, [Out] [Optional] MINIDUMP_DIRECTORY** Dir, [Out] [Optional] void** StreamPointer, [Out] [Optional] uint* StreamSize);
HANDLE SymFindDebugInfoFile([In] HANDLE hProcess, [Const] [In] PSTR FileName, [Out] PSTR DebugFilePath, [In] [Optional] PFIND_DEBUG_FILE_CALLBACK Callback, [In] [Optional] void* CallerData);
HANDLE SymFindDebugInfoFileW([In] HANDLE hProcess, [Const] [In] PWSTR FileName, [Out] PWSTR DebugFilePath, [In] [Optional] PFIND_DEBUG_FILE_CALLBACKW Callback, [In] [Optional] void* CallerData);
HANDLE FindDebugInfoFile([Const] [In] PSTR FileName, [Const] [In] PSTR SymbolPath, [Out] PSTR DebugFilePath);
HANDLE FindDebugInfoFileEx([Const] [In] PSTR FileName, [Const] [In] PSTR SymbolPath, [Out] PSTR DebugFilePath, [In] [Optional] PFIND_DEBUG_FILE_CALLBACK Callback, [In] [Optional] void* CallerData);
HANDLE FindDebugInfoFileExW([Const] [In] PWSTR FileName, [Const] [In] PWSTR SymbolPath, [Out] PWSTR DebugFilePath, [In] [Optional] PFIND_DEBUG_FILE_CALLBACKW Callback, [In] [Optional] void* CallerData);
BOOL SymFindFileInPath([In] HANDLE hprocess, [Const] [In] [Optional] PSTR SearchPathA, [Const] [In] PSTR FileName, [In] [Optional] void* id, [In] uint two, [In] uint three, [In] SYM_FIND_ID_OPTION flags, [Out] PSTR FoundFile, [In] [Optional] PFINDFILEINPATHCALLBACK callback, [In] [Optional] void* context);
BOOL SymFindFileInPathW([In] HANDLE hprocess, [Const] [In] [Optional] PWSTR SearchPathA, [Const] [In] PWSTR FileName, [In] [Optional] void* id, [In] uint two, [In] uint three, [In] SYM_FIND_ID_OPTION flags, [Out] PWSTR FoundFile, [In] [Optional] PFINDFILEINPATHCALLBACKW callback, [In] [Optional] void* context);
HANDLE SymFindExecutableImage([In] HANDLE hProcess, [Const] [In] PSTR FileName, [Out] PSTR ImageFilePath, [In] PFIND_EXE_FILE_CALLBACK Callback, [In] void* CallerData);
HANDLE SymFindExecutableImageW([In] HANDLE hProcess, [Const] [In] PWSTR FileName, [Out] PWSTR ImageFilePath, [In] PFIND_EXE_FILE_CALLBACKW Callback, [In] void* CallerData);
HANDLE FindExecutableImage([Const] [In] PSTR FileName, [Const] [In] PSTR SymbolPath, [Out] PSTR ImageFilePath);
HANDLE FindExecutableImageEx([Const] [In] PSTR FileName, [Const] [In] PSTR SymbolPath, [Out] PSTR ImageFilePath, [In] [Optional] PFIND_EXE_FILE_CALLBACK Callback, [In] [Optional] void* CallerData);
HANDLE FindExecutableImageExW([Const] [In] PWSTR FileName, [Const] [In] PWSTR SymbolPath, [Out] PWSTR ImageFilePath, [In] [Optional] PFIND_EXE_FILE_CALLBACKW Callback, [In] void* CallerData);
IMAGE_NT_HEADERS32* ImageNtHeader([In] void* Base);
void* ImageDirectoryEntryToDataEx([In] void* Base, [In] BOOLEAN MappedAsImage, [In] IMAGE_DIRECTORY_ENTRY DirectoryEntry, [Out] uint* Size, [Out] [Optional] IMAGE_SECTION_HEADER** FoundHeader);
void* ImageDirectoryEntryToData([In] void* Base, [In] BOOLEAN MappedAsImage, [In] IMAGE_DIRECTORY_ENTRY DirectoryEntry, [Out] uint* Size);
IMAGE_SECTION_HEADER* ImageRvaToSection([In] IMAGE_NT_HEADERS32* NtHeaders, [In] void* Base, [In] uint Rva);
void* ImageRvaToVa([In] IMAGE_NT_HEADERS32* NtHeaders, [In] void* Base, [In] uint Rva, [In] [Optional] IMAGE_SECTION_HEADER** LastRvaSection);
BOOL SearchTreeForFile([Const] [In] PSTR RootPath, [Const] [In] PSTR InputPathName, [Out] PSTR OutputPathBuffer);
BOOL SearchTreeForFileW([Const] [In] PWSTR RootPath, [Const] [In] PWSTR InputPathName, [Out] PWSTR OutputPathBuffer);
BOOL EnumDirTree([In] [Optional] HANDLE hProcess, [Const] [In] PSTR RootPath, [Const] [In] PSTR InputPathName, [Out] [Optional] PSTR OutputPathBuffer, [In] [Optional] PENUMDIRTREE_CALLBACK cb, [In] [Optional] void* data);
BOOL EnumDirTreeW([In] [Optional] HANDLE hProcess, [Const] [In] PWSTR RootPath, [Const] [In] PWSTR InputPathName, [Out] [Optional] PWSTR OutputPathBuffer, [In] [Optional] PENUMDIRTREE_CALLBACKW cb, [In] [Optional] void* data);
BOOL MakeSureDirectoryPathExists([Const] [In] PSTR DirPath);
uint UnDecorateSymbolName([Const] [In] PSTR name, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR outputString, [In] uint maxStringLength, [In] uint flags);
uint UnDecorateSymbolNameW([Const] [In] PWSTR name, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR outputString, [In] uint maxStringLength, [In] uint flags);
BOOL StackWalk64([In] uint MachineType, [In] HANDLE hProcess, [In] HANDLE hThread, [In] [Out] STACKFRAME64* StackFrame, [In] [Out] void* ContextRecord, [In] [Optional] PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine, [In] [Optional] PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine, [In] [Optional] PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine, [In] [Optional] PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress);
BOOL StackWalkEx([In] uint MachineType, [In] HANDLE hProcess, [In] HANDLE hThread, [In] [Out] STACKFRAME_EX* StackFrame, [In] [Out] void* ContextRecord, [In] [Optional] PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine, [In] [Optional] PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine, [In] [Optional] PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine, [In] [Optional] PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress, [In] uint Flags);
BOOL StackWalk([In] uint MachineType, [In] HANDLE hProcess, [In] HANDLE hThread, [In] [Out] STACKFRAME* StackFrame, [In] [Out] void* ContextRecord, [In] [Optional] PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine, [In] [Optional] PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine, [In] [Optional] PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine, [In] [Optional] PTRANSLATE_ADDRESS_ROUTINE TranslateAddress);
API_VERSION* ImagehlpApiVersion();
API_VERSION* ImagehlpApiVersionEx([In] API_VERSION* AppVersion);
uint GetTimestampForLoadedLibrary([In] HINSTANCE Module);
BOOL SymSetParentWindow([In] HWND hwnd);
PSTR SymSetHomeDirectory([In] [Optional] HANDLE hProcess, [Const] [In] [Optional] PSTR dir);
PWSTR SymSetHomeDirectoryW([In] [Optional] HANDLE hProcess, [Const] [In] [Optional] PWSTR dir);
PSTR SymGetHomeDirectory([In] IMAGEHLP_HD_TYPE type, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR dir, [In] nuint size);
PWSTR SymGetHomeDirectoryW([In] IMAGEHLP_HD_TYPE type, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR dir, [In] nuint size);
BOOL SymGetOmaps([In] HANDLE hProcess, [In] ulong BaseOfDll, [Out] OMAP** OmapTo, [Out] ulong* cOmapTo, [Out] OMAP** OmapFrom, [Out] ulong* cOmapFrom);
uint SymSetOptions([In] uint SymOptions);
uint SymGetOptions();
BOOL SymCleanup([In] HANDLE hProcess);
BOOL SymGetExtendedOption([In] IMAGEHLP_EXTENDED_OPTIONS option);
BOOL SymSetExtendedOption([In] IMAGEHLP_EXTENDED_OPTIONS option, [In] BOOL value);
BOOL SymMatchString([Const] [In] PSTR string, [Const] [In] PSTR expression, [In] BOOL fCase);
BOOL SymMatchStringA([Const] [In] PSTR string, [Const] [In] PSTR expression, [In] BOOL fCase);
BOOL SymMatchStringW([Const] [In] PWSTR string, [Const] [In] PWSTR expression, [In] BOOL fCase);
BOOL SymEnumSourceFiles([In] HANDLE hProcess, [In] ulong ModBase, [Const] [In] [Optional] PSTR Mask, [In] PSYM_ENUMSOURCEFILES_CALLBACK cbSrcFiles, [In] [Optional] void* UserContext);
BOOL SymEnumSourceFilesW([In] HANDLE hProcess, [In] ulong ModBase, [Const] [In] [Optional] PWSTR Mask, [In] PSYM_ENUMSOURCEFILES_CALLBACKW cbSrcFiles, [In] [Optional] void* UserContext);
BOOL SymEnumerateModules64([In] HANDLE hProcess, [In] PSYM_ENUMMODULES_CALLBACK64 EnumModulesCallback, [In] [Optional] void* UserContext);
BOOL SymEnumerateModulesW64([In] HANDLE hProcess, [In] PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback, [In] [Optional] void* UserContext);
BOOL SymEnumerateModules([In] HANDLE hProcess, [In] PSYM_ENUMMODULES_CALLBACK EnumModulesCallback, [In] [Optional] void* UserContext);
BOOL EnumerateLoadedModulesEx([In] HANDLE hProcess, [In] PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback, [In] [Optional] void* UserContext);
BOOL EnumerateLoadedModulesExW([In] HANDLE hProcess, [In] PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback, [In] [Optional] void* UserContext);
BOOL EnumerateLoadedModules64([In] HANDLE hProcess, [In] PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback, [In] [Optional] void* UserContext);
BOOL EnumerateLoadedModulesW64([In] HANDLE hProcess, [In] PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback, [In] [Optional] void* UserContext);
BOOL EnumerateLoadedModules([In] HANDLE hProcess, [In] PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback, [In] [Optional] void* UserContext);
void* SymFunctionTableAccess64([In] HANDLE hProcess, [In] ulong AddrBase);
void* SymFunctionTableAccess64AccessRoutines([In] HANDLE hProcess, [In] ulong AddrBase, [In] [Optional] PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine, [In] [Optional] PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine);
void* SymFunctionTableAccess([In] HANDLE hProcess, [In] uint AddrBase);
BOOL SymGetUnwindInfo([In] HANDLE hProcess, [In] ulong Address, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* Buffer, [In] [Out] uint* Size);
BOOL SymGetModuleInfo64([In] HANDLE hProcess, [In] ulong qwAddr, [Out] IMAGEHLP_MODULE64* ModuleInfo);
BOOL SymGetModuleInfoW64([In] HANDLE hProcess, [In] ulong qwAddr, [Out] IMAGEHLP_MODULEW64* ModuleInfo);
BOOL SymGetModuleInfo([In] HANDLE hProcess, [In] uint dwAddr, [Out] IMAGEHLP_MODULE* ModuleInfo);
BOOL SymGetModuleInfoW([In] HANDLE hProcess, [In] uint dwAddr, [Out] IMAGEHLP_MODULEW* ModuleInfo);
ulong SymGetModuleBase64([In] HANDLE hProcess, [In] ulong qwAddr);
uint SymGetModuleBase([In] HANDLE hProcess, [In] uint dwAddr);
BOOL SymEnumLines([In] HANDLE hProcess, [In] ulong Base, [Const] [In] [Optional] PSTR Obj, [Const] [In] [Optional] PSTR File, [In] PSYM_ENUMLINES_CALLBACK EnumLinesCallback, [In] [Optional] void* UserContext);
BOOL SymEnumLinesW([In] HANDLE hProcess, [In] ulong Base, [Const] [In] [Optional] PWSTR Obj, [Const] [In] [Optional] PWSTR File, [In] PSYM_ENUMLINES_CALLBACKW EnumLinesCallback, [In] [Optional] void* UserContext);
BOOL SymGetLineFromAddr64([In] HANDLE hProcess, [In] ulong qwAddr, [Out] uint* pdwDisplacement, [Out] IMAGEHLP_LINE64* Line64);
BOOL SymGetLineFromAddrW64([In] HANDLE hProcess, [In] ulong dwAddr, [Out] uint* pdwDisplacement, [Out] IMAGEHLP_LINEW64* Line);
BOOL SymGetLineFromInlineContext([In] HANDLE hProcess, [In] ulong qwAddr, [In] uint InlineContext, [In] [Optional] ulong qwModuleBaseAddress, [Out] uint* pdwDisplacement, [Out] IMAGEHLP_LINE64* Line64);
BOOL SymGetLineFromInlineContextW([In] HANDLE hProcess, [In] ulong dwAddr, [In] uint InlineContext, [In] [Optional] ulong qwModuleBaseAddress, [Out] uint* pdwDisplacement, [Out] IMAGEHLP_LINEW64* Line);
BOOL SymEnumSourceLines([In] HANDLE hProcess, [In] ulong Base, [Const] [In] [Optional] PSTR Obj, [Const] [In] [Optional] PSTR File, [In] [Optional] uint Line, [In] uint Flags, [In] PSYM_ENUMLINES_CALLBACK EnumLinesCallback, [In] [Optional] void* UserContext);
BOOL SymEnumSourceLinesW([In] HANDLE hProcess, [In] ulong Base, [Const] [In] [Optional] PWSTR Obj, [Const] [In] [Optional] PWSTR File, [In] [Optional] uint Line, [In] uint Flags, [In] PSYM_ENUMLINES_CALLBACKW EnumLinesCallback, [In] [Optional] void* UserContext);
uint SymAddrIncludeInlineTrace([In] HANDLE hProcess, [In] ulong Address);
uint SymCompareInlineTrace([In] HANDLE hProcess, [In] ulong Address1, [In] uint InlineContext1, [In] ulong RetAddress1, [In] ulong Address2, [In] ulong RetAddress2);
BOOL SymQueryInlineTrace([In] HANDLE hProcess, [In] ulong StartAddress, [In] uint StartContext, [In] ulong StartRetAddress, [In] ulong CurAddress, [Out] uint* CurContext, [Out] uint* CurFrameIndex);
BOOL SymGetLineFromAddr([In] HANDLE hProcess, [In] uint dwAddr, [Out] uint* pdwDisplacement, [Out] IMAGEHLP_LINE* Line);
BOOL SymGetLineFromName64([In] HANDLE hProcess, [Const] [In] [Optional] PSTR ModuleName, [Const] [In] [Optional] PSTR FileName, [In] uint dwLineNumber, [Out] int* plDisplacement, [In] [Out] IMAGEHLP_LINE64* Line);
BOOL SymGetLineFromNameW64([In] HANDLE hProcess, [Const] [In] [Optional] PWSTR ModuleName, [Const] [In] [Optional] PWSTR FileName, [In] uint dwLineNumber, [Out] int* plDisplacement, [In] [Out] IMAGEHLP_LINEW64* Line);
BOOL SymGetLineFromName([In] HANDLE hProcess, [Const] [In] [Optional] PSTR ModuleName, [Const] [In] [Optional] PSTR FileName, [In] uint dwLineNumber, [Out] int* plDisplacement, [In] [Out] IMAGEHLP_LINE* Line);
BOOL SymGetLineNext64([In] HANDLE hProcess, [In] [Out] IMAGEHLP_LINE64* Line);
BOOL SymGetLineNextW64([In] HANDLE hProcess, [In] [Out] IMAGEHLP_LINEW64* Line);
BOOL SymGetLineNext([In] HANDLE hProcess, [In] [Out] IMAGEHLP_LINE* Line);
BOOL SymGetLinePrev64([In] HANDLE hProcess, [In] [Out] IMAGEHLP_LINE64* Line);
BOOL SymGetLinePrevW64([In] HANDLE hProcess, [In] [Out] IMAGEHLP_LINEW64* Line);
BOOL SymGetLinePrev([In] HANDLE hProcess, [In] [Out] IMAGEHLP_LINE* Line);
uint SymGetFileLineOffsets64([In] HANDLE hProcess, [Const] [In] [Optional] PSTR ModuleName, [Const] [In] PSTR FileName, [NativeArrayInfo(CountParamIndex = 4)] [Out] ulong* Buffer, [In] uint BufferLines);
BOOL SymMatchFileName([Const] [In] PSTR FileName, [Const] [In] PSTR Match, [Out] [Optional] PSTR* FileNameStop, [Out] [Optional] PSTR* MatchStop);
BOOL SymMatchFileNameW([Const] [In] PWSTR FileName, [Const] [In] PWSTR Match, [Out] [Optional] PWSTR* FileNameStop, [Out] [Optional] PWSTR* MatchStop);
BOOL SymGetSourceFile([In] HANDLE hProcess, [In] ulong Base, [Const] [In] [Optional] PSTR Params, [Const] [In] PSTR FileSpec, [NativeArrayInfo(CountParamIndex = 5)] [Out] PSTR FilePath, [In] uint Size);
BOOL SymGetSourceFileW([In] HANDLE hProcess, [In] ulong Base, [Const] [In] [Optional] PWSTR Params, [Const] [In] PWSTR FileSpec, [NativeArrayInfo(CountParamIndex = 5)] [Out] PWSTR FilePath, [In] uint Size);
BOOL SymGetSourceFileToken([In] HANDLE hProcess, [In] ulong Base, [Const] [In] PSTR FileSpec, [Out] void** Token, [Out] uint* Size);
BOOL SymGetSourceFileTokenByTokenName([In] HANDLE hProcess, [In] ulong Base, [Const] [In] PSTR FileSpec, [Const] [In] PSTR TokenName, [Const] [In] [Optional] PSTR TokenParameters, [Out] void** Token, [Out] uint* Size);
BOOL SymGetSourceFileChecksumW([In] HANDLE hProcess, [In] ulong Base, [Const] [In] PWSTR FileSpec, [Out] uint* pCheckSumType, [NativeArrayInfo(CountParamIndex = 5)] [Out] byte* pChecksum, [In] uint checksumSize, [Out] uint* pActualBytesWritten);
BOOL SymGetSourceFileChecksum([In] HANDLE hProcess, [In] ulong Base, [Const] [In] PSTR FileSpec, [Out] uint* pCheckSumType, [NativeArrayInfo(CountParamIndex = 5)] [Out] byte* pChecksum, [In] uint checksumSize, [Out] uint* pActualBytesWritten);
BOOL SymGetSourceFileTokenW([In] HANDLE hProcess, [In] ulong Base, [Const] [In] PWSTR FileSpec, [Out] void** Token, [Out] uint* Size);
BOOL SymGetSourceFileTokenByTokenNameW([In] HANDLE hProcess, [In] ulong Base, [Const] [In] PWSTR FileSpec, [Const] [In] PWSTR TokenName, [Const] [In] [Optional] PWSTR TokenParameters, [Out] void** Token, [Out] uint* Size);
BOOL SymGetSourceFileFromToken([In] HANDLE hProcess, [In] void* Token, [Const] [In] [Optional] PSTR Params, [NativeArrayInfo(CountParamIndex = 4)] [Out] PSTR FilePath, [In] uint Size);
BOOL SymGetSourceFileFromTokenByTokenName([In] HANDLE hProcess, [In] void* Token, [Const] [In] [Optional] PSTR TokenName, [Const] [In] [Optional] PSTR Params, [NativeArrayInfo(CountParamIndex = 5)] [Out] PSTR FilePath, [In] uint Size);
BOOL SymGetSourceFileFromTokenW([In] HANDLE hProcess, [In] void* Token, [Const] [In] [Optional] PWSTR Params, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR FilePath, [In] uint Size);
BOOL SymGetSourceFileFromTokenByTokenNameW([In] HANDLE hProcess, [In] void* Token, [Const] [In] [Optional] PWSTR TokenName, [Const] [In] [Optional] PWSTR Params, [NativeArrayInfo(CountParamIndex = 5)] [Out] PWSTR FilePath, [In] uint Size);
BOOL SymGetSourceVarFromToken([In] HANDLE hProcess, [In] void* Token, [Const] [In] [Optional] PSTR Params, [Const] [In] PSTR VarName, [NativeArrayInfo(CountParamIndex = 5)] [Out] PSTR Value, [In] uint Size);
BOOL SymGetSourceVarFromTokenW([In] HANDLE hProcess, [In] void* Token, [Const] [In] [Optional] PWSTR Params, [Const] [In] PWSTR VarName, [NativeArrayInfo(CountParamIndex = 5)] [Out] PWSTR Value, [In] uint Size);
BOOL SymEnumSourceFileTokens([In] HANDLE hProcess, [In] ulong Base, [In] PENUMSOURCEFILETOKENSCALLBACK Callback);
BOOL SymInitialize([In] HANDLE hProcess, [Const] [In] [Optional] PSTR UserSearchPath, [In] BOOL fInvadeProcess);
BOOL SymInitializeW([In] HANDLE hProcess, [Const] [In] [Optional] PWSTR UserSearchPath, [In] BOOL fInvadeProcess);
BOOL SymGetSearchPath([In] HANDLE hProcess, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR SearchPathA, [In] uint SearchPathLength);
BOOL SymGetSearchPathW([In] HANDLE hProcess, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR SearchPathA, [In] uint SearchPathLength);
BOOL SymSetSearchPath([In] HANDLE hProcess, [Const] [In] [Optional] PSTR SearchPathA);
BOOL SymSetSearchPathW([In] HANDLE hProcess, [Const] [In] [Optional] PWSTR SearchPathA);
ulong SymLoadModuleEx([In] HANDLE hProcess, [In] [Optional] HANDLE hFile, [Const] [In] [Optional] PSTR ImageName, [Const] [In] [Optional] PSTR ModuleName, [In] ulong BaseOfDll, [In] uint DllSize, [In] [Optional] MODLOAD_DATA* Data, [In] [Optional] SYM_LOAD_FLAGS Flags);
ulong SymLoadModuleExW([In] HANDLE hProcess, [In] [Optional] HANDLE hFile, [Const] [In] [Optional] PWSTR ImageName, [Const] [In] [Optional] PWSTR ModuleName, [In] ulong BaseOfDll, [In] uint DllSize, [In] [Optional] MODLOAD_DATA* Data, [In] [Optional] SYM_LOAD_FLAGS Flags);
BOOL SymUnloadModule64([In] HANDLE hProcess, [In] ulong BaseOfDll);
BOOL SymUnloadModule([In] HANDLE hProcess, [In] uint BaseOfDll);
BOOL SymUnDName64([In] IMAGEHLP_SYMBOL64* sym, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR UnDecName, [In] uint UnDecNameLength);
BOOL SymUnDName([In] IMAGEHLP_SYMBOL* sym, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR UnDecName, [In] uint UnDecNameLength);
BOOL SymRegisterCallback64([In] HANDLE hProcess, [In] PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction, [In] ulong UserContext);
BOOL SymRegisterCallbackW64([In] HANDLE hProcess, [In] PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction, [In] ulong UserContext);
BOOL SymRegisterFunctionEntryCallback64([In] HANDLE hProcess, [In] PSYMBOL_FUNCENTRY_CALLBACK64 CallbackFunction, [In] ulong UserContext);
BOOL SymRegisterCallback([In] HANDLE hProcess, [In] PSYMBOL_REGISTERED_CALLBACK CallbackFunction, [In] [Optional] void* UserContext);
BOOL SymRegisterFunctionEntryCallback([In] HANDLE hProcess, [In] PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction, [In] [Optional] void* UserContext);
BOOL SymSetContext([In] HANDLE hProcess, [In] IMAGEHLP_STACK_FRAME* StackFrame, [In] [Optional] void* Context);
BOOL SymSetScopeFromAddr([In] HANDLE hProcess, [In] ulong Address);
BOOL SymSetScopeFromInlineContext([In] HANDLE hProcess, [In] ulong Address, [In] uint InlineContext);
BOOL SymSetScopeFromIndex([In] HANDLE hProcess, [In] ulong BaseOfDll, [In] uint Index);
BOOL SymEnumProcesses([In] PSYM_ENUMPROCESSES_CALLBACK EnumProcessesCallback, [In] void* UserContext);
BOOL SymFromAddr([In] HANDLE hProcess, [In] ulong Address, [Out] [Optional] ulong* Displacement, [In] [Out] SYMBOL_INFO* Symbol);
BOOL SymFromAddrW([In] HANDLE hProcess, [In] ulong Address, [Out] [Optional] ulong* Displacement, [In] [Out] SYMBOL_INFOW* Symbol);
BOOL SymFromInlineContext([In] HANDLE hProcess, [In] ulong Address, [In] uint InlineContext, [Out] [Optional] ulong* Displacement, [In] [Out] SYMBOL_INFO* Symbol);
BOOL SymFromInlineContextW([In] HANDLE hProcess, [In] ulong Address, [In] uint InlineContext, [Out] [Optional] ulong* Displacement, [In] [Out] SYMBOL_INFOW* Symbol);
BOOL SymFromToken([In] HANDLE hProcess, [In] ulong Base, [In] uint Token, [In] [Out] SYMBOL_INFO* Symbol);
BOOL SymFromTokenW([In] HANDLE hProcess, [In] ulong Base, [In] uint Token, [In] [Out] SYMBOL_INFOW* Symbol);
BOOL SymNext([In] HANDLE hProcess, [In] [Out] SYMBOL_INFO* si);
BOOL SymNextW([In] HANDLE hProcess, [In] [Out] SYMBOL_INFOW* siw);
BOOL SymPrev([In] HANDLE hProcess, [In] [Out] SYMBOL_INFO* si);
BOOL SymPrevW([In] HANDLE hProcess, [In] [Out] SYMBOL_INFOW* siw);
BOOL SymFromName([In] HANDLE hProcess, [Const] [In] PSTR Name, [In] [Out] SYMBOL_INFO* Symbol);
BOOL SymFromNameW([In] HANDLE hProcess, [Const] [In] PWSTR Name, [In] [Out] SYMBOL_INFOW* Symbol);
BOOL SymEnumSymbols([In] HANDLE hProcess, [In] ulong BaseOfDll, [Const] [In] [Optional] PSTR Mask, [In] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [In] [Optional] void* UserContext);
BOOL SymEnumSymbolsEx([In] HANDLE hProcess, [In] ulong BaseOfDll, [Const] [In] [Optional] PSTR Mask, [In] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [In] [Optional] void* UserContext, [In] uint Options);
BOOL SymEnumSymbolsW([In] HANDLE hProcess, [In] ulong BaseOfDll, [Const] [In] [Optional] PWSTR Mask, [In] PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback, [In] [Optional] void* UserContext);
BOOL SymEnumSymbolsExW([In] HANDLE hProcess, [In] ulong BaseOfDll, [Const] [In] [Optional] PWSTR Mask, [In] PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback, [In] [Optional] void* UserContext, [In] uint Options);
BOOL SymEnumSymbolsForAddr([In] HANDLE hProcess, [In] ulong Address, [In] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [In] [Optional] void* UserContext);
BOOL SymEnumSymbolsForAddrW([In] HANDLE hProcess, [In] ulong Address, [In] PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback, [In] [Optional] void* UserContext);
BOOL SymSearch([In] HANDLE hProcess, [In] ulong BaseOfDll, [In] [Optional] uint Index, [In] [Optional] uint SymTag, [Const] [In] [Optional] PSTR Mask, [In] [Optional] ulong Address, [In] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [In] [Optional] void* UserContext, [In] uint Options);
BOOL SymSearchW([In] HANDLE hProcess, [In] ulong BaseOfDll, [In] [Optional] uint Index, [In] [Optional] uint SymTag, [Const] [In] [Optional] PWSTR Mask, [In] [Optional] ulong Address, [In] PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback, [In] [Optional] void* UserContext, [In] uint Options);
BOOL SymGetScope([In] HANDLE hProcess, [In] ulong BaseOfDll, [In] uint Index, [In] [Out] SYMBOL_INFO* Symbol);
BOOL SymGetScopeW([In] HANDLE hProcess, [In] ulong BaseOfDll, [In] uint Index, [In] [Out] SYMBOL_INFOW* Symbol);
BOOL SymFromIndex([In] HANDLE hProcess, [In] ulong BaseOfDll, [In] uint Index, [In] [Out] SYMBOL_INFO* Symbol);
BOOL SymFromIndexW([In] HANDLE hProcess, [In] ulong BaseOfDll, [In] uint Index, [In] [Out] SYMBOL_INFOW* Symbol);
BOOL SymGetTypeInfo([In] HANDLE hProcess, [In] ulong ModBase, [In] uint TypeId, [In] IMAGEHLP_SYMBOL_TYPE_INFO GetType, [Out] void* pInfo);
BOOL SymGetTypeInfoEx([In] HANDLE hProcess, [In] ulong ModBase, [In] [Out] IMAGEHLP_GET_TYPE_INFO_PARAMS* Params);
BOOL SymEnumTypes([In] HANDLE hProcess, [In] ulong BaseOfDll, [In] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [In] [Optional] void* UserContext);
BOOL SymEnumTypesW([In] HANDLE hProcess, [In] ulong BaseOfDll, [In] PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback, [In] [Optional] void* UserContext);
BOOL SymEnumTypesByName([In] HANDLE hProcess, [In] ulong BaseOfDll, [Const] [In] [Optional] PSTR mask, [In] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [In] [Optional] void* UserContext);
BOOL SymEnumTypesByNameW([In] HANDLE hProcess, [In] ulong BaseOfDll, [Const] [In] [Optional] PWSTR mask, [In] PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback, [In] [Optional] void* UserContext);
BOOL SymGetTypeFromName([In] HANDLE hProcess, [In] ulong BaseOfDll, [Const] [In] PSTR Name, [In] [Out] SYMBOL_INFO* Symbol);
BOOL SymGetTypeFromNameW([In] HANDLE hProcess, [In] ulong BaseOfDll, [Const] [In] PWSTR Name, [In] [Out] SYMBOL_INFOW* Symbol);
BOOL SymAddSymbol([In] HANDLE hProcess, [In] ulong BaseOfDll, [Const] [In] PSTR Name, [In] ulong Address, [In] uint Size, [In] uint Flags);
BOOL SymAddSymbolW([In] HANDLE hProcess, [In] ulong BaseOfDll, [Const] [In] PWSTR Name, [In] ulong Address, [In] uint Size, [In] uint Flags);
BOOL SymDeleteSymbol([In] HANDLE hProcess, [In] ulong BaseOfDll, [Const] [In] [Optional] PSTR Name, [In] ulong Address, [In] uint Flags);
BOOL SymDeleteSymbolW([In] HANDLE hProcess, [In] ulong BaseOfDll, [Const] [In] [Optional] PWSTR Name, [In] ulong Address, [In] uint Flags);
BOOL SymRefreshModuleList([In] HANDLE hProcess);
BOOL SymAddSourceStream([In] HANDLE hProcess, [In] ulong Base, [Const] [In] [Optional] PSTR StreamFile, [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* Buffer, [In] nuint Size);
BOOL SymAddSourceStreamA([In] HANDLE hProcess, [In] ulong Base, [Const] [In] [Optional] PSTR StreamFile, [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* Buffer, [In] nuint Size);
BOOL SymAddSourceStreamW([In] HANDLE hProcess, [In] ulong Base, [Const] [In] [Optional] PWSTR FileSpec, [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* Buffer, [In] nuint Size);
BOOL SymSrvIsStoreW([In] [Optional] HANDLE hProcess, [Const] [In] PWSTR path);
BOOL SymSrvIsStore([In] [Optional] HANDLE hProcess, [Const] [In] PSTR path);
PSTR SymSrvDeltaName([In] HANDLE hProcess, [Const] [In] [Optional] PSTR SymPath, [Const] [In] PSTR Type, [Const] [In] PSTR File1, [Const] [In] PSTR File2);
PWSTR SymSrvDeltaNameW([In] HANDLE hProcess, [Const] [In] [Optional] PWSTR SymPath, [Const] [In] PWSTR Type, [Const] [In] PWSTR File1, [Const] [In] PWSTR File2);
PSTR SymSrvGetSupplement([In] HANDLE hProcess, [Const] [In] [Optional] PSTR SymPath, [Const] [In] PSTR Node, [Const] [In] PSTR File);
PWSTR SymSrvGetSupplementW([In] HANDLE hProcess, [Const] [In] [Optional] PWSTR SymPath, [Const] [In] PWSTR Node, [Const] [In] PWSTR File);
BOOL SymSrvGetFileIndexes([Const] [In] PSTR File, [Out] Guid* Id, [Out] uint* Val1, [Out] [Optional] uint* Val2, [In] uint Flags);
BOOL SymSrvGetFileIndexesW([Const] [In] PWSTR File, [Out] Guid* Id, [Out] uint* Val1, [Out] [Optional] uint* Val2, [In] uint Flags);
BOOL SymSrvGetFileIndexStringW([In] HANDLE hProcess, [Const] [In] [Optional] PWSTR SrvPath, [Const] [In] PWSTR File, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR Index, [In] nuint Size, [In] uint Flags);
BOOL SymSrvGetFileIndexString([In] HANDLE hProcess, [Const] [In] [Optional] PSTR SrvPath, [Const] [In] PSTR File, [NativeArrayInfo(CountParamIndex = 4)] [Out] PSTR Index, [In] nuint Size, [In] uint Flags);
BOOL SymSrvGetFileIndexInfo([Const] [In] PSTR File, [Out] SYMSRV_INDEX_INFO* Info, [In] uint Flags);
BOOL SymSrvGetFileIndexInfoW([Const] [In] PWSTR File, [Out] SYMSRV_INDEX_INFOW* Info, [In] uint Flags);
PSTR SymSrvStoreSupplement([In] HANDLE hProcess, [Const] [In] [Optional] PSTR SrvPath, [Const] [In] PSTR Node, [Const] [In] PSTR File, [In] uint Flags);
PWSTR SymSrvStoreSupplementW([In] HANDLE hProcess, [Const] [In] [Optional] PWSTR SymPath, [Const] [In] PWSTR Node, [Const] [In] PWSTR File, [In] uint Flags);
PSTR SymSrvStoreFile([In] HANDLE hProcess, [Const] [In] [Optional] PSTR SrvPath, [Const] [In] PSTR File, [In] SYM_SRV_STORE_FILE_FLAGS Flags);
PWSTR SymSrvStoreFileW([In] HANDLE hProcess, [Const] [In] [Optional] PWSTR SrvPath, [Const] [In] PWSTR File, [In] SYM_SRV_STORE_FILE_FLAGS Flags);
BOOL SymGetSymbolFile([In] [Optional] HANDLE hProcess, [Const] [In] [Optional] PSTR SymPath, [Const] [In] PSTR ImageFile, [In] IMAGEHLP_SF_TYPE Type, [NativeArrayInfo(CountParamIndex = 5)] [Out] PSTR SymbolFile, [In] nuint cSymbolFile, [NativeArrayInfo(CountParamIndex = 7)] [Out] PSTR DbgFile, [In] nuint cDbgFile);
BOOL SymGetSymbolFileW([In] [Optional] HANDLE hProcess, [Const] [In] [Optional] PWSTR SymPath, [Const] [In] PWSTR ImageFile, [In] IMAGEHLP_SF_TYPE Type, [NativeArrayInfo(CountParamIndex = 5)] [Out] PWSTR SymbolFile, [In] nuint cSymbolFile, [NativeArrayInfo(CountParamIndex = 7)] [Out] PWSTR DbgFile, [In] nuint cDbgFile);
BOOL DbgHelpCreateUserDump([Const] [In] [Optional] PSTR FileName, [In] PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback, [In] [Optional] void* UserData);
BOOL DbgHelpCreateUserDumpW([Const] [In] [Optional] PWSTR FileName, [In] PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback, [In] [Optional] void* UserData);
BOOL SymGetSymFromAddr64([In] HANDLE hProcess, [In] ulong qwAddr, [Out] [Optional] ulong* pdwDisplacement, [In] [Out] IMAGEHLP_SYMBOL64* Symbol);
BOOL SymGetSymFromAddr([In] HANDLE hProcess, [In] uint dwAddr, [Out] [Optional] uint* pdwDisplacement, [In] [Out] IMAGEHLP_SYMBOL* Symbol);
BOOL SymGetSymFromName64([In] HANDLE hProcess, [Const] [In] PSTR Name, [In] [Out] IMAGEHLP_SYMBOL64* Symbol);
BOOL SymGetSymFromName([In] HANDLE hProcess, [Const] [In] PSTR Name, [In] [Out] IMAGEHLP_SYMBOL* Symbol);
BOOL FindFileInPath([In] HANDLE hprocess, [Const] [In] PSTR SearchPathA, [Const] [In] PSTR FileName, [In] void* id, [In] uint two, [In] uint three, [In] uint flags, [Out] PSTR FilePath);
BOOL FindFileInSearchPath([In] HANDLE hprocess, [Const] [In] PSTR SearchPathA, [Const] [In] PSTR FileName, [In] uint one, [In] uint two, [In] uint three, [Out] PSTR FilePath);
BOOL SymEnumSym([In] HANDLE hProcess, [In] ulong BaseOfDll, [In] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [In] [Optional] void* UserContext);
BOOL SymEnumerateSymbols64([In] HANDLE hProcess, [In] ulong BaseOfDll, [In] PSYM_ENUMSYMBOLS_CALLBACK64 EnumSymbolsCallback, [In] [Optional] void* UserContext);
BOOL SymEnumerateSymbolsW64([In] HANDLE hProcess, [In] ulong BaseOfDll, [In] PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback, [In] [Optional] void* UserContext);
BOOL SymEnumerateSymbols([In] HANDLE hProcess, [In] uint BaseOfDll, [In] PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback, [In] [Optional] void* UserContext);
BOOL SymEnumerateSymbolsW([In] HANDLE hProcess, [In] uint BaseOfDll, [In] PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback, [In] [Optional] void* UserContext);
ulong SymLoadModule64([In] HANDLE hProcess, [In] [Optional] HANDLE hFile, [Const] [In] [Optional] PSTR ImageName, [Const] [In] [Optional] PSTR ModuleName, [In] ulong BaseOfDll, [In] uint SizeOfDll);
uint SymLoadModule([In] HANDLE hProcess, [In] [Optional] HANDLE hFile, [Const] [In] [Optional] PSTR ImageName, [Const] [In] [Optional] PSTR ModuleName, [In] uint BaseOfDll, [In] uint SizeOfDll);
BOOL SymGetSymNext64([In] HANDLE hProcess, [In] [Out] IMAGEHLP_SYMBOL64* Symbol);
BOOL SymGetSymNext([In] HANDLE hProcess, [In] [Out] IMAGEHLP_SYMBOL* Symbol);
BOOL SymGetSymPrev64([In] HANDLE hProcess, [In] [Out] IMAGEHLP_SYMBOL64* Symbol);
BOOL SymGetSymPrev([In] HANDLE hProcess, [In] [Out] IMAGEHLP_SYMBOL* Symbol);
void SetCheckUserInterruptShared([In] LPCALL_BACK_USER_INTERRUPT_ROUTINE lpStartAddress);
uint GetSymLoadError();
void SetSymLoadError([In] uint error);
BOOL ReportSymbolLoadSummary([In] HANDLE hProcess, [Const] [In] [Optional] PWSTR pLoadModule, [In] DBGHELP_DATA_REPORT_STRUCT* pSymbolData);
void RemoveInvalidModuleList([In] HANDLE hProcess);
void* RangeMapCreate();
void RangeMapFree([In] [Optional] void* RmapHandle);
BOOL RangeMapAddPeImageSections([In] void* RmapHandle, [Const] [In] [Optional] PWSTR ImageName, [MemorySize(BytesParamIndex = 3)] [In] void* MappedImage, [In] uint MappingBytes, [In] ulong ImageBase, [In] ulong UserTag, [In] uint MappingFlags);
BOOL RangeMapRemove([In] void* RmapHandle, [In] ulong UserTag);
BOOL RangeMapRead([In] void* RmapHandle, [In] ulong Offset, [MemorySize(BytesParamIndex = 3)] [Out] void* Buffer, [In] uint RequestBytes, [In] uint Flags, [Out] [Optional] uint* DoneBytes);
BOOL RangeMapWrite([In] void* RmapHandle, [In] ulong Offset, [MemorySize(BytesParamIndex = 3)] [In] void* Buffer, [In] uint RequestBytes, [In] uint Flags, [Out] [Optional] uint* DoneBytes);
