BOOL SpoolerCopyFileEvent([In] PWSTR pszPrinterName, [In] PWSTR pszKey, [In] uint dwCopyFileEvent);
uint GenerateCopyFilePaths([Const] [In] PWSTR pszPrinterName, [Const] [In] PWSTR pszDirectory, [In] byte* pSplClientInfo, [In] uint dwLevel, [NativeArrayInfo(CountParamIndex = 5)] [In] [Out] PWSTR pszSourceDir, [In] [Out] uint* pcchSourceDirSize, [NativeArrayInfo(CountParamIndex = 7)] [In] [Out] PWSTR pszTargetDir, [In] [Out] uint* pcchTargetDirSize, [In] uint dwFlags);
nint OpenColorProfileA([In] PROFILE* pProfile, [In] uint dwDesiredAccess, [In] uint dwShareMode, [In] uint dwCreationMode);
nint OpenColorProfileW([In] PROFILE* pProfile, [In] uint dwDesiredAccess, [In] uint dwShareMode, [In] uint dwCreationMode);
BOOL CloseColorProfile([In] [Optional] nint hProfile);
BOOL GetColorProfileFromHandle([In] nint hProfile, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] byte* pProfile, [In] [Out] uint* pcbProfile);
BOOL IsColorProfileValid([In] nint hProfile, [Out] BOOL* pbValid);
BOOL CreateProfileFromLogColorSpaceA([In] LOGCOLORSPACEA* pLogColorSpace, [Out] byte** pProfile);
BOOL CreateProfileFromLogColorSpaceW([In] LOGCOLORSPACEW* pLogColorSpace, [Out] byte** pProfile);
BOOL GetCountColorProfileElements([In] nint hProfile, [Out] uint* pnElementCount);
BOOL GetColorProfileHeader([In] nint hProfile, [Out] PROFILEHEADER* pHeader);
BOOL GetColorProfileElementTag([In] nint hProfile, [In] uint dwIndex, [Out] uint* pTag);
BOOL IsColorProfileTagPresent([In] nint hProfile, [In] uint tag, [Out] BOOL* pbPresent);
BOOL GetColorProfileElement([In] nint hProfile, [In] uint tag, [In] uint dwOffset, [In] [Out] uint* pcbElement, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* pElement, [Out] BOOL* pbReference);
BOOL SetColorProfileHeader([In] nint hProfile, [In] PROFILEHEADER* pHeader);
BOOL SetColorProfileElementSize([In] nint hProfile, [In] uint tagType, [In] uint pcbElement);
BOOL SetColorProfileElement([In] nint hProfile, [In] uint tag, [In] uint dwOffset, [In] uint* pcbElement, [NativeArrayInfo(CountParamIndex = 3)] [In] void* pElement);
BOOL SetColorProfileElementReference([In] nint hProfile, [In] uint newTag, [In] uint refTag);
BOOL GetPS2ColorSpaceArray([In] nint hProfile, [In] uint dwIntent, [In] uint dwCSAType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pPS2ColorSpaceArray, [In] [Out] uint* pcbPS2ColorSpaceArray, [Out] BOOL* pbBinary);
BOOL GetPS2ColorRenderingIntent([In] nint hProfile, [In] uint dwIntent, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pBuffer, [In] [Out] uint* pcbPS2ColorRenderingIntent);
BOOL GetPS2ColorRenderingDictionary([In] nint hProfile, [In] uint dwIntent, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pPS2ColorRenderingDictionary, [In] [Out] uint* pcbPS2ColorRenderingDictionary, [In] [Out] BOOL* pbBinary);
BOOL GetNamedProfileInfo([In] nint hProfile, [In] [Out] NAMED_PROFILE_INFO* pNamedProfileInfo);
BOOL ConvertColorNameToIndex([In] nint hProfile, [NativeArrayInfo(CountParamIndex = 3)] [In] sbyte** paColorName, [NativeArrayInfo(CountParamIndex = 3)] [Out] uint* paIndex, [In] uint dwCount);
BOOL ConvertIndexToColorName([In] nint hProfile, [NativeArrayInfo(CountParamIndex = 3)] [In] uint* paIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] sbyte** paColorName, [In] uint dwCount);
BOOL CreateDeviceLinkProfile([NativeArrayInfo(CountParamIndex = 1)] [In] nint* hProfile, [In] uint nProfiles, [NativeArrayInfo(CountParamIndex = 3)] [In] uint* padwIntent, [In] uint nIntents, [In] uint dwFlags, [Out] byte** pProfileData, [In] uint indexPreferredCMM);
nint CreateColorTransformA([In] LOGCOLORSPACEA* pLogColorSpace, [In] nint hDestProfile, [In] nint hTargetProfile, [In] uint dwFlags);
nint CreateColorTransformW([In] LOGCOLORSPACEW* pLogColorSpace, [In] nint hDestProfile, [In] nint hTargetProfile, [In] uint dwFlags);
nint CreateMultiProfileTransform([NativeArrayInfo(CountParamIndex = 1)] [In] nint* pahProfiles, [In] uint nProfiles, [NativeArrayInfo(CountParamIndex = 3)] [In] uint* padwIntent, [In] uint nIntents, [In] uint dwFlags, [In] uint indexPreferredCMM);
BOOL DeleteColorTransform([In] nint hxform);
BOOL TranslateBitmapBits([In] nint hColorTransform, [In] void* pSrcBits, [In] BMFORMAT bmInput, [In] uint dwWidth, [In] uint dwHeight, [In] uint dwInputStride, [Out] void* pDestBits, [In] BMFORMAT bmOutput, [In] uint dwOutputStride, [In] [Optional] LPBMCALLBACKFN pfnCallBack, [In] [Optional] LPARAM ulCallbackData);
BOOL CheckBitmapBits([In] nint hColorTransform, [In] void* pSrcBits, [In] BMFORMAT bmInput, [In] uint dwWidth, [In] uint dwHeight, [In] uint dwStride, [Out] byte* paResult, [In] [Optional] LPBMCALLBACKFN pfnCallback, [In] [Optional] LPARAM lpCallbackData);
BOOL TranslateColors([In] nint hColorTransform, [NativeArrayInfo(CountParamIndex = 2)] [In] COLOR* paInputColors, [In] uint nColors, [In] COLORTYPE ctInput, [NativeArrayInfo(CountParamIndex = 2)] [Out] COLOR* paOutputColors, [In] COLORTYPE ctOutput);
BOOL CheckColors([In] nint hColorTransform, [NativeArrayInfo(CountParamIndex = 2)] [In] COLOR* paInputColors, [In] uint nColors, [In] COLORTYPE ctInput, [NativeArrayInfo(CountParamIndex = 2)] [Out] byte* paResult);
uint GetCMMInfo([In] nint hColorTransform, [In] uint param1);
BOOL RegisterCMMA([Const] [In] [Optional] PSTR pMachineName, [In] uint cmmID, [Const] [In] PSTR pCMMdll);
BOOL RegisterCMMW([Const] [In] [Optional] PWSTR pMachineName, [In] uint cmmID, [Const] [In] PWSTR pCMMdll);
BOOL UnregisterCMMA([Const] [In] [Optional] PSTR pMachineName, [In] uint cmmID);
BOOL UnregisterCMMW([Const] [In] [Optional] PWSTR pMachineName, [In] uint cmmID);
BOOL SelectCMM([In] uint dwCMMType);
BOOL GetColorDirectoryA([Const] [In] [Optional] PSTR pMachineName, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] PSTR pBuffer, [In] [Out] uint* pdwSize);
BOOL GetColorDirectoryW([Const] [In] [Optional] PWSTR pMachineName, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] PWSTR pBuffer, [In] [Out] uint* pdwSize);
BOOL InstallColorProfileA([Const] [In] [Optional] PSTR pMachineName, [Const] [In] PSTR pProfileName);
BOOL InstallColorProfileW([Const] [In] [Optional] PWSTR pMachineName, [Const] [In] PWSTR pProfileName);
BOOL UninstallColorProfileA([Const] [In] [Optional] PSTR pMachineName, [Const] [In] PSTR pProfileName, [In] BOOL bDelete);
BOOL UninstallColorProfileW([Const] [In] [Optional] PWSTR pMachineName, [Const] [In] PWSTR pProfileName, [In] BOOL bDelete);
BOOL EnumColorProfilesA([Const] [In] [Optional] PSTR pMachineName, [In] ENUMTYPEA* pEnumRecord, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pEnumerationBuffer, [In] [Out] uint* pdwSizeOfEnumerationBuffer, [Out] [Optional] uint* pnProfiles);
BOOL EnumColorProfilesW([Const] [In] [Optional] PWSTR pMachineName, [In] ENUMTYPEW* pEnumRecord, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pEnumerationBuffer, [In] [Out] uint* pdwSizeOfEnumerationBuffer, [Out] [Optional] uint* pnProfiles);
BOOL SetStandardColorSpaceProfileA([Const] [In] [Optional] PSTR pMachineName, [In] uint dwProfileID, [Const] [In] PSTR pProfilename);
BOOL SetStandardColorSpaceProfileW([Const] [In] [Optional] PWSTR pMachineName, [In] uint dwProfileID, [Const] [In] PWSTR pProfileName);
BOOL GetStandardColorSpaceProfileA([Const] [In] [Optional] PSTR pMachineName, [In] uint dwSCS, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] PSTR pBuffer, [In] [Out] uint* pcbSize);
BOOL GetStandardColorSpaceProfileW([Const] [In] [Optional] PWSTR pMachineName, [In] uint dwSCS, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] PWSTR pBuffer, [In] [Out] uint* pcbSize);
BOOL AssociateColorProfileWithDeviceA([Const] [In] [Optional] PSTR pMachineName, [Const] [In] PSTR pProfileName, [Const] [In] PSTR pDeviceName);
BOOL AssociateColorProfileWithDeviceW([Const] [In] [Optional] PWSTR pMachineName, [Const] [In] PWSTR pProfileName, [Const] [In] PWSTR pDeviceName);
BOOL DisassociateColorProfileFromDeviceA([Const] [In] [Optional] PSTR pMachineName, [Const] [In] PSTR pProfileName, [Const] [In] PSTR pDeviceName);
BOOL DisassociateColorProfileFromDeviceW([Const] [In] [Optional] PWSTR pMachineName, [Const] [In] PWSTR pProfileName, [Const] [In] PWSTR pDeviceName);
BOOL WcsAssociateColorProfileWithDevice([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [Const] [In] PWSTR pProfileName, [Const] [In] PWSTR pDeviceName);
BOOL WcsDisassociateColorProfileFromDevice([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [Const] [In] PWSTR pProfileName, [Const] [In] PWSTR pDeviceName);
BOOL WcsEnumColorProfilesSize([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [In] ENUMTYPEW* pEnumRecord, [Out] uint* pdwSize);
BOOL WcsEnumColorProfiles([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [In] ENUMTYPEW* pEnumRecord, [MemorySize(BytesParamIndex = 3)] [Out] byte* pBuffer, [In] uint dwSize, [Out] [Optional] uint* pnProfiles);
BOOL WcsGetDefaultColorProfileSize([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [Const] [In] [Optional] PWSTR pDeviceName, [In] COLORPROFILETYPE cptColorProfileType, [In] COLORPROFILESUBTYPE cpstColorProfileSubType, [In] uint dwProfileID, [Out] uint* pcbProfileName);
BOOL WcsGetDefaultColorProfile([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [Const] [In] [Optional] PWSTR pDeviceName, [In] COLORPROFILETYPE cptColorProfileType, [In] COLORPROFILESUBTYPE cpstColorProfileSubType, [In] uint dwProfileID, [In] uint cbProfileName, [MemorySize(BytesParamIndex = 5)] [Out] PWSTR pProfileName);
BOOL WcsSetDefaultColorProfile([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [Const] [In] [Optional] PWSTR pDeviceName, [In] COLORPROFILETYPE cptColorProfileType, [In] COLORPROFILESUBTYPE cpstColorProfileSubType, [In] uint dwProfileID, [Const] [In] [Optional] PWSTR pProfileName);
BOOL WcsSetDefaultRenderingIntent([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [In] uint dwRenderingIntent);
BOOL WcsGetDefaultRenderingIntent([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [Out] uint* pdwRenderingIntent);
BOOL WcsGetUsePerUserProfiles([Const] [In] PWSTR pDeviceName, [In] uint dwDeviceClass, [Out] BOOL* pUsePerUserProfiles);
BOOL WcsSetUsePerUserProfiles([Const] [In] PWSTR pDeviceName, [In] uint dwDeviceClass, [In] BOOL usePerUserProfiles);
BOOL WcsTranslateColors([In] nint hColorTransform, [In] uint nColors, [In] uint nInputChannels, [In] COLORDATATYPE cdtInput, [In] uint cbInput, [MemorySize(BytesParamIndex = 4)] [In] void* pInputData, [In] uint nOutputChannels, [In] COLORDATATYPE cdtOutput, [In] uint cbOutput, [MemorySize(BytesParamIndex = 8)] [Out] void* pOutputData);
BOOL WcsCheckColors([In] nint hColorTransform, [In] uint nColors, [In] uint nInputChannels, [In] COLORDATATYPE cdtInput, [In] uint cbInput, [MemorySize(BytesParamIndex = 4)] [In] void* pInputData, [NativeArrayInfo(CountParamIndex = 1)] [Out] byte* paResult);
nint WcsOpenColorProfileA([In] PROFILE* pCDMPProfile, [In] [Optional] PROFILE* pCAMPProfile, [In] [Optional] PROFILE* pGMMPProfile, [In] uint dwDesireAccess, [In] uint dwShareMode, [In] uint dwCreationMode, [In] uint dwFlags);
nint WcsOpenColorProfileW([In] PROFILE* pCDMPProfile, [In] [Optional] PROFILE* pCAMPProfile, [In] [Optional] PROFILE* pGMMPProfile, [In] uint dwDesireAccess, [In] uint dwShareMode, [In] uint dwCreationMode, [In] uint dwFlags);
nint WcsCreateIccProfile([In] nint hWcsProfile, [In] uint dwOptions);
BOOL WcsGetCalibrationManagementState([Out] BOOL* pbIsEnabled);
BOOL WcsSetCalibrationManagementState([In] BOOL bIsEnabled);
HRESULT ColorProfileAddDisplayAssociation([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [Const] [In] PWSTR profileName, [In] LUID targetAdapterID, [In] uint sourceID, [In] BOOL setAsDefault, [In] BOOL associateAsAdvancedColor);
HRESULT ColorProfileRemoveDisplayAssociation([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [Const] [In] PWSTR profileName, [In] LUID targetAdapterID, [In] uint sourceID, [In] BOOL dissociateAdvancedColor);
HRESULT ColorProfileSetDisplayDefaultAssociation([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [Const] [In] PWSTR profileName, [In] COLORPROFILETYPE profileType, [In] COLORPROFILESUBTYPE profileSubType, [In] LUID targetAdapterID, [In] uint sourceID);
HRESULT ColorProfileGetDisplayList([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [In] LUID targetAdapterID, [In] uint sourceID, [Out] PWSTR** profileList, [Out] uint* profileCount);
HRESULT ColorProfileGetDisplayDefault([In] WCS_PROFILE_MANAGEMENT_SCOPE scope, [In] LUID targetAdapterID, [In] uint sourceID, [In] COLORPROFILETYPE profileType, [In] COLORPROFILESUBTYPE profileSubType, [Out] PWSTR* profileName);
HRESULT ColorProfileGetDisplayUserScope([In] LUID targetAdapterID, [In] uint sourceID, [Out] WCS_PROFILE_MANAGEMENT_SCOPE* scope);
