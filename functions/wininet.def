BOOL InternetTimeFromSystemTimeA([Const] [In] SYSTEMTIME* pst, [In] uint dwRFC, [MemorySize(BytesParamIndex = 3)] [Out] PSTR lpszTime, [In] uint cbTime);
BOOL InternetTimeFromSystemTimeW([Const] [In] SYSTEMTIME* pst, [In] uint dwRFC, [MemorySize(BytesParamIndex = 3)] [Out] PWSTR lpszTime, [In] uint cbTime);
BOOL InternetTimeFromSystemTime([Const] [In] SYSTEMTIME* pst, [In] uint dwRFC, [MemorySize(BytesParamIndex = 3)] [Out] PSTR lpszTime, [In] uint cbTime);
BOOL InternetTimeToSystemTimeA([Const] [In] PSTR lpszTime, [Out] SYSTEMTIME* pst, [Reserved] [In] uint dwReserved);
BOOL InternetTimeToSystemTimeW([Const] [In] PWSTR lpszTime, [Out] SYSTEMTIME* pst, [Reserved] [In] uint dwReserved);
BOOL InternetTimeToSystemTime([Const] [In] PSTR lpszTime, [Out] SYSTEMTIME* pst, [Reserved] [In] uint dwReserved);
BOOL InternetCrackUrlA([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PSTR lpszUrl, [In] uint dwUrlLength, [In] WIN_HTTP_CREATE_URL_FLAGS dwFlags, [In] [Out] URL_COMPONENTSA* lpUrlComponents);
BOOL InternetCrackUrlW([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PWSTR lpszUrl, [In] uint dwUrlLength, [In] WIN_HTTP_CREATE_URL_FLAGS dwFlags, [In] [Out] URL_COMPONENTSW* lpUrlComponents);
BOOL InternetCreateUrlA([In] URL_COMPONENTSA* lpUrlComponents, [In] uint dwFlags, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR lpszUrl, [In] [Out] uint* lpdwUrlLength);
BOOL InternetCreateUrlW([In] URL_COMPONENTSW* lpUrlComponents, [In] uint dwFlags, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR lpszUrl, [In] [Out] uint* lpdwUrlLength);
BOOL InternetCanonicalizeUrlA([Const] [In] PSTR lpszUrl, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpszBuffer, [In] [Out] uint* lpdwBufferLength, [In] uint dwFlags);
BOOL InternetCanonicalizeUrlW([Const] [In] PWSTR lpszUrl, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpszBuffer, [In] [Out] uint* lpdwBufferLength, [In] uint dwFlags);
BOOL InternetCombineUrlA([Const] [In] PSTR lpszBaseUrl, [Const] [In] PSTR lpszRelativeUrl, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR lpszBuffer, [In] [Out] uint* lpdwBufferLength, [In] uint dwFlags);
BOOL InternetCombineUrlW([Const] [In] PWSTR lpszBaseUrl, [Const] [In] PWSTR lpszRelativeUrl, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR lpszBuffer, [In] [Out] uint* lpdwBufferLength, [In] uint dwFlags);
void* InternetOpenA([Const] [In] [Optional] PSTR lpszAgent, [In] uint dwAccessType, [Const] [In] [Optional] PSTR lpszProxy, [Const] [In] [Optional] PSTR lpszProxyBypass, [In] uint dwFlags);
void* InternetOpenW([Const] [In] [Optional] PWSTR lpszAgent, [In] uint dwAccessType, [Const] [In] [Optional] PWSTR lpszProxy, [Const] [In] [Optional] PWSTR lpszProxyBypass, [In] uint dwFlags);
BOOL InternetCloseHandle([In] void* hInternet);
void* InternetConnectA([In] void* hInternet, [Const] [In] PSTR lpszServerName, [In] ushort nServerPort, [Const] [In] [Optional] PSTR lpszUserName, [Const] [In] [Optional] PSTR lpszPassword, [In] uint dwService, [In] uint dwFlags, [In] [Optional] nuint dwContext);
void* InternetConnectW([In] void* hInternet, [Const] [In] PWSTR lpszServerName, [In] ushort nServerPort, [Const] [In] [Optional] PWSTR lpszUserName, [Const] [In] [Optional] PWSTR lpszPassword, [In] uint dwService, [In] uint dwFlags, [In] [Optional] nuint dwContext);
void* InternetOpenUrlA([In] void* hInternet, [Const] [In] PSTR lpszUrl, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] PSTR lpszHeaders, [In] uint dwHeadersLength, [In] uint dwFlags, [In] [Optional] nuint dwContext);
void* InternetOpenUrlW([In] void* hInternet, [Const] [In] PWSTR lpszUrl, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] PWSTR lpszHeaders, [In] uint dwHeadersLength, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL InternetReadFile([In] void* hFile, [MemorySize(BytesParamIndex = 2)] [Out] void* lpBuffer, [In] uint dwNumberOfBytesToRead, [Out] uint* lpdwNumberOfBytesRead);
BOOL InternetReadFileExA([In] void* hFile, [Out] INTERNET_BUFFERSA* lpBuffersOut, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL InternetReadFileExW([In] void* hFile, [Out] INTERNET_BUFFERSW* lpBuffersOut, [In] uint dwFlags, [In] [Optional] nuint dwContext);
uint InternetSetFilePointer([In] void* hFile, [In] int lDistanceToMove, [In] [Out] [Optional] int* lpDistanceToMoveHigh, [In] uint dwMoveMethod, [Reserved] [In] nuint dwContext);
BOOL InternetWriteFile([In] void* hFile, [Const] [MemorySize(BytesParamIndex = 2)] [In] void* lpBuffer, [In] uint dwNumberOfBytesToWrite, [Out] uint* lpdwNumberOfBytesWritten);
BOOL InternetQueryDataAvailable([In] void* hFile, [Out] [Optional] uint* lpdwNumberOfBytesAvailable, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL InternetFindNextFileA([In] void* hFind, [Out] void* lpvFindData);
BOOL InternetFindNextFileW([In] void* hFind, [Out] void* lpvFindData);
BOOL InternetQueryOptionA([In] [Optional] void* hInternet, [In] uint dwOption, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* lpBuffer, [In] [Out] uint* lpdwBufferLength);
BOOL InternetQueryOptionW([In] [Optional] void* hInternet, [In] uint dwOption, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* lpBuffer, [In] [Out] uint* lpdwBufferLength);
BOOL InternetSetOptionA([In] [Optional] void* hInternet, [In] uint dwOption, [In] [Optional] void* lpBuffer, [In] uint dwBufferLength);
BOOL InternetSetOptionW([In] [Optional] void* hInternet, [In] uint dwOption, [In] [Optional] void* lpBuffer, [In] uint dwBufferLength);
BOOL InternetSetOptionExA([In] [Optional] void* hInternet, [In] uint dwOption, [In] [Optional] void* lpBuffer, [In] uint dwBufferLength, [In] uint dwFlags);
BOOL InternetSetOptionExW([In] [Optional] void* hInternet, [In] uint dwOption, [In] [Optional] void* lpBuffer, [In] uint dwBufferLength, [In] uint dwFlags);
BOOL InternetLockRequestFile([In] void* hInternet, [Out] HANDLE* lphLockRequestInfo);
BOOL InternetUnlockRequestFile([In] HANDLE hLockRequestInfo);
BOOL InternetGetLastResponseInfoA([Out] uint* lpdwError, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpszBuffer, [In] [Out] uint* lpdwBufferLength);
BOOL InternetGetLastResponseInfoW([Out] uint* lpdwError, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpszBuffer, [In] [Out] uint* lpdwBufferLength);
LPINTERNET_STATUS_CALLBACK InternetSetStatusCallbackA([In] void* hInternet, [In] [Optional] LPINTERNET_STATUS_CALLBACK lpfnInternetCallback);
LPINTERNET_STATUS_CALLBACK InternetSetStatusCallbackW([In] void* hInternet, [In] [Optional] LPINTERNET_STATUS_CALLBACK lpfnInternetCallback);
LPINTERNET_STATUS_CALLBACK InternetSetStatusCallback([In] void* hInternet, [In] [Optional] LPINTERNET_STATUS_CALLBACK lpfnInternetCallback);
void* FtpFindFirstFileA([In] void* hConnect, [Const] [In] [Optional] PSTR lpszSearchFile, [Out] [Optional] WIN32_FIND_DATAA* lpFindFileData, [In] uint dwFlags, [In] [Optional] nuint dwContext);
void* FtpFindFirstFileW([In] void* hConnect, [Const] [In] [Optional] PWSTR lpszSearchFile, [Out] [Optional] WIN32_FIND_DATAW* lpFindFileData, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL FtpGetFileA([In] void* hConnect, [Const] [In] PSTR lpszRemoteFile, [Const] [In] PSTR lpszNewFile, [In] BOOL fFailIfExists, [In] uint dwFlagsAndAttributes, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL FtpGetFileW([In] void* hConnect, [Const] [In] PWSTR lpszRemoteFile, [Const] [In] PWSTR lpszNewFile, [In] BOOL fFailIfExists, [In] uint dwFlagsAndAttributes, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL FtpPutFileA([In] void* hConnect, [Const] [In] PSTR lpszLocalFile, [Const] [In] PSTR lpszNewRemoteFile, [In] FTP_FLAGS dwFlags, [In] [Optional] nuint dwContext);
BOOL FtpPutFileW([In] void* hConnect, [Const] [In] PWSTR lpszLocalFile, [Const] [In] PWSTR lpszNewRemoteFile, [In] FTP_FLAGS dwFlags, [In] [Optional] nuint dwContext);
BOOL FtpGetFileEx([In] void* hFtpSession, [Const] [In] PSTR lpszRemoteFile, [Const] [In] PWSTR lpszNewFile, [In] BOOL fFailIfExists, [In] uint dwFlagsAndAttributes, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL FtpPutFileEx([In] void* hFtpSession, [Const] [In] PWSTR lpszLocalFile, [Const] [In] PSTR lpszNewRemoteFile, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL FtpDeleteFileA([In] void* hConnect, [Const] [In] PSTR lpszFileName);
BOOL FtpDeleteFileW([In] void* hConnect, [Const] [In] PWSTR lpszFileName);
BOOL FtpRenameFileA([In] void* hConnect, [Const] [In] PSTR lpszExisting, [Const] [In] PSTR lpszNew);
BOOL FtpRenameFileW([In] void* hConnect, [Const] [In] PWSTR lpszExisting, [Const] [In] PWSTR lpszNew);
void* FtpOpenFileA([In] void* hConnect, [Const] [In] PSTR lpszFileName, [In] uint dwAccess, [In] FTP_FLAGS dwFlags, [In] [Optional] nuint dwContext);
void* FtpOpenFileW([In] void* hConnect, [Const] [In] PWSTR lpszFileName, [In] uint dwAccess, [In] FTP_FLAGS dwFlags, [In] [Optional] nuint dwContext);
BOOL FtpCreateDirectoryA([In] void* hConnect, [Const] [In] PSTR lpszDirectory);
BOOL FtpCreateDirectoryW([In] void* hConnect, [Const] [In] PWSTR lpszDirectory);
BOOL FtpRemoveDirectoryA([In] void* hConnect, [Const] [In] PSTR lpszDirectory);
BOOL FtpRemoveDirectoryW([In] void* hConnect, [Const] [In] PWSTR lpszDirectory);
BOOL FtpSetCurrentDirectoryA([In] void* hConnect, [Const] [In] PSTR lpszDirectory);
BOOL FtpSetCurrentDirectoryW([In] void* hConnect, [Const] [In] PWSTR lpszDirectory);
BOOL FtpGetCurrentDirectoryA([In] void* hConnect, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpszCurrentDirectory, [In] [Out] uint* lpdwCurrentDirectory);
BOOL FtpGetCurrentDirectoryW([In] void* hConnect, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpszCurrentDirectory, [In] [Out] uint* lpdwCurrentDirectory);
BOOL FtpCommandA([In] void* hConnect, [In] BOOL fExpectResponse, [In] FTP_FLAGS dwFlags, [Const] [In] PSTR lpszCommand, [In] [Optional] nuint dwContext, [Out] [Optional] void** phFtpCommand);
BOOL FtpCommandW([In] void* hConnect, [In] BOOL fExpectResponse, [In] FTP_FLAGS dwFlags, [Const] [In] PWSTR lpszCommand, [In] [Optional] nuint dwContext, [Out] [Optional] void** phFtpCommand);
uint FtpGetFileSize([In] void* hFile, [Out] [Optional] uint* lpdwFileSizeHigh);
BOOL GopherCreateLocatorA([Const] [In] PSTR lpszHost, [In] ushort nServerPort, [Const] [In] [Optional] PSTR lpszDisplayString, [Const] [In] [Optional] PSTR lpszSelectorString, [In] uint dwGopherType, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PSTR lpszLocator, [In] [Out] uint* lpdwBufferLength);
BOOL GopherCreateLocatorW([Const] [In] PWSTR lpszHost, [In] ushort nServerPort, [Const] [In] [Optional] PWSTR lpszDisplayString, [Const] [In] [Optional] PWSTR lpszSelectorString, [In] uint dwGopherType, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PWSTR lpszLocator, [In] [Out] uint* lpdwBufferLength);
BOOL GopherGetLocatorTypeA([Const] [In] PSTR lpszLocator, [Out] uint* lpdwGopherType);
BOOL GopherGetLocatorTypeW([Const] [In] PWSTR lpszLocator, [Out] uint* lpdwGopherType);
void* GopherFindFirstFileA([In] void* hConnect, [Const] [In] [Optional] PSTR lpszLocator, [Const] [In] [Optional] PSTR lpszSearchString, [Out] [Optional] GOPHER_FIND_DATAA* lpFindData, [In] uint dwFlags, [In] [Optional] nuint dwContext);
void* GopherFindFirstFileW([In] void* hConnect, [Const] [In] [Optional] PWSTR lpszLocator, [Const] [In] [Optional] PWSTR lpszSearchString, [Out] [Optional] GOPHER_FIND_DATAW* lpFindData, [In] uint dwFlags, [In] [Optional] nuint dwContext);
void* GopherOpenFileA([In] void* hConnect, [Const] [In] PSTR lpszLocator, [Const] [In] [Optional] PSTR lpszView, [In] uint dwFlags, [In] [Optional] nuint dwContext);
void* GopherOpenFileW([In] void* hConnect, [Const] [In] PWSTR lpszLocator, [Const] [In] [Optional] PWSTR lpszView, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL GopherGetAttributeA([In] void* hConnect, [Const] [In] PSTR lpszLocator, [Const] [In] [Optional] PSTR lpszAttributeName, [NativeArrayInfo(CountParamIndex = 4)] [Out] byte* lpBuffer, [In] uint dwBufferLength, [Out] uint* lpdwCharactersReturned, [In] [Optional] GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator, [In] [Optional] nuint dwContext);
BOOL GopherGetAttributeW([In] void* hConnect, [Const] [In] PWSTR lpszLocator, [Const] [In] [Optional] PWSTR lpszAttributeName, [NativeArrayInfo(CountParamIndex = 4)] [Out] byte* lpBuffer, [In] uint dwBufferLength, [Out] uint* lpdwCharactersReturned, [In] [Optional] GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator, [In] [Optional] nuint dwContext);
void* HttpOpenRequestA([In] void* hConnect, [Const] [In] [Optional] PSTR lpszVerb, [Const] [In] [Optional] PSTR lpszObjectName, [Const] [In] [Optional] PSTR lpszVersion, [Const] [In] [Optional] PSTR lpszReferrer, [In] [Optional] PSTR* lplpszAcceptTypes, [In] uint dwFlags, [In] [Optional] nuint dwContext);
void* HttpOpenRequestW([In] void* hConnect, [Const] [In] [Optional] PWSTR lpszVerb, [Const] [In] [Optional] PWSTR lpszObjectName, [Const] [In] [Optional] PWSTR lpszVersion, [Const] [In] [Optional] PWSTR lpszReferrer, [In] [Optional] PWSTR* lplpszAcceptTypes, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL HttpAddRequestHeadersA([In] void* hRequest, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PSTR lpszHeaders, [In] uint dwHeadersLength, [In] HTTP_ADDREQ_FLAG dwModifiers);
BOOL HttpAddRequestHeadersW([In] void* hRequest, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR lpszHeaders, [In] uint dwHeadersLength, [In] HTTP_ADDREQ_FLAG dwModifiers);
BOOL HttpSendRequestA([In] void* hRequest, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] PSTR lpszHeaders, [In] uint dwHeadersLength, [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* lpOptional, [In] uint dwOptionalLength);
BOOL HttpSendRequestW([In] void* hRequest, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] PWSTR lpszHeaders, [In] uint dwHeadersLength, [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* lpOptional, [In] uint dwOptionalLength);
BOOL HttpSendRequestExA([In] void* hRequest, [In] [Optional] INTERNET_BUFFERSA* lpBuffersIn, [Out] [Optional] INTERNET_BUFFERSA* lpBuffersOut, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL HttpSendRequestExW([In] void* hRequest, [In] [Optional] INTERNET_BUFFERSW* lpBuffersIn, [Out] [Optional] INTERNET_BUFFERSW* lpBuffersOut, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL HttpEndRequestA([In] void* hRequest, [Out] [Optional] INTERNET_BUFFERSA* lpBuffersOut, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL HttpEndRequestW([In] void* hRequest, [Out] [Optional] INTERNET_BUFFERSW* lpBuffersOut, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL HttpQueryInfoA([In] void* hRequest, [In] uint dwInfoLevel, [MemorySize(BytesParamIndex = 3)] [In] [Out] [Optional] void* lpBuffer, [In] [Out] uint* lpdwBufferLength, [In] [Out] [Optional] uint* lpdwIndex);
BOOL HttpQueryInfoW([In] void* hRequest, [In] uint dwInfoLevel, [MemorySize(BytesParamIndex = 3)] [In] [Out] [Optional] void* lpBuffer, [In] [Out] uint* lpdwBufferLength, [In] [Out] [Optional] uint* lpdwIndex);
BOOL InternetSetCookieA([Const] [In] PSTR lpszUrl, [Const] [In] [Optional] PSTR lpszCookieName, [Const] [In] PSTR lpszCookieData);
BOOL InternetSetCookieW([Const] [In] PWSTR lpszUrl, [Const] [In] [Optional] PWSTR lpszCookieName, [Const] [In] PWSTR lpszCookieData);
BOOL InternetGetCookieA([Const] [In] PSTR lpszUrl, [Const] [In] [Optional] PSTR lpszCookieName, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR lpszCookieData, [In] [Out] uint* lpdwSize);
BOOL InternetGetCookieW([Const] [In] PWSTR lpszUrl, [Const] [In] [Optional] PWSTR lpszCookieName, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR lpszCookieData, [In] [Out] uint* lpdwSize);
uint InternetSetCookieExA([Const] [In] PSTR lpszUrl, [Const] [In] [Optional] PSTR lpszCookieName, [Const] [In] PSTR lpszCookieData, [In] uint dwFlags, [In] [Optional] nuint dwReserved);
uint InternetSetCookieExW([Const] [In] PWSTR lpszUrl, [Const] [In] [Optional] PWSTR lpszCookieName, [Const] [In] PWSTR lpszCookieData, [In] uint dwFlags, [In] [Optional] nuint dwReserved);
BOOL InternetGetCookieExA([Const] [In] PSTR lpszUrl, [Const] [In] [Optional] PSTR lpszCookieName, [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] PSTR lpszCookieData, [In] [Out] uint* lpdwSize, [In] INTERNET_COOKIE_FLAGS dwFlags, [Reserved] [In] [Out] void* lpReserved);
BOOL InternetGetCookieExW([Const] [In] PWSTR lpszUrl, [Const] [In] [Optional] PWSTR lpszCookieName, [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] PWSTR lpszCookieData, [In] [Out] uint* lpdwSize, [In] INTERNET_COOKIE_FLAGS dwFlags, [Reserved] [In] [Out] void* lpReserved);
void InternetFreeCookies([In] [Out] [Optional] INTERNET_COOKIE2* pCookies, [In] uint dwCookieCount);
uint InternetGetCookieEx2([Const] [In] PWSTR pcwszUrl, [Const] [In] [Optional] PWSTR pcwszCookieName, [In] uint dwFlags, [Out] INTERNET_COOKIE2** ppCookies, [Out] uint* pdwCookieCount);
uint InternetSetCookieEx2([Const] [In] PWSTR pcwszUrl, [Const] [In] INTERNET_COOKIE2* pCookie, [Const] [In] [Optional] PWSTR pcwszP3PPolicy, [In] uint dwFlags, [Out] uint* pdwCookieState);
uint InternetAttemptConnect([In] uint dwReserved);
BOOL InternetCheckConnectionA([Const] [In] PSTR lpszUrl, [In] uint dwFlags, [In] uint dwReserved);
BOOL InternetCheckConnectionW([Const] [In] PWSTR lpszUrl, [In] uint dwFlags, [In] uint dwReserved);
BOOL ResumeSuspendedDownload([In] void* hRequest, [In] uint dwResultCode);
uint InternetErrorDlg([In] HWND hWnd, [In] [Out] [Optional] void* hRequest, [In] uint dwError, [In] uint dwFlags, [In] [Out] [Optional] void** lppvData);
uint InternetConfirmZoneCrossingA([In] HWND hWnd, [In] PSTR szUrlPrev, [In] PSTR szUrlNew, [In] BOOL bPost);
uint InternetConfirmZoneCrossingW([In] HWND hWnd, [In] PWSTR szUrlPrev, [In] PWSTR szUrlNew, [In] BOOL bPost);
uint InternetConfirmZoneCrossing([In] HWND hWnd, [In] PSTR szUrlPrev, [In] PSTR szUrlNew, [In] BOOL bPost);
BOOL CreateUrlCacheEntryA([Const] [In] PSTR lpszUrlName, [In] uint dwExpectedFileSize, [Const] [In] [Optional] PSTR lpszFileExtension, [NativeArrayInfo(CountConst = 260)] [In] [Out] PSTR lpszFileName, [In] uint dwReserved);
BOOL CreateUrlCacheEntryW([Const] [In] PWSTR lpszUrlName, [In] uint dwExpectedFileSize, [Const] [In] [Optional] PWSTR lpszFileExtension, [NativeArrayInfo(CountConst = 260)] [In] [Out] PWSTR lpszFileName, [In] uint dwReserved);
BOOL CommitUrlCacheEntryA([Const] [In] PSTR lpszUrlName, [Const] [In] [Optional] PSTR lpszLocalFileName, [In] FILETIME ExpireTime, [In] FILETIME LastModifiedTime, [In] uint CacheEntryType, [NativeArrayInfo(CountParamIndex = 6)] [In] [Optional] byte* lpHeaderInfo, [In] uint cchHeaderInfo, [Const] [Reserved] [In] PSTR lpszFileExtension, [Const] [In] [Optional] PSTR lpszOriginalUrl);
BOOL CommitUrlCacheEntryW([Const] [In] PWSTR lpszUrlName, [Const] [In] [Optional] PWSTR lpszLocalFileName, [In] FILETIME ExpireTime, [In] FILETIME LastModifiedTime, [In] uint CacheEntryType, [NativeArrayInfo(CountParamIndex = 6)] [In] [Optional] PWSTR lpszHeaderInfo, [In] uint cchHeaderInfo, [Const] [Reserved] [In] PWSTR lpszFileExtension, [Const] [In] [Optional] PWSTR lpszOriginalUrl);
BOOL RetrieveUrlCacheEntryFileA([Const] [In] PSTR lpszUrlName, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOA* lpCacheEntryInfo, [In] [Out] uint* lpcbCacheEntryInfo, [Reserved] [In] uint dwReserved);
BOOL RetrieveUrlCacheEntryFileW([Const] [In] PWSTR lpszUrlName, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOW* lpCacheEntryInfo, [In] [Out] uint* lpcbCacheEntryInfo, [Reserved] [In] uint dwReserved);
BOOL UnlockUrlCacheEntryFileA([Const] [In] PSTR lpszUrlName, [Reserved] [In] uint dwReserved);
BOOL UnlockUrlCacheEntryFileW([Const] [In] PWSTR lpszUrlName, [Reserved] [In] uint dwReserved);
BOOL UnlockUrlCacheEntryFile([Const] [In] PSTR lpszUrlName, [Reserved] [In] uint dwReserved);
HANDLE RetrieveUrlCacheEntryStreamA([Const] [In] PSTR lpszUrlName, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOA* lpCacheEntryInfo, [In] [Out] uint* lpcbCacheEntryInfo, [In] BOOL fRandomRead, [Reserved] [In] uint dwReserved);
HANDLE RetrieveUrlCacheEntryStreamW([Const] [In] PWSTR lpszUrlName, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOW* lpCacheEntryInfo, [In] [Out] uint* lpcbCacheEntryInfo, [In] BOOL fRandomRead, [Reserved] [In] uint dwReserved);
BOOL ReadUrlCacheEntryStream([In] HANDLE hUrlCacheStream, [In] uint dwLocation, [MemorySize(BytesParamIndex = 3)] [Out] void* lpBuffer, [In] [Out] uint* lpdwLen, [Reserved] [In] uint Reserved);
BOOL ReadUrlCacheEntryStreamEx([In] HANDLE hUrlCacheStream, [In] ulong qwLocation, [MemorySize(BytesParamIndex = 3)] [Out] void* lpBuffer, [In] [Out] uint* lpdwLen);
BOOL UnlockUrlCacheEntryStream([In] HANDLE hUrlCacheStream, [Reserved] [In] uint Reserved);
BOOL GetUrlCacheEntryInfoA([Const] [In] PSTR lpszUrlName, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOA* lpCacheEntryInfo, [In] [Out] [Optional] uint* lpcbCacheEntryInfo);
BOOL GetUrlCacheEntryInfoW([Const] [In] PWSTR lpszUrlName, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOW* lpCacheEntryInfo, [In] [Out] [Optional] uint* lpcbCacheEntryInfo);
HANDLE FindFirstUrlCacheGroup([In] uint dwFlags, [In] uint dwFilter, [Reserved] [In] [Out] void* lpSearchCondition, [Reserved] [In] uint dwSearchCondition, [Out] long* lpGroupId, [Reserved] [In] [Out] void* lpReserved);
BOOL FindNextUrlCacheGroup([In] HANDLE hFind, [Out] long* lpGroupId, [Reserved] [In] [Out] void* lpReserved);
BOOL GetUrlCacheGroupAttributeA([In] long gid, [Reserved] [In] uint dwFlags, [In] uint dwAttributes, [MemorySize(BytesParamIndex = 4)] [Out] INTERNET_CACHE_GROUP_INFOA* lpGroupInfo, [In] [Out] uint* lpcbGroupInfo, [Reserved] [In] [Out] void* lpReserved);
BOOL GetUrlCacheGroupAttributeW([In] long gid, [Reserved] [In] uint dwFlags, [In] uint dwAttributes, [MemorySize(BytesParamIndex = 4)] [Out] INTERNET_CACHE_GROUP_INFOW* lpGroupInfo, [In] [Out] uint* lpcbGroupInfo, [Reserved] [In] [Out] void* lpReserved);
BOOL SetUrlCacheGroupAttributeA([In] long gid, [Reserved] [In] uint dwFlags, [In] uint dwAttributes, [In] INTERNET_CACHE_GROUP_INFOA* lpGroupInfo, [Reserved] [In] [Out] void* lpReserved);
BOOL SetUrlCacheGroupAttributeW([In] long gid, [Reserved] [In] uint dwFlags, [In] uint dwAttributes, [In] INTERNET_CACHE_GROUP_INFOW* lpGroupInfo, [Reserved] [In] [Out] void* lpReserved);
BOOL GetUrlCacheEntryInfoExA([Const] [In] PSTR lpszUrl, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOA* lpCacheEntryInfo, [In] [Out] [Optional] uint* lpcbCacheEntryInfo, [Reserved] [In] PSTR lpszRedirectUrl, [Reserved] [In] [Out] uint* lpcbRedirectUrl, [Reserved] [In] [Out] void* lpReserved, [In] uint dwFlags);
BOOL GetUrlCacheEntryInfoExW([Const] [In] PWSTR lpszUrl, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOW* lpCacheEntryInfo, [In] [Out] [Optional] uint* lpcbCacheEntryInfo, [Reserved] [In] PWSTR lpszRedirectUrl, [Reserved] [In] [Out] uint* lpcbRedirectUrl, [Reserved] [In] [Out] void* lpReserved, [In] uint dwFlags);
BOOL SetUrlCacheEntryInfoA([Const] [In] PSTR lpszUrlName, [In] INTERNET_CACHE_ENTRY_INFOA* lpCacheEntryInfo, [In] uint dwFieldControl);
BOOL SetUrlCacheEntryInfoW([Const] [In] PWSTR lpszUrlName, [In] INTERNET_CACHE_ENTRY_INFOW* lpCacheEntryInfo, [In] uint dwFieldControl);
long CreateUrlCacheGroup([In] uint dwFlags, [Reserved] [In] [Out] void* lpReserved);
BOOL DeleteUrlCacheGroup([In] long GroupId, [In] uint dwFlags, [Reserved] [In] [Out] void* lpReserved);
BOOL SetUrlCacheEntryGroupA([Const] [In] PSTR lpszUrlName, [In] uint dwFlags, [In] long GroupId, [Reserved] [In] [Out] byte* pbGroupAttributes, [Reserved] [In] uint cbGroupAttributes, [Reserved] [In] [Out] void* lpReserved);
BOOL SetUrlCacheEntryGroupW([Const] [In] PWSTR lpszUrlName, [In] uint dwFlags, [In] long GroupId, [Reserved] [In] [Out] byte* pbGroupAttributes, [Reserved] [In] uint cbGroupAttributes, [Reserved] [In] [Out] void* lpReserved);
BOOL SetUrlCacheEntryGroup([Const] [In] PSTR lpszUrlName, [In] uint dwFlags, [In] long GroupId, [Reserved] [In] [Out] byte* pbGroupAttributes, [Reserved] [In] uint cbGroupAttributes, [Reserved] [In] [Out] void* lpReserved);
HANDLE FindFirstUrlCacheEntryExA([Const] [In] [Optional] PSTR lpszUrlSearchPattern, [In] uint dwFlags, [In] uint dwFilter, [In] long GroupId, [MemorySize(BytesParamIndex = 5)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOA* lpFirstCacheEntryInfo, [In] [Out] uint* lpcbCacheEntryInfo, [Reserved] [In] [Out] void* lpGroupAttributes, [Reserved] [In] [Out] uint* lpcbGroupAttributes, [Reserved] [In] [Out] void* lpReserved);
HANDLE FindFirstUrlCacheEntryExW([Const] [In] [Optional] PWSTR lpszUrlSearchPattern, [In] uint dwFlags, [In] uint dwFilter, [In] long GroupId, [MemorySize(BytesParamIndex = 5)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOW* lpFirstCacheEntryInfo, [In] [Out] uint* lpcbCacheEntryInfo, [Reserved] [In] [Out] void* lpGroupAttributes, [Reserved] [In] [Out] uint* lpcbGroupAttributes, [Reserved] [In] [Out] void* lpReserved);
BOOL FindNextUrlCacheEntryExA([In] HANDLE hEnumHandle, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOA* lpNextCacheEntryInfo, [In] [Out] uint* lpcbCacheEntryInfo, [Reserved] [In] [Out] void* lpGroupAttributes, [Reserved] [In] [Out] uint* lpcbGroupAttributes, [Reserved] [In] [Out] void* lpReserved);
BOOL FindNextUrlCacheEntryExW([In] HANDLE hEnumHandle, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOW* lpNextCacheEntryInfo, [In] [Out] uint* lpcbCacheEntryInfo, [Reserved] [In] [Out] void* lpGroupAttributes, [Reserved] [In] [Out] uint* lpcbGroupAttributes, [Reserved] [In] [Out] void* lpReserved);
HANDLE FindFirstUrlCacheEntryA([Const] [In] [Optional] PSTR lpszUrlSearchPattern, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOA* lpFirstCacheEntryInfo, [In] [Out] uint* lpcbCacheEntryInfo);
HANDLE FindFirstUrlCacheEntryW([Const] [In] [Optional] PWSTR lpszUrlSearchPattern, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOW* lpFirstCacheEntryInfo, [In] [Out] uint* lpcbCacheEntryInfo);
BOOL FindNextUrlCacheEntryA([In] HANDLE hEnumHandle, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOA* lpNextCacheEntryInfo, [In] [Out] uint* lpcbCacheEntryInfo);
BOOL FindNextUrlCacheEntryW([In] HANDLE hEnumHandle, [MemorySize(BytesParamIndex = 2)] [In] [Out] [Optional] INTERNET_CACHE_ENTRY_INFOW* lpNextCacheEntryInfo, [In] [Out] uint* lpcbCacheEntryInfo);
BOOL FindCloseUrlCache([In] HANDLE hEnumHandle);
BOOL DeleteUrlCacheEntryA([Const] [In] PSTR lpszUrlName);
BOOL DeleteUrlCacheEntryW([Const] [In] PWSTR lpszUrlName);
BOOL DeleteUrlCacheEntry([Const] [In] PSTR lpszUrlName);
uint InternetDialA([In] HWND hwndParent, [In] [Optional] PSTR lpszConnectoid, [In] uint dwFlags, [Out] nuint* lpdwConnection, [Reserved] [In] uint dwReserved);
uint InternetDialW([In] HWND hwndParent, [In] [Optional] PWSTR lpszConnectoid, [In] uint dwFlags, [Out] nuint* lpdwConnection, [Reserved] [In] uint dwReserved);
uint InternetDial([In] HWND hwndParent, [In] [Optional] PSTR lpszConnectoid, [In] uint dwFlags, [Out] uint* lpdwConnection, [In] uint dwReserved);
uint InternetHangUp([In] nuint dwConnection, [Reserved] [In] uint dwReserved);
BOOL InternetGoOnlineA([Const] [In] [Optional] PSTR lpszURL, [In] HWND hwndParent, [In] uint dwFlags);
BOOL InternetGoOnlineW([Const] [In] [Optional] PWSTR lpszURL, [In] HWND hwndParent, [In] uint dwFlags);
BOOL InternetGoOnline([In] [Optional] PSTR lpszURL, [In] HWND hwndParent, [In] uint dwFlags);
BOOL InternetAutodial([In] INTERNET_AUTODIAL dwFlags, [In] [Optional] HWND hwndParent);
BOOL InternetAutodialHangup([Reserved] [In] uint dwReserved);
BOOL InternetGetConnectedState([Out] INTERNET_CONNECTION* lpdwFlags, [Reserved] [In] uint dwReserved);
BOOL InternetGetConnectedStateExA([Out] [Optional] INTERNET_CONNECTION* lpdwFlags, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpszConnectionName, [In] uint cchNameLen, [Reserved] [In] uint dwReserved);
BOOL InternetGetConnectedStateExW([Out] [Optional] INTERNET_CONNECTION* lpdwFlags, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpszConnectionName, [In] uint cchNameLen, [Reserved] [In] uint dwReserved);
BOOL DeleteWpadCacheForNetworks([In] WPAD_CACHE_DELETE param0);
BOOL InternetInitializeAutoProxyDll([In] uint dwReserved);
BOOL DetectAutoProxyUrl([NativeArrayInfo(CountParamIndex = 1)] [Out] PSTR pszAutoProxyUrl, [In] uint cchAutoProxyUrl, [In] PROXY_AUTO_DETECT_TYPE dwDetectFlags);
BOOL CreateMD5SSOHash([In] PWSTR pszChallengeInfo, [In] PWSTR pwszRealm, [In] PWSTR pwszTarget, [Out] byte* pbHexHash);
BOOL InternetGetConnectedStateEx([Out] INTERNET_CONNECTION* lpdwFlags, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpszConnectionName, [In] uint dwNameLen, [In] uint dwReserved);
BOOL InternetSetDialStateA([Const] [In] [Optional] PSTR lpszConnectoid, [In] uint dwState, [Reserved] [In] uint dwReserved);
BOOL InternetSetDialStateW([Const] [In] [Optional] PWSTR lpszConnectoid, [In] uint dwState, [Reserved] [In] uint dwReserved);
BOOL InternetSetDialState([Const] [In] [Optional] PSTR lpszConnectoid, [In] uint dwState, [In] uint dwReserved);
BOOL InternetSetPerSiteCookieDecisionA([Const] [In] PSTR pchHostName, [In] uint dwDecision);
BOOL InternetSetPerSiteCookieDecisionW([Const] [In] PWSTR pchHostName, [In] uint dwDecision);
BOOL InternetGetPerSiteCookieDecisionA([Const] [In] PSTR pchHostName, [Out] uint* pResult);
BOOL InternetGetPerSiteCookieDecisionW([Const] [In] PWSTR pchHostName, [Out] uint* pResult);
BOOL InternetClearAllPerSiteCookieDecisions();
BOOL InternetEnumPerSiteCookieDecisionA([NativeArrayInfo(CountParamIndex = 1)] [Out] PSTR pszSiteName, [In] [Out] uint* pcSiteNameSize, [Out] uint* pdwDecision, [In] uint dwIndex);
BOOL InternetEnumPerSiteCookieDecisionW([NativeArrayInfo(CountParamIndex = 1)] [Out] PWSTR pszSiteName, [In] [Out] uint* pcSiteNameSize, [Out] uint* pdwDecision, [In] uint dwIndex);
uint PrivacySetZonePreferenceW([In] uint dwZone, [In] uint dwType, [In] uint dwTemplate, [Const] [In] [Optional] PWSTR pszPreference);
uint PrivacyGetZonePreferenceW([In] uint dwZone, [In] uint dwType, [Out] [Optional] uint* pdwTemplate, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR pszBuffer, [In] [Out] [Optional] uint* pdwBufferLength);
uint HttpIsHostHstsEnabled([Const] [In] PWSTR pcwszUrl, [Out] BOOL* pfIsHsts);
BOOL InternetAlgIdToStringA([In] uint ai, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpstr, [In] [Out] uint* lpdwstrLength, [Reserved] [In] uint dwReserved);
BOOL InternetAlgIdToStringW([In] uint ai, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpstr, [In] [Out] uint* lpdwstrLength, [Reserved] [In] uint dwReserved);
BOOL InternetSecurityProtocolToStringA([In] uint dwProtocol, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpstr, [In] [Out] uint* lpdwstrLength, [Reserved] [In] uint dwReserved);
BOOL InternetSecurityProtocolToStringW([In] uint dwProtocol, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpstr, [In] [Out] uint* lpdwstrLength, [Reserved] [In] uint dwReserved);
BOOL InternetGetSecurityInfoByURLA([In] PSTR lpszURL, [Out] CERT_CHAIN_CONTEXT** ppCertChain, [Out] uint* pdwSecureFlags);
BOOL InternetGetSecurityInfoByURLW([Const] [In] PWSTR lpszURL, [Out] CERT_CHAIN_CONTEXT** ppCertChain, [Out] uint* pdwSecureFlags);
BOOL InternetGetSecurityInfoByURL([In] PSTR lpszURL, [Out] CERT_CHAIN_CONTEXT** ppCertChain, [Out] uint* pdwSecureFlags);
uint ShowSecurityInfo([In] HWND hWndParent, [In] INTERNET_SECURITY_INFO* pSecurityInfo);
uint ShowX509EncodedCertificate([In] HWND hWndParent, [MemorySize(BytesParamIndex = 2)] [In] byte* lpCert, [In] uint cbCert);
uint ShowClientAuthCerts([In] HWND hWndParent);
uint ParseX509EncodedCertificateForListBoxEntry([MemorySize(BytesParamIndex = 1)] [In] byte* lpCert, [In] uint cbCert, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR lpszListBoxEntry, [In] [Out] uint* lpdwListBoxEntry);
BOOL InternetShowSecurityInfoByURLA([In] PSTR lpszURL, [In] HWND hwndParent);
BOOL InternetShowSecurityInfoByURLW([Const] [In] PWSTR lpszURL, [In] HWND hwndParent);
BOOL InternetShowSecurityInfoByURL([In] PSTR lpszURL, [In] HWND hwndParent);
BOOL InternetFortezzaCommand([In] uint dwCommand, [In] HWND hwnd, [Reserved] [In] nuint dwReserved);
BOOL InternetQueryFortezzaStatus([Out] uint* pdwStatus, [Reserved] [In] nuint dwReserved);
BOOL InternetWriteFileExA([In] void* hFile, [In] INTERNET_BUFFERSA* lpBuffersIn, [In] uint dwFlags, [In] [Optional] nuint dwContext);
BOOL InternetWriteFileExW([In] void* hFile, [In] INTERNET_BUFFERSW* lpBuffersIn, [In] uint dwFlags, [In] [Optional] nuint dwContext);
int FindP3PPolicySymbol([Const] [In] PSTR pszSymbol);
uint HttpGetServerCredentials([In] PWSTR pwszUrl, [Out] PWSTR* ppwszUserName, [Out] PWSTR* ppwszPassword);
uint HttpPushEnable([In] void* hRequest, [In] HTTP_PUSH_TRANSPORT_SETTING* pTransportSetting, [Out] HTTP_PUSH_WAIT_HANDLE* phWait);
uint HttpPushWait([In] HTTP_PUSH_WAIT_HANDLE hWait, [In] HTTP_PUSH_WAIT_TYPE eType, [Out] [Optional] HTTP_PUSH_NOTIFICATION_STATUS* pNotificationStatus);
void HttpPushClose([In] HTTP_PUSH_WAIT_HANDLE hWait);
BOOL HttpCheckDavComplianceA([Const] [In] PSTR lpszUrl, [Const] [In] PSTR lpszComplianceToken, [In] [Out] int* lpfFound, [In] HWND hWnd, [In] void* lpvReserved);
BOOL HttpCheckDavComplianceW([Const] [In] PWSTR lpszUrl, [Const] [In] PWSTR lpszComplianceToken, [In] [Out] int* lpfFound, [In] HWND hWnd, [In] void* lpvReserved);
BOOL IsUrlCacheEntryExpiredA([Const] [In] PSTR lpszUrlName, [In] uint dwFlags, [In] [Out] FILETIME* pftLastModified);
BOOL IsUrlCacheEntryExpiredW([Const] [In] PWSTR lpszUrlName, [In] uint dwFlags, [In] [Out] FILETIME* pftLastModified);
BOOL CreateUrlCacheEntryExW([Const] [In] PWSTR lpszUrlName, [In] uint dwExpectedFileSize, [Const] [In] [Optional] PWSTR lpszFileExtension, [NativeArrayInfo(CountConst = 260)] [In] [Out] PWSTR lpszFileName, [In] uint dwReserved, [In] BOOL fPreserveIncomingFileName);
uint GetUrlCacheEntryBinaryBlob([Const] [In] PWSTR pwszUrlName, [Out] uint* dwType, [Out] FILETIME* pftExpireTime, [Out] FILETIME* pftAccessTime, [Out] FILETIME* pftModifiedTime, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] byte** ppbBlob, [Out] uint* pcbBlob);
uint CommitUrlCacheEntryBinaryBlob([Const] [In] PWSTR pwszUrlName, [In] uint dwType, [In] FILETIME ftExpireTime, [In] FILETIME ftModifiedTime, [Const] [NativeArrayInfo(CountParamIndex = 5)] [In] [Optional] byte* pbBlob, [In] uint cbBlob);
BOOL CreateUrlCacheContainerA([Const] [In] PSTR Name, [Const] [In] PSTR lpCachePrefix, [Const] [In] [Optional] PSTR lpszCachePath, [In] uint KBCacheLimit, [In] uint dwContainerType, [In] uint dwOptions, [Reserved] [In] [Out] void* pvBuffer, [Reserved] [In] [Out] uint* cbBuffer);
BOOL CreateUrlCacheContainerW([Const] [In] PWSTR Name, [Const] [In] PWSTR lpCachePrefix, [Const] [In] [Optional] PWSTR lpszCachePath, [In] uint KBCacheLimit, [In] uint dwContainerType, [In] uint dwOptions, [Reserved] [In] [Out] void* pvBuffer, [Reserved] [In] [Out] uint* cbBuffer);
BOOL DeleteUrlCacheContainerA([Const] [In] PSTR Name, [In] uint dwOptions);
BOOL DeleteUrlCacheContainerW([Const] [In] PWSTR Name, [In] uint dwOptions);
HANDLE FindFirstUrlCacheContainerA([In] [Out] uint* pdwModified, [MemorySize(BytesParamIndex = 2)] [Out] INTERNET_CACHE_CONTAINER_INFOA* lpContainerInfo, [In] [Out] uint* lpcbContainerInfo, [In] uint dwOptions);
HANDLE FindFirstUrlCacheContainerW([In] [Out] uint* pdwModified, [MemorySize(BytesParamIndex = 2)] [Out] INTERNET_CACHE_CONTAINER_INFOW* lpContainerInfo, [In] [Out] uint* lpcbContainerInfo, [In] uint dwOptions);
BOOL FindNextUrlCacheContainerA([In] HANDLE hEnumHandle, [MemorySize(BytesParamIndex = 2)] [Out] INTERNET_CACHE_CONTAINER_INFOA* lpContainerInfo, [In] [Out] uint* lpcbContainerInfo);
BOOL FindNextUrlCacheContainerW([In] HANDLE hEnumHandle, [MemorySize(BytesParamIndex = 2)] [Out] INTERNET_CACHE_CONTAINER_INFOW* lpContainerInfo, [In] [Out] uint* lpcbContainerInfo);
BOOL FreeUrlCacheSpaceA([Const] [In] [Optional] PSTR lpszCachePath, [In] uint dwSize, [In] uint dwFilter);
BOOL FreeUrlCacheSpaceW([Const] [In] [Optional] PWSTR lpszCachePath, [In] uint dwSize, [In] uint dwFilter);
uint UrlCacheFreeGlobalSpace([In] ulong ullTargetSize, [In] uint dwFilter);
uint UrlCacheGetGlobalCacheSize([In] uint dwFilter, [Out] ulong* pullSize, [Out] ulong* pullLimit);
BOOL GetUrlCacheConfigInfoA([In] [Out] INTERNET_CACHE_CONFIG_INFOA* lpCacheConfigInfo, [Reserved] [In] [Out] uint* lpcbCacheConfigInfo, [In] CACHE_CONFIG dwFieldControl);
BOOL GetUrlCacheConfigInfoW([In] [Out] INTERNET_CACHE_CONFIG_INFOW* lpCacheConfigInfo, [Reserved] [In] [Out] uint* lpcbCacheConfigInfo, [In] CACHE_CONFIG dwFieldControl);
BOOL SetUrlCacheConfigInfoA([In] INTERNET_CACHE_CONFIG_INFOA* lpCacheConfigInfo, [In] uint dwFieldControl);
BOOL SetUrlCacheConfigInfoW([In] INTERNET_CACHE_CONFIG_INFOW* lpCacheConfigInfo, [In] uint dwFieldControl);
uint RunOnceUrlCache([In] HWND hwnd, [In] HINSTANCE hinst, [In] PSTR lpszCmd, [In] int nCmdShow);
uint DeleteIE3Cache([In] HWND hwnd, [In] HINSTANCE hinst, [In] PSTR lpszCmd, [In] int nCmdShow);
BOOL UpdateUrlCacheContentPath([Const] [In] PSTR szNewPath);
BOOL RegisterUrlCacheNotification([In] [Optional] HWND hWnd, [In] uint uMsg, [In] long gid, [In] uint dwOpsFilter, [In] uint dwReserved);
BOOL GetUrlCacheHeaderData([In] uint nIdx, [Out] uint* lpdwData);
BOOL SetUrlCacheHeaderData([In] uint nIdx, [In] uint dwData);
BOOL IncrementUrlCacheHeaderData([In] uint nIdx, [Out] uint* lpdwData);
BOOL LoadUrlCacheContent();
uint AppCacheLookup([Const] [In] PWSTR pwszUrl, [In] uint dwFlags, [Out] void** phAppCache);
uint AppCacheCheckManifest([Const] [In] [Optional] PWSTR pwszMasterUrl, [Const] [In] PWSTR pwszManifestUrl, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbManifestData, [In] uint dwManifestDataSize, [Const] [MemorySize(BytesParamIndex = 5)] [In] byte* pbManifestResponseHeaders, [In] uint dwManifestResponseHeadersSize, [Out] APP_CACHE_STATE* peState, [Out] void** phNewAppCache);
uint AppCacheGetDownloadList([In] void* hAppCache, [Out] APP_CACHE_DOWNLOAD_LIST* pDownloadList);
void AppCacheFreeDownloadList([In] [Out] APP_CACHE_DOWNLOAD_LIST* pDownloadList);
uint AppCacheFinalize([In] void* hAppCache, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pbManifestData, [In] uint dwManifestDataSize, [Out] APP_CACHE_FINALIZE_STATE* peState);
uint AppCacheGetFallbackUrl([In] void* hAppCache, [Const] [In] PWSTR pwszUrl, [Out] PWSTR* ppwszFallbackUrl);
uint AppCacheGetManifestUrl([In] void* hAppCache, [Out] PWSTR* ppwszManifestUrl);
uint AppCacheDuplicateHandle([In] void* hAppCache, [Out] void** phDuplicatedAppCache);
void AppCacheCloseHandle([In] void* hAppCache);
void AppCacheFreeGroupList([In] [Out] APP_CACHE_GROUP_LIST* pAppCacheGroupList);
uint AppCacheGetGroupList([Out] APP_CACHE_GROUP_LIST* pAppCacheGroupList);
uint AppCacheGetInfo([In] void* hAppCache, [Out] APP_CACHE_GROUP_INFO* pAppCacheInfo);
uint AppCacheDeleteGroup([Const] [In] PWSTR pwszManifestUrl);
uint AppCacheFreeSpace([In] FILETIME ftCutOff);
uint AppCacheGetIEGroupList([Out] APP_CACHE_GROUP_LIST* pAppCacheGroupList);
uint AppCacheDeleteIEGroup([Const] [In] PWSTR pwszManifestUrl);
uint AppCacheFreeIESpace([In] FILETIME ftCutOff);
uint AppCacheCreateAndCommitFile([In] void* hAppCache, [Const] [In] PWSTR pwszSourceFilePath, [Const] [In] PWSTR pwszUrl, [Const] [MemorySize(BytesParamIndex = 4)] [In] byte* pbResponseHeaders, [In] uint dwResponseHeadersSize);
uint HttpOpenDependencyHandle([In] void* hRequestHandle, [In] BOOL fBackground, [Out] void** phDependencyHandle);
void HttpCloseDependencyHandle([In] void* hDependencyHandle);
uint HttpDuplicateDependencyHandle([In] void* hDependencyHandle, [Out] void** phDuplicatedDependencyHandle);
uint HttpIndicatePageLoadComplete([In] void* hDependencyHandle);
void UrlCacheFreeEntryInfo([In] [Out] URLCACHE_ENTRY_INFO* pCacheEntryInfo);
uint UrlCacheGetEntryInfo([In] [Optional] void* hAppCache, [Const] [In] PWSTR pcwszUrl, [Out] [Optional] URLCACHE_ENTRY_INFO* pCacheEntryInfo);
void UrlCacheCloseEntryHandle([In] void* hEntryFile);
uint UrlCacheRetrieveEntryFile([In] [Optional] void* hAppCache, [Const] [In] PWSTR pcwszUrl, [Out] URLCACHE_ENTRY_INFO* pCacheEntryInfo, [Out] void** phEntryFile);
uint UrlCacheReadEntryStream([In] void* hUrlCacheStream, [In] ulong ullLocation, [In] [Out] void* pBuffer, [In] uint dwBufferLen, [Out] uint* pdwBufferLen);
uint UrlCacheRetrieveEntryStream([In] [Optional] void* hAppCache, [Const] [In] PWSTR pcwszUrl, [In] BOOL fRandomRead, [Out] URLCACHE_ENTRY_INFO* pCacheEntryInfo, [Out] void** phEntryStream);
uint UrlCacheUpdateEntryExtraData([In] [Optional] void* hAppCache, [Const] [In] PWSTR pcwszUrl, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbExtraData, [In] uint cbExtraData);
uint UrlCacheCreateContainer([Const] [In] PWSTR pwszName, [Const] [In] PWSTR pwszPrefix, [Const] [In] PWSTR pwszDirectory, [In] ulong ullLimit, [In] uint dwOptions);
uint UrlCacheCheckEntriesExist([NativeArrayInfo(CountParamIndex = 1)] [In] PWSTR* rgpwszUrls, [In] uint cEntries, [NativeArrayInfo(CountParamIndex = 1)] [Out] BOOL* rgfExist);
uint UrlCacheGetContentPaths([Out] PWSTR** pppwszDirectories, [Out] uint* pcDirectories);
uint UrlCacheGetGlobalLimit([In] URL_CACHE_LIMIT_TYPE limitType, [Out] ulong* pullLimit);
uint UrlCacheSetGlobalLimit([In] URL_CACHE_LIMIT_TYPE limitType, [In] ulong ullLimit);
uint UrlCacheReloadSettings();
uint UrlCacheContainerSetEntryMaximumAge([Const] [In] PWSTR pwszPrefix, [In] uint dwEntryMaxAge);
uint UrlCacheFindFirstEntry([Const] [In] [Optional] PWSTR pwszPrefix, [In] uint dwFlags, [In] uint dwFilter, [In] long GroupId, [Out] URLCACHE_ENTRY_INFO* pCacheEntryInfo, [Out] HANDLE* phFind);
uint UrlCacheFindNextEntry([In] HANDLE hFind, [Out] URLCACHE_ENTRY_INFO* pCacheEntryInfo);
uint UrlCacheServer();
BOOL ReadGuidsForConnectedNetworks([Out] [Optional] uint* pcNetworks, [Out] [Optional] PWSTR** pppwszNetworkGuids, [Out] [Optional] BSTR** pppbstrNetworkNames, [Out] [Optional] PWSTR** pppwszGWMacs, [Out] [Optional] uint* pcGatewayMacs, [Out] [Optional] uint* pdwFlags);
BOOL IsHostInProxyBypassList([In] INTERNET_SCHEME tScheme, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PSTR lpszHost, [In] uint cchHost);
void InternetFreeProxyInfoList([In] [Out] WININET_PROXY_INFO_LIST* pProxyInfoList);
uint InternetGetProxyForUrl([In] void* hInternet, [Const] [In] PWSTR pcwszUrl, [Out] WININET_PROXY_INFO_LIST* pProxyInfoList);
BOOL DoConnectoidsExist();
BOOL GetDiskInfoA([Const] [In] PSTR pszPath, [Out] [Optional] uint* pdwClusterSize, [Out] [Optional] ulong* pdlAvail, [Out] [Optional] ulong* pdlTotal);
BOOL PerformOperationOverUrlCacheA([Const] [In] [Optional] PSTR pszUrlSearchPattern, [In] uint dwFlags, [In] uint dwFilter, [In] long GroupId, [Reserved] [In] [Out] void* pReserved1, [Reserved] [In] [Out] uint* pdwReserved2, [Reserved] [In] [Out] void* pReserved3, [In] CACHE_OPERATOR op, [In] [Out] void* pOperatorData);
BOOL IsProfilesEnabled();
uint InternalInternetGetCookie([Const] [In] PSTR lpszUrl, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpszCookieData, [In] [Out] uint* lpdwDataSize);
BOOL ImportCookieFileA([Const] [In] PSTR szFilename);
BOOL ImportCookieFileW([Const] [In] PWSTR szFilename);
BOOL ExportCookieFileA([Const] [In] PSTR szFilename, [In] BOOL fAppend);
BOOL ExportCookieFileW([Const] [In] PWSTR szFilename, [In] BOOL fAppend);
BOOL IsDomainLegalCookieDomainA([Const] [In] PSTR pchDomain, [Const] [In] PSTR pchFullDomain);
BOOL IsDomainLegalCookieDomainW([Const] [In] PWSTR pchDomain, [Const] [In] PWSTR pchFullDomain);
void* HttpWebSocketCompleteUpgrade([In] void* hRequest, [In] nuint dwContext);
BOOL HttpWebSocketSend([In] void* hWebSocket, [In] HTTP_WEB_SOCKET_BUFFER_TYPE BufferType, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* pvBuffer, [In] uint dwBufferLength);
BOOL HttpWebSocketReceive([In] void* hWebSocket, [MemorySize(BytesParamIndex = 2)] [Out] void* pvBuffer, [In] uint dwBufferLength, [In] [Out] uint* pdwBytesRead, [Out] HTTP_WEB_SOCKET_BUFFER_TYPE* pBufferType);
BOOL HttpWebSocketClose([In] void* hWebSocket, [In] ushort usStatus, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* pvReason, [In] uint dwReasonLength);
BOOL HttpWebSocketShutdown([In] void* hWebSocket, [In] ushort usStatus, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* pvReason, [In] uint dwReasonLength);
BOOL HttpWebSocketQueryCloseStatus([In] void* hWebSocket, [Out] ushort* pusStatus, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* pvReason, [In] uint dwReasonLength, [In] [Out] uint* pdwReasonLengthConsumed);
uint InternetConvertUrlFromWireToWideChar([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PSTR pcszUrl, [In] uint cchUrl, [Const] [In] PWSTR pcwszBaseUrl, [In] uint dwCodePageHost, [In] uint dwCodePagePath, [In] BOOL fEncodePathExtra, [In] uint dwCodePageExtra, [Out] PWSTR* ppwszConvertedUrl);
