BOOL CryptFormatObject([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] uint dwFormatType, [In] uint dwFormatStrType, [In] [Optional] void* pFormatStruct, [Const] [In] [Optional] PSTR lpszStructType, [Const] [MemorySize(BytesParamIndex = 6)] [In] byte* pbEncoded, [In] uint cbEncoded, [MemorySize(BytesParamIndex = 8)] [Out] [Optional] void* pbFormat, [In] [Out] uint* pcbFormat);
BOOL CryptEncodeObjectEx([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [In] PSTR lpszStructType, [Const] [In] void* pvStructInfo, [In] CRYPT_ENCODE_OBJECT_FLAGS dwFlags, [In] [Optional] CRYPT_ENCODE_PARA* pEncodePara, [Out] [Optional] void* pvEncoded, [In] [Out] uint* pcbEncoded);
BOOL CryptEncodeObject([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [In] PSTR lpszStructType, [Const] [In] void* pvStructInfo, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pbEncoded, [In] [Out] uint* pcbEncoded);
BOOL CryptDecodeObjectEx([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [In] PSTR lpszStructType, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbEncoded, [In] uint cbEncoded, [In] uint dwFlags, [In] [Optional] CRYPT_DECODE_PARA* pDecodePara, [Out] [Optional] void* pvStructInfo, [In] [Out] uint* pcbStructInfo);
BOOL CryptDecodeObject([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [In] PSTR lpszStructType, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbEncoded, [In] uint cbEncoded, [In] uint dwFlags, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* pvStructInfo, [In] [Out] uint* pcbStructInfo);
BOOL CryptInstallOIDFunctionAddress([In] [Optional] HINSTANCE hModule, [In] uint dwEncodingType, [Const] [In] PSTR pszFuncName, [In] uint cFuncEntry, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] CRYPT_OID_FUNC_ENTRY* rgFuncEntry, [In] uint dwFlags);
void* CryptInitOIDFunctionSet([Const] [In] PSTR pszFuncName, [In] uint dwFlags);
BOOL CryptGetOIDFunctionAddress([In] void* hFuncSet, [In] uint dwEncodingType, [Const] [In] PSTR pszOID, [In] uint dwFlags, [Out] void** ppvFuncAddr, [Out] void** phFuncAddr);
BOOL CryptGetDefaultOIDDllList([In] void* hFuncSet, [In] uint dwEncodingType, [NativeArrayInfo(CountParamIndex = 3)] [NullNullTerminated] [Out] [Optional] PWSTR pwszDllList, [In] [Out] uint* pcchDllList);
BOOL CryptGetDefaultOIDFunctionAddress([In] void* hFuncSet, [In] uint dwEncodingType, [Const] [In] [Optional] PWSTR pwszDll, [In] uint dwFlags, [Out] void** ppvFuncAddr, [In] [Out] void** phFuncAddr);
BOOL CryptFreeOIDFunctionAddress([In] void* hFuncAddr, [In] uint dwFlags);
BOOL CryptRegisterOIDFunction([In] uint dwEncodingType, [Const] [In] PSTR pszFuncName, [Const] [In] PSTR pszOID, [Const] [In] [Optional] PWSTR pwszDll, [Const] [In] [Optional] PSTR pszOverrideFuncName);
BOOL CryptUnregisterOIDFunction([In] uint dwEncodingType, [Const] [In] PSTR pszFuncName, [Const] [In] PSTR pszOID);
BOOL CryptRegisterDefaultOIDFunction([In] uint dwEncodingType, [Const] [In] PSTR pszFuncName, [In] uint dwIndex, [Const] [In] PWSTR pwszDll);
BOOL CryptUnregisterDefaultOIDFunction([In] uint dwEncodingType, [Const] [In] PSTR pszFuncName, [Const] [In] PWSTR pwszDll);
BOOL CryptSetOIDFunctionValue([In] uint dwEncodingType, [Const] [In] PSTR pszFuncName, [Const] [In] PSTR pszOID, [Const] [In] [Optional] PWSTR pwszValueName, [In] REG_VALUE_TYPE dwValueType, [Const] [MemorySize(BytesParamIndex = 6)] [In] [Optional] byte* pbValueData, [In] uint cbValueData);
BOOL CryptGetOIDFunctionValue([In] uint dwEncodingType, [Const] [In] PSTR pszFuncName, [Const] [In] PSTR pszOID, [Const] [In] [Optional] PWSTR pwszValueName, [Out] [Optional] uint* pdwValueType, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* pbValueData, [In] [Out] [Optional] uint* pcbValueData);
BOOL CryptEnumOIDFunction([In] uint dwEncodingType, [Const] [In] [Optional] PSTR pszFuncName, [Const] [In] [Optional] PSTR pszOID, [In] uint dwFlags, [In] [Out] [Optional] void* pvArg, [In] PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc);
CRYPT_OID_INFO* CryptFindOIDInfo([In] uint dwKeyType, [In] void* pvKey, [In] uint dwGroupId);
BOOL CryptRegisterOIDInfo([In] CRYPT_OID_INFO* pInfo, [In] uint dwFlags);
BOOL CryptUnregisterOIDInfo([In] CRYPT_OID_INFO* pInfo);
BOOL CryptEnumOIDInfo([In] uint dwGroupId, [In] uint dwFlags, [In] [Out] [Optional] void* pvArg, [In] PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo);
PWSTR CryptFindLocalizedName([Const] [In] PWSTR pwszCryptName);
void* CryptMsgOpenToEncode([In] uint dwMsgEncodingType, [In] uint dwFlags, [In] CRYPT_MSG_TYPE dwMsgType, [Const] [In] void* pvMsgEncodeInfo, [In] [Optional] PSTR pszInnerContentObjID, [In] [Optional] CMSG_STREAM_INFO* pStreamInfo);
uint CryptMsgCalculateEncodedLength([In] uint dwMsgEncodingType, [In] uint dwFlags, [In] uint dwMsgType, [Const] [In] void* pvMsgEncodeInfo, [In] [Optional] PSTR pszInnerContentObjID, [In] uint cbData);
void* CryptMsgOpenToDecode([In] uint dwMsgEncodingType, [In] uint dwFlags, [In] uint dwMsgType, [In] [Optional] HCRYPTPROV_LEGACY hCryptProv, [Reserved] [In] [Out] CERT_INFO* pRecipientInfo, [In] [Optional] CMSG_STREAM_INFO* pStreamInfo);
void* CryptMsgDuplicate([In] [Optional] void* hCryptMsg);
BOOL CryptMsgClose([In] [Optional] void* hCryptMsg);
BOOL CryptMsgUpdate([In] void* hCryptMsg, [Const] [MemorySize(BytesParamIndex = 2)] [In] [Optional] byte* pbData, [In] uint cbData, [In] BOOL fFinal);
BOOL CryptMsgGetParam([In] void* hCryptMsg, [In] uint dwParamType, [In] uint dwIndex, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* pvData, [In] [Out] uint* pcbData);
BOOL CryptMsgControl([In] void* hCryptMsg, [In] uint dwFlags, [In] uint dwCtrlType, [Const] [In] [Optional] void* pvCtrlPara);
BOOL CryptMsgVerifyCountersignatureEncoded([In] [Optional] HCRYPTPROV_LEGACY hCryptProv, [In] uint dwEncodingType, [MemorySize(BytesParamIndex = 3)] [In] byte* pbSignerInfo, [In] uint cbSignerInfo, [MemorySize(BytesParamIndex = 5)] [In] byte* pbSignerInfoCountersignature, [In] uint cbSignerInfoCountersignature, [In] CERT_INFO* pciCountersigner);
BOOL CryptMsgVerifyCountersignatureEncodedEx([In] [Optional] HCRYPTPROV_LEGACY hCryptProv, [In] uint dwEncodingType, [MemorySize(BytesParamIndex = 3)] [In] byte* pbSignerInfo, [In] uint cbSignerInfo, [MemorySize(BytesParamIndex = 5)] [In] byte* pbSignerInfoCountersignature, [In] uint cbSignerInfoCountersignature, [In] uint dwSignerType, [In] void* pvSigner, [In] uint dwFlags, [In] [Out] [Optional] void* pvExtra);
BOOL CryptMsgCountersign([In] void* hCryptMsg, [In] uint dwIndex, [In] uint cCountersigners, [NativeArrayInfo(CountParamIndex = 2)] [In] CMSG_SIGNER_ENCODE_INFO* rgCountersigners);
BOOL CryptMsgCountersignEncoded([In] uint dwEncodingType, [MemorySize(BytesParamIndex = 2)] [In] byte* pbSignerInfo, [In] uint cbSignerInfo, [In] uint cCountersigners, [NativeArrayInfo(CountParamIndex = 3)] [In] CMSG_SIGNER_ENCODE_INFO* rgCountersigners, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* pbCountersignature, [In] [Out] uint* pcbCountersignature);
HCERTSTORE CertOpenStore([Const] [In] PSTR lpszStoreProvider, [In] CERT_QUERY_ENCODING_TYPE dwEncodingType, [In] [Optional] HCRYPTPROV_LEGACY hCryptProv, [In] CERT_OPEN_STORE_FLAGS dwFlags, [Const] [In] [Optional] void* pvPara);
HCERTSTORE CertDuplicateStore([In] HCERTSTORE hCertStore);
BOOL CertSaveStore([In] HCERTSTORE hCertStore, [In] CERT_QUERY_ENCODING_TYPE dwEncodingType, [In] CERT_STORE_SAVE_AS dwSaveAs, [In] CERT_STORE_SAVE_TO dwSaveTo, [In] [Out] void* pvSaveToPara, [In] uint dwFlags);
BOOL CertCloseStore([In] [Optional] HCERTSTORE hCertStore, [In] uint dwFlags);
CERT_CONTEXT* CertGetSubjectCertificateFromStore([In] HCERTSTORE hCertStore, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CERT_INFO* pCertId);
CERT_CONTEXT* CertEnumCertificatesInStore([In] HCERTSTORE hCertStore, [Const] [In] [Optional] CERT_CONTEXT* pPrevCertContext);
CERT_CONTEXT* CertFindCertificateInStore([In] HCERTSTORE hCertStore, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] uint dwFindFlags, [In] CERT_FIND_FLAGS dwFindType, [Const] [In] [Optional] void* pvFindPara, [Const] [In] [Optional] CERT_CONTEXT* pPrevCertContext);
CERT_CONTEXT* CertGetIssuerCertificateFromStore([In] HCERTSTORE hCertStore, [Const] [In] CERT_CONTEXT* pSubjectContext, [Const] [In] [Optional] CERT_CONTEXT* pPrevIssuerContext, [In] [Out] uint* pdwFlags);
BOOL CertVerifySubjectCertificateContext([Const] [In] CERT_CONTEXT* pSubject, [Const] [In] [Optional] CERT_CONTEXT* pIssuer, [In] [Out] uint* pdwFlags);
CERT_CONTEXT* CertDuplicateCertificateContext([Const] [In] [Optional] CERT_CONTEXT* pCertContext);
CERT_CONTEXT* CertCreateCertificateContext([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pbCertEncoded, [In] uint cbCertEncoded);
BOOL CertFreeCertificateContext([Const] [In] [Optional] CERT_CONTEXT* pCertContext);
BOOL CertSetCertificateContextProperty([Const] [In] CERT_CONTEXT* pCertContext, [In] uint dwPropId, [In] uint dwFlags, [Const] [In] [Optional] void* pvData);
BOOL CertGetCertificateContextProperty([Const] [In] CERT_CONTEXT* pCertContext, [In] uint dwPropId, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* pvData, [In] [Out] uint* pcbData);
uint CertEnumCertificateContextProperties([Const] [In] CERT_CONTEXT* pCertContext, [In] uint dwPropId);
BOOL CertCreateCTLEntryFromCertificateContextProperties([Const] [In] CERT_CONTEXT* pCertContext, [In] uint cOptAttr, [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] CRYPT_ATTRIBUTE* rgOptAttr, [In] uint dwFlags, [Reserved] [In] [Out] void* pvReserved, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] CTL_ENTRY* pCtlEntry, [In] [Out] uint* pcbCtlEntry);
BOOL CertSetCertificateContextPropertiesFromCTLEntry([Const] [In] CERT_CONTEXT* pCertContext, [In] CTL_ENTRY* pCtlEntry, [In] uint dwFlags);
CRL_CONTEXT* CertGetCRLFromStore([In] HCERTSTORE hCertStore, [Const] [In] [Optional] CERT_CONTEXT* pIssuerContext, [In] [Optional] CRL_CONTEXT* pPrevCrlContext, [In] [Out] uint* pdwFlags);
CRL_CONTEXT* CertEnumCRLsInStore([In] HCERTSTORE hCertStore, [In] [Optional] CRL_CONTEXT* pPrevCrlContext);
CRL_CONTEXT* CertFindCRLInStore([In] HCERTSTORE hCertStore, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] uint dwFindFlags, [In] uint dwFindType, [Const] [In] [Optional] void* pvFindPara, [In] [Optional] CRL_CONTEXT* pPrevCrlContext);
CRL_CONTEXT* CertDuplicateCRLContext([In] [Optional] CRL_CONTEXT* pCrlContext);
CRL_CONTEXT* CertCreateCRLContext([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pbCrlEncoded, [In] uint cbCrlEncoded);
BOOL CertFreeCRLContext([In] [Optional] CRL_CONTEXT* pCrlContext);
BOOL CertSetCRLContextProperty([In] CRL_CONTEXT* pCrlContext, [In] uint dwPropId, [In] uint dwFlags, [Const] [In] [Optional] void* pvData);
BOOL CertGetCRLContextProperty([In] CRL_CONTEXT* pCrlContext, [In] uint dwPropId, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* pvData, [In] [Out] uint* pcbData);
uint CertEnumCRLContextProperties([In] CRL_CONTEXT* pCrlContext, [In] uint dwPropId);
BOOL CertFindCertificateInCRL([Const] [In] CERT_CONTEXT* pCert, [In] CRL_CONTEXT* pCrlContext, [In] uint dwFlags, [Reserved] [In] [Out] void* pvReserved, [Out] [Optional] CRL_ENTRY** ppCrlEntry);
BOOL CertIsValidCRLForCertificate([Const] [In] CERT_CONTEXT* pCert, [In] CRL_CONTEXT* pCrl, [In] uint dwFlags, [Reserved] [In] [Out] void* pvReserved);
BOOL CertAddEncodedCertificateToStore([In] [Optional] HCERTSTORE hCertStore, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbCertEncoded, [In] uint cbCertEncoded, [In] uint dwAddDisposition, [Out] [Optional] CERT_CONTEXT** ppCertContext);
BOOL CertAddCertificateContextToStore([In] [Optional] HCERTSTORE hCertStore, [Const] [In] CERT_CONTEXT* pCertContext, [In] uint dwAddDisposition, [Out] [Optional] CERT_CONTEXT** ppStoreContext);
BOOL CertAddSerializedElementToStore([In] [Optional] HCERTSTORE hCertStore, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pbElement, [In] uint cbElement, [In] uint dwAddDisposition, [In] uint dwFlags, [In] uint dwContextTypeFlags, [Out] [Optional] uint* pdwContextType, [Const] [Out] [Optional] void** ppvContext);
BOOL CertDeleteCertificateFromStore([Const] [In] CERT_CONTEXT* pCertContext);
BOOL CertAddEncodedCRLToStore([In] [Optional] HCERTSTORE hCertStore, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbCrlEncoded, [In] uint cbCrlEncoded, [In] uint dwAddDisposition, [Out] [Optional] CRL_CONTEXT** ppCrlContext);
BOOL CertAddCRLContextToStore([In] [Optional] HCERTSTORE hCertStore, [In] CRL_CONTEXT* pCrlContext, [In] uint dwAddDisposition, [Out] [Optional] CRL_CONTEXT** ppStoreContext);
BOOL CertDeleteCRLFromStore([In] CRL_CONTEXT* pCrlContext);
BOOL CertSerializeCertificateStoreElement([Const] [In] CERT_CONTEXT* pCertContext, [In] uint dwFlags, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pbElement, [In] [Out] uint* pcbElement);
BOOL CertSerializeCRLStoreElement([In] CRL_CONTEXT* pCrlContext, [In] uint dwFlags, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pbElement, [In] [Out] uint* pcbElement);
CTL_CONTEXT* CertDuplicateCTLContext([In] [Optional] CTL_CONTEXT* pCtlContext);
CTL_CONTEXT* CertCreateCTLContext([In] uint dwMsgAndCertEncodingType, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pbCtlEncoded, [In] uint cbCtlEncoded);
BOOL CertFreeCTLContext([In] [Optional] CTL_CONTEXT* pCtlContext);
BOOL CertSetCTLContextProperty([In] CTL_CONTEXT* pCtlContext, [In] uint dwPropId, [In] uint dwFlags, [Const] [In] [Optional] void* pvData);
BOOL CertGetCTLContextProperty([In] CTL_CONTEXT* pCtlContext, [In] uint dwPropId, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* pvData, [In] [Out] uint* pcbData);
uint CertEnumCTLContextProperties([In] CTL_CONTEXT* pCtlContext, [In] uint dwPropId);
CTL_CONTEXT* CertEnumCTLsInStore([In] HCERTSTORE hCertStore, [In] [Optional] CTL_CONTEXT* pPrevCtlContext);
CTL_ENTRY* CertFindSubjectInCTL([In] uint dwEncodingType, [In] uint dwSubjectType, [In] void* pvSubject, [In] CTL_CONTEXT* pCtlContext, [In] uint dwFlags);
CTL_CONTEXT* CertFindCTLInStore([In] HCERTSTORE hCertStore, [In] uint dwMsgAndCertEncodingType, [In] uint dwFindFlags, [In] CERT_FIND_TYPE dwFindType, [Const] [In] [Optional] void* pvFindPara, [In] [Optional] CTL_CONTEXT* pPrevCtlContext);
BOOL CertAddEncodedCTLToStore([In] [Optional] HCERTSTORE hCertStore, [In] CERT_QUERY_ENCODING_TYPE dwMsgAndCertEncodingType, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbCtlEncoded, [In] uint cbCtlEncoded, [In] uint dwAddDisposition, [Out] [Optional] CTL_CONTEXT** ppCtlContext);
BOOL CertAddCTLContextToStore([In] [Optional] HCERTSTORE hCertStore, [In] CTL_CONTEXT* pCtlContext, [In] uint dwAddDisposition, [Out] [Optional] CTL_CONTEXT** ppStoreContext);
BOOL CertSerializeCTLStoreElement([In] CTL_CONTEXT* pCtlContext, [In] uint dwFlags, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pbElement, [In] [Out] uint* pcbElement);
BOOL CertDeleteCTLFromStore([In] CTL_CONTEXT* pCtlContext);
BOOL CertAddCertificateLinkToStore([In] HCERTSTORE hCertStore, [Const] [In] CERT_CONTEXT* pCertContext, [In] uint dwAddDisposition, [Out] [Optional] CERT_CONTEXT** ppStoreContext);
BOOL CertAddCRLLinkToStore([In] HCERTSTORE hCertStore, [In] CRL_CONTEXT* pCrlContext, [In] uint dwAddDisposition, [Out] [Optional] CRL_CONTEXT** ppStoreContext);
BOOL CertAddCTLLinkToStore([In] HCERTSTORE hCertStore, [In] CTL_CONTEXT* pCtlContext, [In] uint dwAddDisposition, [Out] [Optional] CTL_CONTEXT** ppStoreContext);
BOOL CertAddStoreToCollection([In] HCERTSTORE hCollectionStore, [In] [Optional] HCERTSTORE hSiblingStore, [In] uint dwUpdateFlags, [In] uint dwPriority);
void CertRemoveStoreFromCollection([In] HCERTSTORE hCollectionStore, [In] HCERTSTORE hSiblingStore);
BOOL CertControlStore([In] HCERTSTORE hCertStore, [In] CERT_CONTROL_STORE_FLAGS dwFlags, [In] uint dwCtrlType, [Const] [In] [Optional] void* pvCtrlPara);
BOOL CertSetStoreProperty([In] HCERTSTORE hCertStore, [In] uint dwPropId, [In] uint dwFlags, [Const] [In] [Optional] void* pvData);
BOOL CertGetStoreProperty([In] HCERTSTORE hCertStore, [In] uint dwPropId, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* pvData, [In] [Out] uint* pcbData);
void* CertCreateContext([In] uint dwContextType, [In] uint dwEncodingType, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbEncoded, [In] uint cbEncoded, [In] uint dwFlags, [In] [Optional] CERT_CREATE_CONTEXT_PARA* pCreatePara);
BOOL CertRegisterSystemStore([Const] [In] void* pvSystemStore, [In] uint dwFlags, [In] [Optional] CERT_SYSTEM_STORE_INFO* pStoreInfo, [Reserved] [In] [Out] void* pvReserved);
BOOL CertRegisterPhysicalStore([Const] [In] void* pvSystemStore, [In] uint dwFlags, [Const] [In] PWSTR pwszStoreName, [In] CERT_PHYSICAL_STORE_INFO* pStoreInfo, [Reserved] [In] [Out] void* pvReserved);
BOOL CertUnregisterSystemStore([Const] [In] void* pvSystemStore, [In] uint dwFlags);
BOOL CertUnregisterPhysicalStore([Const] [In] void* pvSystemStore, [In] uint dwFlags, [Const] [In] PWSTR pwszStoreName);
BOOL CertEnumSystemStoreLocation([In] uint dwFlags, [In] [Out] [Optional] void* pvArg, [In] PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum);
BOOL CertEnumSystemStore([In] uint dwFlags, [In] [Optional] void* pvSystemStoreLocationPara, [In] [Out] [Optional] void* pvArg, [In] PFN_CERT_ENUM_SYSTEM_STORE pfnEnum);
BOOL CertEnumPhysicalStore([Const] [In] void* pvSystemStore, [In] uint dwFlags, [In] [Out] [Optional] void* pvArg, [In] PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum);
BOOL CertGetEnhancedKeyUsage([Const] [In] CERT_CONTEXT* pCertContext, [In] uint dwFlags, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] CTL_USAGE* pUsage, [In] [Out] uint* pcbUsage);
BOOL CertSetEnhancedKeyUsage([Const] [In] CERT_CONTEXT* pCertContext, [In] [Optional] CTL_USAGE* pUsage);
BOOL CertAddEnhancedKeyUsageIdentifier([Const] [In] CERT_CONTEXT* pCertContext, [Const] [In] PSTR pszUsageIdentifier);
BOOL CertRemoveEnhancedKeyUsageIdentifier([Const] [In] CERT_CONTEXT* pCertContext, [Const] [In] PSTR pszUsageIdentifier);
BOOL CertGetValidUsages([In] uint cCerts, [NativeArrayInfo(CountParamIndex = 0)] [In] CERT_CONTEXT** rghCerts, [Out] int* cNumOIDs, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] PSTR* rghOIDs, [In] [Out] uint* pcbOIDs);
BOOL CryptMsgGetAndVerifySigner([In] void* hCryptMsg, [In] uint cSignerStore, [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] HCERTSTORE* rghSignerStore, [In] uint dwFlags, [Out] [Optional] CERT_CONTEXT** ppSigner, [In] [Out] [Optional] uint* pdwSignerIndex);
BOOL CryptMsgSignCTL([In] uint dwMsgEncodingType, [MemorySize(BytesParamIndex = 2)] [In] byte* pbCtlContent, [In] uint cbCtlContent, [In] CMSG_SIGNED_ENCODE_INFO* pSignInfo, [In] uint dwFlags, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* pbEncoded, [In] [Out] uint* pcbEncoded);
BOOL CryptMsgEncodeAndSignCTL([In] uint dwMsgEncodingType, [In] CTL_INFO* pCtlInfo, [In] CMSG_SIGNED_ENCODE_INFO* pSignInfo, [In] uint dwFlags, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbEncoded, [In] [Out] uint* pcbEncoded);
BOOL CertFindSubjectInSortedCTL([In] CRYPT_INTEGER_BLOB* pSubjectIdentifier, [In] CTL_CONTEXT* pCtlContext, [In] uint dwFlags, [Reserved] [In] [Out] void* pvReserved, [Out] [Optional] CRYPT_INTEGER_BLOB* pEncodedAttributes);
BOOL CertEnumSubjectInSortedCTL([In] CTL_CONTEXT* pCtlContext, [In] [Out] void** ppvNextSubject, [Out] [Optional] CRYPT_INTEGER_BLOB* pSubjectIdentifier, [Out] [Optional] CRYPT_INTEGER_BLOB* pEncodedAttributes);
BOOL CertVerifyCTLUsage([In] uint dwEncodingType, [In] uint dwSubjectType, [In] void* pvSubject, [In] CTL_USAGE* pSubjectUsage, [In] uint dwFlags, [In] [Optional] CTL_VERIFY_USAGE_PARA* pVerifyUsagePara, [In] [Out] CTL_VERIFY_USAGE_STATUS* pVerifyUsageStatus);
BOOL CertVerifyRevocation([In] uint dwEncodingType, [In] uint dwRevType, [In] uint cContext, [NativeArrayInfo(CountParamIndex = 2)] [In] void** rgpvContext, [In] uint dwFlags, [In] [Optional] CERT_REVOCATION_PARA* pRevPara, [In] [Out] CERT_REVOCATION_STATUS* pRevStatus);
BOOL CertCompareIntegerBlob([In] CRYPT_INTEGER_BLOB* pInt1, [In] CRYPT_INTEGER_BLOB* pInt2);
BOOL CertCompareCertificate([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CERT_INFO* pCertId1, [In] CERT_INFO* pCertId2);
BOOL CertCompareCertificateName([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CRYPT_INTEGER_BLOB* pCertName1, [In] CRYPT_INTEGER_BLOB* pCertName2);
BOOL CertIsRDNAttrsInCertificateName([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] uint dwFlags, [In] CRYPT_INTEGER_BLOB* pCertName, [In] CERT_RDN* pRDN);
BOOL CertComparePublicKeyInfo([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CERT_PUBLIC_KEY_INFO* pPublicKey1, [In] CERT_PUBLIC_KEY_INFO* pPublicKey2);
uint CertGetPublicKeyLength([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CERT_PUBLIC_KEY_INFO* pPublicKey);
BOOL CryptVerifyCertificateSignature([In] [Optional] HCRYPTPROV_LEGACY hCryptProv, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbEncoded, [In] uint cbEncoded, [In] CERT_PUBLIC_KEY_INFO* pPublicKey);
BOOL CryptVerifyCertificateSignatureEx([In] [Optional] HCRYPTPROV_LEGACY hCryptProv, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] uint dwSubjectType, [In] void* pvSubject, [In] uint dwIssuerType, [In] [Optional] void* pvIssuer, [In] CRYPT_VERIFY_CERT_FLAGS dwFlags, [In] [Out] [Optional] void* pvExtra);
BOOL CertIsStrongHashToSign([In] CERT_STRONG_SIGN_PARA* pStrongSignPara, [Const] [In] PWSTR pwszCNGHashAlgid, [Const] [In] [Optional] CERT_CONTEXT* pSigningCert);
BOOL CryptHashToBeSigned([In] [Optional] HCRYPTPROV_LEGACY hCryptProv, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbEncoded, [In] uint cbEncoded, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbComputedHash, [In] [Out] uint* pcbComputedHash);
BOOL CryptHashCertificate([In] [Optional] HCRYPTPROV_LEGACY hCryptProv, [In] uint Algid, [In] uint dwFlags, [Const] [MemorySize(BytesParamIndex = 4)] [In] byte* pbEncoded, [In] uint cbEncoded, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* pbComputedHash, [In] [Out] uint* pcbComputedHash);
BOOL CryptHashCertificate2([Const] [In] PWSTR pwszCNGHashAlgid, [In] uint dwFlags, [Reserved] [In] [Out] void* pvReserved, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* pbEncoded, [In] uint cbEncoded, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* pbComputedHash, [In] [Out] uint* pcbComputedHash);
BOOL CryptSignCertificate([In] [Optional] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, [In] [Optional] uint dwKeySpec, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [MemorySize(BytesParamIndex = 4)] [In] byte* pbEncodedToBeSigned, [In] uint cbEncodedToBeSigned, [In] CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm, [Const] [In] [Optional] void* pvHashAuxInfo, [MemorySize(BytesParamIndex = 8)] [Out] [Optional] byte* pbSignature, [In] [Out] uint* pcbSignature);
BOOL CryptSignAndEncodeCertificate([In] [Optional] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, [In] [Optional] CERT_KEY_SPEC dwKeySpec, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [In] PSTR lpszStructType, [Const] [In] void* pvStructInfo, [In] CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm, [Const] [In] [Optional] void* pvHashAuxInfo, [MemorySize(BytesParamIndex = 8)] [Out] [Optional] byte* pbEncoded, [In] [Out] uint* pcbEncoded);
int CertVerifyTimeValidity([In] [Optional] FILETIME* pTimeToVerify, [In] CERT_INFO* pCertInfo);
int CertVerifyCRLTimeValidity([In] [Optional] FILETIME* pTimeToVerify, [In] CRL_INFO* pCrlInfo);
BOOL CertVerifyValidityNesting([In] CERT_INFO* pSubjectInfo, [In] CERT_INFO* pIssuerInfo);
BOOL CertVerifyCRLRevocation([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CERT_INFO* pCertId, [In] uint cCrlInfo, [NativeArrayInfo(CountParamIndex = 2)] [In] CRL_INFO** rgpCrlInfo);
PSTR CertAlgIdToOID([In] uint dwAlgId);
uint CertOIDToAlgId([Const] [In] PSTR pszObjId);
CERT_EXTENSION* CertFindExtension([Const] [In] PSTR pszObjId, [In] uint cExtensions, [NativeArrayInfo(CountParamIndex = 1)] [In] CERT_EXTENSION* rgExtensions);
CRYPT_ATTRIBUTE* CertFindAttribute([Const] [In] PSTR pszObjId, [In] uint cAttr, [NativeArrayInfo(CountParamIndex = 1)] [In] CRYPT_ATTRIBUTE* rgAttr);
CERT_RDN_ATTR* CertFindRDNAttr([Const] [In] PSTR pszObjId, [In] CERT_NAME_INFO* pName);
BOOL CertGetIntendedKeyUsage([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CERT_INFO* pCertInfo, [MemorySize(BytesParamIndex = 3)] [Out] byte* pbKeyUsage, [In] uint cbKeyUsage);
BOOL CryptInstallDefaultContext([In] nuint hCryptProv, [In] CRYPT_DEFAULT_CONTEXT_TYPE dwDefaultType, [Const] [In] [Optional] void* pvDefaultPara, [In] CRYPT_DEFAULT_CONTEXT_FLAGS dwFlags, [Reserved] [In] [Out] void* pvReserved, [Out] void** phDefaultContext);
BOOL CryptUninstallDefaultContext([In] [Optional] void* hDefaultContext, [In] uint dwFlags, [Reserved] [In] [Out] void* pvReserved);
BOOL CryptExportPublicKeyInfo([In] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, [In] [Optional] uint dwKeySpec, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] CERT_PUBLIC_KEY_INFO* pInfo, [In] [Out] uint* pcbInfo);
BOOL CryptExportPublicKeyInfoEx([In] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, [In] [Optional] uint dwKeySpec, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] [Optional] PSTR pszPublicKeyObjId, [In] uint dwFlags, [In] [Optional] void* pvAuxInfo, [MemorySize(BytesParamIndex = 7)] [Out] [Optional] CERT_PUBLIC_KEY_INFO* pInfo, [In] [Out] uint* pcbInfo);
BOOL CryptExportPublicKeyInfoFromBCryptKeyHandle([In] BCRYPT_KEY_HANDLE hBCryptKey, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] [Optional] PSTR pszPublicKeyObjId, [In] uint dwFlags, [In] [Optional] void* pvAuxInfo, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] CERT_PUBLIC_KEY_INFO* pInfo, [In] [Out] uint* pcbInfo);
BOOL CryptImportPublicKeyInfo([In] nuint hCryptProv, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CERT_PUBLIC_KEY_INFO* pInfo, [Out] nuint* phKey);
BOOL CryptImportPublicKeyInfoEx([In] nuint hCryptProv, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CERT_PUBLIC_KEY_INFO* pInfo, [In] uint aiKeyAlg, [In] uint dwFlags, [In] [Optional] void* pvAuxInfo, [Out] nuint* phKey);
BOOL CryptImportPublicKeyInfoEx2([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CERT_PUBLIC_KEY_INFO* pInfo, [In] CRYPT_IMPORT_PUBLIC_KEY_FLAGS dwFlags, [In] [Optional] void* pvAuxInfo, [Out] BCRYPT_KEY_HANDLE* phKey);
BOOL CryptAcquireCertificatePrivateKey([Const] [In] CERT_CONTEXT* pCert, [In] CRYPT_ACQUIRE_FLAGS dwFlags, [In] [Optional] void* pvParameters, [Out] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE* phCryptProvOrNCryptKey, [Out] [Optional] CERT_KEY_SPEC* pdwKeySpec, [Out] [Optional] BOOL* pfCallerFreeProvOrNCryptKey);
BOOL CryptFindCertificateKeyProvInfo([Const] [In] CERT_CONTEXT* pCert, [In] CRYPT_FIND_FLAGS dwFlags, [Reserved] [In] [Out] void* pvReserved);
BOOL CryptImportPKCS8([In] CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams, [In] CRYPT_KEY_FLAGS dwFlags, [Out] [Optional] nuint* phCryptProv, [In] [Optional] void* pvAuxInfo);
BOOL CryptExportPKCS8([In] nuint hCryptProv, [In] uint dwKeySpec, [In] PSTR pszPrivateKeyObjId, [In] uint dwFlags, [In] [Optional] void* pvAuxInfo, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* pbPrivateKeyBlob, [In] [Out] uint* pcbPrivateKeyBlob);
BOOL CryptHashPublicKeyInfo([In] [Optional] HCRYPTPROV_LEGACY hCryptProv, [In] uint Algid, [In] uint dwFlags, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CERT_PUBLIC_KEY_INFO* pInfo, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* pbComputedHash, [In] [Out] uint* pcbComputedHash);
uint CertRDNValueToStrA([In] uint dwValueType, [In] CRYPT_INTEGER_BLOB* pValue, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR psz, [In] uint csz);
uint CertRDNValueToStrW([In] uint dwValueType, [In] CRYPT_INTEGER_BLOB* pValue, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR psz, [In] uint csz);
uint CertNameToStrA([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CRYPT_INTEGER_BLOB* pName, [In] CERT_STRING_TYPE dwStrType, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR psz, [In] uint csz);
uint CertNameToStrW([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CRYPT_INTEGER_BLOB* pName, [In] CERT_STRING_TYPE dwStrType, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR psz, [In] uint csz);
BOOL CertStrToNameA([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [In] PSTR pszX500, [In] CERT_STRING_TYPE dwStrType, [Reserved] [In] [Out] void* pvReserved, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbEncoded, [In] [Out] uint* pcbEncoded, [Out] [Optional] PSTR* ppszError);
BOOL CertStrToNameW([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [In] PWSTR pszX500, [In] CERT_STRING_TYPE dwStrType, [Reserved] [In] [Out] void* pvReserved, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbEncoded, [In] [Out] uint* pcbEncoded, [Out] [Optional] PWSTR* ppszError);
uint CertGetNameStringA([Const] [In] CERT_CONTEXT* pCertContext, [In] uint dwType, [In] uint dwFlags, [In] [Optional] void* pvTypePara, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR pszNameString, [In] uint cchNameString);
uint CertGetNameStringW([Const] [In] CERT_CONTEXT* pCertContext, [In] uint dwType, [In] uint dwFlags, [In] [Optional] void* pvTypePara, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR pszNameString, [In] uint cchNameString);
BOOL CryptSignMessage([In] CRYPT_SIGN_MESSAGE_PARA* pSignPara, [In] BOOL fDetachedSignature, [In] uint cToBeSigned, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] byte** rgpbToBeSigned, [NativeArrayInfo(CountParamIndex = 2)] [In] uint* rgcbToBeSigned, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* pbSignedBlob, [In] [Out] uint* pcbSignedBlob);
BOOL CryptVerifyMessageSignature([In] CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, [In] uint dwSignerIndex, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbSignedBlob, [In] uint cbSignedBlob, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbDecoded, [In] [Out] [Optional] uint* pcbDecoded, [Out] [Optional] CERT_CONTEXT** ppSignerCert);
int CryptGetMessageSignerCount([In] uint dwMsgEncodingType, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pbSignedBlob, [In] uint cbSignedBlob);
HCERTSTORE CryptGetMessageCertificates([In] uint dwMsgAndCertEncodingType, [In] [Optional] HCRYPTPROV_LEGACY hCryptProv, [In] uint dwFlags, [Const] [MemorySize(BytesParamIndex = 4)] [In] byte* pbSignedBlob, [In] uint cbSignedBlob);
BOOL CryptVerifyDetachedMessageSignature([In] CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, [In] uint dwSignerIndex, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbDetachedSignBlob, [In] uint cbDetachedSignBlob, [In] uint cToBeSigned, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] byte** rgpbToBeSigned, [NativeArrayInfo(CountParamIndex = 4)] [In] uint* rgcbToBeSigned, [Out] [Optional] CERT_CONTEXT** ppSignerCert);
BOOL CryptEncryptMessage([In] CRYPT_ENCRYPT_MESSAGE_PARA* pEncryptPara, [In] uint cRecipientCert, [NativeArrayInfo(CountParamIndex = 1)] [In] CERT_CONTEXT** rgpRecipientCert, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* pbToBeEncrypted, [In] uint cbToBeEncrypted, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* pbEncryptedBlob, [In] [Out] uint* pcbEncryptedBlob);
BOOL CryptDecryptMessage([In] CRYPT_DECRYPT_MESSAGE_PARA* pDecryptPara, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pbEncryptedBlob, [In] uint cbEncryptedBlob, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pbDecrypted, [In] [Out] [Optional] uint* pcbDecrypted, [Out] [Optional] CERT_CONTEXT** ppXchgCert);
BOOL CryptSignAndEncryptMessage([In] CRYPT_SIGN_MESSAGE_PARA* pSignPara, [In] CRYPT_ENCRYPT_MESSAGE_PARA* pEncryptPara, [In] uint cRecipientCert, [NativeArrayInfo(CountParamIndex = 2)] [In] CERT_CONTEXT** rgpRecipientCert, [Const] [MemorySize(BytesParamIndex = 5)] [In] byte* pbToBeSignedAndEncrypted, [In] uint cbToBeSignedAndEncrypted, [MemorySize(BytesParamIndex = 7)] [Out] [Optional] byte* pbSignedAndEncryptedBlob, [In] [Out] uint* pcbSignedAndEncryptedBlob);
BOOL CryptDecryptAndVerifyMessageSignature([In] CRYPT_DECRYPT_MESSAGE_PARA* pDecryptPara, [In] CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, [In] uint dwSignerIndex, [Const] [MemorySize(BytesParamIndex = 4)] [In] byte* pbEncryptedBlob, [In] uint cbEncryptedBlob, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* pbDecrypted, [In] [Out] [Optional] uint* pcbDecrypted, [Out] [Optional] CERT_CONTEXT** ppXchgCert, [Out] [Optional] CERT_CONTEXT** ppSignerCert);
BOOL CryptDecodeMessage([In] uint dwMsgTypeFlags, [In] [Optional] CRYPT_DECRYPT_MESSAGE_PARA* pDecryptPara, [In] [Optional] CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, [In] uint dwSignerIndex, [Const] [MemorySize(BytesParamIndex = 5)] [In] byte* pbEncodedBlob, [In] uint cbEncodedBlob, [In] uint dwPrevInnerContentType, [Out] [Optional] uint* pdwMsgType, [Out] [Optional] uint* pdwInnerContentType, [MemorySize(BytesParamIndex = 10)] [Out] [Optional] byte* pbDecoded, [In] [Out] [Optional] uint* pcbDecoded, [Out] [Optional] CERT_CONTEXT** ppXchgCert, [Out] [Optional] CERT_CONTEXT** ppSignerCert);
BOOL CryptHashMessage([In] CRYPT_HASH_MESSAGE_PARA* pHashPara, [In] BOOL fDetachedHash, [In] uint cToBeHashed, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] byte** rgpbToBeHashed, [NativeArrayInfo(CountParamIndex = 2)] [In] uint* rgcbToBeHashed, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* pbHashedBlob, [In] [Out] [Optional] uint* pcbHashedBlob, [MemorySize(BytesParamIndex = 8)] [Out] [Optional] byte* pbComputedHash, [In] [Out] [Optional] uint* pcbComputedHash);
BOOL CryptVerifyMessageHash([In] CRYPT_HASH_MESSAGE_PARA* pHashPara, [MemorySize(BytesParamIndex = 2)] [In] byte* pbHashedBlob, [In] uint cbHashedBlob, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pbToBeHashed, [In] [Out] [Optional] uint* pcbToBeHashed, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* pbComputedHash, [In] [Out] [Optional] uint* pcbComputedHash);
BOOL CryptVerifyDetachedMessageHash([In] CRYPT_HASH_MESSAGE_PARA* pHashPara, [MemorySize(BytesParamIndex = 2)] [In] byte* pbDetachedHashBlob, [In] uint cbDetachedHashBlob, [In] uint cToBeHashed, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] byte** rgpbToBeHashed, [NativeArrayInfo(CountParamIndex = 3)] [In] uint* rgcbToBeHashed, [MemorySize(BytesParamIndex = 7)] [Out] [Optional] byte* pbComputedHash, [In] [Out] [Optional] uint* pcbComputedHash);
BOOL CryptSignMessageWithKey([In] CRYPT_KEY_SIGN_MESSAGE_PARA* pSignPara, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pbToBeSigned, [In] uint cbToBeSigned, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pbSignedBlob, [In] [Out] uint* pcbSignedBlob);
BOOL CryptVerifyMessageSignatureWithKey([In] CRYPT_KEY_VERIFY_MESSAGE_PARA* pVerifyPara, [In] [Optional] CERT_PUBLIC_KEY_INFO* pPublicKeyInfo, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbSignedBlob, [In] uint cbSignedBlob, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbDecoded, [In] [Out] [Optional] uint* pcbDecoded);
HCERTSTORE CertOpenSystemStoreA([In] [Optional] HCRYPTPROV_LEGACY hProv, [Const] [In] PSTR szSubsystemProtocol);
HCERTSTORE CertOpenSystemStoreW([In] [Optional] HCRYPTPROV_LEGACY hProv, [Const] [In] PWSTR szSubsystemProtocol);
BOOL CertAddEncodedCertificateToSystemStoreA([Const] [In] PSTR szCertStoreName, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pbCertEncoded, [In] uint cbCertEncoded);
BOOL CertAddEncodedCertificateToSystemStoreW([Const] [In] PWSTR szCertStoreName, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pbCertEncoded, [In] uint cbCertEncoded);
BOOL CryptQueryObject([In] CERT_QUERY_OBJECT_TYPE dwObjectType, [Const] [In] void* pvObject, [In] CERT_QUERY_CONTENT_TYPE_FLAGS dwExpectedContentTypeFlags, [In] CERT_QUERY_FORMAT_TYPE_FLAGS dwExpectedFormatTypeFlags, [In] uint dwFlags, [Out] [Optional] CERT_QUERY_ENCODING_TYPE* pdwMsgAndCertEncodingType, [Out] [Optional] CERT_QUERY_CONTENT_TYPE* pdwContentType, [Out] [Optional] CERT_QUERY_FORMAT_TYPE* pdwFormatType, [Out] [Optional] HCERTSTORE* phCertStore, [Out] [Optional] void** phMsg, [Const] [Out] [Optional] void** ppvContext);
void* CryptMemAlloc([In] uint cbSize);
void* CryptMemRealloc([In] [Optional] void* pv, [In] uint cbSize);
void CryptMemFree([In] [Optional] void* pv);
BOOL CryptCreateAsyncHandle([In] uint dwFlags, [Out] HCRYPTASYNC* phAsync);
BOOL CryptSetAsyncParam([In] HCRYPTASYNC hAsync, [In] PSTR pszParamOid, [In] [Optional] void* pvParam, [In] PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree);
BOOL CryptGetAsyncParam([In] HCRYPTASYNC hAsync, [In] PSTR pszParamOid, [Out] [Optional] void** ppvParam, [Out] [Optional] PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* ppfnFree);
BOOL CryptCloseAsyncHandle([In] [Optional] HCRYPTASYNC hAsync);
CERT_CONTEXT* CertCreateSelfSignCertificate([In] [Optional] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, [In] CRYPT_INTEGER_BLOB* pSubjectIssuerBlob, [In] CERT_CREATE_SELFSIGN_FLAGS dwFlags, [In] [Optional] CRYPT_KEY_PROV_INFO* pKeyProvInfo, [In] [Optional] CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm, [In] [Optional] SYSTEMTIME* pStartTime, [In] [Optional] SYSTEMTIME* pEndTime, [In] [Optional] CERT_EXTENSIONS* pExtensions);
BOOL CryptGetKeyIdentifierProperty([Const] [In] CRYPT_INTEGER_BLOB* pKeyIdentifier, [In] uint dwPropId, [In] uint dwFlags, [Const] [In] [Optional] PWSTR pwszComputerName, [Reserved] [In] [Out] void* pvReserved, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* pvData, [In] [Out] uint* pcbData);
BOOL CryptSetKeyIdentifierProperty([Const] [In] CRYPT_INTEGER_BLOB* pKeyIdentifier, [In] uint dwPropId, [In] uint dwFlags, [Const] [In] [Optional] PWSTR pwszComputerName, [Reserved] [In] [Out] void* pvReserved, [Const] [In] [Optional] void* pvData);
BOOL CryptEnumKeyIdentifierProperties([Const] [In] [Optional] CRYPT_INTEGER_BLOB* pKeyIdentifier, [In] uint dwPropId, [In] uint dwFlags, [Const] [In] [Optional] PWSTR pwszComputerName, [Reserved] [In] [Out] void* pvReserved, [In] [Out] [Optional] void* pvArg, [In] PFN_CRYPT_ENUM_KEYID_PROP pfnEnum);
BOOL CryptCreateKeyIdentifierFromCSP([In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [Const] [In] [Optional] PSTR pszPubKeyOID, [Const] [MemorySize(BytesParamIndex = 3)] [In] PUBLICKEYSTRUC* pPubKeyStruc, [In] uint cbPubKeyStruc, [In] uint dwFlags, [Reserved] [In] [Out] void* pvReserved, [MemorySize(BytesParamIndex = 7)] [Out] [Optional] byte* pbHash, [In] [Out] uint* pcbHash);
BOOL CertCreateCertificateChainEngine([In] CERT_CHAIN_ENGINE_CONFIG* pConfig, [Out] HCERTCHAINENGINE* phChainEngine);
void CertFreeCertificateChainEngine([In] [Optional] HCERTCHAINENGINE hChainEngine);
BOOL CertResyncCertificateChainEngine([In] [Optional] HCERTCHAINENGINE hChainEngine);
BOOL CertGetCertificateChain([In] [Optional] HCERTCHAINENGINE hChainEngine, [Const] [In] CERT_CONTEXT* pCertContext, [In] [Optional] FILETIME* pTime, [In] [Optional] HCERTSTORE hAdditionalStore, [In] CERT_CHAIN_PARA* pChainPara, [In] uint dwFlags, [Reserved] [In] [Out] void* pvReserved, [Out] CERT_CHAIN_CONTEXT** ppChainContext);
void CertFreeCertificateChain([In] CERT_CHAIN_CONTEXT* pChainContext);
CERT_CHAIN_CONTEXT* CertDuplicateCertificateChain([In] CERT_CHAIN_CONTEXT* pChainContext);
CERT_CHAIN_CONTEXT* CertFindChainInStore([In] HCERTSTORE hCertStore, [In] CERT_QUERY_ENCODING_TYPE dwCertEncodingType, [In] CERT_FIND_CHAIN_IN_STORE_FLAGS dwFindFlags, [In] uint dwFindType, [Const] [In] [Optional] void* pvFindPara, [In] [Optional] CERT_CHAIN_CONTEXT* pPrevChainContext);
BOOL CertVerifyCertificateChainPolicy([Const] [In] PSTR pszPolicyOID, [In] CERT_CHAIN_CONTEXT* pChainContext, [In] CERT_CHAIN_POLICY_PARA* pPolicyPara, [In] [Out] CERT_CHAIN_POLICY_STATUS* pPolicyStatus);
BOOL CryptStringToBinaryA([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PSTR pszString, [In] uint cchString, [In] CRYPT_STRING dwFlags, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pbBinary, [In] [Out] uint* pcbBinary, [Out] [Optional] uint* pdwSkip, [Out] [Optional] uint* pdwFlags);
BOOL CryptStringToBinaryW([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PWSTR pszString, [In] uint cchString, [In] CRYPT_STRING dwFlags, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pbBinary, [In] [Out] uint* pcbBinary, [Out] [Optional] uint* pdwSkip, [Out] [Optional] uint* pdwFlags);
BOOL CryptBinaryToStringA([Const] [MemorySize(BytesParamIndex = 1)] [In] byte* pbBinary, [In] uint cbBinary, [In] CRYPT_STRING dwFlags, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR pszString, [In] [Out] uint* pcchString);
BOOL CryptBinaryToStringW([Const] [MemorySize(BytesParamIndex = 1)] [In] byte* pbBinary, [In] uint cbBinary, [In] CRYPT_STRING dwFlags, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR pszString, [In] [Out] uint* pcchString);
HCERTSTORE PFXImportCertStore([In] CRYPT_INTEGER_BLOB* pPFX, [Const] [In] PWSTR szPassword, [In] CRYPT_KEY_FLAGS dwFlags);
BOOL PFXIsPFXBlob([In] CRYPT_INTEGER_BLOB* pPFX);
BOOL PFXVerifyPassword([In] CRYPT_INTEGER_BLOB* pPFX, [Const] [In] PWSTR szPassword, [In] uint dwFlags);
BOOL PFXExportCertStoreEx([In] HCERTSTORE hStore, [In] [Out] CRYPT_INTEGER_BLOB* pPFX, [Const] [In] PWSTR szPassword, [In] void* pvPara, [In] uint dwFlags);
BOOL PFXExportCertStore([In] HCERTSTORE hStore, [In] [Out] CRYPT_INTEGER_BLOB* pPFX, [Const] [In] PWSTR szPassword, [In] uint dwFlags);
void* CertOpenServerOcspResponse([In] CERT_CHAIN_CONTEXT* pChainContext, [In] uint dwFlags, [In] [Optional] CERT_SERVER_OCSP_RESPONSE_OPEN_PARA* pOpenPara);
void CertAddRefServerOcspResponse([In] [Optional] void* hServerOcspResponse);
void CertCloseServerOcspResponse([In] [Optional] void* hServerOcspResponse, [In] uint dwFlags);
CERT_SERVER_OCSP_RESPONSE_CONTEXT* CertGetServerOcspResponseContext([In] void* hServerOcspResponse, [In] uint dwFlags, [Reserved] [In] [Out] void* pvReserved);
void CertAddRefServerOcspResponseContext([In] [Optional] CERT_SERVER_OCSP_RESPONSE_CONTEXT* pServerOcspResponseContext);
void CertFreeServerOcspResponseContext([In] [Optional] CERT_SERVER_OCSP_RESPONSE_CONTEXT* pServerOcspResponseContext);
BOOL CertRetrieveLogoOrBiometricInfo([Const] [In] CERT_CONTEXT* pCertContext, [Const] [In] PSTR lpszLogoOrBiometricType, [In] uint dwRetrievalFlags, [In] uint dwTimeout, [In] uint dwFlags, [Reserved] [In] [Out] void* pvReserved, [Out] byte** ppbData, [Out] uint* pcbData, [Out] [Optional] PWSTR* ppwszMimeType);
BOOL CertSelectCertificateChains([Const] [In] [Optional] Guid* pSelectionContext, [In] uint dwFlags, [In] [Optional] CERT_SELECT_CHAIN_PARA* pChainParameters, [In] uint cCriteria, [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] CERT_SELECT_CRITERIA* rgpCriteria, [In] HCERTSTORE hStore, [Out] uint* pcSelection, [Out] CERT_CHAIN_CONTEXT*** pprgpSelection);
void CertFreeCertificateChainList([In] CERT_CHAIN_CONTEXT** prgpSelection);
BOOL CryptRetrieveTimeStamp([Const] [In] PWSTR wszUrl, [In] uint dwRetrievalFlags, [In] uint dwTimeout, [Const] [In] PSTR pszHashId, [Const] [In] [Optional] CRYPT_TIMESTAMP_PARA* pPara, [Const] [MemorySize(BytesParamIndex = 6)] [In] byte* pbData, [In] uint cbData, [Out] CRYPT_TIMESTAMP_CONTEXT** ppTsContext, [Out] [Optional] CERT_CONTEXT** ppTsSigner, [Out] [Optional] HCERTSTORE* phStore);
BOOL CryptVerifyTimeStampSignature([Const] [MemorySize(BytesParamIndex = 1)] [In] byte* pbTSContentInfo, [In] uint cbTSContentInfo, [Const] [MemorySize(BytesParamIndex = 3)] [In] [Optional] byte* pbData, [In] uint cbData, [In] [Optional] HCERTSTORE hAdditionalStore, [Out] CRYPT_TIMESTAMP_CONTEXT** ppTsContext, [Out] [Optional] CERT_CONTEXT** ppTsSigner, [Out] [Optional] HCERTSTORE* phStore);
BOOL CertIsWeakHash([In] uint dwHashUseType, [Const] [In] PWSTR pwszCNGHashAlgid, [In] uint dwChainFlags, [In] [Optional] CERT_CHAIN_CONTEXT* pSignerChainContext, [In] [Optional] FILETIME* pTimeStamp, [Const] [In] [Optional] PWSTR pwszFileName);
BOOL CryptProtectData([In] CRYPT_INTEGER_BLOB* pDataIn, [Const] [In] [Optional] PWSTR szDataDescr, [In] [Optional] CRYPT_INTEGER_BLOB* pOptionalEntropy, [Reserved] [In] [Out] void* pvReserved, [In] [Optional] CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, [In] uint dwFlags, [Out] CRYPT_INTEGER_BLOB* pDataOut);
BOOL CryptUnprotectData([In] CRYPT_INTEGER_BLOB* pDataIn, [Out] [Optional] PWSTR* ppszDataDescr, [In] [Optional] CRYPT_INTEGER_BLOB* pOptionalEntropy, [Reserved] [In] [Out] void* pvReserved, [In] [Optional] CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, [In] uint dwFlags, [Out] CRYPT_INTEGER_BLOB* pDataOut);
BOOL CryptUpdateProtectedState([In] [Optional] PSID pOldSid, [Const] [In] [Optional] PWSTR pwszOldPassword, [In] uint dwFlags, [Out] [Optional] uint* pdwSuccessCount, [Out] [Optional] uint* pdwFailureCount);
BOOL CryptProtectMemory([In] [Out] void* pDataIn, [In] uint cbDataIn, [In] uint dwFlags);
BOOL CryptUnprotectMemory([In] [Out] void* pDataIn, [In] uint cbDataIn, [In] uint dwFlags);
BOOL CryptSIPLoad([Const] [In] Guid* pgSubject, [In] uint dwFlags, [In] [Out] SIP_DISPATCH_INFO* pSipDispatch);
BOOL CryptSIPRetrieveSubjectGuid([Const] [In] PWSTR FileName, [In] HANDLE hFileIn, [In] [Out] Guid* pgSubject);
BOOL CryptSIPRetrieveSubjectGuidForCatalogFile([Const] [In] PWSTR FileName, [In] HANDLE hFileIn, [In] [Out] Guid* pgSubject);
BOOL CryptSIPAddProvider([In] [Out] SIP_ADD_NEWPROVIDER* psNewProv);
BOOL CryptSIPRemoveProvider([In] [Out] Guid* pgProv);
