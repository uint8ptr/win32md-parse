HRESULT HcnEnumerateNetworks([Const] [In] PWSTR Query, [Out] PWSTR* Networks, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnCreateNetwork([Const] [In] Guid* Id, [Const] [In] PWSTR Settings, [Out] void** Network, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnOpenNetwork([Const] [In] Guid* Id, [Out] void** Network, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnModifyNetwork([In] void* Network, [Const] [In] PWSTR Settings, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnQueryNetworkProperties([In] void* Network, [Const] [In] PWSTR Query, [Out] PWSTR* Properties, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnDeleteNetwork([Const] [In] Guid* Id, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnCloseNetwork([In] void* Network);
HRESULT HcnEnumerateNamespaces([Const] [In] PWSTR Query, [Out] PWSTR* Namespaces, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnCreateNamespace([Const] [In] Guid* Id, [Const] [In] PWSTR Settings, [Out] void** Namespace, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnOpenNamespace([Const] [In] Guid* Id, [Out] void** Namespace, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnModifyNamespace([In] void* Namespace, [Const] [In] PWSTR Settings, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnQueryNamespaceProperties([In] void* Namespace, [Const] [In] PWSTR Query, [Out] PWSTR* Properties, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnDeleteNamespace([Const] [In] Guid* Id, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnCloseNamespace([In] void* Namespace);
HRESULT HcnEnumerateEndpoints([Const] [In] PWSTR Query, [Out] PWSTR* Endpoints, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnCreateEndpoint([In] void* Network, [Const] [In] Guid* Id, [Const] [In] PWSTR Settings, [Out] void** Endpoint, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnOpenEndpoint([Const] [In] Guid* Id, [Out] void** Endpoint, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnModifyEndpoint([In] void* Endpoint, [Const] [In] PWSTR Settings, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnQueryEndpointProperties([In] void* Endpoint, [Const] [In] PWSTR Query, [Out] PWSTR* Properties, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnDeleteEndpoint([Const] [In] Guid* Id, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnCloseEndpoint([In] void* Endpoint);
HRESULT HcnEnumerateLoadBalancers([Const] [In] PWSTR Query, [Out] PWSTR* LoadBalancer, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnCreateLoadBalancer([Const] [In] Guid* Id, [Const] [In] PWSTR Settings, [Out] void** LoadBalancer, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnOpenLoadBalancer([Const] [In] Guid* Id, [Out] void** LoadBalancer, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnModifyLoadBalancer([In] void* LoadBalancer, [Const] [In] PWSTR Settings, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnQueryLoadBalancerProperties([In] void* LoadBalancer, [Const] [In] PWSTR Query, [Out] PWSTR* Properties, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnDeleteLoadBalancer([Const] [In] Guid* Id, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnCloseLoadBalancer([In] void* LoadBalancer);
HRESULT HcnRegisterServiceCallback([In] HCN_NOTIFICATION_CALLBACK Callback, [In] void* Context, [Out] void** CallbackHandle);
HRESULT HcnUnregisterServiceCallback([In] void* CallbackHandle);
HRESULT HcnRegisterGuestNetworkServiceCallback([In] void* GuestNetworkService, [In] HCN_NOTIFICATION_CALLBACK Callback, [In] void* Context, [Out] void** CallbackHandle);
HRESULT HcnUnregisterGuestNetworkServiceCallback([In] void* CallbackHandle);
HRESULT HcnCreateGuestNetworkService([Const] [In] Guid* Id, [Const] [In] PWSTR Settings, [Out] void** GuestNetworkService, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnCloseGuestNetworkService([In] void* GuestNetworkService);
HRESULT HcnModifyGuestNetworkService([In] void* GuestNetworkService, [Const] [In] PWSTR Settings, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnDeleteGuestNetworkService([Const] [In] Guid* Id, [Out] [Optional] PWSTR* ErrorRecord);
HRESULT HcnReserveGuestNetworkServicePort([In] void* GuestNetworkService, [In] HCN_PORT_PROTOCOL Protocol, [In] HCN_PORT_ACCESS Access, [In] ushort Port, [Out] HANDLE* PortReservationHandle);
HRESULT HcnReserveGuestNetworkServicePortRange([In] void* GuestNetworkService, [In] ushort PortCount, [Out] HCN_PORT_RANGE_RESERVATION* PortRangeReservation, [Out] HANDLE* PortReservationHandle);
HRESULT HcnReleaseGuestNetworkServicePortReservationHandle([In] HANDLE PortReservationHandle);
HRESULT HcnEnumerateGuestNetworkPortReservations([Out] uint* ReturnCount, [MemorySize(BytesParamIndex = 0)] [Out] HCN_PORT_RANGE_ENTRY** PortEntries);
void HcnFreeGuestNetworkPortReservations([In] [Out] [Optional] HCN_PORT_RANGE_ENTRY* PortEntries);
