int GetDisplayConfigBufferSizes([In] uint flags, [Out] uint* numPathArrayElements, [Out] uint* numModeInfoArrayElements);
int SetDisplayConfig([In] uint numPathArrayElements, [NativeArrayInfo(CountParamIndex = 0)] [In] [Optional] DISPLAYCONFIG_PATH_INFO* pathArray, [In] uint numModeInfoArrayElements, [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] DISPLAYCONFIG_MODE_INFO* modeInfoArray, [In] uint flags);
int QueryDisplayConfig([In] uint flags, [In] [Out] uint* numPathArrayElements, [NativeArrayInfo(CountParamIndex = 1)] [Out] DISPLAYCONFIG_PATH_INFO* pathArray, [In] [Out] uint* numModeInfoArrayElements, [NativeArrayInfo(CountParamIndex = 3)] [Out] DISPLAYCONFIG_MODE_INFO* modeInfoArray, [Out] DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);
int DisplayConfigGetDeviceInfo([In] [Out] DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);
int DisplayConfigSetDeviceInfo([In] DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);
BOOL GetAutoRotationState([Out] AR_STATE* pState);
BOOL GetDisplayAutoRotationPreferences([Out] ORIENTATION_PREFERENCE* pOrientation);
BOOL SetDisplayAutoRotationPreferences([In] ORIENTATION_PREFERENCE orientation);
void SetLastErrorEx([In] WIN32_ERROR dwErrCode, [In] uint dwType);
BOOL DrawEdge([In] HDC hdc, [In] [Out] RECT* qrc, [In] DRAWEDGE_FLAGS edge, [In] DRAW_EDGE_FLAGS grfFlags);
BOOL DrawFrameControl([In] HDC param0, [In] [Out] RECT* param1, [In] DFC_TYPE param2, [In] DFCS_STATE param3);
BOOL DrawCaption([In] HWND hwnd, [In] HDC hdc, [Const] [In] RECT* lprect, [In] DRAW_CAPTION_FLAGS flags);
BOOL DrawAnimatedRects([In] [Optional] HWND hwnd, [In] int idAni, [Const] [In] RECT* lprcFrom, [Const] [In] RECT* lprcTo);
int DrawTextA([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] PSTR lpchText, [In] int cchText, [In] [Out] RECT* lprc, [In] DRAW_TEXT_FORMAT format);
int DrawTextW([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] PWSTR lpchText, [In] int cchText, [In] [Out] RECT* lprc, [In] DRAW_TEXT_FORMAT format);
int DrawTextExA([In] HDC hdc, [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] PSTR lpchText, [In] int cchText, [In] [Out] RECT* lprc, [In] DRAW_TEXT_FORMAT format, [In] [Optional] DRAWTEXTPARAMS* lpdtp);
int DrawTextExW([In] HDC hdc, [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] PWSTR lpchText, [In] int cchText, [In] [Out] RECT* lprc, [In] DRAW_TEXT_FORMAT format, [In] [Optional] DRAWTEXTPARAMS* lpdtp);
BOOL GrayStringA([In] HDC hDC, [In] [Optional] HBRUSH hBrush, [In] [Optional] GRAYSTRINGPROC lpOutputFunc, [In] LPARAM lpData, [In] int nCount, [In] int X, [In] int Y, [In] int nWidth, [In] int nHeight);
BOOL GrayStringW([In] HDC hDC, [In] [Optional] HBRUSH hBrush, [In] [Optional] GRAYSTRINGPROC lpOutputFunc, [In] LPARAM lpData, [In] int nCount, [In] int X, [In] int Y, [In] int nWidth, [In] int nHeight);
BOOL DrawStateA([In] HDC hdc, [In] [Optional] HBRUSH hbrFore, [In] [Optional] DRAWSTATEPROC qfnCallBack, [In] LPARAM lData, [In] WPARAM wData, [In] int x, [In] int y, [In] int cx, [In] int cy, [In] DRAWSTATE_FLAGS uFlags);
BOOL DrawStateW([In] HDC hdc, [In] [Optional] HBRUSH hbrFore, [In] [Optional] DRAWSTATEPROC qfnCallBack, [In] LPARAM lData, [In] WPARAM wData, [In] int x, [In] int y, [In] int cx, [In] int cy, [In] DRAWSTATE_FLAGS uFlags);
int TabbedTextOutA([In] HDC hdc, [In] int x, [In] int y, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] PSTR lpString, [In] int chCount, [In] int nTabPositions, [Const] [NativeArrayInfo(CountParamIndex = 5)] [In] [Optional] int* lpnTabStopPositions, [In] int nTabOrigin);
int TabbedTextOutW([In] HDC hdc, [In] int x, [In] int y, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] PWSTR lpString, [In] int chCount, [In] int nTabPositions, [Const] [NativeArrayInfo(CountParamIndex = 5)] [In] [Optional] int* lpnTabStopPositions, [In] int nTabOrigin);
uint GetTabbedTextExtentA([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PSTR lpString, [In] int chCount, [In] int nTabPositions, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] int* lpnTabStopPositions);
uint GetTabbedTextExtentW([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR lpString, [In] int chCount, [In] int nTabPositions, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] int* lpnTabStopPositions);
BOOL UpdateWindow([In] HWND hWnd);
BOOL PaintDesktop([In] HDC hdc);
HWND WindowFromDC([In] HDC hDC);
HDC GetDC([In] [Optional] HWND hWnd);
HDC GetDCEx([In] [Optional] HWND hWnd, [In] [Optional] HRGN hrgnClip, [In] GET_DCX_FLAGS flags);
HDC GetWindowDC([In] [Optional] HWND hWnd);
int ReleaseDC([In] [Optional] HWND hWnd, [In] HDC hDC);
HDC BeginPaint([In] HWND hWnd, [Out] PAINTSTRUCT* lpPaint);
BOOL EndPaint([In] HWND hWnd, [Const] [In] PAINTSTRUCT* lpPaint);
BOOL GetUpdateRect([In] HWND hWnd, [Out] [Optional] RECT* lpRect, [In] BOOL bErase);
GDI_REGION_TYPE GetUpdateRgn([In] HWND hWnd, [In] HRGN hRgn, [In] BOOL bErase);
int SetWindowRgn([In] HWND hWnd, [In] [Optional] HRGN hRgn, [In] BOOL bRedraw);
GDI_REGION_TYPE GetWindowRgn([In] HWND hWnd, [In] HRGN hRgn);
GDI_REGION_TYPE GetWindowRgnBox([In] HWND hWnd, [Out] RECT* lprc);
int ExcludeUpdateRgn([In] HDC hDC, [In] HWND hWnd);
BOOL InvalidateRect([In] [Optional] HWND hWnd, [Const] [In] [Optional] RECT* lpRect, [In] BOOL bErase);
BOOL ValidateRect([In] [Optional] HWND hWnd, [Const] [In] [Optional] RECT* lpRect);
BOOL InvalidateRgn([In] HWND hWnd, [In] [Optional] HRGN hRgn, [In] BOOL bErase);
BOOL ValidateRgn([In] HWND hWnd, [In] [Optional] HRGN hRgn);
BOOL RedrawWindow([In] [Optional] HWND hWnd, [Const] [In] [Optional] RECT* lprcUpdate, [In] [Optional] HRGN hrgnUpdate, [In] REDRAW_WINDOW_FLAGS flags);
BOOL LockWindowUpdate([In] [Optional] HWND hWndLock);
BOOL ClientToScreen([In] HWND hWnd, [In] [Out] POINT* lpPoint);
BOOL ScreenToClient([In] HWND hWnd, [In] [Out] POINT* lpPoint);
int MapWindowPoints([In] [Optional] HWND hWndFrom, [In] [Optional] HWND hWndTo, [NativeArrayInfo(CountParamIndex = 3)] [In] [Out] POINT* lpPoints, [In] uint cPoints);
uint GetSysColor([In] SYS_COLOR_INDEX nIndex);
HBRUSH GetSysColorBrush([In] SYS_COLOR_INDEX nIndex);
BOOL SetSysColors([In] int cElements, [Const] [NativeArrayInfo(CountParamIndex = 0)] [In] int* lpaElements, [Const] [NativeArrayInfo(CountParamIndex = 0)] [In] COLORREF* lpaRgbValues);
BOOL DrawFocusRect([In] HDC hDC, [Const] [In] RECT* lprc);
int FillRect([In] HDC hDC, [Const] [In] RECT* lprc, [In] HBRUSH hbr);
int FrameRect([In] HDC hDC, [Const] [In] RECT* lprc, [In] HBRUSH hbr);
BOOL InvertRect([In] HDC hDC, [Const] [In] RECT* lprc);
BOOL SetRect([Out] RECT* lprc, [In] int xLeft, [In] int yTop, [In] int xRight, [In] int yBottom);
BOOL SetRectEmpty([Out] RECT* lprc);
BOOL CopyRect([Out] RECT* lprcDst, [Const] [In] RECT* lprcSrc);
BOOL InflateRect([In] [Out] RECT* lprc, [In] int dx, [In] int dy);
BOOL IntersectRect([Out] RECT* lprcDst, [Const] [In] RECT* lprcSrc1, [Const] [In] RECT* lprcSrc2);
BOOL UnionRect([Out] RECT* lprcDst, [Const] [In] RECT* lprcSrc1, [Const] [In] RECT* lprcSrc2);
BOOL SubtractRect([Out] RECT* lprcDst, [Const] [In] RECT* lprcSrc1, [Const] [In] RECT* lprcSrc2);
BOOL OffsetRect([In] [Out] RECT* lprc, [In] int dx, [In] int dy);
BOOL IsRectEmpty([Const] [In] RECT* lprc);
BOOL EqualRect([Const] [In] RECT* lprc1, [Const] [In] RECT* lprc2);
BOOL PtInRect([Const] [In] RECT* lprc, [In] POINT pt);
HBITMAP LoadBitmapA([In] [Optional] HINSTANCE hInstance, [Const] [In] PSTR lpBitmapName);
HBITMAP LoadBitmapW([In] [Optional] HINSTANCE hInstance, [Const] [In] PWSTR lpBitmapName);
DISP_CHANGE ChangeDisplaySettingsA([In] [Optional] DEVMODEA* lpDevMode, [In] CDS_TYPE dwFlags);
DISP_CHANGE ChangeDisplaySettingsW([In] [Optional] DEVMODEW* lpDevMode, [In] CDS_TYPE dwFlags);
DISP_CHANGE ChangeDisplaySettingsExA([Const] [In] [Optional] PSTR lpszDeviceName, [In] [Optional] DEVMODEA* lpDevMode, [Reserved] [In] HWND hwnd, [In] CDS_TYPE dwflags, [In] [Optional] void* lParam);
DISP_CHANGE ChangeDisplaySettingsExW([Const] [In] [Optional] PWSTR lpszDeviceName, [In] [Optional] DEVMODEW* lpDevMode, [Reserved] [In] HWND hwnd, [In] CDS_TYPE dwflags, [In] [Optional] void* lParam);
BOOL EnumDisplaySettingsA([Const] [In] [Optional] PSTR lpszDeviceName, [In] ENUM_DISPLAY_SETTINGS_MODE iModeNum, [In] [Out] DEVMODEA* lpDevMode);
BOOL EnumDisplaySettingsW([Const] [In] [Optional] PWSTR lpszDeviceName, [In] ENUM_DISPLAY_SETTINGS_MODE iModeNum, [In] [Out] DEVMODEW* lpDevMode);
BOOL EnumDisplaySettingsExA([Const] [In] [Optional] PSTR lpszDeviceName, [In] ENUM_DISPLAY_SETTINGS_MODE iModeNum, [In] [Out] DEVMODEA* lpDevMode, [In] uint dwFlags);
BOOL EnumDisplaySettingsExW([Const] [In] [Optional] PWSTR lpszDeviceName, [In] ENUM_DISPLAY_SETTINGS_MODE iModeNum, [In] [Out] DEVMODEW* lpDevMode, [In] uint dwFlags);
BOOL EnumDisplayDevicesA([Const] [In] [Optional] PSTR lpDevice, [In] uint iDevNum, [In] [Out] DISPLAY_DEVICEA* lpDisplayDevice, [In] uint dwFlags);
BOOL EnumDisplayDevicesW([Const] [In] [Optional] PWSTR lpDevice, [In] uint iDevNum, [In] [Out] DISPLAY_DEVICEW* lpDisplayDevice, [In] uint dwFlags);
HMONITOR MonitorFromPoint([In] POINT pt, [In] MONITOR_FROM_FLAGS dwFlags);
HMONITOR MonitorFromRect([In] RECT* lprc, [In] MONITOR_FROM_FLAGS dwFlags);
HMONITOR MonitorFromWindow([In] HWND hwnd, [In] MONITOR_FROM_FLAGS dwFlags);
BOOL GetMonitorInfoA([In] HMONITOR hMonitor, [In] [Out] MONITORINFO* lpmi);
BOOL GetMonitorInfoW([In] HMONITOR hMonitor, [In] [Out] MONITORINFO* lpmi);
BOOL EnumDisplayMonitors([In] [Optional] HDC hdc, [In] [Optional] RECT* lprcClip, [In] MONITORENUMPROC lpfnEnum, [In] LPARAM dwData);
BOOL SetUserObjectSecurity([In] HANDLE hObj, [In] OBJECT_SECURITY_INFORMATION* pSIRequested, [In] PSECURITY_DESCRIPTOR pSID);
BOOL GetUserObjectSecurity([In] HANDLE hObj, [In] uint* pSIRequested, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] PSECURITY_DESCRIPTOR pSID, [In] uint nLength, [Out] uint* lpnLengthNeeded);
BOOL PrintWindow([In] HWND hwnd, [In] HDC hdcBlt, [In] PRINT_WINDOW_FLAGS nFlags);
BOOL DdeSetQualityOfService([In] HWND hwndClient, [Const] [In] SECURITY_QUALITY_OF_SERVICE* pqosNew, [In] [Out] SECURITY_QUALITY_OF_SERVICE* pqosPrev);
BOOL ImpersonateDdeClientWindow([In] HWND hWndClient, [In] HWND hWndServer);
LPARAM PackDDElParam([In] uint msg, [In] nuint uiLo, [In] nuint uiHi);
BOOL UnpackDDElParam([In] uint msg, [In] LPARAM lParam, [Out] nuint* puiLo, [Out] nuint* puiHi);
BOOL FreeDDElParam([In] uint msg, [In] LPARAM lParam);
LPARAM ReuseDDElParam([In] LPARAM lParam, [In] uint msgIn, [In] uint msgOut, [In] nuint uiLo, [In] nuint uiHi);
uint DdeInitializeA([In] [Out] uint* pidInst, [In] PFNCALLBACK pfnCallback, [In] DDE_INITIALIZE_COMMAND afCmd, [Reserved] [In] uint ulRes);
uint DdeInitializeW([In] [Out] uint* pidInst, [In] PFNCALLBACK pfnCallback, [In] DDE_INITIALIZE_COMMAND afCmd, [Reserved] [In] uint ulRes);
BOOL DdeUninitialize([In] uint idInst);
HCONVLIST DdeConnectList([In] uint idInst, [In] HSZ hszService, [In] HSZ hszTopic, [In] HCONVLIST hConvList, [In] [Optional] CONVCONTEXT* pCC);
HCONV DdeQueryNextServer([In] HCONVLIST hConvList, [In] HCONV hConvPrev);
BOOL DdeDisconnectList([In] HCONVLIST hConvList);
HCONV DdeConnect([In] uint idInst, [In] HSZ hszService, [In] HSZ hszTopic, [In] [Optional] CONVCONTEXT* pCC);
BOOL DdeDisconnect([In] HCONV hConv);
HCONV DdeReconnect([In] HCONV hConv);
uint DdeQueryConvInfo([In] HCONV hConv, [In] uint idTransaction, [In] [Out] CONVINFO* pConvInfo);
BOOL DdeSetUserHandle([In] HCONV hConv, [In] uint id, [In] nuint hUser);
BOOL DdeAbandonTransaction([In] uint idInst, [In] HCONV hConv, [In] uint idTransaction);
BOOL DdePostAdvise([In] uint idInst, [In] HSZ hszTopic, [In] HSZ hszItem);
BOOL DdeEnableCallback([In] uint idInst, [In] HCONV hConv, [In] DDE_ENABLE_CALLBACK_CMD wCmd);
BOOL DdeImpersonateClient([In] HCONV hConv);
HDDEDATA DdeNameService([In] uint idInst, [In] [Optional] HSZ hsz1, [In] [Optional] HSZ hsz2, [In] DDE_NAME_SERVICE_CMD afCmd);
HDDEDATA DdeClientTransaction([In] [Optional] byte* pData, [In] uint cbData, [In] HCONV hConv, [In] [Optional] HSZ hszItem, [In] uint wFmt, [In] DDE_CLIENT_TRANSACTION_TYPE wType, [In] uint dwTimeout, [Out] [Optional] uint* pdwResult);
HDDEDATA DdeCreateDataHandle([In] uint idInst, [MemorySize(BytesParamIndex = 2)] [In] [Optional] byte* pSrc, [In] uint cb, [In] uint cbOff, [In] [Optional] HSZ hszItem, [In] uint wFmt, [In] uint afCmd);
HDDEDATA DdeAddData([In] HDDEDATA hData, [MemorySize(BytesParamIndex = 2)] [In] byte* pSrc, [In] uint cb, [In] uint cbOff);
uint DdeGetData([In] HDDEDATA hData, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] byte* pDst, [In] uint cbMax, [In] uint cbOff);
byte* DdeAccessData([In] HDDEDATA hData, [Out] [Optional] uint* pcbDataSize);
BOOL DdeUnaccessData([In] HDDEDATA hData);
BOOL DdeFreeDataHandle([In] HDDEDATA hData);
uint DdeGetLastError([In] uint idInst);
HSZ DdeCreateStringHandleA([In] uint idInst, [Const] [In] PSTR psz, [In] int iCodePage);
HSZ DdeCreateStringHandleW([In] uint idInst, [Const] [In] PWSTR psz, [In] int iCodePage);
uint DdeQueryStringA([In] uint idInst, [In] HSZ hsz, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR psz, [In] uint cchMax, [In] int iCodePage);
uint DdeQueryStringW([In] uint idInst, [In] HSZ hsz, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR psz, [In] uint cchMax, [In] int iCodePage);
BOOL DdeFreeStringHandle([In] uint idInst, [In] HSZ hsz);
BOOL DdeKeepStringHandle([In] uint idInst, [In] HSZ hsz);
int DdeCmpStringHandles([In] HSZ hsz1, [In] HSZ hsz2);
BOOL OpenClipboard([In] [Optional] HWND hWndNewOwner);
BOOL CloseClipboard();
uint GetClipboardSequenceNumber();
HWND GetClipboardOwner();
HWND SetClipboardViewer([In] HWND hWndNewViewer);
HWND GetClipboardViewer();
BOOL ChangeClipboardChain([In] HWND hWndRemove, [In] HWND hWndNewNext);
HANDLE SetClipboardData([In] uint uFormat, [In] [Optional] HANDLE hMem);
HANDLE GetClipboardData([In] uint uFormat);
uint RegisterClipboardFormatA([Const] [In] PSTR lpszFormat);
uint RegisterClipboardFormatW([Const] [In] PWSTR lpszFormat);
int CountClipboardFormats();
uint EnumClipboardFormats([In] uint format);
int GetClipboardFormatNameA([In] uint format, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpszFormatName, [In] int cchMaxCount);
int GetClipboardFormatNameW([In] uint format, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpszFormatName, [In] int cchMaxCount);
BOOL EmptyClipboard();
BOOL IsClipboardFormatAvailable([In] uint format);
int GetPriorityClipboardFormat([NativeArrayInfo(CountParamIndex = 1)] [In] uint* paFormatPriorityList, [In] int cFormats);
HWND GetOpenClipboardWindow();
BOOL AddClipboardFormatListener([In] HWND hwnd);
BOOL RemoveClipboardFormatListener([In] HWND hwnd);
BOOL GetUpdatedClipboardFormats([NativeArrayInfo(CountParamIndex = 1)] [Out] uint* lpuiFormats, [In] uint cFormats, [Out] uint* pcFormatsOut);
BOOL MessageBeep([In] MESSAGEBOX_STYLE uType);
HPOWERNOTIFY RegisterPowerSettingNotification([In] HANDLE hRecipient, [Const] [In] Guid* PowerSettingGuid, [In] uint Flags);
BOOL UnregisterPowerSettingNotification([In] HPOWERNOTIFY Handle);
HPOWERNOTIFY RegisterSuspendResumeNotification([In] HANDLE hRecipient, [In] uint Flags);
BOOL UnregisterSuspendResumeNotification([In] HPOWERNOTIFY Handle);
BOOL UserHandleGrantAccess([In] HANDLE hUserHandle, [In] HANDLE hJob, [In] BOOL bGrant);
BOOL ExitWindowsEx([In] EXIT_WINDOWS_FLAGS uFlags, [In] SHUTDOWN_REASON dwReason);
BOOL LockWorkStation();
BOOL ShutdownBlockReasonCreate([In] HWND hWnd, [Const] [In] PWSTR pwszReason);
BOOL ShutdownBlockReasonQuery([In] HWND hWnd, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR pwszBuff, [In] [Out] uint* pcchBuff);
BOOL ShutdownBlockReasonDestroy([In] HWND hWnd);
HDESK CreateDesktopA([Const] [In] PSTR lpszDesktop, [Const] [Reserved] [In] PSTR lpszDevice, [Reserved] [In] [Out] DEVMODEA* pDevmode, [In] DESKTOP_CONTROL_FLAGS dwFlags, [In] uint dwDesiredAccess, [In] [Optional] SECURITY_ATTRIBUTES* lpsa);
HDESK CreateDesktopW([Const] [In] PWSTR lpszDesktop, [Const] [Reserved] [In] PWSTR lpszDevice, [Reserved] [In] [Out] DEVMODEW* pDevmode, [In] DESKTOP_CONTROL_FLAGS dwFlags, [In] uint dwDesiredAccess, [In] [Optional] SECURITY_ATTRIBUTES* lpsa);
HDESK CreateDesktopExA([Const] [In] PSTR lpszDesktop, [Const] [Reserved] [In] PSTR lpszDevice, [Reserved] [In] [Out] DEVMODEA* pDevmode, [In] DESKTOP_CONTROL_FLAGS dwFlags, [In] uint dwDesiredAccess, [In] [Optional] SECURITY_ATTRIBUTES* lpsa, [In] uint ulHeapSize, [Reserved] [In] [Out] void* pvoid);
HDESK CreateDesktopExW([Const] [In] PWSTR lpszDesktop, [Const] [Reserved] [In] PWSTR lpszDevice, [Reserved] [In] [Out] DEVMODEW* pDevmode, [In] DESKTOP_CONTROL_FLAGS dwFlags, [In] uint dwDesiredAccess, [In] [Optional] SECURITY_ATTRIBUTES* lpsa, [In] uint ulHeapSize, [Reserved] [In] [Out] void* pvoid);
HDESK OpenDesktopA([Const] [In] PSTR lpszDesktop, [In] DESKTOP_CONTROL_FLAGS dwFlags, [In] BOOL fInherit, [In] uint dwDesiredAccess);
HDESK OpenDesktopW([Const] [In] PWSTR lpszDesktop, [In] DESKTOP_CONTROL_FLAGS dwFlags, [In] BOOL fInherit, [In] uint dwDesiredAccess);
HDESK OpenInputDesktop([In] DESKTOP_CONTROL_FLAGS dwFlags, [In] BOOL fInherit, [In] uint dwDesiredAccess);
BOOL EnumDesktopsA([In] [Optional] HWINSTA hwinsta, [In] DESKTOPENUMPROCA lpEnumFunc, [In] LPARAM lParam);
BOOL EnumDesktopsW([In] [Optional] HWINSTA hwinsta, [In] DESKTOPENUMPROCW lpEnumFunc, [In] LPARAM lParam);
BOOL EnumDesktopWindows([In] [Optional] HDESK hDesktop, [In] WNDENUMPROC lpfn, [In] LPARAM lParam);
BOOL SwitchDesktop([In] HDESK hDesktop);
BOOL SetThreadDesktop([In] HDESK hDesktop);
BOOL CloseDesktop([In] HDESK hDesktop);
HDESK GetThreadDesktop([In] uint dwThreadId);
HWINSTA CreateWindowStationA([Const] [In] [Optional] PSTR lpwinsta, [In] uint dwFlags, [In] uint dwDesiredAccess, [In] [Optional] SECURITY_ATTRIBUTES* lpsa);
HWINSTA CreateWindowStationW([Const] [In] [Optional] PWSTR lpwinsta, [In] uint dwFlags, [In] uint dwDesiredAccess, [In] [Optional] SECURITY_ATTRIBUTES* lpsa);
HWINSTA OpenWindowStationA([Const] [In] PSTR lpszWinSta, [In] BOOL fInherit, [In] uint dwDesiredAccess);
HWINSTA OpenWindowStationW([Const] [In] PWSTR lpszWinSta, [In] BOOL fInherit, [In] uint dwDesiredAccess);
BOOL EnumWindowStationsA([In] WINSTAENUMPROCA lpEnumFunc, [In] LPARAM lParam);
BOOL EnumWindowStationsW([In] WINSTAENUMPROCW lpEnumFunc, [In] LPARAM lParam);
BOOL CloseWindowStation([In] HWINSTA hWinSta);
BOOL SetProcessWindowStation([In] HWINSTA hWinSta);
HWINSTA GetProcessWindowStation();
BOOL GetUserObjectInformationA([In] HANDLE hObj, [In] USER_OBJECT_INFORMATION_INDEX nIndex, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* pvInfo, [In] uint nLength, [Out] [Optional] uint* lpnLengthNeeded);
BOOL GetUserObjectInformationW([In] HANDLE hObj, [In] USER_OBJECT_INFORMATION_INDEX nIndex, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* pvInfo, [In] uint nLength, [Out] [Optional] uint* lpnLengthNeeded);
BOOL SetUserObjectInformationA([In] HANDLE hObj, [In] int nIndex, [MemorySize(BytesParamIndex = 3)] [In] void* pvInfo, [In] uint nLength);
BOOL SetUserObjectInformationW([In] HANDLE hObj, [In] int nIndex, [MemorySize(BytesParamIndex = 3)] [In] void* pvInfo, [In] uint nLength);
int BroadcastSystemMessageExA([In] BROADCAST_SYSTEM_MESSAGE_FLAGS flags, [In] [Out] [Optional] BROADCAST_SYSTEM_MESSAGE_INFO* lpInfo, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam, [Out] [Optional] BSMINFO* pbsmInfo);
int BroadcastSystemMessageExW([In] BROADCAST_SYSTEM_MESSAGE_FLAGS flags, [In] [Out] [Optional] BROADCAST_SYSTEM_MESSAGE_INFO* lpInfo, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam, [Out] [Optional] BSMINFO* pbsmInfo);
int BroadcastSystemMessageA([In] uint flags, [In] [Out] [Optional] uint* lpInfo, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
int BroadcastSystemMessageW([In] BROADCAST_SYSTEM_MESSAGE_FLAGS flags, [In] [Out] [Optional] BROADCAST_SYSTEM_MESSAGE_INFO* lpInfo, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
BOOL UnregisterDeviceNotification([In] void* Handle);
BOOL AttachThreadInput([In] uint idAttach, [In] uint idAttachTo, [In] BOOL fAttach);
uint WaitForInputIdle([In] HANDLE hProcess, [In] uint dwMilliseconds);
uint GetGuiResources([In] HANDLE hProcess, [In] GET_GUI_RESOURCES_FLAGS uiFlags);
BOOL IsImmersiveProcess([In] HANDLE hProcess);
BOOL SetProcessRestrictionExemption([In] BOOL fEnableExemption);
LRESULT SendIMEMessageExA([In] HWND param0, [In] LPARAM param1);
LRESULT SendIMEMessageExW([In] HWND param0, [In] LPARAM param1);
BOOL IMPGetIMEA([In] HWND param0, [In] [Out] IMEPROA* param1);
BOOL IMPGetIMEW([In] HWND param0, [In] [Out] IMEPROW* param1);
BOOL IMPQueryIMEA([In] [Out] IMEPROA* param0);
BOOL IMPQueryIMEW([In] [Out] IMEPROW* param0);
BOOL IMPSetIMEA([In] HWND param0, [In] [Out] IMEPROA* param1);
BOOL IMPSetIMEW([In] HWND param0, [In] [Out] IMEPROW* param1);
uint WINNLSGetIMEHotkey([In] HWND param0);
BOOL WINNLSEnableIME([In] HWND param0, [In] BOOL param1);
BOOL WINNLSGetEnableStatus([In] HWND param0);
BOOL RegisterPointerInputTarget([In] HWND hwnd, [In] POINTER_INPUT_TYPE pointerType);
BOOL UnregisterPointerInputTarget([In] HWND hwnd, [In] POINTER_INPUT_TYPE pointerType);
BOOL RegisterPointerInputTargetEx([In] HWND hwnd, [In] POINTER_INPUT_TYPE pointerType, [In] BOOL fObserve);
BOOL UnregisterPointerInputTargetEx([In] HWND hwnd, [In] POINTER_INPUT_TYPE pointerType);
void NotifyWinEvent([In] uint event, [In] HWND hwnd, [In] int idObject, [In] int idChild);
HWINEVENTHOOK SetWinEventHook([In] uint eventMin, [In] uint eventMax, [In] [Optional] HINSTANCE hmodWinEventProc, [In] WINEVENTPROC pfnWinEventProc, [In] uint idProcess, [In] uint idThread, [In] uint dwFlags);
BOOL IsWinEventHookInstalled([In] uint event);
BOOL UnhookWinEvent([In] HWINEVENTHOOK hWinEventHook);
BOOL CheckDlgButton([In] HWND hDlg, [In] int nIDButton, [In] DLG_BUTTON_CHECK_STATE uCheck);
BOOL CheckRadioButton([In] HWND hDlg, [In] int nIDFirstButton, [In] int nIDLastButton, [In] int nIDCheckButton);
uint IsDlgButtonChecked([In] HWND hDlg, [In] int nIDButton);
BOOL IsCharLowerW([In] wchar ch);
HSYNTHETICPOINTERDEVICE CreateSyntheticPointerDevice([In] POINTER_INPUT_TYPE pointerType, [In] uint maxCount, [In] POINTER_FEEDBACK_MODE mode);
void DestroySyntheticPointerDevice([In] HSYNTHETICPOINTERDEVICE device);
BOOL RegisterTouchHitTestingWindow([In] HWND hwnd, [In] uint value);
BOOL EvaluateProximityToRect([Const] [In] RECT* controlBoundingBox, [Const] [In] TOUCH_HIT_TESTING_INPUT* pHitTestingInput, [Out] TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);
BOOL EvaluateProximityToPolygon([In] uint numVertices, [Const] [NativeArrayInfo(CountParamIndex = 0)] [In] POINT* controlPolygon, [Const] [In] TOUCH_HIT_TESTING_INPUT* pHitTestingInput, [Out] TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);
LRESULT PackTouchHitTestingProximityEvaluation([Const] [In] TOUCH_HIT_TESTING_INPUT* pHitTestingInput, [Const] [In] TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);
BOOL GetWindowFeedbackSetting([In] HWND hwnd, [In] FEEDBACK_TYPE feedback, [In] uint dwFlags, [In] [Out] uint* pSize, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* config);
BOOL SetWindowFeedbackSetting([In] HWND hwnd, [In] FEEDBACK_TYPE feedback, [In] uint dwFlags, [In] uint size, [Const] [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* configuration);
int SetScrollPos([In] HWND hWnd, [In] SCROLLBAR_CONSTANTS nBar, [In] int nPos, [In] BOOL bRedraw);
BOOL SetScrollRange([In] HWND hWnd, [In] SCROLLBAR_CONSTANTS nBar, [In] int nMinPos, [In] int nMaxPos, [In] BOOL bRedraw);
BOOL ShowScrollBar([In] HWND hWnd, [In] SCROLLBAR_CONSTANTS wBar, [In] BOOL bShow);
BOOL EnableScrollBar([In] HWND hWnd, [In] SCROLLBAR_CONSTANTS wSBflags, [In] ENABLE_SCROLL_BAR_ARROWS wArrows);
int DlgDirListA([In] HWND hDlg, [In] [Out] PSTR lpPathSpec, [In] int nIDListBox, [In] int nIDStaticPath, [In] DLG_DIR_LIST_FILE_TYPE uFileType);
int DlgDirListW([In] HWND hDlg, [In] [Out] PWSTR lpPathSpec, [In] int nIDListBox, [In] int nIDStaticPath, [In] DLG_DIR_LIST_FILE_TYPE uFileType);
BOOL DlgDirSelectExA([In] HWND hwndDlg, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpString, [In] int chCount, [In] int idListBox);
BOOL DlgDirSelectExW([In] HWND hwndDlg, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpString, [In] int chCount, [In] int idListBox);
int DlgDirListComboBoxA([In] HWND hDlg, [In] [Out] PSTR lpPathSpec, [In] int nIDComboBox, [In] int nIDStaticPath, [In] DLG_DIR_LIST_FILE_TYPE uFiletype);
int DlgDirListComboBoxW([In] HWND hDlg, [In] [Out] PWSTR lpPathSpec, [In] int nIDComboBox, [In] int nIDStaticPath, [In] DLG_DIR_LIST_FILE_TYPE uFiletype);
BOOL DlgDirSelectComboBoxExA([In] HWND hwndDlg, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpString, [In] int cchOut, [In] int idComboBox);
BOOL DlgDirSelectComboBoxExW([In] HWND hwndDlg, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpString, [In] int cchOut, [In] int idComboBox);
int SetScrollInfo([In] HWND hwnd, [In] SCROLLBAR_CONSTANTS nBar, [In] SCROLLINFO* lpsi, [In] BOOL redraw);
BOOL GetComboBoxInfo([In] HWND hwndCombo, [In] [Out] COMBOBOXINFO* pcbi);
uint GetListBoxInfo([In] HWND hwnd);
BOOL RegisterPointerDeviceNotifications([In] HWND window, [In] BOOL notifyRange);
BOOL SetDialogControlDpiChangeBehavior([In] HWND hWnd, [In] DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask, [In] DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values);
DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS GetDialogControlDpiChangeBehavior([In] HWND hWnd);
BOOL SetDialogDpiChangeBehavior([In] HWND hDlg, [In] DIALOG_DPI_CHANGE_BEHAVIORS mask, [In] DIALOG_DPI_CHANGE_BEHAVIORS values);
DIALOG_DPI_CHANGE_BEHAVIORS GetDialogDpiChangeBehavior([In] HWND hDlg);
int GetSystemMetricsForDpi([In] SYSTEM_METRICS_INDEX nIndex, [In] uint dpi);
BOOL AdjustWindowRectExForDpi([In] [Out] RECT* lpRect, [In] WINDOW_STYLE dwStyle, [In] BOOL bMenu, [In] WINDOW_EX_STYLE dwExStyle, [In] uint dpi);
BOOL LogicalToPhysicalPointForPerMonitorDPI([In] [Optional] HWND hWnd, [In] [Out] POINT* lpPoint);
BOOL PhysicalToLogicalPointForPerMonitorDPI([In] [Optional] HWND hWnd, [In] [Out] POINT* lpPoint);
BOOL SystemParametersInfoForDpi([In] uint uiAction, [In] uint uiParam, [Out] [Optional] void* pvParam, [In] uint fWinIni, [In] uint dpi);
DPI_AWARENESS_CONTEXT SetThreadDpiAwarenessContext([In] DPI_AWARENESS_CONTEXT dpiContext);
DPI_AWARENESS_CONTEXT GetThreadDpiAwarenessContext();
DPI_AWARENESS_CONTEXT GetWindowDpiAwarenessContext([In] HWND hwnd);
DPI_AWARENESS GetAwarenessFromDpiAwarenessContext([In] DPI_AWARENESS_CONTEXT value);
uint GetDpiFromDpiAwarenessContext([In] DPI_AWARENESS_CONTEXT value);
BOOL AreDpiAwarenessContextsEqual([In] DPI_AWARENESS_CONTEXT dpiContextA, [In] DPI_AWARENESS_CONTEXT dpiContextB);
BOOL IsValidDpiAwarenessContext([In] DPI_AWARENESS_CONTEXT value);
uint GetDpiForWindow([In] HWND hwnd);
uint GetDpiForSystem();
uint GetSystemDpiForProcess([In] HANDLE hProcess);
BOOL EnableNonClientDpiScaling([In] HWND hwnd);
BOOL SetProcessDpiAwarenessContext([In] DPI_AWARENESS_CONTEXT value);
DPI_AWARENESS_CONTEXT GetDpiAwarenessContextForProcess([In] HANDLE hProcess);
DPI_HOSTING_BEHAVIOR SetThreadDpiHostingBehavior([In] DPI_HOSTING_BEHAVIOR value);
DPI_HOSTING_BEHAVIOR GetThreadDpiHostingBehavior();
DPI_HOSTING_BEHAVIOR GetWindowDpiHostingBehavior([In] HWND hwnd);
uint GetRawInputData([In] HRAWINPUT hRawInput, [In] RAW_INPUT_DATA_COMMAND_FLAGS uiCommand, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* pData, [In] [Out] uint* pcbSize, [In] uint cbSizeHeader);
uint GetRawInputDeviceInfoA([In] [Optional] HANDLE hDevice, [In] RAW_INPUT_DEVICE_INFO_COMMAND uiCommand, [MemorySize(BytesParamIndex = 3)] [In] [Out] [Optional] void* pData, [In] [Out] uint* pcbSize);
uint GetRawInputDeviceInfoW([In] [Optional] HANDLE hDevice, [In] RAW_INPUT_DEVICE_INFO_COMMAND uiCommand, [MemorySize(BytesParamIndex = 3)] [In] [Out] [Optional] void* pData, [In] [Out] uint* pcbSize);
uint GetRawInputBuffer([MemorySize(BytesParamIndex = 1)] [Out] [Optional] RAWINPUT* pData, [In] [Out] uint* pcbSize, [In] uint cbSizeHeader);
BOOL RegisterRawInputDevices([NativeArrayInfo(CountParamIndex = 1)] [In] RAWINPUTDEVICE* pRawInputDevices, [In] uint uiNumDevices, [In] uint cbSize);
uint GetRegisteredRawInputDevices([NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] RAWINPUTDEVICE* pRawInputDevices, [In] [Out] uint* puiNumDevices, [In] uint cbSize);
uint GetRawInputDeviceList([NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] RAWINPUTDEVICELIST* pRawInputDeviceList, [In] [Out] uint* puiNumDevices, [In] uint cbSize);
LRESULT DefRawInputProc([NativeArrayInfo(CountParamIndex = 1)] [In] RAWINPUT** paRawInput, [In] int nInput, [In] uint cbSizeHeader);
BOOL GetCurrentInputMessageSource([Out] INPUT_MESSAGE_SOURCE* inputMessageSource);
BOOL GetCIMSSM([Out] INPUT_MESSAGE_SOURCE* inputMessageSource);
HKL LoadKeyboardLayoutA([Const] [In] PSTR pwszKLID, [In] ACTIVATE_KEYBOARD_LAYOUT_FLAGS Flags);
HKL LoadKeyboardLayoutW([Const] [In] PWSTR pwszKLID, [In] ACTIVATE_KEYBOARD_LAYOUT_FLAGS Flags);
HKL ActivateKeyboardLayout([In] HKL hkl, [In] ACTIVATE_KEYBOARD_LAYOUT_FLAGS Flags);
int ToUnicodeEx([In] uint wVirtKey, [In] uint wScanCode, [Const] [NativeArrayInfo(CountConst = 256)] [In] byte* lpKeyState, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR pwszBuff, [In] int cchBuff, [In] uint wFlags, [In] [Optional] HKL dwhkl);
BOOL UnloadKeyboardLayout([In] HKL hkl);
BOOL GetKeyboardLayoutNameA([NativeArrayInfo(CountConst = 9)] [Out] PSTR pwszKLID);
BOOL GetKeyboardLayoutNameW([NativeArrayInfo(CountConst = 9)] [Out] PWSTR pwszKLID);
int GetKeyboardLayoutList([In] int nBuff, [NativeArrayInfo(CountParamIndex = 0)] [Out] [Optional] HKL* lpList);
HKL GetKeyboardLayout([In] uint idThread);
int GetMouseMovePointsEx([In] uint cbSize, [In] MOUSEMOVEPOINT* lppt, [NativeArrayInfo(CountParamIndex = 3)] [Out] MOUSEMOVEPOINT* lpptBuf, [In] int nBufPoints, [In] GET_MOUSE_MOVE_POINTS_EX_RESOLUTION resolution);
BOOL TrackMouseEvent([In] [Out] TRACKMOUSEEVENT* lpEventTrack);
BOOL RegisterHotKey([In] [Optional] HWND hWnd, [In] int id, [In] HOT_KEY_MODIFIERS fsModifiers, [In] uint vk);
BOOL UnregisterHotKey([In] [Optional] HWND hWnd, [In] int id);
BOOL SwapMouseButton([In] BOOL fSwap);
uint GetDoubleClickTime();
BOOL SetDoubleClickTime([In] uint param0);
HWND SetFocus([In] [Optional] HWND hWnd);
HWND GetActiveWindow();
HWND GetFocus();
uint GetKBCodePage();
short GetKeyState([In] int nVirtKey);
short GetAsyncKeyState([In] int vKey);
BOOL GetKeyboardState([NativeArrayInfo(CountConst = 256)] [Out] byte* lpKeyState);
BOOL SetKeyboardState([NativeArrayInfo(CountConst = 256)] [In] byte* lpKeyState);
int GetKeyNameTextA([In] int lParam, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpString, [In] int cchSize);
int GetKeyNameTextW([In] int lParam, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpString, [In] int cchSize);
int GetKeyboardType([In] int nTypeFlag);
int ToAscii([In] uint uVirtKey, [In] uint uScanCode, [Const] [NativeArrayInfo(CountConst = 256)] [In] [Optional] byte* lpKeyState, [Out] ushort* lpChar, [In] uint uFlags);
int ToAsciiEx([In] uint uVirtKey, [In] uint uScanCode, [Const] [NativeArrayInfo(CountConst = 256)] [In] [Optional] byte* lpKeyState, [Out] ushort* lpChar, [In] uint uFlags, [In] [Optional] HKL dwhkl);
int ToUnicode([In] uint wVirtKey, [In] uint wScanCode, [Const] [NativeArrayInfo(CountConst = 256)] [In] [Optional] byte* lpKeyState, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR pwszBuff, [In] int cchBuff, [In] uint wFlags);
uint OemKeyScan([In] ushort wOemChar);
short VkKeyScanA([In] CHAR ch);
short VkKeyScanW([In] wchar ch);
short VkKeyScanExA([In] CHAR ch, [In] HKL dwhkl);
short VkKeyScanExW([In] wchar ch, [In] HKL dwhkl);
void keybd_event([In] byte bVk, [In] byte bScan, [In] KEYBD_EVENT_FLAGS dwFlags, [In] nuint dwExtraInfo);
void mouse_event([In] MOUSE_EVENT_FLAGS dwFlags, [In] int dx, [In] int dy, [In] uint dwData, [In] nuint dwExtraInfo);
uint SendInput([In] uint cInputs, [NativeArrayInfo(CountParamIndex = 0)] [In] INPUT* pInputs, [In] int cbSize);
BOOL GetLastInputInfo([In] [Out] LASTINPUTINFO* plii);
uint MapVirtualKeyA([In] uint uCode, [In] uint uMapType);
uint MapVirtualKeyW([In] uint uCode, [In] uint uMapType);
uint MapVirtualKeyExA([In] uint uCode, [In] uint uMapType, [In] [Optional] HKL dwhkl);
uint MapVirtualKeyExW([In] uint uCode, [In] uint uMapType, [In] [Optional] HKL dwhkl);
HWND GetCapture();
HWND SetCapture([In] HWND hWnd);
BOOL ReleaseCapture();
BOOL EnableWindow([In] HWND hWnd, [In] BOOL bEnable);
BOOL IsWindowEnabled([In] HWND hWnd);
BOOL DragDetect([In] HWND hwnd, [In] POINT pt);
HWND SetActiveWindow([In] HWND hWnd);
BOOL BlockInput([In] BOOL fBlockIt);
uint GetUnpredictedMessagePos();
BOOL InitializeTouchInjection([In] uint maxCount, [In] TOUCH_FEEDBACK_MODE dwMode);
BOOL InjectTouchInput([In] uint count, [Const] [NativeArrayInfo(CountParamIndex = 0)] [In] POINTER_TOUCH_INFO* contacts);
BOOL GetPointerType([In] uint pointerId, [Out] POINTER_INPUT_TYPE* pointerType);
BOOL GetPointerCursorId([In] uint pointerId, [Out] uint* cursorId);
BOOL GetPointerInfo([In] uint pointerId, [Out] POINTER_INFO* pointerInfo);
BOOL GetPointerInfoHistory([In] uint pointerId, [In] [Out] uint* entriesCount, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] POINTER_INFO* pointerInfo);
BOOL GetPointerFrameInfo([In] uint pointerId, [In] [Out] uint* pointerCount, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] POINTER_INFO* pointerInfo);
BOOL GetPointerFrameInfoHistory([In] uint pointerId, [In] [Out] uint* entriesCount, [In] [Out] uint* pointerCount, [Out] [Optional] POINTER_INFO* pointerInfo);
BOOL GetPointerTouchInfo([In] uint pointerId, [Out] POINTER_TOUCH_INFO* touchInfo);
BOOL GetPointerTouchInfoHistory([In] uint pointerId, [In] [Out] uint* entriesCount, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] POINTER_TOUCH_INFO* touchInfo);
BOOL GetPointerFrameTouchInfo([In] uint pointerId, [In] [Out] uint* pointerCount, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] POINTER_TOUCH_INFO* touchInfo);
BOOL GetPointerFrameTouchInfoHistory([In] uint pointerId, [In] [Out] uint* entriesCount, [In] [Out] uint* pointerCount, [Out] [Optional] POINTER_TOUCH_INFO* touchInfo);
BOOL GetPointerPenInfo([In] uint pointerId, [Out] POINTER_PEN_INFO* penInfo);
BOOL GetPointerPenInfoHistory([In] uint pointerId, [In] [Out] uint* entriesCount, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] POINTER_PEN_INFO* penInfo);
BOOL GetPointerFramePenInfo([In] uint pointerId, [In] [Out] uint* pointerCount, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] POINTER_PEN_INFO* penInfo);
BOOL GetPointerFramePenInfoHistory([In] uint pointerId, [In] [Out] uint* entriesCount, [In] [Out] uint* pointerCount, [Out] [Optional] POINTER_PEN_INFO* penInfo);
BOOL SkipPointerFrameMessages([In] uint pointerId);
BOOL InjectSyntheticPointerInput([In] HSYNTHETICPOINTERDEVICE device, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] POINTER_TYPE_INFO* pointerInfo, [In] uint count);
BOOL EnableMouseInPointer([In] BOOL fEnable);
BOOL IsMouseInPointerEnabled();
BOOL GetPointerInputTransform([In] uint pointerId, [In] uint historyCount, [NativeArrayInfo(CountParamIndex = 1)] [Out] INPUT_TRANSFORM* inputTransform);
BOOL GetPointerDevices([In] [Out] uint* deviceCount, [NativeArrayInfo(CountParamIndex = 0)] [Out] [Optional] POINTER_DEVICE_INFO* pointerDevices);
BOOL GetPointerDevice([In] HANDLE device, [Out] POINTER_DEVICE_INFO* pointerDevice);
BOOL GetPointerDeviceProperties([In] HANDLE device, [In] [Out] uint* propertyCount, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] POINTER_DEVICE_PROPERTY* pointerProperties);
BOOL GetPointerDeviceRects([In] HANDLE device, [Out] RECT* pointerDeviceRect, [Out] RECT* displayRect);
BOOL GetPointerDeviceCursors([In] HANDLE device, [In] [Out] uint* cursorCount, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] POINTER_DEVICE_CURSOR_INFO* deviceCursors);
BOOL GetRawPointerDeviceData([In] uint pointerId, [In] uint historyCount, [In] uint propertiesCount, [NativeArrayInfo(CountParamIndex = 2)] [In] POINTER_DEVICE_PROPERTY* pProperties, [Out] int* pValues);
BOOL GetTouchInputInfo([In] HTOUCHINPUT hTouchInput, [In] uint cInputs, [NativeArrayInfo(CountParamIndex = 1)] [Out] TOUCHINPUT* pInputs, [In] int cbSize);
BOOL CloseTouchInputHandle([In] HTOUCHINPUT hTouchInput);
BOOL RegisterTouchWindow([In] HWND hwnd, [In] REGISTER_TOUCH_WINDOW_FLAGS ulFlags);
BOOL UnregisterTouchWindow([In] HWND hwnd);
BOOL IsTouchWindow([In] HWND hwnd, [Out] [Optional] uint* pulFlags);
BOOL GetGestureInfo([In] HGESTUREINFO hGestureInfo, [Out] GESTUREINFO* pGestureInfo);
BOOL GetGestureExtraArgs([In] HGESTUREINFO hGestureInfo, [In] uint cbExtraArgs, [MemorySize(BytesParamIndex = 1)] [Out] byte* pExtraArgs);
BOOL CloseGestureInfoHandle([In] HGESTUREINFO hGestureInfo);
BOOL SetGestureConfig([In] HWND hwnd, [In] uint dwReserved, [In] uint cIDs, [NativeArrayInfo(CountParamIndex = 2)] [In] GESTURECONFIG* pGestureConfig, [In] uint cbSize);
BOOL GetGestureConfig([In] HWND hwnd, [In] uint dwReserved, [In] uint dwFlags, [In] uint* pcIDs, [NativeArrayInfo(CountParamIndex = 3)] [In] [Out] GESTURECONFIG* pGestureConfig, [In] uint cbSize);
BOOL SetWindowContextHelpId([In] HWND param0, [In] uint param1);
uint GetWindowContextHelpId([In] HWND param0);
BOOL SetMenuContextHelpId([In] HMENU param0, [In] uint param1);
uint GetMenuContextHelpId([In] HMENU param0);
BOOL WinHelpA([In] [Optional] HWND hWndMain, [Const] [In] [Optional] PSTR lpszHelp, [In] uint uCommand, [In] nuint dwData);
BOOL WinHelpW([In] [Optional] HWND hWndMain, [Const] [In] [Optional] PWSTR lpszHelp, [In] uint uCommand, [In] nuint dwData);
int LoadStringA([In] [Optional] HINSTANCE hInstance, [In] uint uID, [Out] PSTR lpBuffer, [In] int cchBufferMax);
int LoadStringW([In] [Optional] HINSTANCE hInstance, [In] uint uID, [Out] PWSTR lpBuffer, [In] int cchBufferMax);
nint GetWindowLongPtrA([In] HWND hWnd, [In] WINDOW_LONG_PTR_INDEX nIndex);
nint GetWindowLongPtrW([In] HWND hWnd, [In] WINDOW_LONG_PTR_INDEX nIndex);
nint SetWindowLongPtrA([In] HWND hWnd, [In] WINDOW_LONG_PTR_INDEX nIndex, [In] nint dwNewLong);
nint SetWindowLongPtrW([In] HWND hWnd, [In] WINDOW_LONG_PTR_INDEX nIndex, [In] nint dwNewLong);
nuint GetClassLongPtrA([In] HWND hWnd, [In] GET_CLASS_LONG_INDEX nIndex);
nuint GetClassLongPtrW([In] HWND hWnd, [In] GET_CLASS_LONG_INDEX nIndex);
nuint SetClassLongPtrA([In] HWND hWnd, [In] GET_CLASS_LONG_INDEX nIndex, [In] nint dwNewLong);
nuint SetClassLongPtrW([In] HWND hWnd, [In] GET_CLASS_LONG_INDEX nIndex, [In] nint dwNewLong);
int wvsprintfA([Out] PSTR param0, [Const] [In] PSTR param1, [In] sbyte* arglist);
int wvsprintfW([Out] PWSTR param0, [Const] [In] PWSTR param1, [In] sbyte* arglist);
int wsprintfA([Out] PSTR param0, [Const] [In] PSTR param1, ...);
int wsprintfW([Out] PWSTR param0, [Const] [In] PWSTR param1, ...);
BOOL IsHungAppWindow([In] HWND hwnd);
void DisableProcessWindowsGhosting();
uint RegisterWindowMessageA([Const] [In] PSTR lpString);
uint RegisterWindowMessageW([Const] [In] PWSTR lpString);
BOOL GetMessageA([Out] MSG* lpMsg, [In] [Optional] HWND hWnd, [In] uint wMsgFilterMin, [In] uint wMsgFilterMax);
BOOL GetMessageW([Out] MSG* lpMsg, [In] [Optional] HWND hWnd, [In] uint wMsgFilterMin, [In] uint wMsgFilterMax);
BOOL TranslateMessage([Const] [In] MSG* lpMsg);
LRESULT DispatchMessageA([Const] [In] MSG* lpMsg);
LRESULT DispatchMessageW([Const] [In] MSG* lpMsg);
BOOL SetMessageQueue([In] int cMessagesMax);
BOOL PeekMessageA([Out] MSG* lpMsg, [In] [Optional] HWND hWnd, [In] uint wMsgFilterMin, [In] uint wMsgFilterMax, [In] PEEK_MESSAGE_REMOVE_TYPE wRemoveMsg);
BOOL PeekMessageW([Out] MSG* lpMsg, [In] [Optional] HWND hWnd, [In] uint wMsgFilterMin, [In] uint wMsgFilterMax, [In] PEEK_MESSAGE_REMOVE_TYPE wRemoveMsg);
uint GetMessagePos();
int GetMessageTime();
LPARAM GetMessageExtraInfo();
BOOL IsWow64Message();
LPARAM SetMessageExtraInfo([In] LPARAM lParam);
LRESULT SendMessageA([In] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
LRESULT SendMessageW([In] HWND hWnd, [In] uint Msg, [Optional] WPARAM wParam, [Optional] LPARAM lParam);
LRESULT SendMessageTimeoutA([In] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam, [In] SEND_MESSAGE_TIMEOUT_FLAGS fuFlags, [In] uint uTimeout, [Out] [Optional] nuint* lpdwResult);
LRESULT SendMessageTimeoutW([In] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam, [In] SEND_MESSAGE_TIMEOUT_FLAGS fuFlags, [In] uint uTimeout, [Out] [Optional] nuint* lpdwResult);
BOOL SendNotifyMessageA([In] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
BOOL SendNotifyMessageW([In] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
BOOL SendMessageCallbackA([In] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam, [In] SENDASYNCPROC lpResultCallBack, [In] nuint dwData);
BOOL SendMessageCallbackW([In] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam, [In] SENDASYNCPROC lpResultCallBack, [In] nuint dwData);
void* RegisterDeviceNotificationA([In] HANDLE hRecipient, [In] void* NotificationFilter, [In] POWER_SETTING_REGISTER_NOTIFICATION_FLAGS Flags);
void* RegisterDeviceNotificationW([In] HANDLE hRecipient, [In] void* NotificationFilter, [In] POWER_SETTING_REGISTER_NOTIFICATION_FLAGS Flags);
BOOL PostMessageA([In] [Optional] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
BOOL PostMessageW([In] [Optional] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
BOOL PostThreadMessageA([In] uint idThread, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
BOOL PostThreadMessageW([In] uint idThread, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
BOOL ReplyMessage([In] LRESULT lResult);
BOOL WaitMessage();
LRESULT DefWindowProcA([In] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
LRESULT DefWindowProcW([In] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
void PostQuitMessage([In] int nExitCode);
LRESULT CallWindowProcA([In] WNDPROC lpPrevWndFunc, [In] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
LRESULT CallWindowProcW([In] WNDPROC lpPrevWndFunc, [In] HWND hWnd, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
BOOL InSendMessage();
uint InSendMessageEx([Reserved] [In] [Out] void* lpReserved);
ushort RegisterClassA([Const] [In] WNDCLASSA* lpWndClass);
ushort RegisterClassW([Const] [In] WNDCLASSW* lpWndClass);
BOOL UnregisterClassA([Const] [In] PSTR lpClassName, [In] [Optional] HINSTANCE hInstance);
BOOL UnregisterClassW([Const] [In] PWSTR lpClassName, [In] [Optional] HINSTANCE hInstance);
BOOL GetClassInfoA([In] [Optional] HINSTANCE hInstance, [Const] [In] PSTR lpClassName, [Out] WNDCLASSA* lpWndClass);
BOOL GetClassInfoW([In] [Optional] HINSTANCE hInstance, [Const] [In] PWSTR lpClassName, [Out] WNDCLASSW* lpWndClass);
ushort RegisterClassExA([Const] [In] WNDCLASSEXA* param0);
ushort RegisterClassExW([Const] [In] WNDCLASSEXW* param0);
BOOL GetClassInfoExA([In] [Optional] HINSTANCE hInstance, [Const] [In] PSTR lpszClass, [Out] WNDCLASSEXA* lpwcx);
BOOL GetClassInfoExW([In] [Optional] HINSTANCE hInstance, [Const] [In] PWSTR lpszClass, [Out] WNDCLASSEXW* lpwcx);
HWND CreateWindowExA([In] WINDOW_EX_STYLE dwExStyle, [Const] [In] [Optional] PSTR lpClassName, [Const] [In] [Optional] PSTR lpWindowName, [In] WINDOW_STYLE dwStyle, [In] int X, [In] int Y, [In] int nWidth, [In] int nHeight, [In] [Optional] HWND hWndParent, [In] [Optional] HMENU hMenu, [In] [Optional] HINSTANCE hInstance, [In] [Optional] void* lpParam);
HWND CreateWindowExW([In] WINDOW_EX_STYLE dwExStyle, [Const] [In] [Optional] PWSTR lpClassName, [Const] [In] [Optional] PWSTR lpWindowName, [In] WINDOW_STYLE dwStyle, [In] int X, [In] int Y, [In] int nWidth, [In] int nHeight, [In] [Optional] HWND hWndParent, [In] [Optional] HMENU hMenu, [In] [Optional] HINSTANCE hInstance, [In] [Optional] void* lpParam);
BOOL IsWindow([In] [Optional] HWND hWnd);
BOOL IsMenu([In] HMENU hMenu);
BOOL IsChild([In] HWND hWndParent, [In] HWND hWnd);
BOOL DestroyWindow([In] HWND hWnd);
BOOL ShowWindow([In] HWND hWnd, [In] SHOW_WINDOW_CMD nCmdShow);
BOOL AnimateWindow([In] HWND hWnd, [In] uint dwTime, [In] ANIMATE_WINDOW_FLAGS dwFlags);
BOOL UpdateLayeredWindow([In] HWND hWnd, [In] [Optional] HDC hdcDst, [In] [Optional] POINT* pptDst, [In] [Optional] SIZE* psize, [In] [Optional] HDC hdcSrc, [In] [Optional] POINT* pptSrc, [In] COLORREF crKey, [In] [Optional] BLENDFUNCTION* pblend, [In] UPDATE_LAYERED_WINDOW_FLAGS dwFlags);
BOOL UpdateLayeredWindowIndirect([In] HWND hWnd, [Const] [In] UPDATELAYEREDWINDOWINFO* pULWInfo);
BOOL GetLayeredWindowAttributes([In] HWND hwnd, [Out] [Optional] COLORREF* pcrKey, [Out] [Optional] byte* pbAlpha, [Out] [Optional] LAYERED_WINDOW_ATTRIBUTES_FLAGS* pdwFlags);
BOOL SetLayeredWindowAttributes([In] HWND hwnd, [In] COLORREF crKey, [In] byte bAlpha, [In] LAYERED_WINDOW_ATTRIBUTES_FLAGS dwFlags);
BOOL ShowWindowAsync([In] HWND hWnd, [In] SHOW_WINDOW_CMD nCmdShow);
BOOL FlashWindow([In] HWND hWnd, [In] BOOL bInvert);
BOOL FlashWindowEx([In] FLASHWINFO* pfwi);
BOOL ShowOwnedPopups([In] HWND hWnd, [In] BOOL fShow);
BOOL OpenIcon([In] HWND hWnd);
BOOL CloseWindow([In] HWND hWnd);
BOOL MoveWindow([In] HWND hWnd, [In] int X, [In] int Y, [In] int nWidth, [In] int nHeight, [In] BOOL bRepaint);
BOOL SetWindowPos([In] HWND hWnd, [In] [Optional] HWND hWndInsertAfter, [In] int X, [In] int Y, [In] int cx, [In] int cy, [In] SET_WINDOW_POS_FLAGS uFlags);
BOOL GetWindowPlacement([In] HWND hWnd, [In] [Out] WINDOWPLACEMENT* lpwndpl);
BOOL SetWindowPlacement([In] HWND hWnd, [Const] [In] WINDOWPLACEMENT* lpwndpl);
BOOL GetWindowDisplayAffinity([In] HWND hWnd, [Out] uint* pdwAffinity);
BOOL SetWindowDisplayAffinity([In] HWND hWnd, [In] WINDOW_DISPLAY_AFFINITY dwAffinity);
HDWP BeginDeferWindowPos([In] int nNumWindows);
HDWP DeferWindowPos([In] HDWP hWinPosInfo, [In] HWND hWnd, [In] [Optional] HWND hWndInsertAfter, [In] int x, [In] int y, [In] int cx, [In] int cy, [In] SET_WINDOW_POS_FLAGS uFlags);
BOOL EndDeferWindowPos([In] HDWP hWinPosInfo);
BOOL IsWindowVisible([In] HWND hWnd);
BOOL IsIconic([In] HWND hWnd);
BOOL AnyPopup();
BOOL BringWindowToTop([In] HWND hWnd);
BOOL IsZoomed([In] HWND hWnd);
HWND CreateDialogParamA([In] [Optional] HINSTANCE hInstance, [Const] [In] PSTR lpTemplateName, [In] [Optional] HWND hWndParent, [In] [Optional] DLGPROC lpDialogFunc, [In] LPARAM dwInitParam);
HWND CreateDialogParamW([In] [Optional] HINSTANCE hInstance, [Const] [In] PWSTR lpTemplateName, [In] [Optional] HWND hWndParent, [In] [Optional] DLGPROC lpDialogFunc, [In] LPARAM dwInitParam);
HWND CreateDialogIndirectParamA([In] [Optional] HINSTANCE hInstance, [In] DLGTEMPLATE* lpTemplate, [In] [Optional] HWND hWndParent, [In] [Optional] DLGPROC lpDialogFunc, [In] LPARAM dwInitParam);
HWND CreateDialogIndirectParamW([In] [Optional] HINSTANCE hInstance, [In] DLGTEMPLATE* lpTemplate, [In] [Optional] HWND hWndParent, [In] [Optional] DLGPROC lpDialogFunc, [In] LPARAM dwInitParam);
nint DialogBoxParamA([In] [Optional] HINSTANCE hInstance, [Const] [In] PSTR lpTemplateName, [In] [Optional] HWND hWndParent, [In] [Optional] DLGPROC lpDialogFunc, [In] LPARAM dwInitParam);
nint DialogBoxParamW([In] [Optional] HINSTANCE hInstance, [Const] [In] PWSTR lpTemplateName, [In] [Optional] HWND hWndParent, [In] [Optional] DLGPROC lpDialogFunc, [In] LPARAM dwInitParam);
nint DialogBoxIndirectParamA([In] [Optional] HINSTANCE hInstance, [In] DLGTEMPLATE* hDialogTemplate, [In] [Optional] HWND hWndParent, [In] [Optional] DLGPROC lpDialogFunc, [In] LPARAM dwInitParam);
nint DialogBoxIndirectParamW([In] [Optional] HINSTANCE hInstance, [In] DLGTEMPLATE* hDialogTemplate, [In] [Optional] HWND hWndParent, [In] [Optional] DLGPROC lpDialogFunc, [In] LPARAM dwInitParam);
BOOL EndDialog([In] HWND hDlg, [In] nint nResult);
HWND GetDlgItem([In] [Optional] HWND hDlg, [In] int nIDDlgItem);
BOOL SetDlgItemInt([In] HWND hDlg, [In] int nIDDlgItem, [In] uint uValue, [In] BOOL bSigned);
uint GetDlgItemInt([In] HWND hDlg, [In] int nIDDlgItem, [Out] [Optional] BOOL* lpTranslated, [In] BOOL bSigned);
BOOL SetDlgItemTextA([In] HWND hDlg, [In] int nIDDlgItem, [Const] [In] PSTR lpString);
BOOL SetDlgItemTextW([In] HWND hDlg, [In] int nIDDlgItem, [Const] [In] PWSTR lpString);
uint GetDlgItemTextA([In] HWND hDlg, [In] int nIDDlgItem, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR lpString, [In] int cchMax);
uint GetDlgItemTextW([In] HWND hDlg, [In] int nIDDlgItem, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR lpString, [In] int cchMax);
LRESULT SendDlgItemMessageA([In] HWND hDlg, [In] int nIDDlgItem, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
LRESULT SendDlgItemMessageW([In] HWND hDlg, [In] int nIDDlgItem, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
HWND GetNextDlgGroupItem([In] HWND hDlg, [In] [Optional] HWND hCtl, [In] BOOL bPrevious);
HWND GetNextDlgTabItem([In] HWND hDlg, [In] [Optional] HWND hCtl, [In] BOOL bPrevious);
int GetDlgCtrlID([In] HWND hWnd);
int GetDialogBaseUnits();
LRESULT DefDlgProcA([In] HWND hDlg, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
LRESULT DefDlgProcW([In] HWND hDlg, [In] uint Msg, [In] WPARAM wParam, [In] LPARAM lParam);
BOOL CallMsgFilterA([In] MSG* lpMsg, [In] int nCode);
BOOL CallMsgFilterW([In] MSG* lpMsg, [In] int nCode);
BOOL CharToOemA([Const] [In] PSTR pSrc, [Out] PSTR pDst);
BOOL CharToOemW([Const] [In] PWSTR pSrc, [Out] PSTR pDst);
BOOL OemToCharA([Const] [In] PSTR pSrc, [Out] PSTR pDst);
BOOL OemToCharW([Const] [In] PSTR pSrc, [Out] PWSTR pDst);
BOOL CharToOemBuffA([Const] [In] PSTR lpszSrc, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpszDst, [In] uint cchDstLength);
BOOL CharToOemBuffW([Const] [In] PWSTR lpszSrc, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpszDst, [In] uint cchDstLength);
BOOL OemToCharBuffA([Const] [In] PSTR lpszSrc, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpszDst, [In] uint cchDstLength);
BOOL OemToCharBuffW([Const] [In] PSTR lpszSrc, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpszDst, [In] uint cchDstLength);
PSTR CharUpperA([In] [Out] PSTR lpsz);
PWSTR CharUpperW([In] [Out] PWSTR lpsz);
uint CharUpperBuffA([NativeArrayInfo(CountParamIndex = 1)] [In] [Out] PSTR lpsz, [In] uint cchLength);
uint CharUpperBuffW([NativeArrayInfo(CountParamIndex = 1)] [In] [Out] PWSTR lpsz, [In] uint cchLength);
PSTR CharLowerA([In] [Out] PSTR lpsz);
PWSTR CharLowerW([In] [Out] PWSTR lpsz);
uint CharLowerBuffA([NativeArrayInfo(CountParamIndex = 1)] [In] [Out] PSTR lpsz, [In] uint cchLength);
uint CharLowerBuffW([NativeArrayInfo(CountParamIndex = 1)] [In] [Out] PWSTR lpsz, [In] uint cchLength);
PSTR CharNextA([Const] [In] PSTR lpsz);
PWSTR CharNextW([Const] [In] PWSTR lpsz);
PSTR CharPrevA([Const] [In] PSTR lpszStart, [Const] [In] PSTR lpszCurrent);
PWSTR CharPrevW([Const] [In] PWSTR lpszStart, [Const] [In] PWSTR lpszCurrent);
PSTR CharNextExA([In] ushort CodePage, [Const] [In] PSTR lpCurrentChar, [In] uint dwFlags);
PSTR CharPrevExA([In] ushort CodePage, [Const] [In] PSTR lpStart, [Const] [In] PSTR lpCurrentChar, [In] uint dwFlags);
BOOL IsCharAlphaA([In] CHAR ch);
BOOL IsCharAlphaW([In] wchar ch);
BOOL IsCharAlphaNumericA([In] CHAR ch);
BOOL IsCharAlphaNumericW([In] wchar ch);
BOOL IsCharUpperA([In] CHAR ch);
BOOL IsCharUpperW([In] wchar ch);
BOOL IsCharLowerA([In] CHAR ch);
BOOL GetInputState();
uint GetQueueStatus([In] QUEUE_STATUS_FLAGS flags);
uint MsgWaitForMultipleObjects([In] uint nCount, [Const] [NativeArrayInfo(CountParamIndex = 0)] [In] [Optional] HANDLE* pHandles, [In] BOOL fWaitAll, [In] uint dwMilliseconds, [In] QUEUE_STATUS_FLAGS dwWakeMask);
uint MsgWaitForMultipleObjectsEx([In] uint nCount, [Const] [NativeArrayInfo(CountParamIndex = 0)] [In] [Optional] HANDLE* pHandles, [In] uint dwMilliseconds, [In] QUEUE_STATUS_FLAGS dwWakeMask, [In] MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS dwFlags);
nuint SetTimer([In] [Optional] HWND hWnd, [In] nuint nIDEvent, [In] uint uElapse, [In] [Optional] TIMERPROC lpTimerFunc);
nuint SetCoalescableTimer([In] [Optional] HWND hWnd, [In] nuint nIDEvent, [In] uint uElapse, [In] [Optional] TIMERPROC lpTimerFunc, [In] uint uToleranceDelay);
BOOL KillTimer([In] [Optional] HWND hWnd, [In] nuint uIDEvent);
BOOL IsWindowUnicode([In] HWND hWnd);
HACCEL LoadAcceleratorsA([In] [Optional] HINSTANCE hInstance, [Const] [In] PSTR lpTableName);
HACCEL LoadAcceleratorsW([In] [Optional] HINSTANCE hInstance, [Const] [In] PWSTR lpTableName);
HACCEL CreateAcceleratorTableA([NativeArrayInfo(CountParamIndex = 1)] [In] ACCEL* paccel, [In] int cAccel);
HACCEL CreateAcceleratorTableW([NativeArrayInfo(CountParamIndex = 1)] [In] ACCEL* paccel, [In] int cAccel);
BOOL DestroyAcceleratorTable([In] HACCEL hAccel);
int CopyAcceleratorTableA([In] HACCEL hAccelSrc, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] ACCEL* lpAccelDst, [In] int cAccelEntries);
int CopyAcceleratorTableW([In] HACCEL hAccelSrc, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] ACCEL* lpAccelDst, [In] int cAccelEntries);
int TranslateAcceleratorA([In] HWND hWnd, [In] HACCEL hAccTable, [In] MSG* lpMsg);
int TranslateAcceleratorW([In] HWND hWnd, [In] HACCEL hAccTable, [In] MSG* lpMsg);
int GetSystemMetrics([In] SYSTEM_METRICS_INDEX nIndex);
HMENU LoadMenuA([In] [Optional] HINSTANCE hInstance, [Const] [In] PSTR lpMenuName);
HMENU LoadMenuW([In] [Optional] HINSTANCE hInstance, [Const] [In] PWSTR lpMenuName);
HMENU LoadMenuIndirectA([Const] [In] void* lpMenuTemplate);
HMENU LoadMenuIndirectW([Const] [In] void* lpMenuTemplate);
HMENU GetMenu([In] HWND hWnd);
BOOL SetMenu([In] HWND hWnd, [In] [Optional] HMENU hMenu);
BOOL ChangeMenuA([In] HMENU hMenu, [In] uint cmd, [Const] [In] [Optional] PSTR lpszNewItem, [In] uint cmdInsert, [In] uint flags);
BOOL ChangeMenuW([In] HMENU hMenu, [In] uint cmd, [Const] [In] [Optional] PWSTR lpszNewItem, [In] uint cmdInsert, [In] uint flags);
BOOL HiliteMenuItem([In] HWND hWnd, [In] HMENU hMenu, [In] uint uIDHiliteItem, [In] uint uHilite);
int GetMenuStringA([In] HMENU hMenu, [In] uint uIDItem, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR lpString, [In] int cchMax, [In] MENU_ITEM_FLAGS flags);
int GetMenuStringW([In] HMENU hMenu, [In] uint uIDItem, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR lpString, [In] int cchMax, [In] MENU_ITEM_FLAGS flags);
uint GetMenuState([In] HMENU hMenu, [In] uint uId, [In] MENU_ITEM_FLAGS uFlags);
BOOL DrawMenuBar([In] HWND hWnd);
HMENU GetSystemMenu([In] HWND hWnd, [In] BOOL bRevert);
HMENU CreateMenu();
HMENU CreatePopupMenu();
BOOL DestroyMenu([In] HMENU hMenu);
uint CheckMenuItem([In] HMENU hMenu, [In] uint uIDCheckItem, [In] uint uCheck);
BOOL EnableMenuItem([In] HMENU hMenu, [In] uint uIDEnableItem, [In] MENU_ITEM_FLAGS uEnable);
HMENU GetSubMenu([In] HMENU hMenu, [In] int nPos);
uint GetMenuItemID([In] HMENU hMenu, [In] int nPos);
int GetMenuItemCount([In] [Optional] HMENU hMenu);
BOOL InsertMenuA([In] HMENU hMenu, [In] uint uPosition, [In] MENU_ITEM_FLAGS uFlags, [In] nuint uIDNewItem, [Const] [In] [Optional] PSTR lpNewItem);
BOOL InsertMenuW([In] HMENU hMenu, [In] uint uPosition, [In] MENU_ITEM_FLAGS uFlags, [In] nuint uIDNewItem, [Const] [In] [Optional] PWSTR lpNewItem);
BOOL AppendMenuA([In] HMENU hMenu, [In] MENU_ITEM_FLAGS uFlags, [In] nuint uIDNewItem, [Const] [In] [Optional] PSTR lpNewItem);
BOOL AppendMenuW([In] HMENU hMenu, [In] MENU_ITEM_FLAGS uFlags, [In] nuint uIDNewItem, [Const] [In] [Optional] PWSTR lpNewItem);
BOOL ModifyMenuA([In] HMENU hMnu, [In] uint uPosition, [In] MENU_ITEM_FLAGS uFlags, [In] nuint uIDNewItem, [Const] [In] [Optional] PSTR lpNewItem);
BOOL ModifyMenuW([In] HMENU hMnu, [In] uint uPosition, [In] MENU_ITEM_FLAGS uFlags, [In] nuint uIDNewItem, [Const] [In] [Optional] PWSTR lpNewItem);
BOOL RemoveMenu([In] HMENU hMenu, [In] uint uPosition, [In] MENU_ITEM_FLAGS uFlags);
BOOL DeleteMenu([In] HMENU hMenu, [In] uint uPosition, [In] MENU_ITEM_FLAGS uFlags);
BOOL SetMenuItemBitmaps([In] HMENU hMenu, [In] uint uPosition, [In] MENU_ITEM_FLAGS uFlags, [In] [Optional] HBITMAP hBitmapUnchecked, [In] [Optional] HBITMAP hBitmapChecked);
int GetMenuCheckMarkDimensions();
BOOL TrackPopupMenu([In] HMENU hMenu, [In] TRACK_POPUP_MENU_FLAGS uFlags, [In] int x, [In] int y, [Reserved] [In] int nReserved, [In] HWND hWnd, [Const] [In] [Optional] RECT* prcRect);
BOOL TrackPopupMenuEx([In] HMENU hMenu, [In] uint uFlags, [In] int x, [In] int y, [In] HWND hwnd, [In] [Optional] TPMPARAMS* lptpm);
BOOL CalculatePopupWindowPosition([Const] [In] POINT* anchorPoint, [Const] [In] SIZE* windowSize, [In] uint flags, [In] [Optional] RECT* excludeRect, [Out] RECT* popupWindowPosition);
BOOL GetMenuInfo([In] HMENU param0, [In] [Out] MENUINFO* param1);
BOOL SetMenuInfo([In] HMENU param0, [In] MENUINFO* param1);
BOOL EndMenu();
BOOL InsertMenuItemA([In] HMENU hmenu, [In] uint item, [In] BOOL fByPosition, [In] MENUITEMINFOA* lpmi);
BOOL InsertMenuItemW([In] HMENU hmenu, [In] uint item, [In] BOOL fByPosition, [In] MENUITEMINFOW* lpmi);
BOOL GetMenuItemInfoA([In] HMENU hmenu, [In] uint item, [In] BOOL fByPosition, [In] [Out] MENUITEMINFOA* lpmii);
BOOL GetMenuItemInfoW([In] HMENU hmenu, [In] uint item, [In] BOOL fByPosition, [In] [Out] MENUITEMINFOW* lpmii);
BOOL SetMenuItemInfoA([In] HMENU hmenu, [In] uint item, [In] BOOL fByPositon, [In] MENUITEMINFOA* lpmii);
BOOL SetMenuItemInfoW([In] HMENU hmenu, [In] uint item, [In] BOOL fByPositon, [In] MENUITEMINFOW* lpmii);
uint GetMenuDefaultItem([In] HMENU hMenu, [In] uint fByPos, [In] GET_MENU_DEFAULT_ITEM_FLAGS gmdiFlags);
BOOL SetMenuDefaultItem([In] HMENU hMenu, [In] uint uItem, [In] uint fByPos);
BOOL GetMenuItemRect([In] [Optional] HWND hWnd, [In] HMENU hMenu, [In] uint uItem, [Out] RECT* lprcItem);
int MenuItemFromPoint([In] [Optional] HWND hWnd, [In] HMENU hMenu, [In] POINT ptScreen);
uint DragObject([In] HWND hwndParent, [In] HWND hwndFrom, [In] uint fmt, [In] nuint data, [In] [Optional] HCURSOR hcur);
BOOL DrawIcon([In] HDC hDC, [In] int X, [In] int Y, [In] HICON hIcon);
HWND GetForegroundWindow();
void SwitchToThisWindow([In] HWND hwnd, [In] BOOL fUnknown);
BOOL SetForegroundWindow([In] HWND hWnd);
BOOL AllowSetForegroundWindow([In] uint dwProcessId);
BOOL LockSetForegroundWindow([In] FOREGROUND_WINDOW_LOCK_CODE uLockCode);
BOOL ScrollWindow([In] HWND hWnd, [In] int XAmount, [In] int YAmount, [Const] [In] [Optional] RECT* lpRect, [Const] [In] [Optional] RECT* lpClipRect);
BOOL ScrollDC([In] HDC hDC, [In] int dx, [In] int dy, [Const] [In] [Optional] RECT* lprcScroll, [Const] [In] [Optional] RECT* lprcClip, [In] [Optional] HRGN hrgnUpdate, [Out] [Optional] RECT* lprcUpdate);
int ScrollWindowEx([In] HWND hWnd, [In] int dx, [In] int dy, [Const] [In] [Optional] RECT* prcScroll, [Const] [In] [Optional] RECT* prcClip, [In] [Optional] HRGN hrgnUpdate, [Out] [Optional] RECT* prcUpdate, [In] SHOW_WINDOW_CMD flags);
int GetScrollPos([In] HWND hWnd, [In] SCROLLBAR_CONSTANTS nBar);
BOOL GetScrollRange([In] HWND hWnd, [In] SCROLLBAR_CONSTANTS nBar, [Out] int* lpMinPos, [Out] int* lpMaxPos);
BOOL SetPropA([In] HWND hWnd, [Const] [In] PSTR lpString, [In] [Optional] HANDLE hData);
BOOL SetPropW([In] HWND hWnd, [Const] [In] PWSTR lpString, [In] [Optional] HANDLE hData);
HANDLE GetPropA([In] HWND hWnd, [Const] [In] PSTR lpString);
HANDLE GetPropW([In] HWND hWnd, [Const] [In] PWSTR lpString);
HANDLE RemovePropA([In] HWND hWnd, [Const] [In] PSTR lpString);
HANDLE RemovePropW([In] HWND hWnd, [Const] [In] PWSTR lpString);
int EnumPropsExA([In] HWND hWnd, [In] PROPENUMPROCEXA lpEnumFunc, [In] LPARAM lParam);
int EnumPropsExW([In] HWND hWnd, [In] PROPENUMPROCEXW lpEnumFunc, [In] LPARAM lParam);
int EnumPropsA([In] HWND hWnd, [In] PROPENUMPROCA lpEnumFunc);
int EnumPropsW([In] HWND hWnd, [In] PROPENUMPROCW lpEnumFunc);
BOOL SetWindowTextA([In] HWND hWnd, [Const] [In] [Optional] PSTR lpString);
BOOL SetWindowTextW([In] HWND hWnd, [Const] [In] [Optional] PWSTR lpString);
int GetWindowTextA([In] HWND hWnd, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpString, [In] int nMaxCount);
int GetWindowTextW([In] HWND hWnd, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpString, [In] int nMaxCount);
int GetWindowTextLengthA([In] HWND hWnd);
int GetWindowTextLengthW([In] HWND hWnd);
BOOL GetClientRect([In] HWND hWnd, [Out] RECT* lpRect);
BOOL GetWindowRect([In] HWND hWnd, [Out] RECT* lpRect);
BOOL AdjustWindowRect([In] [Out] RECT* lpRect, [In] WINDOW_STYLE dwStyle, [In] BOOL bMenu);
BOOL AdjustWindowRectEx([In] [Out] RECT* lpRect, [In] WINDOW_STYLE dwStyle, [In] BOOL bMenu, [In] WINDOW_EX_STYLE dwExStyle);
MESSAGEBOX_RESULT MessageBoxA([In] [Optional] HWND hWnd, [Const] [In] [Optional] PSTR lpText, [Const] [In] [Optional] PSTR lpCaption, [In] MESSAGEBOX_STYLE uType);
MESSAGEBOX_RESULT MessageBoxW([In] [Optional] HWND hWnd, [Const] [In] [Optional] PWSTR lpText, [Const] [In] [Optional] PWSTR lpCaption, [In] MESSAGEBOX_STYLE uType);
MESSAGEBOX_RESULT MessageBoxExA([In] [Optional] HWND hWnd, [Const] [In] [Optional] PSTR lpText, [Const] [In] [Optional] PSTR lpCaption, [In] MESSAGEBOX_STYLE uType, [In] ushort wLanguageId);
MESSAGEBOX_RESULT MessageBoxExW([In] [Optional] HWND hWnd, [Const] [In] [Optional] PWSTR lpText, [Const] [In] [Optional] PWSTR lpCaption, [In] MESSAGEBOX_STYLE uType, [In] ushort wLanguageId);
MESSAGEBOX_RESULT MessageBoxIndirectA([Const] [In] MSGBOXPARAMSA* lpmbp);
MESSAGEBOX_RESULT MessageBoxIndirectW([Const] [In] MSGBOXPARAMSW* lpmbp);
int ShowCursor([In] BOOL bShow);
BOOL SetCursorPos([In] int X, [In] int Y);
BOOL SetPhysicalCursorPos([In] int X, [In] int Y);
HCURSOR SetCursor([In] [Optional] HCURSOR hCursor);
BOOL GetCursorPos([Out] POINT* lpPoint);
BOOL GetPhysicalCursorPos([Out] POINT* lpPoint);
BOOL GetClipCursor([Out] RECT* lpRect);
HCURSOR GetCursor();
BOOL CreateCaret([In] HWND hWnd, [In] [Optional] HBITMAP hBitmap, [In] int nWidth, [In] int nHeight);
uint GetCaretBlinkTime();
BOOL SetCaretBlinkTime([In] uint uMSeconds);
BOOL DestroyCaret();
BOOL HideCaret([In] [Optional] HWND hWnd);
BOOL ShowCaret([In] [Optional] HWND hWnd);
BOOL SetCaretPos([In] int X, [In] int Y);
BOOL GetCaretPos([Out] POINT* lpPoint);
BOOL LogicalToPhysicalPoint([In] HWND hWnd, [In] [Out] POINT* lpPoint);
BOOL PhysicalToLogicalPoint([In] HWND hWnd, [In] [Out] POINT* lpPoint);
HWND WindowFromPoint([In] POINT Point);
HWND WindowFromPhysicalPoint([In] POINT Point);
HWND ChildWindowFromPoint([In] HWND hWndParent, [In] POINT Point);
BOOL ClipCursor([Const] [In] [Optional] RECT* lpRect);
HWND ChildWindowFromPointEx([In] HWND hwnd, [In] POINT pt, [In] CWP_FLAGS flags);
ushort GetWindowWord([In] HWND hWnd, [In] int nIndex);
ushort SetWindowWord([In] HWND hWnd, [In] int nIndex, [In] ushort wNewWord);
int GetWindowLongA([In] HWND hWnd, [In] WINDOW_LONG_PTR_INDEX nIndex);
int GetWindowLongW([In] HWND hWnd, [In] WINDOW_LONG_PTR_INDEX nIndex);
int SetWindowLongA([In] HWND hWnd, [In] WINDOW_LONG_PTR_INDEX nIndex, [In] int dwNewLong);
int SetWindowLongW([In] HWND hWnd, [In] WINDOW_LONG_PTR_INDEX nIndex, [In] int dwNewLong);
ushort GetClassWord([In] HWND hWnd, [In] int nIndex);
ushort SetClassWord([In] HWND hWnd, [In] int nIndex, [In] ushort wNewWord);
uint GetClassLongA([In] HWND hWnd, [In] GET_CLASS_LONG_INDEX nIndex);
uint GetClassLongW([In] HWND hWnd, [In] GET_CLASS_LONG_INDEX nIndex);
uint SetClassLongA([In] HWND hWnd, [In] GET_CLASS_LONG_INDEX nIndex, [In] int dwNewLong);
uint SetClassLongW([In] HWND hWnd, [In] GET_CLASS_LONG_INDEX nIndex, [In] int dwNewLong);
BOOL GetProcessDefaultLayout([Out] uint* pdwDefaultLayout);
BOOL SetProcessDefaultLayout([In] uint dwDefaultLayout);
HWND GetDesktopWindow();
HWND GetParent([In] HWND hWnd);
HWND SetParent([In] HWND hWndChild, [In] [Optional] HWND hWndNewParent);
BOOL EnumChildWindows([In] [Optional] HWND hWndParent, [In] WNDENUMPROC lpEnumFunc, [In] LPARAM lParam);
HWND FindWindowA([Const] [In] [Optional] PSTR lpClassName, [Const] [In] [Optional] PSTR lpWindowName);
HWND FindWindowW([Const] [In] [Optional] PWSTR lpClassName, [Const] [In] [Optional] PWSTR lpWindowName);
HWND FindWindowExA([In] [Optional] HWND hWndParent, [In] [Optional] HWND hWndChildAfter, [Const] [In] [Optional] PSTR lpszClass, [Const] [In] [Optional] PSTR lpszWindow);
HWND FindWindowExW([In] [Optional] HWND hWndParent, [In] [Optional] HWND hWndChildAfter, [Const] [In] [Optional] PWSTR lpszClass, [Const] [In] [Optional] PWSTR lpszWindow);
HWND GetShellWindow();
BOOL RegisterShellHookWindow([In] HWND hwnd);
BOOL DeregisterShellHookWindow([In] HWND hwnd);
BOOL EnumWindows([In] WNDENUMPROC lpEnumFunc, [In] LPARAM lParam);
BOOL EnumThreadWindows([In] uint dwThreadId, [In] WNDENUMPROC lpfn, [In] LPARAM lParam);
int GetClassNameA([In] HWND hWnd, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR lpClassName, [In] int nMaxCount);
int GetClassNameW([In] HWND hWnd, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpClassName, [In] int nMaxCount);
HWND GetTopWindow([In] [Optional] HWND hWnd);
uint GetWindowThreadProcessId([In] HWND hWnd, [Out] [Optional] uint* lpdwProcessId);
BOOL IsGUIThread([In] BOOL bConvert);
HWND GetLastActivePopup([In] HWND hWnd);
HWND GetWindow([In] HWND hWnd, [In] GET_WINDOW_CMD uCmd);
HHOOK SetWindowsHookA([In] int nFilterType, [In] HOOKPROC pfnFilterProc);
HHOOK SetWindowsHookW([In] int nFilterType, [In] HOOKPROC pfnFilterProc);
BOOL UnhookWindowsHook([In] int nCode, [In] HOOKPROC pfnFilterProc);
HHOOK SetWindowsHookExA([In] WINDOWS_HOOK_ID idHook, [In] HOOKPROC lpfn, [In] [Optional] HINSTANCE hmod, [In] uint dwThreadId);
HHOOK SetWindowsHookExW([In] WINDOWS_HOOK_ID idHook, [In] HOOKPROC lpfn, [In] [Optional] HINSTANCE hmod, [In] uint dwThreadId);
BOOL UnhookWindowsHookEx([In] HHOOK hhk);
LRESULT CallNextHookEx([In] [Optional] HHOOK hhk, [In] int nCode, [In] WPARAM wParam, [In] LPARAM lParam);
BOOL CheckMenuRadioItem([In] HMENU hmenu, [In] uint first, [In] uint last, [In] uint check, [In] uint flags);
HCURSOR LoadCursorA([In] [Optional] HINSTANCE hInstance, [Const] [In] PSTR lpCursorName);
HCURSOR LoadCursorW([In] [Optional] HINSTANCE hInstance, [Const] [In] PWSTR lpCursorName);
HCURSOR LoadCursorFromFileA([Const] [In] PSTR lpFileName);
HCURSOR LoadCursorFromFileW([Const] [In] PWSTR lpFileName);
HCURSOR CreateCursor([In] [Optional] HINSTANCE hInst, [In] int xHotSpot, [In] int yHotSpot, [In] int nWidth, [In] int nHeight, [Const] [In] void* pvANDPlane, [Const] [In] void* pvXORPlane);
BOOL DestroyCursor([In] HCURSOR hCursor);
BOOL SetSystemCursor([In] HCURSOR hcur, [In] SYSTEM_CURSOR_ID id);
HICON LoadIconA([In] [Optional] HINSTANCE hInstance, [Const] [In] PSTR lpIconName);
HICON LoadIconW([In] [Optional] HINSTANCE hInstance, [Const] [In] PWSTR lpIconName);
uint PrivateExtractIconsA([Const] [NativeArrayInfo(CountConst = 260)] [In] PSTR szFileName, [In] int nIconIndex, [In] int cxIcon, [In] int cyIcon, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] HICON* phicon, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] uint* piconid, [In] uint nIcons, [In] uint flags);
uint PrivateExtractIconsW([Const] [NativeArrayInfo(CountConst = 260)] [In] PWSTR szFileName, [In] int nIconIndex, [In] int cxIcon, [In] int cyIcon, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] HICON* phicon, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] uint* piconid, [In] uint nIcons, [In] uint flags);
HICON CreateIcon([In] [Optional] HINSTANCE hInstance, [In] int nWidth, [In] int nHeight, [In] byte cPlanes, [In] byte cBitsPixel, [Const] [NativeArrayInfo] [In] byte* lpbANDbits, [Const] [NativeArrayInfo] [In] byte* lpbXORbits);
BOOL DestroyIcon([In] HICON hIcon);
int LookupIconIdFromDirectory([In] byte* presbits, [In] BOOL fIcon);
int LookupIconIdFromDirectoryEx([In] byte* presbits, [In] BOOL fIcon, [In] int cxDesired, [In] int cyDesired, [In] IMAGE_FLAGS Flags);
HICON CreateIconFromResource([MemorySize(BytesParamIndex = 1)] [In] byte* presbits, [In] uint dwResSize, [In] BOOL fIcon, [In] uint dwVer);
HICON CreateIconFromResourceEx([MemorySize(BytesParamIndex = 1)] [In] byte* presbits, [In] uint dwResSize, [In] BOOL fIcon, [In] uint dwVer, [In] int cxDesired, [In] int cyDesired, [In] IMAGE_FLAGS Flags);
HANDLE LoadImageA([In] [Optional] HINSTANCE hInst, [Const] [In] PSTR name, [In] GDI_IMAGE_TYPE type, [In] int cx, [In] int cy, [In] IMAGE_FLAGS fuLoad);
HANDLE LoadImageW([In] [Optional] HINSTANCE hInst, [Const] [In] PWSTR name, [In] GDI_IMAGE_TYPE type, [In] int cx, [In] int cy, [In] IMAGE_FLAGS fuLoad);
HANDLE CopyImage([In] HANDLE h, [In] GDI_IMAGE_TYPE type, [In] int cx, [In] int cy, [In] IMAGE_FLAGS flags);
BOOL DrawIconEx([In] HDC hdc, [In] int xLeft, [In] int yTop, [In] HICON hIcon, [In] int cxWidth, [In] int cyWidth, [In] uint istepIfAniCur, [In] [Optional] HBRUSH hbrFlickerFreeDraw, [In] DI_FLAGS diFlags);
HICON CreateIconIndirect([In] ICONINFO* piconinfo);
HICON CopyIcon([In] HICON hIcon);
BOOL GetIconInfo([In] HICON hIcon, [Out] ICONINFO* piconinfo);
BOOL GetIconInfoExA([In] HICON hicon, [In] [Out] ICONINFOEXA* piconinfo);
BOOL GetIconInfoExW([In] HICON hicon, [In] [Out] ICONINFOEXW* piconinfo);
BOOL IsDialogMessageA([In] HWND hDlg, [In] MSG* lpMsg);
BOOL IsDialogMessageW([In] HWND hDlg, [In] MSG* lpMsg);
BOOL MapDialogRect([In] HWND hDlg, [In] [Out] RECT* lpRect);
BOOL GetScrollInfo([In] HWND hwnd, [In] SCROLLBAR_CONSTANTS nBar, [In] [Out] SCROLLINFO* lpsi);
LRESULT DefFrameProcA([In] HWND hWnd, [In] [Optional] HWND hWndMDIClient, [In] uint uMsg, [In] WPARAM wParam, [In] LPARAM lParam);
LRESULT DefFrameProcW([In] HWND hWnd, [In] [Optional] HWND hWndMDIClient, [In] uint uMsg, [In] WPARAM wParam, [In] LPARAM lParam);
LRESULT DefMDIChildProcA([In] HWND hWnd, [In] uint uMsg, [In] WPARAM wParam, [In] LPARAM lParam);
LRESULT DefMDIChildProcW([In] HWND hWnd, [In] uint uMsg, [In] WPARAM wParam, [In] LPARAM lParam);
BOOL TranslateMDISysAccel([In] HWND hWndClient, [In] MSG* lpMsg);
uint ArrangeIconicWindows([In] HWND hWnd);
HWND CreateMDIWindowA([Const] [In] PSTR lpClassName, [Const] [In] PSTR lpWindowName, [In] WINDOW_STYLE dwStyle, [In] int X, [In] int Y, [In] int nWidth, [In] int nHeight, [In] [Optional] HWND hWndParent, [In] [Optional] HINSTANCE hInstance, [In] LPARAM lParam);
HWND CreateMDIWindowW([Const] [In] PWSTR lpClassName, [Const] [In] PWSTR lpWindowName, [In] WINDOW_STYLE dwStyle, [In] int X, [In] int Y, [In] int nWidth, [In] int nHeight, [In] [Optional] HWND hWndParent, [In] [Optional] HINSTANCE hInstance, [In] LPARAM lParam);
ushort TileWindows([In] [Optional] HWND hwndParent, [In] TILE_WINDOWS_HOW wHow, [Const] [In] [Optional] RECT* lpRect, [In] uint cKids, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] HWND* lpKids);
ushort CascadeWindows([In] [Optional] HWND hwndParent, [In] CASCADE_WINDOWS_HOW wHow, [Const] [In] [Optional] RECT* lpRect, [In] uint cKids, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] HWND* lpKids);
BOOL SystemParametersInfoA([In] SYSTEM_PARAMETERS_INFO_ACTION uiAction, [In] uint uiParam, [Out] [Optional] void* pvParam, [In] SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS fWinIni);
BOOL SystemParametersInfoW([In] SYSTEM_PARAMETERS_INFO_ACTION uiAction, [In] uint uiParam, [Out] [Optional] void* pvParam, [In] SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS fWinIni);
BOOL SoundSentry();
void SetDebugErrorLevel([In] uint dwLevel);
int InternalGetWindowText([In] HWND hWnd, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pString, [In] int cchMaxCount);
BOOL CancelShutdown();
BOOL GetGUIThreadInfo([In] uint idThread, [In] [Out] GUITHREADINFO* pgui);
BOOL SetProcessDPIAware();
BOOL IsProcessDPIAware();
BOOL InheritWindowMonitor([In] HWND hwnd, [In] [Optional] HWND hwndInherit);
uint GetWindowModuleFileNameA([In] HWND hwnd, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszFileName, [In] uint cchFileNameMax);
uint GetWindowModuleFileNameW([In] HWND hwnd, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszFileName, [In] uint cchFileNameMax);
BOOL GetCursorInfo([In] [Out] CURSORINFO* pci);
BOOL GetWindowInfo([In] HWND hwnd, [In] [Out] WINDOWINFO* pwi);
BOOL GetTitleBarInfo([In] HWND hwnd, [In] [Out] TITLEBARINFO* pti);
BOOL GetMenuBarInfo([In] HWND hwnd, [In] OBJECT_IDENTIFIER idObject, [In] int idItem, [In] [Out] MENUBARINFO* pmbi);
BOOL GetScrollBarInfo([In] HWND hwnd, [In] OBJECT_IDENTIFIER idObject, [In] [Out] SCROLLBARINFO* psbi);
HWND GetAncestor([In] HWND hwnd, [In] GET_ANCESTOR_FLAGS gaFlags);
HWND RealChildWindowFromPoint([In] HWND hwndParent, [In] POINT ptParentClientCoords);
uint RealGetWindowClassA([In] HWND hwnd, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR ptszClassName, [In] uint cchClassNameMax);
uint RealGetWindowClassW([In] HWND hwnd, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR ptszClassName, [In] uint cchClassNameMax);
BOOL GetAltTabInfoA([In] [Optional] HWND hwnd, [In] int iItem, [In] [Out] ALTTABINFO* pati, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR pszItemText, [In] uint cchItemText);
BOOL GetAltTabInfoW([In] [Optional] HWND hwnd, [In] int iItem, [In] [Out] ALTTABINFO* pati, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR pszItemText, [In] uint cchItemText);
BOOL ChangeWindowMessageFilter([In] uint message, [In] CHANGE_WINDOW_MESSAGE_FILTER_FLAGS dwFlag);
BOOL ChangeWindowMessageFilterEx([In] HWND hwnd, [In] uint message, [In] WINDOW_MESSAGE_FILTER_ACTION action, [In] [Out] [Optional] CHANGEFILTERSTRUCT* pChangeFilterStruct);
