HRESULT CfGetPlatformInfo([Out] CF_PLATFORM_INFO* PlatformVersion);
HRESULT CfRegisterSyncRoot([Const] [In] PWSTR SyncRootPath, [Const] [In] CF_SYNC_REGISTRATION* Registration, [Const] [In] CF_SYNC_POLICIES* Policies, [In] CF_REGISTER_FLAGS RegisterFlags);
HRESULT CfUnregisterSyncRoot([Const] [In] PWSTR SyncRootPath);
HRESULT CfConnectSyncRoot([Const] [In] PWSTR SyncRootPath, [Const] [In] CF_CALLBACK_REGISTRATION* CallbackTable, [Const] [In] [Optional] void* CallbackContext, [In] CF_CONNECT_FLAGS ConnectFlags, [Out] CF_CONNECTION_KEY* ConnectionKey);
HRESULT CfDisconnectSyncRoot([In] CF_CONNECTION_KEY ConnectionKey);
HRESULT CfGetTransferKey([In] HANDLE FileHandle, [Out] LARGE_INTEGER* TransferKey);
void CfReleaseTransferKey([In] HANDLE FileHandle, [Out] LARGE_INTEGER* TransferKey);
HRESULT CfExecute([Const] [In] CF_OPERATION_INFO* OpInfo, [In] [Out] CF_OPERATION_PARAMETERS* OpParams);
HRESULT CfUpdateSyncProviderStatus([In] CF_CONNECTION_KEY ConnectionKey, [In] CF_SYNC_PROVIDER_STATUS ProviderStatus);
HRESULT CfQuerySyncProviderStatus([In] CF_CONNECTION_KEY ConnectionKey, [Out] CF_SYNC_PROVIDER_STATUS* ProviderStatus);
HRESULT CfReportSyncStatus([Const] [In] PWSTR SyncRootPath, [In] [Optional] CF_SYNC_STATUS* SyncStatus);
HRESULT CfCreatePlaceholders([Const] [In] PWSTR BaseDirectoryPath, [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] CF_PLACEHOLDER_CREATE_INFO* PlaceholderArray, [In] uint PlaceholderCount, [In] CF_CREATE_FLAGS CreateFlags, [Out] [Optional] uint* EntriesProcessed);
HRESULT CfOpenFileWithOplock([Const] [In] PWSTR FilePath, [In] CF_OPEN_FILE_FLAGS Flags, [Out] HANDLE* ProtectedHandle);
BOOLEAN CfReferenceProtectedHandle([In] HANDLE ProtectedHandle);
HANDLE CfGetWin32HandleFromProtectedHandle([In] HANDLE ProtectedHandle);
void CfReleaseProtectedHandle([In] HANDLE ProtectedHandle);
void CfCloseHandle([In] HANDLE FileHandle);
HRESULT CfConvertToPlaceholder([In] HANDLE FileHandle, [Const] [MemorySize(BytesParamIndex = 2)] [In] [Optional] void* FileIdentity, [In] uint FileIdentityLength, [In] CF_CONVERT_FLAGS ConvertFlags, [Out] [Optional] long* ConvertUsn, [In] [Out] [Optional] OVERLAPPED* Overlapped);
HRESULT CfUpdatePlaceholder([In] HANDLE FileHandle, [Const] [In] [Optional] CF_FS_METADATA* FsMetadata, [Const] [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* FileIdentity, [In] uint FileIdentityLength, [Const] [NativeArrayInfo(CountParamIndex = 5)] [In] [Optional] CF_FILE_RANGE* DehydrateRangeArray, [In] uint DehydrateRangeCount, [In] CF_UPDATE_FLAGS UpdateFlags, [In] [Out] [Optional] long* UpdateUsn, [In] [Out] [Optional] OVERLAPPED* Overlapped);
HRESULT CfRevertPlaceholder([In] HANDLE FileHandle, [In] CF_REVERT_FLAGS RevertFlags, [In] [Out] [Optional] OVERLAPPED* Overlapped);
HRESULT CfHydratePlaceholder([In] HANDLE FileHandle, [In] LARGE_INTEGER StartingOffset, [In] LARGE_INTEGER Length, [In] CF_HYDRATE_FLAGS HydrateFlags, [In] [Out] [Optional] OVERLAPPED* Overlapped);
HRESULT CfDehydratePlaceholder([In] HANDLE FileHandle, [In] LARGE_INTEGER StartingOffset, [In] LARGE_INTEGER Length, [In] CF_DEHYDRATE_FLAGS DehydrateFlags, [In] [Out] [Optional] OVERLAPPED* Overlapped);
HRESULT CfSetPinState([In] HANDLE FileHandle, [In] CF_PIN_STATE PinState, [In] CF_SET_PIN_FLAGS PinFlags, [In] [Out] [Optional] OVERLAPPED* Overlapped);
HRESULT CfSetInSyncState([In] HANDLE FileHandle, [In] CF_IN_SYNC_STATE InSyncState, [In] CF_SET_IN_SYNC_FLAGS InSyncFlags, [In] [Out] [Optional] long* InSyncUsn);
HRESULT CfSetCorrelationVector([In] HANDLE FileHandle, [Const] [In] CORRELATION_VECTOR* CorrelationVector);
HRESULT CfGetCorrelationVector([In] HANDLE FileHandle, [Out] CORRELATION_VECTOR* CorrelationVector);
CF_PLACEHOLDER_STATE CfGetPlaceholderStateFromAttributeTag([In] uint FileAttributes, [In] uint ReparseTag);
CF_PLACEHOLDER_STATE CfGetPlaceholderStateFromFileInfo([Const] [In] void* InfoBuffer, [In] FILE_INFO_BY_HANDLE_CLASS InfoClass);
CF_PLACEHOLDER_STATE CfGetPlaceholderStateFromFindData([Const] [In] WIN32_FIND_DATAA* FindData);
HRESULT CfGetPlaceholderInfo([In] HANDLE FileHandle, [In] CF_PLACEHOLDER_INFO_CLASS InfoClass, [MemorySize(BytesParamIndex = 3)] [Out] void* InfoBuffer, [In] uint InfoBufferLength, [Out] [Optional] uint* ReturnedLength);
HRESULT CfGetSyncRootInfoByPath([Const] [In] PWSTR FilePath, [In] CF_SYNC_ROOT_INFO_CLASS InfoClass, [Out] void* InfoBuffer, [In] uint InfoBufferLength, [Out] [Optional] uint* ReturnedLength);
HRESULT CfGetSyncRootInfoByHandle([In] HANDLE FileHandle, [In] CF_SYNC_ROOT_INFO_CLASS InfoClass, [Out] void* InfoBuffer, [In] uint InfoBufferLength, [Out] [Optional] uint* ReturnedLength);
HRESULT CfGetPlaceholderRangeInfo([In] HANDLE FileHandle, [In] CF_PLACEHOLDER_RANGE_INFO_CLASS InfoClass, [In] LARGE_INTEGER StartingOffset, [In] LARGE_INTEGER Length, [MemorySize(BytesParamIndex = 5)] [Out] void* InfoBuffer, [In] uint InfoBufferLength, [Out] [Optional] uint* ReturnedLength);
HRESULT CfReportProviderProgress([In] CF_CONNECTION_KEY ConnectionKey, [In] LARGE_INTEGER TransferKey, [In] LARGE_INTEGER ProviderProgressTotal, [In] LARGE_INTEGER ProviderProgressCompleted);
HRESULT CfReportProviderProgress2([In] CF_CONNECTION_KEY ConnectionKey, [In] LARGE_INTEGER TransferKey, [In] LARGE_INTEGER RequestKey, [In] LARGE_INTEGER ProviderProgressTotal, [In] LARGE_INTEGER ProviderProgressCompleted, [In] uint TargetSessionId);
