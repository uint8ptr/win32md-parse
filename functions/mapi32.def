HRESULT OpenTnefStream([In] [Out] void* lpvSupport, [In] IStream lpStream, [In] sbyte* lpszStreamName, [In] uint ulFlags, [In] IMessage lpMessage, [In] ushort wKeyVal, [Out] ITnef* lppTNEF);
HRESULT OpenTnefStreamEx([In] [Out] void* lpvSupport, [In] IStream lpStream, [In] sbyte* lpszStreamName, [In] uint ulFlags, [In] IMessage lpMessage, [In] ushort wKeyVal, [In] IAddrBook lpAdressBook, [Out] ITnef* lppTNEF);
HRESULT GetTnefStreamCodepage([In] IStream lpStream, [In] [Out] uint* lpulCodepage, [In] [Out] uint* lpulSubCodepage);
int OpenIMsgSession([In] IMalloc lpMalloc, [In] uint ulFlags, [In] [Out] _MSGSESS** lppMsgSess);
void CloseIMsgSession([In] [Out] _MSGSESS* lpMsgSess);
int OpenIMsgOnIStg([In] [Out] _MSGSESS* lpMsgSess, [In] LPALLOCATEBUFFER lpAllocateBuffer, [In] LPALLOCATEMORE lpAllocateMore, [In] LPFREEBUFFER lpFreeBuffer, [In] IMalloc lpMalloc, [In] [Out] void* lpMapiSup, [In] IStorage lpStg, [In] [Out] MSGCALLRELEASE* lpfMsgCallRelease, [In] uint ulCallerData, [In] uint ulFlags, [Out] IMessage* lppMsg);
HRESULT GetAttribIMsgOnIStg([In] [Out] void* lpObject, [In] [Out] SPropTagArray* lpPropTagArray, [In] [Out] SPropAttrArray** lppPropAttrArray);
HRESULT SetAttribIMsgOnIStg([In] [Out] void* lpObject, [In] [Out] SPropTagArray* lpPropTags, [In] [Out] SPropAttrArray* lpPropAttrs, [In] [Out] SPropProblemArray** lppPropProblems);
int MapStorageSCode([In] int StgSCode);
int CreateIProp([In] [Out] Guid* lpInterface, [In] LPALLOCATEBUFFER lpAllocateBuffer, [In] LPALLOCATEMORE lpAllocateMore, [In] LPFREEBUFFER lpFreeBuffer, [In] [Out] void* lpvReserved, [Out] IPropData* lppPropData);
int MAPIInitIdle([In] [Out] void* lpvReserved);
void MAPIDeinitIdle();
void* FtgRegisterIdleRoutine([In] PFNIDLE lpfnIdle, [In] [Out] void* lpvIdleParam, [In] short priIdle, [In] uint csecIdle, [In] ushort iroIdle);
void DeregisterIdleRoutine([In] [Out] void* ftg);
void EnableIdleRoutine([In] [Out] void* ftg, [In] BOOL fEnable);
void ChangeIdleRoutine([In] [Out] void* ftg, [In] PFNIDLE lpfnIdle, [In] [Out] void* lpvIdleParam, [In] short priIdle, [In] uint csecIdle, [In] ushort iroIdle, [In] ushort ircIdle);
IMalloc MAPIGetDefaultMalloc();
HRESULT OpenStreamOnFile([In] LPALLOCATEBUFFER lpAllocateBuffer, [In] LPFREEBUFFER lpFreeBuffer, [In] uint ulFlags, [In] sbyte* lpszFileName, [In] [Optional] sbyte* lpszPrefix, [Out] IStream* lppStream);
int PropCopyMore([In] [Out] SPropValue* lpSPropValueDest, [In] [Out] SPropValue* lpSPropValueSrc, [In] LPALLOCATEMORE lpfAllocMore, [In] [Out] void* lpvObject);
uint UlPropSize([In] [Out] SPropValue* lpSPropValue);
BOOL FEqualNames([In] [Out] MAPINAMEID* lpName1, [In] [Out] MAPINAMEID* lpName2);
BOOL FPropContainsProp([In] [Out] SPropValue* lpSPropValueDst, [In] [Out] SPropValue* lpSPropValueSrc, [In] uint ulFuzzyLevel);
BOOL FPropCompareProp([In] [Out] SPropValue* lpSPropValue1, [In] uint ulRelOp, [In] [Out] SPropValue* lpSPropValue2);
int LPropCompareProp([In] [Out] SPropValue* lpSPropValueA, [In] [Out] SPropValue* lpSPropValueB);
HRESULT HrAddColumns([In] IMAPITable lptbl, [In] [Out] SPropTagArray* lpproptagColumnsNew, [In] LPALLOCATEBUFFER lpAllocateBuffer, [In] LPFREEBUFFER lpFreeBuffer);
HRESULT HrAddColumnsEx([In] IMAPITable lptbl, [In] [Out] SPropTagArray* lpproptagColumnsNew, [In] LPALLOCATEBUFFER lpAllocateBuffer, [In] LPFREEBUFFER lpFreeBuffer, [In] nint lpfnFilterColumns);
HRESULT HrAllocAdviseSink([In] LPNOTIFCALLBACK lpfnCallback, [In] [Out] void* lpvContext, [Out] IMAPIAdviseSink* lppAdviseSink);
HRESULT HrThisThreadAdviseSink([In] IMAPIAdviseSink lpAdviseSink, [Out] IMAPIAdviseSink* lppAdviseSink);
HRESULT HrDispatchNotifications([In] uint ulFlags);
HRESULT BuildDisplayTable([In] LPALLOCATEBUFFER lpAllocateBuffer, [In] LPALLOCATEMORE lpAllocateMore, [In] LPFREEBUFFER lpFreeBuffer, [In] IMalloc lpMalloc, [In] HINSTANCE hInstance, [In] uint cPages, [In] [Out] DTPAGE* lpPage, [In] uint ulFlags, [Out] IMAPITable* lppTable, [Out] ITableData* lppTblData);
int ScCountNotifications([In] int cNotifications, [In] [Out] NOTIFICATION* lpNotifications, [In] [Out] uint* lpcb);
int ScCopyNotifications([In] int cNotification, [In] [Out] NOTIFICATION* lpNotifications, [In] [Out] void* lpvDst, [In] [Out] uint* lpcb);
int ScRelocNotifications([In] int cNotification, [In] [Out] NOTIFICATION* lpNotifications, [In] [Out] void* lpvBaseOld, [In] [Out] void* lpvBaseNew, [In] [Out] uint* lpcb);
int ScCountProps([In] int cValues, [In] [Out] SPropValue* lpPropArray, [In] [Out] uint* lpcb);
SPropValue* LpValFindProp([In] uint ulPropTag, [In] uint cValues, [In] [Out] SPropValue* lpPropArray);
int ScCopyProps([In] int cValues, [In] [Out] SPropValue* lpPropArray, [In] [Out] void* lpvDst, [In] [Out] uint* lpcb);
int ScRelocProps([In] int cValues, [In] [Out] SPropValue* lpPropArray, [In] [Out] void* lpvBaseOld, [In] [Out] void* lpvBaseNew, [In] [Out] uint* lpcb);
int ScDupPropset([In] int cValues, [In] [Out] SPropValue* lpPropArray, [In] LPALLOCATEBUFFER lpAllocateBuffer, [In] [Out] SPropValue** lppPropArray);
uint UlAddRef([In] [Out] void* lpunk);
uint UlRelease([In] [Out] void* lpunk);
HRESULT HrGetOneProp([In] IMAPIProp lpMapiProp, [In] uint ulPropTag, [In] [Out] SPropValue** lppProp);
HRESULT HrSetOneProp([In] IMAPIProp lpMapiProp, [In] [Out] SPropValue* lpProp);
BOOL FPropExists([In] IMAPIProp lpMapiProp, [In] uint ulPropTag);
SPropValue* PpropFindProp([In] [Out] SPropValue* lpPropArray, [In] uint cValues, [In] uint ulPropTag);
void FreePadrlist([In] [Out] ADRLIST* lpAdrlist);
void FreeProws([In] [Out] SRowSet* lpRows);
HRESULT HrQueryAllRows([In] IMAPITable lpTable, [In] [Out] SPropTagArray* lpPropTags, [In] [Out] SRestriction* lpRestriction, [In] [Out] SSortOrderSet* lpSortOrderSet, [In] int crowsMax, [In] [Out] SRowSet** lppRows);
sbyte* SzFindCh([In] [Out] sbyte* lpsz, [In] ushort ch);
sbyte* SzFindLastCh([In] [Out] sbyte* lpsz, [In] ushort ch);
sbyte* SzFindSz([In] [Out] sbyte* lpsz, [In] [Out] sbyte* lpszKey);
uint UFromSz([In] [Out] sbyte* lpsz);
int ScUNCFromLocalPath([In] PSTR lpszLocal, [NativeArrayInfo(CountParamIndex = 2)] [In] PSTR lpszUNC, [In] uint cchUNC);
int ScLocalPathFromUNC([In] PSTR lpszUNC, [NativeArrayInfo(CountParamIndex = 2)] [In] PSTR lpszLocal, [In] uint cchLocal);
FILETIME FtAddFt([In] FILETIME ftAddend1, [In] FILETIME ftAddend2);
FILETIME FtMulDwDw([In] uint ftMultiplicand, [In] uint ftMultiplier);
FILETIME FtMulDw([In] uint ftMultiplier, [In] FILETIME ftMultiplicand);
FILETIME FtSubFt([In] FILETIME ftMinuend, [In] FILETIME ftSubtrahend);
FILETIME FtNegFt([In] FILETIME ft);
int ScCreateConversationIndex([In] uint cbParent, [In] [Out] byte* lpbParent, [In] [Out] uint* lpcbConvIndex, [In] [Out] byte** lppbConvIndex);
HRESULT WrapStoreEntryID([In] uint ulFlags, [In] sbyte* lpszDLLName, [In] uint cbOrigEntry, [MemorySize(BytesParamIndex = 2)] [In] ENTRYID* lpOrigEntry, [Out] uint* lpcbWrappedEntry, [MemorySize(BytesParamIndex = 4)] [Out] ENTRYID** lppWrappedEntry);
HRESULT RTFSync([In] IMessage lpMessage, [In] uint ulFlags, [In] [Out] BOOL* lpfMessageUpdated);
HRESULT WrapCompressedRTFStream([In] IStream lpCompressedRTFStream, [In] uint ulFlags, [Out] IStream* lpUncompressedRTFStream);
HRESULT HrIStorageFromStream([In] IUnknown lpUnkIn, [In] [Out] Guid* lpInterface, [In] uint ulFlags, [Out] IStorage* lppStorageOut);
int ScInitMapiUtil([In] uint ulFlags);
void DeinitMapiUtil();
uint MAPIFreeBuffer([In] [Out] void* pv);
