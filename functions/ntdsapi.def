uint DsBindW([Const] [In] [Optional] PWSTR DomainControllerName, [Const] [In] [Optional] PWSTR DnsDomainName, [Out] HANDLE* phDS);
uint DsBindA([Const] [In] [Optional] PSTR DomainControllerName, [Const] [In] [Optional] PSTR DnsDomainName, [Out] HANDLE* phDS);
uint DsBindWithCredW([Const] [In] [Optional] PWSTR DomainControllerName, [Const] [In] [Optional] PWSTR DnsDomainName, [In] [Optional] void* AuthIdentity, [Out] HANDLE* phDS);
uint DsBindWithCredA([Const] [In] [Optional] PSTR DomainControllerName, [Const] [In] [Optional] PSTR DnsDomainName, [In] [Optional] void* AuthIdentity, [Out] HANDLE* phDS);
uint DsBindWithSpnW([Const] [In] [Optional] PWSTR DomainControllerName, [Const] [In] [Optional] PWSTR DnsDomainName, [In] [Optional] void* AuthIdentity, [Const] [In] [Optional] PWSTR ServicePrincipalName, [Out] HANDLE* phDS);
uint DsBindWithSpnA([Const] [In] [Optional] PSTR DomainControllerName, [Const] [In] [Optional] PSTR DnsDomainName, [In] [Optional] void* AuthIdentity, [Const] [In] [Optional] PSTR ServicePrincipalName, [Out] HANDLE* phDS);
uint DsBindWithSpnExW([Const] [In] [Optional] PWSTR DomainControllerName, [Const] [In] [Optional] PWSTR DnsDomainName, [In] [Optional] void* AuthIdentity, [Const] [In] [Optional] PWSTR ServicePrincipalName, [In] [Optional] uint BindFlags, [Out] HANDLE* phDS);
uint DsBindWithSpnExA([Const] [In] [Optional] PSTR DomainControllerName, [Const] [In] [Optional] PSTR DnsDomainName, [In] [Optional] void* AuthIdentity, [Const] [In] [Optional] PSTR ServicePrincipalName, [In] [Optional] uint BindFlags, [Out] HANDLE* phDS);
uint DsBindByInstanceW([Const] [In] [Optional] PWSTR ServerName, [Const] [In] [Optional] PWSTR Annotation, [In] [Optional] Guid* InstanceGuid, [Const] [In] [Optional] PWSTR DnsDomainName, [In] [Optional] void* AuthIdentity, [Const] [In] [Optional] PWSTR ServicePrincipalName, [In] [Optional] uint BindFlags, [Out] HANDLE* phDS);
uint DsBindByInstanceA([Const] [In] [Optional] PSTR ServerName, [Const] [In] [Optional] PSTR Annotation, [In] [Optional] Guid* InstanceGuid, [Const] [In] [Optional] PSTR DnsDomainName, [In] [Optional] void* AuthIdentity, [Const] [In] [Optional] PSTR ServicePrincipalName, [In] [Optional] uint BindFlags, [Out] HANDLE* phDS);
uint DsBindToISTGW([Const] [In] [Optional] PWSTR SiteName, [Out] HANDLE* phDS);
uint DsBindToISTGA([Const] [In] [Optional] PSTR SiteName, [Out] HANDLE* phDS);
uint DsBindingSetTimeout([In] HANDLE hDS, [In] uint cTimeoutSecs);
uint DsUnBindW([In] HANDLE* phDS);
uint DsUnBindA([In] HANDLE* phDS);
uint DsMakePasswordCredentialsW([Const] [In] [Optional] PWSTR User, [Const] [In] [Optional] PWSTR Domain, [Const] [In] [Optional] PWSTR Password, [Out] void** pAuthIdentity);
uint DsMakePasswordCredentialsA([Const] [In] [Optional] PSTR User, [Const] [In] [Optional] PSTR Domain, [Const] [In] [Optional] PSTR Password, [Out] void** pAuthIdentity);
void DsFreePasswordCredentials([In] void* AuthIdentity);
uint DsCrackNamesW([In] [Optional] HANDLE hDS, [In] DS_NAME_FLAGS flags, [In] DS_NAME_FORMAT formatOffered, [In] DS_NAME_FORMAT formatDesired, [In] uint cNames, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] PWSTR* rpNames, [Out] DS_NAME_RESULTW** ppResult);
uint DsCrackNamesA([In] [Optional] HANDLE hDS, [In] DS_NAME_FLAGS flags, [In] DS_NAME_FORMAT formatOffered, [In] DS_NAME_FORMAT formatDesired, [In] uint cNames, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] PSTR* rpNames, [Out] DS_NAME_RESULTA** ppResult);
void DsFreeNameResultW([In] DS_NAME_RESULTW* pResult);
void DsFreeNameResultA([In] DS_NAME_RESULTA* pResult);
uint DsGetSpnA([In] DS_SPN_NAME_TYPE ServiceType, [Const] [In] PSTR ServiceClass, [Const] [In] [Optional] PSTR ServiceName, [In] ushort InstancePort, [In] ushort cInstanceNames, [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] PSTR* pInstanceNames, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] ushort* pInstancePorts, [Out] uint* pcSpn, [Out] PSTR** prpszSpn);
uint DsGetSpnW([In] DS_SPN_NAME_TYPE ServiceType, [Const] [In] PWSTR ServiceClass, [Const] [In] [Optional] PWSTR ServiceName, [In] ushort InstancePort, [In] ushort cInstanceNames, [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] PWSTR* pInstanceNames, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] ushort* pInstancePorts, [Out] uint* pcSpn, [Out] PWSTR** prpszSpn);
void DsFreeSpnArrayA([In] uint cSpn, [NativeArrayInfo(CountParamIndex = 0)] [In] [Out] PSTR* rpszSpn);
void DsFreeSpnArrayW([In] uint cSpn, [NativeArrayInfo(CountParamIndex = 0)] [In] [Out] PWSTR* rpszSpn);
uint DsWriteAccountSpnA([In] HANDLE hDS, [In] DS_SPN_WRITE_OP Operation, [Const] [In] PSTR pszAccount, [In] uint cSpn, [NativeArrayInfo(CountParamIndex = 3)] [In] PSTR* rpszSpn);
uint DsWriteAccountSpnW([In] HANDLE hDS, [In] DS_SPN_WRITE_OP Operation, [Const] [In] PWSTR pszAccount, [In] uint cSpn, [NativeArrayInfo(CountParamIndex = 3)] [In] PWSTR* rpszSpn);
uint DsClientMakeSpnForTargetServerW([Const] [In] PWSTR ServiceClass, [Const] [In] PWSTR ServiceName, [In] [Out] uint* pcSpnLength, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszSpn);
uint DsClientMakeSpnForTargetServerA([Const] [In] PSTR ServiceClass, [Const] [In] PSTR ServiceName, [In] [Out] uint* pcSpnLength, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszSpn);
uint DsServerRegisterSpnA([In] DS_SPN_WRITE_OP Operation, [Const] [In] PSTR ServiceClass, [Const] [In] [Optional] PSTR UserObjectDN);
uint DsServerRegisterSpnW([In] DS_SPN_WRITE_OP Operation, [Const] [In] PWSTR ServiceClass, [Const] [In] [Optional] PWSTR UserObjectDN);
uint DsReplicaSyncA([In] HANDLE hDS, [Const] [In] PSTR NameContext, [Const] [In] Guid* pUuidDsaSrc, [In] uint Options);
uint DsReplicaSyncW([In] HANDLE hDS, [Const] [In] PWSTR NameContext, [Const] [In] Guid* pUuidDsaSrc, [In] uint Options);
uint DsReplicaAddA([In] HANDLE hDS, [Const] [In] PSTR NameContext, [Const] [In] PSTR SourceDsaDn, [Const] [In] PSTR TransportDn, [Const] [In] PSTR SourceDsaAddress, [Const] [In] [Optional] SCHEDULE* pSchedule, [In] uint Options);
uint DsReplicaAddW([In] HANDLE hDS, [Const] [In] PWSTR NameContext, [Const] [In] PWSTR SourceDsaDn, [Const] [In] PWSTR TransportDn, [Const] [In] PWSTR SourceDsaAddress, [Const] [In] [Optional] SCHEDULE* pSchedule, [In] uint Options);
uint DsReplicaDelA([In] HANDLE hDS, [Const] [In] PSTR NameContext, [Const] [In] PSTR DsaSrc, [In] uint Options);
uint DsReplicaDelW([In] HANDLE hDS, [Const] [In] PWSTR NameContext, [Const] [In] PWSTR DsaSrc, [In] uint Options);
uint DsReplicaModifyA([In] HANDLE hDS, [Const] [In] PSTR NameContext, [Const] [In] [Optional] Guid* pUuidSourceDsa, [Const] [Reserved] [In] PSTR TransportDn, [Const] [In] PSTR SourceDsaAddress, [Const] [In] [Optional] SCHEDULE* pSchedule, [Reserved] [In] uint ReplicaFlags, [In] uint ModifyFields, [In] uint Options);
uint DsReplicaModifyW([In] HANDLE hDS, [Const] [In] PWSTR NameContext, [Const] [In] [Optional] Guid* pUuidSourceDsa, [Const] [Reserved] [In] PWSTR TransportDn, [Const] [In] PWSTR SourceDsaAddress, [Const] [In] [Optional] SCHEDULE* pSchedule, [In] uint ReplicaFlags, [In] uint ModifyFields, [In] uint Options);
uint DsReplicaUpdateRefsA([In] HANDLE hDS, [Const] [In] PSTR NameContext, [Const] [In] PSTR DsaDest, [Const] [In] Guid* pUuidDsaDest, [In] uint Options);
uint DsReplicaUpdateRefsW([In] HANDLE hDS, [Const] [In] PWSTR NameContext, [Const] [In] PWSTR DsaDest, [Const] [In] Guid* pUuidDsaDest, [In] uint Options);
uint DsReplicaSyncAllA([In] HANDLE hDS, [Const] [In] PSTR pszNameContext, [In] uint ulFlags, [In] nint pFnCallBack, [In] [Optional] void* pCallbackData, [Out] [Optional] DS_REPSYNCALL_ERRINFOA*** pErrors);
uint DsReplicaSyncAllW([In] HANDLE hDS, [Const] [In] PWSTR pszNameContext, [In] uint ulFlags, [In] nint pFnCallBack, [In] [Optional] void* pCallbackData, [Out] [Optional] DS_REPSYNCALL_ERRINFOW*** pErrors);
uint DsRemoveDsServerW([In] HANDLE hDs, [In] PWSTR ServerDN, [In] [Optional] PWSTR DomainDN, [Out] [Optional] BOOL* fLastDcInDomain, [In] BOOL fCommit);
uint DsRemoveDsServerA([In] HANDLE hDs, [In] PSTR ServerDN, [In] [Optional] PSTR DomainDN, [Out] [Optional] BOOL* fLastDcInDomain, [In] BOOL fCommit);
uint DsRemoveDsDomainW([In] HANDLE hDs, [In] PWSTR DomainDN);
uint DsRemoveDsDomainA([In] HANDLE hDs, [In] PSTR DomainDN);
uint DsListSitesA([In] HANDLE hDs, [Out] DS_NAME_RESULTA** ppSites);
uint DsListSitesW([In] HANDLE hDs, [Out] DS_NAME_RESULTW** ppSites);
uint DsListServersInSiteA([In] HANDLE hDs, [Const] [In] PSTR site, [Out] DS_NAME_RESULTA** ppServers);
uint DsListServersInSiteW([In] HANDLE hDs, [Const] [In] PWSTR site, [Out] DS_NAME_RESULTW** ppServers);
uint DsListDomainsInSiteA([In] HANDLE hDs, [Const] [In] PSTR site, [Out] DS_NAME_RESULTA** ppDomains);
uint DsListDomainsInSiteW([In] HANDLE hDs, [Const] [In] PWSTR site, [Out] DS_NAME_RESULTW** ppDomains);
uint DsListServersForDomainInSiteA([In] HANDLE hDs, [Const] [In] PSTR domain, [Const] [In] PSTR site, [Out] DS_NAME_RESULTA** ppServers);
uint DsListServersForDomainInSiteW([In] HANDLE hDs, [Const] [In] PWSTR domain, [Const] [In] PWSTR site, [Out] DS_NAME_RESULTW** ppServers);
uint DsListInfoForServerA([In] HANDLE hDs, [Const] [In] PSTR server, [Out] DS_NAME_RESULTA** ppInfo);
uint DsListInfoForServerW([In] HANDLE hDs, [Const] [In] PWSTR server, [Out] DS_NAME_RESULTW** ppInfo);
uint DsListRolesA([In] HANDLE hDs, [Out] DS_NAME_RESULTA** ppRoles);
uint DsListRolesW([In] HANDLE hDs, [Out] DS_NAME_RESULTW** ppRoles);
uint DsQuerySitesByCostW([In] HANDLE hDS, [In] PWSTR pwszFromSite, [NativeArrayInfo(CountParamIndex = 3)] [In] PWSTR* rgwszToSites, [In] uint cToSites, [Reserved] [In] uint dwFlags, [Out] DS_SITE_COST_INFO** prgSiteInfo);
uint DsQuerySitesByCostA([In] HANDLE hDS, [In] PSTR pszFromSite, [NativeArrayInfo(CountParamIndex = 3)] [In] PSTR* rgszToSites, [In] uint cToSites, [Reserved] [In] uint dwFlags, [Out] DS_SITE_COST_INFO** prgSiteInfo);
void DsQuerySitesFree([In] DS_SITE_COST_INFO* rgSiteInfo);
uint DsMapSchemaGuidsA([In] HANDLE hDs, [In] uint cGuids, [NativeArrayInfo(CountParamIndex = 1)] [In] Guid* rGuids, [Out] DS_SCHEMA_GUID_MAPA** ppGuidMap);
void DsFreeSchemaGuidMapA([In] DS_SCHEMA_GUID_MAPA* pGuidMap);
uint DsMapSchemaGuidsW([In] HANDLE hDs, [In] uint cGuids, [NativeArrayInfo(CountParamIndex = 1)] [In] Guid* rGuids, [Out] DS_SCHEMA_GUID_MAPW** ppGuidMap);
void DsFreeSchemaGuidMapW([In] DS_SCHEMA_GUID_MAPW* pGuidMap);
uint DsGetDomainControllerInfoA([In] HANDLE hDs, [Const] [In] PSTR DomainName, [In] uint InfoLevel, [Out] uint* pcOut, [Out] void** ppInfo);
uint DsGetDomainControllerInfoW([In] HANDLE hDs, [Const] [In] PWSTR DomainName, [In] uint InfoLevel, [Out] uint* pcOut, [Out] void** ppInfo);
void DsFreeDomainControllerInfoA([In] uint InfoLevel, [In] uint cInfo, [NativeArrayInfo(CountParamIndex = 1)] [In] void* pInfo);
void DsFreeDomainControllerInfoW([In] uint InfoLevel, [In] uint cInfo, [NativeArrayInfo(CountParamIndex = 1)] [In] void* pInfo);
uint DsReplicaConsistencyCheck([In] HANDLE hDS, [In] DS_KCC_TASKID TaskID, [In] uint dwFlags);
uint DsReplicaVerifyObjectsW([In] HANDLE hDS, [Const] [In] PWSTR NameContext, [Const] [In] Guid* pUuidDsaSrc, [In] uint ulOptions);
uint DsReplicaVerifyObjectsA([In] HANDLE hDS, [Const] [In] PSTR NameContext, [Const] [In] Guid* pUuidDsaSrc, [In] uint ulOptions);
uint DsReplicaGetInfoW([In] HANDLE hDS, [In] DS_REPL_INFO_TYPE InfoType, [Const] [In] [Optional] PWSTR pszObject, [In] [Optional] Guid* puuidForSourceDsaObjGuid, [Out] void** ppInfo);
uint DsReplicaGetInfo2W([In] HANDLE hDS, [In] DS_REPL_INFO_TYPE InfoType, [Const] [In] [Optional] PWSTR pszObject, [In] [Optional] Guid* puuidForSourceDsaObjGuid, [Const] [In] [Optional] PWSTR pszAttributeName, [Const] [In] [Optional] PWSTR pszValue, [In] uint dwFlags, [In] uint dwEnumerationContext, [Out] void** ppInfo);
void DsReplicaFreeInfo([In] DS_REPL_INFO_TYPE InfoType, [In] void* pInfo);
uint DsAddSidHistoryW([In] HANDLE hDS, [Reserved] [In] uint Flags, [Const] [In] PWSTR SrcDomain, [Const] [In] PWSTR SrcPrincipal, [Const] [In] [Optional] PWSTR SrcDomainController, [In] [Optional] void* SrcDomainCreds, [Const] [In] PWSTR DstDomain, [Const] [In] PWSTR DstPrincipal);
uint DsAddSidHistoryA([In] HANDLE hDS, [Reserved] [In] uint Flags, [Const] [In] PSTR SrcDomain, [Const] [In] PSTR SrcPrincipal, [Const] [In] [Optional] PSTR SrcDomainController, [In] [Optional] void* SrcDomainCreds, [Const] [In] PSTR DstDomain, [Const] [In] PSTR DstPrincipal);
uint DsInheritSecurityIdentityW([In] HANDLE hDS, [Reserved] [In] uint Flags, [Const] [In] PWSTR SrcPrincipal, [Const] [In] PWSTR DstPrincipal);
uint DsInheritSecurityIdentityA([In] HANDLE hDS, [Reserved] [In] uint Flags, [Const] [In] PSTR SrcPrincipal, [Const] [In] PSTR DstPrincipal);
