HRESULT WdsCliClose([In] HANDLE Handle);
HRESULT WdsCliRegisterTrace([In] [Optional] PFN_WdsCliTraceFunction pfn);
HRESULT WdsCliFreeStringArray([NativeArrayInfo(CountParamIndex = 1)] [In] [Out] [Optional] PWSTR* ppwszArray, [In] uint ulCount);
HRESULT WdsCliFindFirstImage([In] HANDLE hSession, [Out] HANDLE* phFindHandle);
HRESULT WdsCliFindNextImage([In] HANDLE Handle);
HRESULT WdsCliGetEnumerationFlags([In] HANDLE Handle, [Out] uint* pdwFlags);
HRESULT WdsCliGetImageHandleFromFindHandle([In] HANDLE FindHandle, [Out] HANDLE* phImageHandle);
HRESULT WdsCliGetImageHandleFromTransferHandle([In] HANDLE hTransfer, [Out] HANDLE* phImageHandle);
HRESULT WdsCliCreateSession([In] PWSTR pwszServer, [In] [Optional] WDS_CLI_CRED* pCred, [Out] HANDLE* phSession);
HRESULT WdsCliAuthorizeSession([In] HANDLE hSession, [In] [Optional] WDS_CLI_CRED* pCred);
HRESULT WdsCliInitializeLog([In] HANDLE hSession, [In] CPU_ARCHITECTURE ulClientArchitecture, [In] PWSTR pwszClientId, [In] PWSTR pwszClientAddress);
HRESULT WdsCliLog([In] HANDLE hSession, [In] uint ulLogLevel, [In] uint ulMessageCode, ...);
HRESULT WdsCliGetImageName([In] HANDLE hIfh, [Out] PWSTR* ppwszValue);
HRESULT WdsCliGetImageDescription([In] HANDLE hIfh, [Out] PWSTR* ppwszValue);
HRESULT WdsCliGetImageType([In] HANDLE hIfh, [Out] WDS_CLI_IMAGE_TYPE* pImageType);
HRESULT WdsCliGetImageFiles([In] HANDLE hIfh, [Out] PWSTR** pppwszFiles, [Out] uint* pdwCount);
HRESULT WdsCliGetImageLanguage([In] HANDLE hIfh, [Out] PWSTR* ppwszValue);
HRESULT WdsCliGetImageLanguages([In] HANDLE hIfh, [Out] sbyte*** pppszValues, [Out] uint* pdwNumValues);
HRESULT WdsCliGetImageVersion([In] HANDLE hIfh, [Out] PWSTR* ppwszValue);
HRESULT WdsCliGetImagePath([In] HANDLE hIfh, [Out] PWSTR* ppwszValue);
HRESULT WdsCliGetImageIndex([In] HANDLE hIfh, [Out] uint* pdwValue);
HRESULT WdsCliGetImageArchitecture([In] HANDLE hIfh, [Out] CPU_ARCHITECTURE* pdwValue);
HRESULT WdsCliGetImageLastModifiedTime([In] HANDLE hIfh, [Out] SYSTEMTIME** ppSysTimeValue);
HRESULT WdsCliGetImageSize([In] HANDLE hIfh, [Out] ulong* pullValue);
HRESULT WdsCliGetImageHalName([In] HANDLE hIfh, [Out] PWSTR* ppwszValue);
HRESULT WdsCliGetImageGroup([In] HANDLE hIfh, [Out] PWSTR* ppwszValue);
HRESULT WdsCliGetImageNamespace([In] HANDLE hIfh, [Out] PWSTR* ppwszValue);
HRESULT WdsCliGetImageParameter([In] HANDLE hIfh, [In] WDS_CLI_IMAGE_PARAM_TYPE ParamType, [MemorySize(BytesParamIndex = 3)] [Out] void* pResponse, [In] uint uResponseLen);
HRESULT WdsCliGetTransferSize([In] HANDLE hIfh, [Out] ulong* pullValue);
void WdsCliSetTransferBufferSize([In] uint ulSizeInBytes);
HRESULT WdsCliTransferImage([In] HANDLE hImage, [In] PWSTR pwszLocalPath, [In] uint dwFlags, [In] uint dwReserved, [In] [Optional] PFN_WdsCliCallback pfnWdsCliCallback, [In] [Optional] void* pvUserData, [Out] HANDLE* phTransfer);
HRESULT WdsCliTransferFile([Const] [In] PWSTR pwszServer, [Const] [In] PWSTR pwszNamespace, [Const] [In] PWSTR pwszRemoteFilePath, [Const] [In] PWSTR pwszLocalFilePath, [In] uint dwFlags, [In] uint dwReserved, [In] [Optional] PFN_WdsCliCallback pfnWdsCliCallback, [In] [Optional] void* pvUserData, [Out] HANDLE* phTransfer);
HRESULT WdsCliCancelTransfer([In] HANDLE hTransfer);
HRESULT WdsCliWaitForTransfer([In] HANDLE hTransfer);
HRESULT WdsCliObtainDriverPackages([In] HANDLE hImage, [Out] PWSTR* ppwszServerName, [Out] PWSTR** pppwszDriverPackages, [Out] uint* pulCount);
HRESULT WdsCliObtainDriverPackagesEx([In] HANDLE hSession, [In] PWSTR pwszMachineInfo, [Out] PWSTR* ppwszServerName, [Out] PWSTR** pppwszDriverPackages, [Out] uint* pulCount);
HRESULT WdsCliGetDriverQueryXml([In] [Optional] PWSTR pwszWinDirPath, [Out] PWSTR* ppwszDriverQuery);
