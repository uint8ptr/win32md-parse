int DnsQueryConfig([In] DNS_CONFIG_TYPE Config, [In] uint Flag, [Const] [In] [Optional] PWSTR pwsAdapterName, [In] [Optional] void* pReserved, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] void* pBuffer, [In] [Out] uint* pBufLen);
DNS_RECORDA* DnsRecordCopyEx([In] DNS_RECORDA* pRecord, [In] DNS_CHARSET CharSetIn, [In] DNS_CHARSET CharSetOut);
DNS_RECORDA* DnsRecordSetCopyEx([In] DNS_RECORDA* pRecordSet, [In] DNS_CHARSET CharSetIn, [In] DNS_CHARSET CharSetOut);
BOOL DnsRecordCompare([In] DNS_RECORDA* pRecord1, [In] DNS_RECORDA* pRecord2);
BOOL DnsRecordSetCompare([In] [Out] DNS_RECORDA* pRR1, [In] [Out] DNS_RECORDA* pRR2, [Out] [Optional] DNS_RECORDA** ppDiff1, [Out] [Optional] DNS_RECORDA** ppDiff2);
DNS_RECORDA* DnsRecordSetDetach([In] [Out] DNS_RECORDA* pRecordList);
void DnsFree([In] [Optional] void* pData, [In] DNS_FREE_TYPE FreeType);
WIN32_ERROR DnsQuery_A([Const] [In] PSTR pszName, [In] DNS_TYPE wType, [In] DNS_QUERY_OPTIONS Options, [In] [Out] [Optional] void* pExtra, [Out] [Optional] DNS_RECORDA** ppQueryResults, [Out] [Optional] void** pReserved);
WIN32_ERROR DnsQuery_UTF8([Const] [In] PSTR pszName, [In] DNS_TYPE wType, [In] DNS_QUERY_OPTIONS Options, [In] [Out] [Optional] void* pExtra, [Out] [Optional] DNS_RECORDA** ppQueryResults, [Out] [Optional] void** pReserved);
WIN32_ERROR DnsQuery_W([Const] [In] PWSTR pszName, [In] DNS_TYPE wType, [In] DNS_QUERY_OPTIONS Options, [In] [Out] [Optional] void* pExtra, [Out] [Optional] DNS_RECORDA** ppQueryResults, [Out] [Optional] void** pReserved);
int DnsQueryEx([In] DNS_QUERY_REQUEST* pQueryRequest, [In] [Out] DNS_QUERY_RESULT* pQueryResults, [In] [Out] [Optional] DNS_QUERY_CANCEL* pCancelHandle);
int DnsCancelQuery([In] DNS_QUERY_CANCEL* pCancelHandle);
void DnsFreeCustomServers([In] [Out] uint* pcServers, [In] [Out] DNS_CUSTOM_SERVER** ppServers);
uint DnsGetApplicationSettings([Out] uint* pcServers, [Out] DNS_CUSTOM_SERVER** ppDefaultServers, [Out] [Optional] DNS_APPLICATION_SETTINGS* pSettings);
uint DnsSetApplicationSettings([In] uint cServers, [Const] [NativeArrayInfo(CountParamIndex = 0)] [In] DNS_CUSTOM_SERVER* pServers, [Const] [In] [Optional] DNS_APPLICATION_SETTINGS* pSettings);
int DnsAcquireContextHandle_W([In] uint CredentialFlags, [In] [Optional] void* Credentials, [Out] DnsContextHandle* pContext);
int DnsAcquireContextHandle_A([In] uint CredentialFlags, [In] [Optional] void* Credentials, [Out] DnsContextHandle* pContext);
void DnsReleaseContextHandle([In] HANDLE hContext);
int DnsModifyRecordsInSet_W([In] [Optional] DNS_RECORDA* pAddRecords, [In] [Optional] DNS_RECORDA* pDeleteRecords, [In] uint Options, [In] [Optional] HANDLE hCredentials, [In] [Out] [Optional] void* pExtraList, [In] [Out] [Optional] void* pReserved);
int DnsModifyRecordsInSet_A([In] [Optional] DNS_RECORDA* pAddRecords, [In] [Optional] DNS_RECORDA* pDeleteRecords, [In] uint Options, [In] [Optional] HANDLE hCredentials, [In] [Out] [Optional] void* pExtraList, [In] [Out] [Optional] void* pReserved);
int DnsModifyRecordsInSet_UTF8([In] [Optional] DNS_RECORDA* pAddRecords, [In] [Optional] DNS_RECORDA* pDeleteRecords, [In] uint Options, [In] [Optional] HANDLE hCredentials, [In] [Out] [Optional] void* pExtraList, [In] [Out] [Optional] void* pReserved);
int DnsReplaceRecordSetW([In] DNS_RECORDA* pReplaceSet, [In] uint Options, [In] [Optional] HANDLE hContext, [In] [Out] [Optional] void* pExtraInfo, [In] [Out] [Optional] void* pReserved);
int DnsReplaceRecordSetA([In] DNS_RECORDA* pReplaceSet, [In] uint Options, [In] [Optional] HANDLE hContext, [In] [Out] [Optional] void* pExtraInfo, [In] [Out] [Optional] void* pReserved);
int DnsReplaceRecordSetUTF8([In] DNS_RECORDA* pReplaceSet, [In] uint Options, [In] [Optional] HANDLE hContext, [In] [Out] [Optional] void* pExtraInfo, [In] [Out] [Optional] void* pReserved);
int DnsValidateName_W([Const] [In] PWSTR pszName, [In] DNS_NAME_FORMAT Format);
int DnsValidateName_A([Const] [In] PSTR pszName, [In] DNS_NAME_FORMAT Format);
int DnsValidateName_UTF8([Const] [In] PSTR pszName, [In] DNS_NAME_FORMAT Format);
BOOL DnsNameCompare_A([Const] [In] PSTR pName1, [Const] [In] PSTR pName2);
BOOL DnsNameCompare_W([Const] [In] PWSTR pName1, [Const] [In] PWSTR pName2);
BOOL DnsWriteQuestionToBuffer_W([In] [Out] DNS_MESSAGE_BUFFER* pDnsBuffer, [In] [Out] uint* pdwBufferSize, [Const] [In] PWSTR pszName, [In] ushort wType, [In] ushort Xid, [In] BOOL fRecursionDesired);
BOOL DnsWriteQuestionToBuffer_UTF8([In] [Out] DNS_MESSAGE_BUFFER* pDnsBuffer, [In] [Out] uint* pdwBufferSize, [Const] [In] PSTR pszName, [In] ushort wType, [In] ushort Xid, [In] BOOL fRecursionDesired);
int DnsExtractRecordsFromMessage_W([In] DNS_MESSAGE_BUFFER* pDnsBuffer, [In] ushort wMessageLength, [Out] DNS_RECORDA** ppRecord);
int DnsExtractRecordsFromMessage_UTF8([In] DNS_MESSAGE_BUFFER* pDnsBuffer, [In] ushort wMessageLength, [Out] DNS_RECORDA** ppRecord);
uint DnsGetProxyInformation([Const] [In] PWSTR hostName, [In] [Out] DNS_PROXY_INFORMATION* proxyInformation, [In] [Out] [Optional] DNS_PROXY_INFORMATION* defaultProxyInformation, [In] [Optional] DNS_PROXY_COMPLETION_ROUTINE completionRoutine, [In] [Optional] void* completionContext);
void DnsFreeProxyName([Optional] PWSTR proxyName);
uint DnsConnectionGetProxyInfoForHostUrl([Const] [In] PWSTR pwszHostUrl, [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] byte* pSelectionContext, [In] uint dwSelectionContextLength, [In] uint dwExplicitInterfaceIndex, [Out] DNS_CONNECTION_PROXY_INFO_EX* pProxyInfoEx);
void DnsConnectionFreeProxyInfoEx([In] [Out] DNS_CONNECTION_PROXY_INFO_EX* pProxyInfoEx);
uint DnsConnectionGetProxyInfo([Const] [In] PWSTR pwszConnectionName, [In] DNS_CONNECTION_PROXY_TYPE Type, [Out] DNS_CONNECTION_PROXY_INFO* pProxyInfo);
void DnsConnectionFreeProxyInfo([In] [Out] DNS_CONNECTION_PROXY_INFO* pProxyInfo);
uint DnsConnectionSetProxyInfo([Const] [In] PWSTR pwszConnectionName, [In] DNS_CONNECTION_PROXY_TYPE Type, [Const] [In] DNS_CONNECTION_PROXY_INFO* pProxyInfo);
uint DnsConnectionDeleteProxyInfo([Const] [In] PWSTR pwszConnectionName, [In] DNS_CONNECTION_PROXY_TYPE Type);
uint DnsConnectionGetProxyList([Const] [In] PWSTR pwszConnectionName, [Out] DNS_CONNECTION_PROXY_LIST* pProxyList);
void DnsConnectionFreeProxyList([In] [Out] DNS_CONNECTION_PROXY_LIST* pProxyList);
uint DnsConnectionGetNameList([Out] DNS_CONNECTION_NAME_LIST* pNameList);
void DnsConnectionFreeNameList([In] [Out] DNS_CONNECTION_NAME_LIST* pNameList);
uint DnsConnectionUpdateIfIndexTable([In] DNS_CONNECTION_IFINDEX_LIST* pConnectionIfIndexEntries);
uint DnsConnectionSetPolicyEntries([In] DNS_CONNECTION_POLICY_TAG PolicyEntryTag, [In] DNS_CONNECTION_POLICY_ENTRY_LIST* pPolicyEntryList);
uint DnsConnectionDeletePolicyEntries([In] DNS_CONNECTION_POLICY_TAG PolicyEntryTag);
DNS_SERVICE_INSTANCE* DnsServiceConstructInstance([Const] [In] PWSTR pServiceName, [Const] [In] PWSTR pHostName, [In] [Optional] uint* pIp4, [In] [Optional] IP6_ADDRESS* pIp6, [In] ushort wPort, [In] ushort wPriority, [In] ushort wWeight, [In] uint dwPropertiesCount, [NativeArrayInfo(CountParamIndex = 7)] [In] PWSTR* keys, [NativeArrayInfo(CountParamIndex = 7)] [In] PWSTR* values);
DNS_SERVICE_INSTANCE* DnsServiceCopyInstance([In] DNS_SERVICE_INSTANCE* pOrig);
void DnsServiceFreeInstance([In] DNS_SERVICE_INSTANCE* pInstance);
int DnsServiceBrowse([In] DNS_SERVICE_BROWSE_REQUEST* pRequest, [In] [Out] DNS_SERVICE_CANCEL* pCancel);
int DnsServiceBrowseCancel([In] DNS_SERVICE_CANCEL* pCancelHandle);
int DnsServiceResolve([In] DNS_SERVICE_RESOLVE_REQUEST* pRequest, [In] [Out] DNS_SERVICE_CANCEL* pCancel);
int DnsServiceResolveCancel([In] DNS_SERVICE_CANCEL* pCancelHandle);
uint DnsServiceRegister([In] DNS_SERVICE_REGISTER_REQUEST* pRequest, [In] [Out] [Optional] DNS_SERVICE_CANCEL* pCancel);
uint DnsServiceDeRegister([In] DNS_SERVICE_REGISTER_REQUEST* pRequest, [In] [Out] [Optional] DNS_SERVICE_CANCEL* pCancel);
uint DnsServiceRegisterCancel([In] DNS_SERVICE_CANCEL* pCancelHandle);
int DnsStartMulticastQuery([In] MDNS_QUERY_REQUEST* pQueryRequest, [In] [Out] MDNS_QUERY_HANDLE* pHandle);
int DnsStopMulticastQuery([In] [Out] MDNS_QUERY_HANDLE* pHandle);
