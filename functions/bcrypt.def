NTSTATUS BCryptOpenAlgorithmProvider([Out] BCRYPT_ALG_HANDLE* phAlgorithm, [Const] [In] PWSTR pszAlgId, [Const] [In] [Optional] PWSTR pszImplementation, [In] BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS dwFlags);
NTSTATUS BCryptEnumAlgorithms([In] BCRYPT_OPERATION dwAlgOperations, [Out] uint* pAlgCount, [Out] BCRYPT_ALGORITHM_IDENTIFIER** ppAlgList, [In] uint dwFlags);
NTSTATUS BCryptEnumProviders([Const] [In] PWSTR pszAlgId, [Out] uint* pImplCount, [Out] BCRYPT_PROVIDER_NAME** ppImplList, [In] uint dwFlags);
NTSTATUS BCryptGetProperty([In] BCRYPT_HANDLE hObject, [Const] [In] PWSTR pszProperty, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pbOutput, [In] uint cbOutput, [Out] uint* pcbResult, [In] uint dwFlags);
NTSTATUS BCryptSetProperty([In] BCRYPT_HANDLE hObject, [Const] [In] PWSTR pszProperty, [MemorySize(BytesParamIndex = 3)] [In] byte* pbInput, [In] uint cbInput, [In] uint dwFlags);
NTSTATUS BCryptCloseAlgorithmProvider([In] BCRYPT_ALG_HANDLE hAlgorithm, [In] uint dwFlags);
void BCryptFreeBuffer([In] void* pvBuffer);
NTSTATUS BCryptGenerateSymmetricKey([In] BCRYPT_ALG_HANDLE hAlgorithm, [Out] BCRYPT_KEY_HANDLE* phKey, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pbKeyObject, [In] uint cbKeyObject, [MemorySize(BytesParamIndex = 5)] [In] byte* pbSecret, [In] uint cbSecret, [In] uint dwFlags);
NTSTATUS BCryptGenerateKeyPair([In] BCRYPT_ALG_HANDLE hAlgorithm, [Out] BCRYPT_KEY_HANDLE* phKey, [In] uint dwLength, [In] uint dwFlags);
NTSTATUS BCryptEncrypt([In] BCRYPT_KEY_HANDLE hKey, [MemorySize(BytesParamIndex = 2)] [In] [Optional] byte* pbInput, [In] uint cbInput, [In] [Optional] void* pPaddingInfo, [MemorySize(BytesParamIndex = 5)] [In] [Out] [Optional] byte* pbIV, [In] uint cbIV, [MemorySize(BytesParamIndex = 7)] [Out] [Optional] byte* pbOutput, [In] uint cbOutput, [Out] uint* pcbResult, [In] NCRYPT_FLAGS dwFlags);
NTSTATUS BCryptDecrypt([In] BCRYPT_KEY_HANDLE hKey, [MemorySize(BytesParamIndex = 2)] [In] [Optional] byte* pbInput, [In] uint cbInput, [In] [Optional] void* pPaddingInfo, [MemorySize(BytesParamIndex = 5)] [In] [Out] [Optional] byte* pbIV, [In] uint cbIV, [MemorySize(BytesParamIndex = 7)] [Out] [Optional] byte* pbOutput, [In] uint cbOutput, [Out] uint* pcbResult, [In] NCRYPT_FLAGS dwFlags);
NTSTATUS BCryptExportKey([In] BCRYPT_KEY_HANDLE hKey, [In] [Optional] BCRYPT_KEY_HANDLE hExportKey, [Const] [In] PWSTR pszBlobType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pbOutput, [In] uint cbOutput, [Out] uint* pcbResult, [In] uint dwFlags);
NTSTATUS BCryptImportKey([In] BCRYPT_ALG_HANDLE hAlgorithm, [In] [Optional] BCRYPT_KEY_HANDLE hImportKey, [Const] [In] PWSTR pszBlobType, [Out] BCRYPT_KEY_HANDLE* phKey, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbKeyObject, [In] uint cbKeyObject, [MemorySize(BytesParamIndex = 7)] [In] byte* pbInput, [In] uint cbInput, [In] uint dwFlags);
NTSTATUS BCryptImportKeyPair([In] BCRYPT_ALG_HANDLE hAlgorithm, [In] [Optional] BCRYPT_KEY_HANDLE hImportKey, [Const] [In] PWSTR pszBlobType, [Out] BCRYPT_KEY_HANDLE* phKey, [MemorySize(BytesParamIndex = 5)] [In] byte* pbInput, [In] uint cbInput, [In] uint dwFlags);
NTSTATUS BCryptDuplicateKey([In] BCRYPT_KEY_HANDLE hKey, [Out] BCRYPT_KEY_HANDLE* phNewKey, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pbKeyObject, [In] uint cbKeyObject, [In] uint dwFlags);
NTSTATUS BCryptFinalizeKeyPair([In] BCRYPT_KEY_HANDLE hKey, [In] uint dwFlags);
NTSTATUS BCryptDestroyKey([In] BCRYPT_KEY_HANDLE hKey);
NTSTATUS BCryptDestroySecret([In] BCRYPT_SECRET_HANDLE hSecret);
NTSTATUS BCryptSignHash([In] BCRYPT_KEY_HANDLE hKey, [In] [Optional] void* pPaddingInfo, [MemorySize(BytesParamIndex = 3)] [In] byte* pbInput, [In] uint cbInput, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbOutput, [In] uint cbOutput, [Out] uint* pcbResult, [In] NCRYPT_FLAGS dwFlags);
NTSTATUS BCryptVerifySignature([In] BCRYPT_KEY_HANDLE hKey, [In] [Optional] void* pPaddingInfo, [MemorySize(BytesParamIndex = 3)] [In] byte* pbHash, [In] uint cbHash, [MemorySize(BytesParamIndex = 5)] [In] byte* pbSignature, [In] uint cbSignature, [In] NCRYPT_FLAGS dwFlags);
NTSTATUS BCryptSecretAgreement([In] BCRYPT_KEY_HANDLE hPrivKey, [In] BCRYPT_KEY_HANDLE hPubKey, [Out] BCRYPT_SECRET_HANDLE* phAgreedSecret, [In] uint dwFlags);
NTSTATUS BCryptDeriveKey([In] BCRYPT_SECRET_HANDLE hSharedSecret, [Const] [In] PWSTR pwszKDF, [In] [Optional] BCryptBufferDesc* pParameterList, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pbDerivedKey, [In] uint cbDerivedKey, [Out] uint* pcbResult, [In] uint dwFlags);
NTSTATUS BCryptKeyDerivation([In] BCRYPT_KEY_HANDLE hKey, [In] [Optional] BCryptBufferDesc* pParameterList, [MemorySize(BytesParamIndex = 3)] [Out] byte* pbDerivedKey, [In] uint cbDerivedKey, [Out] uint* pcbResult, [In] uint dwFlags);
NTSTATUS BCryptCreateHash([In] BCRYPT_ALG_HANDLE hAlgorithm, [Out] BCRYPT_HASH_HANDLE* phHash, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pbHashObject, [In] uint cbHashObject, [MemorySize(BytesParamIndex = 5)] [In] [Optional] byte* pbSecret, [In] uint cbSecret, [In] uint dwFlags);
NTSTATUS BCryptHashData([In] BCRYPT_HASH_HANDLE hHash, [MemorySize(BytesParamIndex = 2)] [In] byte* pbInput, [In] uint cbInput, [In] uint dwFlags);
NTSTATUS BCryptFinishHash([In] BCRYPT_HASH_HANDLE hHash, [MemorySize(BytesParamIndex = 2)] [Out] byte* pbOutput, [In] uint cbOutput, [In] uint dwFlags);
NTSTATUS BCryptCreateMultiHash([In] BCRYPT_ALG_HANDLE hAlgorithm, [Out] BCRYPT_HASH_HANDLE* phHash, [In] uint nHashes, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pbHashObject, [In] uint cbHashObject, [MemorySize(BytesParamIndex = 6)] [In] [Optional] byte* pbSecret, [In] uint cbSecret, [In] uint dwFlags);
NTSTATUS BCryptProcessMultiOperations([In] BCRYPT_HANDLE hObject, [In] BCRYPT_MULTI_OPERATION_TYPE operationType, [MemorySize(BytesParamIndex = 3)] [In] void* pOperations, [In] uint cbOperations, [In] uint dwFlags);
NTSTATUS BCryptDuplicateHash([In] BCRYPT_HASH_HANDLE hHash, [Out] BCRYPT_HASH_HANDLE* phNewHash, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pbHashObject, [In] uint cbHashObject, [In] uint dwFlags);
NTSTATUS BCryptDestroyHash([In] BCRYPT_HASH_HANDLE hHash);
NTSTATUS BCryptHash([In] BCRYPT_ALG_HANDLE hAlgorithm, [MemorySize(BytesParamIndex = 2)] [In] [Optional] byte* pbSecret, [In] uint cbSecret, [MemorySize(BytesParamIndex = 4)] [In] byte* pbInput, [In] uint cbInput, [MemorySize(BytesParamIndex = 6)] [Out] byte* pbOutput, [In] uint cbOutput);
NTSTATUS BCryptGenRandom([In] [Optional] BCRYPT_ALG_HANDLE hAlgorithm, [MemorySize(BytesParamIndex = 2)] [Out] byte* pbBuffer, [In] uint cbBuffer, [In] uint dwFlags);
NTSTATUS BCryptDeriveKeyCapi([In] BCRYPT_HASH_HANDLE hHash, [In] [Optional] BCRYPT_ALG_HANDLE hTargetAlg, [MemorySize(BytesParamIndex = 3)] [Out] byte* pbDerivedKey, [In] uint cbDerivedKey, [In] uint dwFlags);
NTSTATUS BCryptDeriveKeyPBKDF2([In] BCRYPT_ALG_HANDLE hPrf, [MemorySize(BytesParamIndex = 2)] [In] [Optional] byte* pbPassword, [In] uint cbPassword, [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* pbSalt, [In] uint cbSalt, [In] ulong cIterations, [MemorySize(BytesParamIndex = 7)] [Out] byte* pbDerivedKey, [In] uint cbDerivedKey, [In] uint dwFlags);
NTSTATUS BCryptQueryProviderRegistration([Const] [In] PWSTR pszProvider, [In] BCRYPT_QUERY_PROVIDER_MODE dwMode, [In] BCRYPT_INTERFACE dwInterface, [In] [Out] uint* pcbBuffer, [MemorySize(BytesParamIndex = 3)] [In] [Out] CRYPT_PROVIDER_REG** ppBuffer);
NTSTATUS BCryptEnumRegisteredProviders([In] [Out] uint* pcbBuffer, [MemorySize(BytesParamIndex = 0)] [In] [Out] CRYPT_PROVIDERS** ppBuffer);
NTSTATUS BCryptCreateContext([In] BCRYPT_TABLE dwTable, [Const] [In] PWSTR pszContext, [In] [Optional] CRYPT_CONTEXT_CONFIG* pConfig);
NTSTATUS BCryptDeleteContext([In] BCRYPT_TABLE dwTable, [Const] [In] PWSTR pszContext);
NTSTATUS BCryptEnumContexts([In] BCRYPT_TABLE dwTable, [In] [Out] uint* pcbBuffer, [MemorySize(BytesParamIndex = 1)] [In] [Out] CRYPT_CONTEXTS** ppBuffer);
NTSTATUS BCryptConfigureContext([In] BCRYPT_TABLE dwTable, [Const] [In] PWSTR pszContext, [In] CRYPT_CONTEXT_CONFIG* pConfig);
NTSTATUS BCryptQueryContextConfiguration([In] BCRYPT_TABLE dwTable, [Const] [In] PWSTR pszContext, [In] [Out] uint* pcbBuffer, [MemorySize(BytesParamIndex = 2)] [In] [Out] CRYPT_CONTEXT_CONFIG** ppBuffer);
NTSTATUS BCryptAddContextFunction([In] BCRYPT_TABLE dwTable, [Const] [In] PWSTR pszContext, [In] BCRYPT_INTERFACE dwInterface, [Const] [In] PWSTR pszFunction, [In] uint dwPosition);
NTSTATUS BCryptRemoveContextFunction([In] BCRYPT_TABLE dwTable, [Const] [In] PWSTR pszContext, [In] BCRYPT_INTERFACE dwInterface, [Const] [In] PWSTR pszFunction);
NTSTATUS BCryptEnumContextFunctions([In] BCRYPT_TABLE dwTable, [Const] [In] PWSTR pszContext, [In] BCRYPT_INTERFACE dwInterface, [In] [Out] uint* pcbBuffer, [MemorySize(BytesParamIndex = 3)] [In] [Out] CRYPT_CONTEXT_FUNCTIONS** ppBuffer);
NTSTATUS BCryptConfigureContextFunction([In] BCRYPT_TABLE dwTable, [Const] [In] PWSTR pszContext, [In] BCRYPT_INTERFACE dwInterface, [Const] [In] PWSTR pszFunction, [In] CRYPT_CONTEXT_FUNCTION_CONFIG* pConfig);
NTSTATUS BCryptQueryContextFunctionConfiguration([In] BCRYPT_TABLE dwTable, [Const] [In] PWSTR pszContext, [In] BCRYPT_INTERFACE dwInterface, [Const] [In] PWSTR pszFunction, [In] [Out] uint* pcbBuffer, [MemorySize(BytesParamIndex = 4)] [In] [Out] CRYPT_CONTEXT_FUNCTION_CONFIG** ppBuffer);
NTSTATUS BCryptEnumContextFunctionProviders([In] BCRYPT_TABLE dwTable, [Const] [In] PWSTR pszContext, [In] BCRYPT_INTERFACE dwInterface, [Const] [In] PWSTR pszFunction, [In] [Out] uint* pcbBuffer, [MemorySize(BytesParamIndex = 4)] [In] [Out] CRYPT_CONTEXT_FUNCTION_PROVIDERS** ppBuffer);
NTSTATUS BCryptSetContextFunctionProperty([In] BCRYPT_TABLE dwTable, [Const] [In] PWSTR pszContext, [In] BCRYPT_INTERFACE dwInterface, [Const] [In] PWSTR pszFunction, [Const] [In] PWSTR pszProperty, [In] uint cbValue, [MemorySize(BytesParamIndex = 5)] [In] [Optional] byte* pbValue);
NTSTATUS BCryptQueryContextFunctionProperty([In] BCRYPT_TABLE dwTable, [Const] [In] PWSTR pszContext, [In] BCRYPT_INTERFACE dwInterface, [Const] [In] PWSTR pszFunction, [Const] [In] PWSTR pszProperty, [In] [Out] uint* pcbValue, [MemorySize(BytesParamIndex = 5)] [In] [Out] byte** ppbValue);
NTSTATUS BCryptRegisterConfigChangeNotify([Out] HANDLE* phEvent);
NTSTATUS BCryptUnregisterConfigChangeNotify([In] HANDLE hEvent);
NTSTATUS BCryptResolveProviders([Const] [In] [Optional] PWSTR pszContext, [In] [Optional] uint dwInterface, [Const] [In] [Optional] PWSTR pszFunction, [Const] [In] [Optional] PWSTR pszProvider, [In] BCRYPT_QUERY_PROVIDER_MODE dwMode, [In] BCRYPT_RESOLVE_PROVIDERS_FLAGS dwFlags, [In] [Out] uint* pcbBuffer, [MemorySize(BytesParamIndex = 6)] [In] [Out] CRYPT_PROVIDER_REFS** ppBuffer);
NTSTATUS BCryptGetFipsAlgorithmMode([Out] byte* pfEnabled);
