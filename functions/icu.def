int utf8_nextCharSafeBody([Const] [In] byte* s, [In] [Out] int* pi, [In] int length, [In] int c, [In] sbyte strict);
int utf8_appendCharSafeBody([In] [Out] byte* s, [In] int i, [In] int length, [In] int c, [In] [Out] sbyte* pIsError);
int utf8_prevCharSafeBody([Const] [In] byte* s, [In] int start, [In] [Out] int* pi, [In] int c, [In] sbyte strict);
int utf8_back1SafeBody([Const] [In] byte* s, [In] int start, [In] int i);
void u_versionFromString([In] [Out] byte* versionArray, [Const] [In] PSTR versionString);
void u_versionFromUString([In] [Out] byte* versionArray, [Const] [In] ushort* versionString);
void u_versionToString([Const] [In] byte* versionArray, [In] PSTR versionString);
void u_getVersion([In] [Out] byte* versionArray);
PSTR u_errorName([In] UErrorCode code);
void utrace_setLevel([In] int traceLevel);
int utrace_getLevel();
void utrace_setFunctions([Const] [In] void* context, [In] UTraceEntry e, [In] UTraceExit x, [In] UTraceData d);
void utrace_getFunctions([Const] [In] void** context, [In] [Out] UTraceEntry* e, [In] [Out] UTraceExit* x, [In] [Out] UTraceData* d);
int utrace_vformat([In] PSTR outBuf, [In] int capacity, [In] int indent, [Const] [In] PSTR fmt, [In] [Out] sbyte* args);
int utrace_format([In] PSTR outBuf, [In] int capacity, [In] int indent, [Const] [In] PSTR fmt, ...);
PSTR utrace_functionName([In] int fnNumber);
int u_shapeArabic([Const] [In] ushort* source, [In] int sourceLength, [In] [Out] ushort* dest, [In] int destSize, [In] uint options, [In] [Out] UErrorCode* pErrorCode);
int uscript_getCode([Const] [In] PSTR nameOrAbbrOrLocale, [In] [Out] UScriptCode* fillIn, [In] int capacity, [In] [Out] UErrorCode* err);
PSTR uscript_getName([In] UScriptCode scriptCode);
PSTR uscript_getShortName([In] UScriptCode scriptCode);
UScriptCode uscript_getScript([In] int codepoint, [In] [Out] UErrorCode* err);
sbyte uscript_hasScript([In] int c, [In] UScriptCode sc);
int uscript_getScriptExtensions([In] int c, [In] [Out] UScriptCode* scripts, [In] int capacity, [In] [Out] UErrorCode* errorCode);
int uscript_getSampleString([In] UScriptCode script, [In] [Out] ushort* dest, [In] int capacity, [In] [Out] UErrorCode* pErrorCode);
UScriptUsage uscript_getUsage([In] UScriptCode script);
sbyte uscript_isRightToLeft([In] UScriptCode script);
sbyte uscript_breaksBetweenLetters([In] UScriptCode script);
sbyte uscript_isCased([In] UScriptCode script);
int uiter_current32([In] [Out] UCharIterator* iter);
int uiter_next32([In] [Out] UCharIterator* iter);
int uiter_previous32([In] [Out] UCharIterator* iter);
uint uiter_getState([Const] [In] UCharIterator* iter);
void uiter_setState([In] [Out] UCharIterator* iter, [In] uint state, [In] [Out] UErrorCode* pErrorCode);
void uiter_setString([In] [Out] UCharIterator* iter, [Const] [In] ushort* s, [In] int length);
void uiter_setUTF16BE([In] [Out] UCharIterator* iter, [Const] [In] PSTR s, [In] int length);
void uiter_setUTF8([In] [Out] UCharIterator* iter, [Const] [In] PSTR s, [In] int length);
void uenum_close([In] [Out] UEnumeration* en);
int uenum_count([In] [Out] UEnumeration* en, [In] [Out] UErrorCode* status);
ushort* uenum_unext([In] [Out] UEnumeration* en, [In] [Out] int* resultLength, [In] [Out] UErrorCode* status);
PSTR uenum_next([In] [Out] UEnumeration* en, [In] [Out] int* resultLength, [In] [Out] UErrorCode* status);
void uenum_reset([In] [Out] UEnumeration* en, [In] [Out] UErrorCode* status);
UEnumeration* uenum_openUCharStringsEnumeration([Const] [In] ushort** strings, [In] int count, [In] [Out] UErrorCode* ec);
UEnumeration* uenum_openCharStringsEnumeration([Const] [In] sbyte** strings, [In] int count, [In] [Out] UErrorCode* ec);
PSTR uloc_getDefault();
void uloc_setDefault([Const] [In] PSTR localeID, [In] [Out] UErrorCode* status);
int uloc_getLanguage([Const] [In] PSTR localeID, [In] PSTR language, [In] int languageCapacity, [In] [Out] UErrorCode* err);
int uloc_getScript([Const] [In] PSTR localeID, [In] PSTR script, [In] int scriptCapacity, [In] [Out] UErrorCode* err);
int uloc_getCountry([Const] [In] PSTR localeID, [In] PSTR country, [In] int countryCapacity, [In] [Out] UErrorCode* err);
int uloc_getVariant([Const] [In] PSTR localeID, [In] PSTR variant, [In] int variantCapacity, [In] [Out] UErrorCode* err);
int uloc_getName([Const] [In] PSTR localeID, [In] PSTR name, [In] int nameCapacity, [In] [Out] UErrorCode* err);
int uloc_canonicalize([Const] [In] PSTR localeID, [In] PSTR name, [In] int nameCapacity, [In] [Out] UErrorCode* err);
PSTR uloc_getISO3Language([Const] [In] PSTR localeID);
PSTR uloc_getISO3Country([Const] [In] PSTR localeID);
uint uloc_getLCID([Const] [In] PSTR localeID);
int uloc_getDisplayLanguage([Const] [In] PSTR locale, [Const] [In] PSTR displayLocale, [In] [Out] ushort* language, [In] int languageCapacity, [In] [Out] UErrorCode* status);
int uloc_getDisplayScript([Const] [In] PSTR locale, [Const] [In] PSTR displayLocale, [In] [Out] ushort* script, [In] int scriptCapacity, [In] [Out] UErrorCode* status);
int uloc_getDisplayCountry([Const] [In] PSTR locale, [Const] [In] PSTR displayLocale, [In] [Out] ushort* country, [In] int countryCapacity, [In] [Out] UErrorCode* status);
int uloc_getDisplayVariant([Const] [In] PSTR locale, [Const] [In] PSTR displayLocale, [In] [Out] ushort* variant, [In] int variantCapacity, [In] [Out] UErrorCode* status);
int uloc_getDisplayKeyword([Const] [In] PSTR keyword, [Const] [In] PSTR displayLocale, [In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] UErrorCode* status);
int uloc_getDisplayKeywordValue([Const] [In] PSTR locale, [Const] [In] PSTR keyword, [Const] [In] PSTR displayLocale, [In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] UErrorCode* status);
int uloc_getDisplayName([Const] [In] PSTR localeID, [Const] [In] PSTR inLocaleID, [In] [Out] ushort* result, [In] int maxResultSize, [In] [Out] UErrorCode* err);
PSTR uloc_getAvailable([In] int n);
int uloc_countAvailable();
UEnumeration* uloc_openAvailableByType([In] ULocAvailableType type, [In] [Out] UErrorCode* status);
sbyte** uloc_getISOLanguages();
sbyte** uloc_getISOCountries();
int uloc_getParent([Const] [In] PSTR localeID, [In] PSTR parent, [In] int parentCapacity, [In] [Out] UErrorCode* err);
int uloc_getBaseName([Const] [In] PSTR localeID, [In] PSTR name, [In] int nameCapacity, [In] [Out] UErrorCode* err);
UEnumeration* uloc_openKeywords([Const] [In] PSTR localeID, [In] [Out] UErrorCode* status);
int uloc_getKeywordValue([Const] [In] PSTR localeID, [Const] [In] PSTR keywordName, [In] PSTR buffer, [In] int bufferCapacity, [In] [Out] UErrorCode* status);
int uloc_setKeywordValue([Const] [In] PSTR keywordName, [Const] [In] PSTR keywordValue, [In] PSTR buffer, [In] int bufferCapacity, [In] [Out] UErrorCode* status);
sbyte uloc_isRightToLeft([Const] [In] PSTR locale);
ULayoutType uloc_getCharacterOrientation([Const] [In] PSTR localeId, [In] [Out] UErrorCode* status);
ULayoutType uloc_getLineOrientation([Const] [In] PSTR localeId, [In] [Out] UErrorCode* status);
int uloc_acceptLanguageFromHTTP([In] PSTR result, [In] int resultAvailable, [In] [Out] UAcceptResult* outResult, [Const] [In] PSTR httpAcceptLanguage, [In] [Out] UEnumeration* availableLocales, [In] [Out] UErrorCode* status);
int uloc_acceptLanguage([In] PSTR result, [In] int resultAvailable, [In] [Out] UAcceptResult* outResult, [Const] [In] sbyte** acceptList, [In] int acceptListCount, [In] [Out] UEnumeration* availableLocales, [In] [Out] UErrorCode* status);
int uloc_getLocaleForLCID([In] uint hostID, [In] PSTR locale, [In] int localeCapacity, [In] [Out] UErrorCode* status);
int uloc_addLikelySubtags([Const] [In] PSTR localeID, [In] PSTR maximizedLocaleID, [In] int maximizedLocaleIDCapacity, [In] [Out] UErrorCode* err);
int uloc_minimizeSubtags([Const] [In] PSTR localeID, [In] PSTR minimizedLocaleID, [In] int minimizedLocaleIDCapacity, [In] [Out] UErrorCode* err);
int uloc_forLanguageTag([Const] [In] PSTR langtag, [In] PSTR localeID, [In] int localeIDCapacity, [In] [Out] int* parsedLength, [In] [Out] UErrorCode* err);
int uloc_toLanguageTag([Const] [In] PSTR localeID, [In] PSTR langtag, [In] int langtagCapacity, [In] sbyte strict, [In] [Out] UErrorCode* err);
PSTR uloc_toUnicodeLocaleKey([Const] [In] PSTR keyword);
PSTR uloc_toUnicodeLocaleType([Const] [In] PSTR keyword, [Const] [In] PSTR value);
PSTR uloc_toLegacyKey([Const] [In] PSTR keyword);
PSTR uloc_toLegacyType([Const] [In] PSTR keyword, [Const] [In] PSTR value);
UResourceBundle* ures_open([Const] [In] PSTR packageName, [Const] [In] PSTR locale, [In] [Out] UErrorCode* status);
UResourceBundle* ures_openDirect([Const] [In] PSTR packageName, [Const] [In] PSTR locale, [In] [Out] UErrorCode* status);
UResourceBundle* ures_openU([Const] [In] ushort* packageName, [Const] [In] PSTR locale, [In] [Out] UErrorCode* status);
void ures_close([In] [Out] UResourceBundle* resourceBundle);
void ures_getVersion([Const] [In] UResourceBundle* resB, [In] [Out] byte* versionInfo);
PSTR ures_getLocaleByType([Const] [In] UResourceBundle* resourceBundle, [In] ULocDataLocaleType type, [In] [Out] UErrorCode* status);
ushort* ures_getString([Const] [In] UResourceBundle* resourceBundle, [In] [Out] int* len, [In] [Out] UErrorCode* status);
PSTR ures_getUTF8String([Const] [In] UResourceBundle* resB, [In] PSTR dest, [In] [Out] int* length, [In] sbyte forceCopy, [In] [Out] UErrorCode* status);
byte* ures_getBinary([Const] [In] UResourceBundle* resourceBundle, [In] [Out] int* len, [In] [Out] UErrorCode* status);
int* ures_getIntVector([Const] [In] UResourceBundle* resourceBundle, [In] [Out] int* len, [In] [Out] UErrorCode* status);
uint ures_getUInt([Const] [In] UResourceBundle* resourceBundle, [In] [Out] UErrorCode* status);
int ures_getInt([Const] [In] UResourceBundle* resourceBundle, [In] [Out] UErrorCode* status);
int ures_getSize([Const] [In] UResourceBundle* resourceBundle);
UResType ures_getType([Const] [In] UResourceBundle* resourceBundle);
PSTR ures_getKey([Const] [In] UResourceBundle* resourceBundle);
void ures_resetIterator([In] [Out] UResourceBundle* resourceBundle);
sbyte ures_hasNext([Const] [In] UResourceBundle* resourceBundle);
UResourceBundle* ures_getNextResource([In] [Out] UResourceBundle* resourceBundle, [In] [Out] UResourceBundle* fillIn, [In] [Out] UErrorCode* status);
ushort* ures_getNextString([In] [Out] UResourceBundle* resourceBundle, [In] [Out] int* len, [Const] [In] sbyte** key, [In] [Out] UErrorCode* status);
UResourceBundle* ures_getByIndex([Const] [In] UResourceBundle* resourceBundle, [In] int indexR, [In] [Out] UResourceBundle* fillIn, [In] [Out] UErrorCode* status);
ushort* ures_getStringByIndex([Const] [In] UResourceBundle* resourceBundle, [In] int indexS, [In] [Out] int* len, [In] [Out] UErrorCode* status);
PSTR ures_getUTF8StringByIndex([Const] [In] UResourceBundle* resB, [In] int stringIndex, [In] PSTR dest, [In] [Out] int* pLength, [In] sbyte forceCopy, [In] [Out] UErrorCode* status);
UResourceBundle* ures_getByKey([Const] [In] UResourceBundle* resourceBundle, [Const] [In] PSTR key, [In] [Out] UResourceBundle* fillIn, [In] [Out] UErrorCode* status);
ushort* ures_getStringByKey([Const] [In] UResourceBundle* resB, [Const] [In] PSTR key, [In] [Out] int* len, [In] [Out] UErrorCode* status);
PSTR ures_getUTF8StringByKey([Const] [In] UResourceBundle* resB, [Const] [In] PSTR key, [In] PSTR dest, [In] [Out] int* pLength, [In] sbyte forceCopy, [In] [Out] UErrorCode* status);
UEnumeration* ures_openAvailableLocales([Const] [In] PSTR packageName, [In] [Out] UErrorCode* status);
ULocaleDisplayNames* uldn_open([Const] [In] PSTR locale, [In] UDialectHandling dialectHandling, [In] [Out] UErrorCode* pErrorCode);
void uldn_close([In] [Out] ULocaleDisplayNames* ldn);
PSTR uldn_getLocale([Const] [In] ULocaleDisplayNames* ldn);
UDialectHandling uldn_getDialectHandling([Const] [In] ULocaleDisplayNames* ldn);
int uldn_localeDisplayName([Const] [In] ULocaleDisplayNames* ldn, [Const] [In] PSTR locale, [In] [Out] ushort* result, [In] int maxResultSize, [In] [Out] UErrorCode* pErrorCode);
int uldn_languageDisplayName([Const] [In] ULocaleDisplayNames* ldn, [Const] [In] PSTR lang, [In] [Out] ushort* result, [In] int maxResultSize, [In] [Out] UErrorCode* pErrorCode);
int uldn_scriptDisplayName([Const] [In] ULocaleDisplayNames* ldn, [Const] [In] PSTR script, [In] [Out] ushort* result, [In] int maxResultSize, [In] [Out] UErrorCode* pErrorCode);
int uldn_scriptCodeDisplayName([Const] [In] ULocaleDisplayNames* ldn, [In] UScriptCode scriptCode, [In] [Out] ushort* result, [In] int maxResultSize, [In] [Out] UErrorCode* pErrorCode);
int uldn_regionDisplayName([Const] [In] ULocaleDisplayNames* ldn, [Const] [In] PSTR region, [In] [Out] ushort* result, [In] int maxResultSize, [In] [Out] UErrorCode* pErrorCode);
int uldn_variantDisplayName([Const] [In] ULocaleDisplayNames* ldn, [Const] [In] PSTR variant, [In] [Out] ushort* result, [In] int maxResultSize, [In] [Out] UErrorCode* pErrorCode);
int uldn_keyDisplayName([Const] [In] ULocaleDisplayNames* ldn, [Const] [In] PSTR key, [In] [Out] ushort* result, [In] int maxResultSize, [In] [Out] UErrorCode* pErrorCode);
int uldn_keyValueDisplayName([Const] [In] ULocaleDisplayNames* ldn, [Const] [In] PSTR key, [Const] [In] PSTR value, [In] [Out] ushort* result, [In] int maxResultSize, [In] [Out] UErrorCode* pErrorCode);
ULocaleDisplayNames* uldn_openForContext([Const] [In] PSTR locale, [In] [Out] UDisplayContext* contexts, [In] int length, [In] [Out] UErrorCode* pErrorCode);
UDisplayContext uldn_getContext([Const] [In] ULocaleDisplayNames* ldn, [In] UDisplayContextType type, [In] [Out] UErrorCode* pErrorCode);
int ucurr_forLocale([Const] [In] PSTR locale, [In] [Out] ushort* buff, [In] int buffCapacity, [In] [Out] UErrorCode* ec);
void* ucurr_register([Const] [In] ushort* isoCode, [Const] [In] PSTR locale, [In] [Out] UErrorCode* status);
sbyte ucurr_unregister([In] [Out] void* key, [In] [Out] UErrorCode* status);
ushort* ucurr_getName([Const] [In] ushort* currency, [Const] [In] PSTR locale, [In] UCurrNameStyle nameStyle, [In] [Out] sbyte* isChoiceFormat, [In] [Out] int* len, [In] [Out] UErrorCode* ec);
ushort* ucurr_getPluralName([Const] [In] ushort* currency, [Const] [In] PSTR locale, [In] [Out] sbyte* isChoiceFormat, [Const] [In] PSTR pluralCount, [In] [Out] int* len, [In] [Out] UErrorCode* ec);
int ucurr_getDefaultFractionDigits([Const] [In] ushort* currency, [In] [Out] UErrorCode* ec);
int ucurr_getDefaultFractionDigitsForUsage([Const] [In] ushort* currency, [Const] [In] UCurrencyUsage usage, [In] [Out] UErrorCode* ec);
double ucurr_getRoundingIncrement([Const] [In] ushort* currency, [In] [Out] UErrorCode* ec);
double ucurr_getRoundingIncrementForUsage([Const] [In] ushort* currency, [Const] [In] UCurrencyUsage usage, [In] [Out] UErrorCode* ec);
UEnumeration* ucurr_openISOCurrencies([In] uint currType, [In] [Out] UErrorCode* pErrorCode);
sbyte ucurr_isAvailable([Const] [In] ushort* isoCode, [In] double from, [In] double to, [In] [Out] UErrorCode* errorCode);
int ucurr_countCurrencies([Const] [In] PSTR locale, [In] double date, [In] [Out] UErrorCode* ec);
int ucurr_forLocaleAndDate([Const] [In] PSTR locale, [In] double date, [In] int index, [In] [Out] ushort* buff, [In] int buffCapacity, [In] [Out] UErrorCode* ec);
UEnumeration* ucurr_getKeywordValuesForLocale([Const] [In] PSTR key, [Const] [In] PSTR locale, [In] sbyte commonlyUsed, [In] [Out] UErrorCode* status);
int ucurr_getNumericCode([Const] [In] ushort* currency);
uint ucpmap_get([Const] [In] UCPMap* map, [In] int c);
int ucpmap_getRange([Const] [In] UCPMap* map, [In] int start, [In] UCPMapRangeOption option, [In] uint surrogateValue, [In] [Out] UCPMapValueFilter* filter, [Const] [In] void* context, [In] [Out] uint* pValue);
UCPTrie* ucptrie_openFromBinary([In] UCPTrieType type, [In] UCPTrieValueWidth valueWidth, [Const] [In] void* data, [In] int length, [In] [Out] int* pActualLength, [In] [Out] UErrorCode* pErrorCode);
void ucptrie_close([In] [Out] UCPTrie* trie);
UCPTrieType ucptrie_getType([Const] [In] UCPTrie* trie);
UCPTrieValueWidth ucptrie_getValueWidth([Const] [In] UCPTrie* trie);
uint ucptrie_get([Const] [In] UCPTrie* trie, [In] int c);
int ucptrie_getRange([Const] [In] UCPTrie* trie, [In] int start, [In] UCPMapRangeOption option, [In] uint surrogateValue, [In] [Out] UCPMapValueFilter* filter, [Const] [In] void* context, [In] [Out] uint* pValue);
int ucptrie_toBinary([Const] [In] UCPTrie* trie, [In] [Out] void* data, [In] int capacity, [In] [Out] UErrorCode* pErrorCode);
int ucptrie_internalSmallIndex([Const] [In] UCPTrie* trie, [In] int c);
int ucptrie_internalSmallU8Index([Const] [In] UCPTrie* trie, [In] int lt1, [In] byte t2, [In] byte t3);
int ucptrie_internalU8PrevIndex([Const] [In] UCPTrie* trie, [In] int c, [Const] [In] byte* start, [Const] [In] byte* src);
UMutableCPTrie* umutablecptrie_open([In] uint initialValue, [In] uint errorValue, [In] [Out] UErrorCode* pErrorCode);
UMutableCPTrie* umutablecptrie_clone([Const] [In] UMutableCPTrie* other, [In] [Out] UErrorCode* pErrorCode);
void umutablecptrie_close([In] [Out] UMutableCPTrie* trie);
UMutableCPTrie* umutablecptrie_fromUCPMap([Const] [In] UCPMap* map, [In] [Out] UErrorCode* pErrorCode);
UMutableCPTrie* umutablecptrie_fromUCPTrie([Const] [In] UCPTrie* trie, [In] [Out] UErrorCode* pErrorCode);
uint umutablecptrie_get([Const] [In] UMutableCPTrie* trie, [In] int c);
int umutablecptrie_getRange([Const] [In] UMutableCPTrie* trie, [In] int start, [In] UCPMapRangeOption option, [In] uint surrogateValue, [In] [Out] UCPMapValueFilter* filter, [Const] [In] void* context, [In] [Out] uint* pValue);
void umutablecptrie_set([In] [Out] UMutableCPTrie* trie, [In] int c, [In] uint value, [In] [Out] UErrorCode* pErrorCode);
void umutablecptrie_setRange([In] [Out] UMutableCPTrie* trie, [In] int start, [In] int end, [In] uint value, [In] [Out] UErrorCode* pErrorCode);
UCPTrie* umutablecptrie_buildImmutable([In] [Out] UMutableCPTrie* trie, [In] UCPTrieType type, [In] UCPTrieValueWidth valueWidth, [In] [Out] UErrorCode* pErrorCode);
void UCNV_FROM_U_CALLBACK_STOP([Const] [In] void* context, [In] [Out] UConverterFromUnicodeArgs* fromUArgs, [Const] [In] ushort* codeUnits, [In] int length, [In] int codePoint, [In] UConverterCallbackReason reason, [In] [Out] UErrorCode* err);
void UCNV_TO_U_CALLBACK_STOP([Const] [In] void* context, [In] [Out] UConverterToUnicodeArgs* toUArgs, [Const] [In] PSTR codeUnits, [In] int length, [In] UConverterCallbackReason reason, [In] [Out] UErrorCode* err);
void UCNV_FROM_U_CALLBACK_SKIP([Const] [In] void* context, [In] [Out] UConverterFromUnicodeArgs* fromUArgs, [Const] [In] ushort* codeUnits, [In] int length, [In] int codePoint, [In] UConverterCallbackReason reason, [In] [Out] UErrorCode* err);
void UCNV_FROM_U_CALLBACK_SUBSTITUTE([Const] [In] void* context, [In] [Out] UConverterFromUnicodeArgs* fromUArgs, [Const] [In] ushort* codeUnits, [In] int length, [In] int codePoint, [In] UConverterCallbackReason reason, [In] [Out] UErrorCode* err);
void UCNV_FROM_U_CALLBACK_ESCAPE([Const] [In] void* context, [In] [Out] UConverterFromUnicodeArgs* fromUArgs, [Const] [In] ushort* codeUnits, [In] int length, [In] int codePoint, [In] UConverterCallbackReason reason, [In] [Out] UErrorCode* err);
void UCNV_TO_U_CALLBACK_SKIP([Const] [In] void* context, [In] [Out] UConverterToUnicodeArgs* toUArgs, [Const] [In] PSTR codeUnits, [In] int length, [In] UConverterCallbackReason reason, [In] [Out] UErrorCode* err);
void UCNV_TO_U_CALLBACK_SUBSTITUTE([Const] [In] void* context, [In] [Out] UConverterToUnicodeArgs* toUArgs, [Const] [In] PSTR codeUnits, [In] int length, [In] UConverterCallbackReason reason, [In] [Out] UErrorCode* err);
void UCNV_TO_U_CALLBACK_ESCAPE([Const] [In] void* context, [In] [Out] UConverterToUnicodeArgs* toUArgs, [Const] [In] PSTR codeUnits, [In] int length, [In] UConverterCallbackReason reason, [In] [Out] UErrorCode* err);
int ucnv_compareNames([Const] [In] PSTR name1, [Const] [In] PSTR name2);
UConverter* ucnv_open([Const] [In] PSTR converterName, [In] [Out] UErrorCode* err);
UConverter* ucnv_openU([Const] [In] ushort* name, [In] [Out] UErrorCode* err);
UConverter* ucnv_openCCSID([In] int codepage, [In] UConverterPlatform platform, [In] [Out] UErrorCode* err);
UConverter* ucnv_openPackage([Const] [In] PSTR packageName, [Const] [In] PSTR converterName, [In] [Out] UErrorCode* err);
UConverter* ucnv_safeClone([Const] [In] UConverter* cnv, [In] [Out] void* stackBuffer, [In] [Out] int* pBufferSize, [In] [Out] UErrorCode* status);
void ucnv_close([In] [Out] UConverter* converter);
void ucnv_getSubstChars([Const] [In] UConverter* converter, [In] PSTR subChars, [In] [Out] sbyte* len, [In] [Out] UErrorCode* err);
void ucnv_setSubstChars([In] [Out] UConverter* converter, [Const] [In] PSTR subChars, [In] sbyte len, [In] [Out] UErrorCode* err);
void ucnv_setSubstString([In] [Out] UConverter* cnv, [Const] [In] ushort* s, [In] int length, [In] [Out] UErrorCode* err);
void ucnv_getInvalidChars([Const] [In] UConverter* converter, [In] PSTR errBytes, [In] [Out] sbyte* len, [In] [Out] UErrorCode* err);
void ucnv_getInvalidUChars([Const] [In] UConverter* converter, [In] [Out] ushort* errUChars, [In] [Out] sbyte* len, [In] [Out] UErrorCode* err);
void ucnv_reset([In] [Out] UConverter* converter);
void ucnv_resetToUnicode([In] [Out] UConverter* converter);
void ucnv_resetFromUnicode([In] [Out] UConverter* converter);
sbyte ucnv_getMaxCharSize([Const] [In] UConverter* converter);
sbyte ucnv_getMinCharSize([Const] [In] UConverter* converter);
int ucnv_getDisplayName([Const] [In] UConverter* converter, [Const] [In] PSTR displayLocale, [In] [Out] ushort* displayName, [In] int displayNameCapacity, [In] [Out] UErrorCode* err);
PSTR ucnv_getName([Const] [In] UConverter* converter, [In] [Out] UErrorCode* err);
int ucnv_getCCSID([Const] [In] UConverter* converter, [In] [Out] UErrorCode* err);
UConverterPlatform ucnv_getPlatform([Const] [In] UConverter* converter, [In] [Out] UErrorCode* err);
UConverterType ucnv_getType([Const] [In] UConverter* converter);
void ucnv_getStarters([Const] [In] UConverter* converter, [In] [Out] sbyte* starters, [In] [Out] UErrorCode* err);
void ucnv_getUnicodeSet([Const] [In] UConverter* cnv, [In] [Out] USet* setFillIn, [In] UConverterUnicodeSet whichSet, [In] [Out] UErrorCode* pErrorCode);
void ucnv_getToUCallBack([Const] [In] UConverter* converter, [In] [Out] UConverterToUCallback* action, [Const] [In] void** context);
void ucnv_getFromUCallBack([Const] [In] UConverter* converter, [In] [Out] UConverterFromUCallback* action, [Const] [In] void** context);
void ucnv_setToUCallBack([In] [Out] UConverter* converter, [In] UConverterToUCallback newAction, [Const] [In] void* newContext, [In] [Out] UConverterToUCallback* oldAction, [Const] [In] void** oldContext, [In] [Out] UErrorCode* err);
void ucnv_setFromUCallBack([In] [Out] UConverter* converter, [In] UConverterFromUCallback newAction, [Const] [In] void* newContext, [In] [Out] UConverterFromUCallback* oldAction, [Const] [In] void** oldContext, [In] [Out] UErrorCode* err);
void ucnv_fromUnicode([In] [Out] UConverter* converter, [In] [Out] sbyte** target, [Const] [In] PSTR targetLimit, [Const] [In] ushort** source, [Const] [In] ushort* sourceLimit, [In] [Out] int* offsets, [In] sbyte flush, [In] [Out] UErrorCode* err);
void ucnv_toUnicode([In] [Out] UConverter* converter, [In] [Out] ushort** target, [Const] [In] ushort* targetLimit, [Const] [In] sbyte** source, [Const] [In] PSTR sourceLimit, [In] [Out] int* offsets, [In] sbyte flush, [In] [Out] UErrorCode* err);
int ucnv_fromUChars([In] [Out] UConverter* cnv, [In] PSTR dest, [In] int destCapacity, [Const] [In] ushort* src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
int ucnv_toUChars([In] [Out] UConverter* cnv, [In] [Out] ushort* dest, [In] int destCapacity, [Const] [In] PSTR src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
int ucnv_getNextUChar([In] [Out] UConverter* converter, [Const] [In] sbyte** source, [Const] [In] PSTR sourceLimit, [In] [Out] UErrorCode* err);
void ucnv_convertEx([In] [Out] UConverter* targetCnv, [In] [Out] UConverter* sourceCnv, [In] [Out] sbyte** target, [Const] [In] PSTR targetLimit, [Const] [In] sbyte** source, [Const] [In] PSTR sourceLimit, [In] [Out] ushort* pivotStart, [In] [Out] ushort** pivotSource, [In] [Out] ushort** pivotTarget, [Const] [In] ushort* pivotLimit, [In] sbyte reset, [In] sbyte flush, [In] [Out] UErrorCode* pErrorCode);
int ucnv_convert([Const] [In] PSTR toConverterName, [Const] [In] PSTR fromConverterName, [In] PSTR target, [In] int targetCapacity, [Const] [In] PSTR source, [In] int sourceLength, [In] [Out] UErrorCode* pErrorCode);
int ucnv_toAlgorithmic([In] UConverterType algorithmicType, [In] [Out] UConverter* cnv, [In] PSTR target, [In] int targetCapacity, [Const] [In] PSTR source, [In] int sourceLength, [In] [Out] UErrorCode* pErrorCode);
int ucnv_fromAlgorithmic([In] [Out] UConverter* cnv, [In] UConverterType algorithmicType, [In] PSTR target, [In] int targetCapacity, [Const] [In] PSTR source, [In] int sourceLength, [In] [Out] UErrorCode* pErrorCode);
int ucnv_flushCache();
int ucnv_countAvailable();
PSTR ucnv_getAvailableName([In] int n);
UEnumeration* ucnv_openAllNames([In] [Out] UErrorCode* pErrorCode);
ushort ucnv_countAliases([Const] [In] PSTR alias, [In] [Out] UErrorCode* pErrorCode);
PSTR ucnv_getAlias([Const] [In] PSTR alias, [In] ushort n, [In] [Out] UErrorCode* pErrorCode);
void ucnv_getAliases([Const] [In] PSTR alias, [Const] [In] sbyte** aliases, [In] [Out] UErrorCode* pErrorCode);
UEnumeration* ucnv_openStandardNames([Const] [In] PSTR convName, [Const] [In] PSTR standard, [In] [Out] UErrorCode* pErrorCode);
ushort ucnv_countStandards();
PSTR ucnv_getStandard([In] ushort n, [In] [Out] UErrorCode* pErrorCode);
PSTR ucnv_getStandardName([Const] [In] PSTR name, [Const] [In] PSTR standard, [In] [Out] UErrorCode* pErrorCode);
PSTR ucnv_getCanonicalName([Const] [In] PSTR alias, [Const] [In] PSTR standard, [In] [Out] UErrorCode* pErrorCode);
PSTR ucnv_getDefaultName();
void ucnv_setDefaultName([Const] [In] PSTR name);
void ucnv_fixFileSeparator([Const] [In] UConverter* cnv, [In] [Out] ushort* source, [In] int sourceLen);
sbyte ucnv_isAmbiguous([Const] [In] UConverter* cnv);
void ucnv_setFallback([In] [Out] UConverter* cnv, [In] sbyte usesFallback);
sbyte ucnv_usesFallback([Const] [In] UConverter* cnv);
PSTR ucnv_detectUnicodeSignature([Const] [In] PSTR source, [In] int sourceLength, [In] [Out] int* signatureLength, [In] [Out] UErrorCode* pErrorCode);
int ucnv_fromUCountPending([Const] [In] UConverter* cnv, [In] [Out] UErrorCode* status);
int ucnv_toUCountPending([Const] [In] UConverter* cnv, [In] [Out] UErrorCode* status);
sbyte ucnv_isFixedWidth([In] [Out] UConverter* cnv, [In] [Out] UErrorCode* status);
void ucnv_cbFromUWriteBytes([In] [Out] UConverterFromUnicodeArgs* args, [Const] [In] PSTR source, [In] int length, [In] int offsetIndex, [In] [Out] UErrorCode* err);
void ucnv_cbFromUWriteSub([In] [Out] UConverterFromUnicodeArgs* args, [In] int offsetIndex, [In] [Out] UErrorCode* err);
void ucnv_cbFromUWriteUChars([In] [Out] UConverterFromUnicodeArgs* args, [Const] [In] ushort** source, [Const] [In] ushort* sourceLimit, [In] int offsetIndex, [In] [Out] UErrorCode* err);
void ucnv_cbToUWriteUChars([In] [Out] UConverterToUnicodeArgs* args, [Const] [In] ushort* source, [In] int length, [In] int offsetIndex, [In] [Out] UErrorCode* err);
void ucnv_cbToUWriteSub([In] [Out] UConverterToUnicodeArgs* args, [In] int offsetIndex, [In] [Out] UErrorCode* err);
void u_init([In] [Out] UErrorCode* status);
void u_cleanup();
void u_setMemoryFunctions([Const] [In] void* context, [In] [Out] UMemAllocFn* a, [In] [Out] UMemReallocFn* r, [In] [Out] UMemFreeFn* f, [In] [Out] UErrorCode* status);
UResourceBundle* u_catopen([Const] [In] PSTR name, [Const] [In] PSTR locale, [In] [Out] UErrorCode* ec);
void u_catclose([In] [Out] UResourceBundle* catd);
ushort* u_catgets([In] [Out] UResourceBundle* catd, [In] int set_num, [In] int msg_num, [Const] [In] ushort* s, [In] [Out] int* len, [In] [Out] UErrorCode* ec);
sbyte u_hasBinaryProperty([In] int c, [In] UProperty which);
USet* u_getBinaryPropertySet([In] UProperty property, [In] [Out] UErrorCode* pErrorCode);
sbyte u_isUAlphabetic([In] int c);
sbyte u_isULowercase([In] int c);
sbyte u_isUUppercase([In] int c);
sbyte u_isUWhiteSpace([In] int c);
int u_getIntPropertyValue([In] int c, [In] UProperty which);
int u_getIntPropertyMinValue([In] UProperty which);
int u_getIntPropertyMaxValue([In] UProperty which);
UCPMap* u_getIntPropertyMap([In] UProperty property, [In] [Out] UErrorCode* pErrorCode);
double u_getNumericValue([In] int c);
sbyte u_islower([In] int c);
sbyte u_isupper([In] int c);
sbyte u_istitle([In] int c);
sbyte u_isdigit([In] int c);
sbyte u_isalpha([In] int c);
sbyte u_isalnum([In] int c);
sbyte u_isxdigit([In] int c);
sbyte u_ispunct([In] int c);
sbyte u_isgraph([In] int c);
sbyte u_isblank([In] int c);
sbyte u_isdefined([In] int c);
sbyte u_isspace([In] int c);
sbyte u_isJavaSpaceChar([In] int c);
sbyte u_isWhitespace([In] int c);
sbyte u_iscntrl([In] int c);
sbyte u_isISOControl([In] int c);
sbyte u_isprint([In] int c);
sbyte u_isbase([In] int c);
UCharDirection u_charDirection([In] int c);
sbyte u_isMirrored([In] int c);
int u_charMirror([In] int c);
int u_getBidiPairedBracket([In] int c);
sbyte u_charType([In] int c);
void u_enumCharTypes([In] [Out] UCharEnumTypeRange* enumRange, [Const] [In] void* context);
byte u_getCombiningClass([In] int c);
int u_charDigitValue([In] int c);
UBlockCode ublock_getCode([In] int c);
int u_charName([In] int code, [In] UCharNameChoice nameChoice, [In] PSTR buffer, [In] int bufferLength, [In] [Out] UErrorCode* pErrorCode);
int u_charFromName([In] UCharNameChoice nameChoice, [Const] [In] PSTR name, [In] [Out] UErrorCode* pErrorCode);
void u_enumCharNames([In] int start, [In] int limit, [In] [Out] UEnumCharNamesFn* fn, [In] [Out] void* context, [In] UCharNameChoice nameChoice, [In] [Out] UErrorCode* pErrorCode);
PSTR u_getPropertyName([In] UProperty property, [In] UPropertyNameChoice nameChoice);
UProperty u_getPropertyEnum([Const] [In] PSTR alias);
PSTR u_getPropertyValueName([In] UProperty property, [In] int value, [In] UPropertyNameChoice nameChoice);
int u_getPropertyValueEnum([In] UProperty property, [Const] [In] PSTR alias);
sbyte u_isIDStart([In] int c);
sbyte u_isIDPart([In] int c);
sbyte u_isIDIgnorable([In] int c);
sbyte u_isJavaIDStart([In] int c);
sbyte u_isJavaIDPart([In] int c);
int u_tolower([In] int c);
int u_toupper([In] int c);
int u_totitle([In] int c);
int u_foldCase([In] int c, [In] uint options);
int u_digit([In] int ch, [In] sbyte radix);
int u_forDigit([In] int digit, [In] sbyte radix);
void u_charAge([In] int c, [In] [Out] byte* versionArray);
void u_getUnicodeVersion([In] [Out] byte* versionArray);
int u_getFC_NFKC_Closure([In] int c, [In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] UErrorCode* pErrorCode);
UBiDi* ubidi_open();
UBiDi* ubidi_openSized([In] int maxLength, [In] int maxRunCount, [In] [Out] UErrorCode* pErrorCode);
void ubidi_close([In] [Out] UBiDi* pBiDi);
void ubidi_setInverse([In] [Out] UBiDi* pBiDi, [In] sbyte isInverse);
sbyte ubidi_isInverse([In] [Out] UBiDi* pBiDi);
void ubidi_orderParagraphsLTR([In] [Out] UBiDi* pBiDi, [In] sbyte orderParagraphsLTR);
sbyte ubidi_isOrderParagraphsLTR([In] [Out] UBiDi* pBiDi);
void ubidi_setReorderingMode([In] [Out] UBiDi* pBiDi, [In] UBiDiReorderingMode reorderingMode);
UBiDiReorderingMode ubidi_getReorderingMode([In] [Out] UBiDi* pBiDi);
void ubidi_setReorderingOptions([In] [Out] UBiDi* pBiDi, [In] uint reorderingOptions);
uint ubidi_getReorderingOptions([In] [Out] UBiDi* pBiDi);
void ubidi_setContext([In] [Out] UBiDi* pBiDi, [Const] [In] ushort* prologue, [In] int proLength, [Const] [In] ushort* epilogue, [In] int epiLength, [In] [Out] UErrorCode* pErrorCode);
void ubidi_setPara([In] [Out] UBiDi* pBiDi, [Const] [In] ushort* text, [In] int length, [In] byte paraLevel, [In] [Out] byte* embeddingLevels, [In] [Out] UErrorCode* pErrorCode);
void ubidi_setLine([Const] [In] UBiDi* pParaBiDi, [In] int start, [In] int limit, [In] [Out] UBiDi* pLineBiDi, [In] [Out] UErrorCode* pErrorCode);
UBiDiDirection ubidi_getDirection([Const] [In] UBiDi* pBiDi);
UBiDiDirection ubidi_getBaseDirection([Const] [In] ushort* text, [In] int length);
ushort* ubidi_getText([Const] [In] UBiDi* pBiDi);
int ubidi_getLength([Const] [In] UBiDi* pBiDi);
byte ubidi_getParaLevel([Const] [In] UBiDi* pBiDi);
int ubidi_countParagraphs([In] [Out] UBiDi* pBiDi);
int ubidi_getParagraph([Const] [In] UBiDi* pBiDi, [In] int charIndex, [In] [Out] int* pParaStart, [In] [Out] int* pParaLimit, [In] [Out] byte* pParaLevel, [In] [Out] UErrorCode* pErrorCode);
void ubidi_getParagraphByIndex([Const] [In] UBiDi* pBiDi, [In] int paraIndex, [In] [Out] int* pParaStart, [In] [Out] int* pParaLimit, [In] [Out] byte* pParaLevel, [In] [Out] UErrorCode* pErrorCode);
byte ubidi_getLevelAt([Const] [In] UBiDi* pBiDi, [In] int charIndex);
byte* ubidi_getLevels([In] [Out] UBiDi* pBiDi, [In] [Out] UErrorCode* pErrorCode);
void ubidi_getLogicalRun([Const] [In] UBiDi* pBiDi, [In] int logicalPosition, [In] [Out] int* pLogicalLimit, [In] [Out] byte* pLevel);
int ubidi_countRuns([In] [Out] UBiDi* pBiDi, [In] [Out] UErrorCode* pErrorCode);
UBiDiDirection ubidi_getVisualRun([In] [Out] UBiDi* pBiDi, [In] int runIndex, [In] [Out] int* pLogicalStart, [In] [Out] int* pLength);
int ubidi_getVisualIndex([In] [Out] UBiDi* pBiDi, [In] int logicalIndex, [In] [Out] UErrorCode* pErrorCode);
int ubidi_getLogicalIndex([In] [Out] UBiDi* pBiDi, [In] int visualIndex, [In] [Out] UErrorCode* pErrorCode);
void ubidi_getLogicalMap([In] [Out] UBiDi* pBiDi, [In] [Out] int* indexMap, [In] [Out] UErrorCode* pErrorCode);
void ubidi_getVisualMap([In] [Out] UBiDi* pBiDi, [In] [Out] int* indexMap, [In] [Out] UErrorCode* pErrorCode);
void ubidi_reorderLogical([Const] [In] byte* levels, [In] int length, [In] [Out] int* indexMap);
void ubidi_reorderVisual([Const] [In] byte* levels, [In] int length, [In] [Out] int* indexMap);
void ubidi_invertMap([Const] [In] int* srcMap, [In] [Out] int* destMap, [In] int length);
int ubidi_getProcessedLength([Const] [In] UBiDi* pBiDi);
int ubidi_getResultLength([Const] [In] UBiDi* pBiDi);
UCharDirection ubidi_getCustomizedClass([In] [Out] UBiDi* pBiDi, [In] int c);
void ubidi_setClassCallback([In] [Out] UBiDi* pBiDi, [In] UBiDiClassCallback newFn, [Const] [In] void* newContext, [In] [Out] UBiDiClassCallback* oldFn, [Const] [In] void** oldContext, [In] [Out] UErrorCode* pErrorCode);
void ubidi_getClassCallback([In] [Out] UBiDi* pBiDi, [In] [Out] UBiDiClassCallback* fn, [Const] [In] void** context);
int ubidi_writeReordered([In] [Out] UBiDi* pBiDi, [In] [Out] ushort* dest, [In] int destSize, [In] ushort options, [In] [Out] UErrorCode* pErrorCode);
int ubidi_writeReverse([Const] [In] ushort* src, [In] int srcLength, [In] [Out] ushort* dest, [In] int destSize, [In] ushort options, [In] [Out] UErrorCode* pErrorCode);
uint ubiditransform_transform([In] [Out] UBiDiTransform* pBiDiTransform, [Const] [In] ushort* src, [In] int srcLength, [In] [Out] ushort* dest, [In] int destSize, [In] byte inParaLevel, [In] UBiDiOrder inOrder, [In] byte outParaLevel, [In] UBiDiOrder outOrder, [In] UBiDiMirroring doMirroring, [In] uint shapingOptions, [In] [Out] UErrorCode* pErrorCode);
UBiDiTransform* ubiditransform_open([In] [Out] UErrorCode* pErrorCode);
void ubiditransform_close([In] [Out] UBiDiTransform* pBidiTransform);
UText* utext_close([In] [Out] UText* ut);
UText* utext_openUTF8([In] [Out] UText* ut, [Const] [In] PSTR s, [In] long length, [In] [Out] UErrorCode* status);
UText* utext_openUChars([In] [Out] UText* ut, [Const] [In] ushort* s, [In] long length, [In] [Out] UErrorCode* status);
UText* utext_clone([In] [Out] UText* dest, [Const] [In] UText* src, [In] sbyte deep, [In] sbyte readOnly, [In] [Out] UErrorCode* status);
sbyte utext_equals([Const] [In] UText* a, [Const] [In] UText* b);
long utext_nativeLength([In] [Out] UText* ut);
sbyte utext_isLengthExpensive([Const] [In] UText* ut);
int utext_char32At([In] [Out] UText* ut, [In] long nativeIndex);
int utext_current32([In] [Out] UText* ut);
int utext_next32([In] [Out] UText* ut);
int utext_previous32([In] [Out] UText* ut);
int utext_next32From([In] [Out] UText* ut, [In] long nativeIndex);
int utext_previous32From([In] [Out] UText* ut, [In] long nativeIndex);
long utext_getNativeIndex([Const] [In] UText* ut);
void utext_setNativeIndex([In] [Out] UText* ut, [In] long nativeIndex);
sbyte utext_moveIndex32([In] [Out] UText* ut, [In] int delta);
long utext_getPreviousNativeIndex([In] [Out] UText* ut);
int utext_extract([In] [Out] UText* ut, [In] long nativeStart, [In] long nativeLimit, [In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] UErrorCode* status);
sbyte utext_isWritable([Const] [In] UText* ut);
sbyte utext_hasMetaData([Const] [In] UText* ut);
int utext_replace([In] [Out] UText* ut, [In] long nativeStart, [In] long nativeLimit, [Const] [In] ushort* replacementText, [In] int replacementLength, [In] [Out] UErrorCode* status);
void utext_copy([In] [Out] UText* ut, [In] long nativeStart, [In] long nativeLimit, [In] long destIndex, [In] sbyte move, [In] [Out] UErrorCode* status);
void utext_freeze([In] [Out] UText* ut);
UText* utext_setup([In] [Out] UText* ut, [In] int extraSpace, [In] [Out] UErrorCode* status);
USet* uset_openEmpty();
USet* uset_open([In] int start, [In] int end);
USet* uset_openPattern([Const] [In] ushort* pattern, [In] int patternLength, [In] [Out] UErrorCode* ec);
USet* uset_openPatternOptions([Const] [In] ushort* pattern, [In] int patternLength, [In] uint options, [In] [Out] UErrorCode* ec);
void uset_close([In] [Out] USet* set);
USet* uset_clone([Const] [In] USet* set);
sbyte uset_isFrozen([Const] [In] USet* set);
void uset_freeze([In] [Out] USet* set);
USet* uset_cloneAsThawed([Const] [In] USet* set);
void uset_set([In] [Out] USet* set, [In] int start, [In] int end);
int uset_applyPattern([In] [Out] USet* set, [Const] [In] ushort* pattern, [In] int patternLength, [In] uint options, [In] [Out] UErrorCode* status);
void uset_applyIntPropertyValue([In] [Out] USet* set, [In] UProperty prop, [In] int value, [In] [Out] UErrorCode* ec);
void uset_applyPropertyAlias([In] [Out] USet* set, [Const] [In] ushort* prop, [In] int propLength, [Const] [In] ushort* value, [In] int valueLength, [In] [Out] UErrorCode* ec);
sbyte uset_resemblesPattern([Const] [In] ushort* pattern, [In] int patternLength, [In] int pos);
int uset_toPattern([Const] [In] USet* set, [In] [Out] ushort* result, [In] int resultCapacity, [In] sbyte escapeUnprintable, [In] [Out] UErrorCode* ec);
void uset_add([In] [Out] USet* set, [In] int c);
void uset_addAll([In] [Out] USet* set, [Const] [In] USet* additionalSet);
void uset_addRange([In] [Out] USet* set, [In] int start, [In] int end);
void uset_addString([In] [Out] USet* set, [Const] [In] ushort* str, [In] int strLen);
void uset_addAllCodePoints([In] [Out] USet* set, [Const] [In] ushort* str, [In] int strLen);
void uset_remove([In] [Out] USet* set, [In] int c);
void uset_removeRange([In] [Out] USet* set, [In] int start, [In] int end);
void uset_removeString([In] [Out] USet* set, [Const] [In] ushort* str, [In] int strLen);
void uset_removeAll([In] [Out] USet* set, [Const] [In] USet* removeSet);
void uset_retain([In] [Out] USet* set, [In] int start, [In] int end);
void uset_retainAll([In] [Out] USet* set, [Const] [In] USet* retain);
void uset_compact([In] [Out] USet* set);
void uset_complement([In] [Out] USet* set);
void uset_complementAll([In] [Out] USet* set, [Const] [In] USet* complement);
void uset_clear([In] [Out] USet* set);
void uset_closeOver([In] [Out] USet* set, [In] int attributes);
void uset_removeAllStrings([In] [Out] USet* set);
sbyte uset_isEmpty([Const] [In] USet* set);
sbyte uset_contains([Const] [In] USet* set, [In] int c);
sbyte uset_containsRange([Const] [In] USet* set, [In] int start, [In] int end);
sbyte uset_containsString([Const] [In] USet* set, [Const] [In] ushort* str, [In] int strLen);
int uset_indexOf([Const] [In] USet* set, [In] int c);
int uset_charAt([Const] [In] USet* set, [In] int charIndex);
int uset_size([Const] [In] USet* set);
int uset_getItemCount([Const] [In] USet* set);
int uset_getItem([Const] [In] USet* set, [In] int itemIndex, [In] [Out] int* start, [In] [Out] int* end, [In] [Out] ushort* str, [In] int strCapacity, [In] [Out] UErrorCode* ec);
sbyte uset_containsAll([Const] [In] USet* set1, [Const] [In] USet* set2);
sbyte uset_containsAllCodePoints([Const] [In] USet* set, [Const] [In] ushort* str, [In] int strLen);
sbyte uset_containsNone([Const] [In] USet* set1, [Const] [In] USet* set2);
sbyte uset_containsSome([Const] [In] USet* set1, [Const] [In] USet* set2);
int uset_span([Const] [In] USet* set, [Const] [In] ushort* s, [In] int length, [In] USetSpanCondition spanCondition);
int uset_spanBack([Const] [In] USet* set, [Const] [In] ushort* s, [In] int length, [In] USetSpanCondition spanCondition);
int uset_spanUTF8([Const] [In] USet* set, [Const] [In] PSTR s, [In] int length, [In] USetSpanCondition spanCondition);
int uset_spanBackUTF8([Const] [In] USet* set, [Const] [In] PSTR s, [In] int length, [In] USetSpanCondition spanCondition);
sbyte uset_equals([Const] [In] USet* set1, [Const] [In] USet* set2);
int uset_serialize([Const] [In] USet* set, [In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] UErrorCode* pErrorCode);
sbyte uset_getSerializedSet([In] [Out] USerializedSet* fillSet, [Const] [In] ushort* src, [In] int srcLength);
void uset_setSerializedToOne([In] [Out] USerializedSet* fillSet, [In] int c);
sbyte uset_serializedContains([Const] [In] USerializedSet* set, [In] int c);
int uset_getSerializedRangeCount([Const] [In] USerializedSet* set);
sbyte uset_getSerializedRange([Const] [In] USerializedSet* set, [In] int rangeIndex, [In] [Out] int* pStart, [In] [Out] int* pEnd);
UNormalizer2* unorm2_getNFCInstance([In] [Out] UErrorCode* pErrorCode);
UNormalizer2* unorm2_getNFDInstance([In] [Out] UErrorCode* pErrorCode);
UNormalizer2* unorm2_getNFKCInstance([In] [Out] UErrorCode* pErrorCode);
UNormalizer2* unorm2_getNFKDInstance([In] [Out] UErrorCode* pErrorCode);
UNormalizer2* unorm2_getNFKCCasefoldInstance([In] [Out] UErrorCode* pErrorCode);
UNormalizer2* unorm2_getInstance([Const] [In] PSTR packageName, [Const] [In] PSTR name, [In] UNormalization2Mode mode, [In] [Out] UErrorCode* pErrorCode);
UNormalizer2* unorm2_openFiltered([Const] [In] UNormalizer2* norm2, [Const] [In] USet* filterSet, [In] [Out] UErrorCode* pErrorCode);
void unorm2_close([In] [Out] UNormalizer2* norm2);
int unorm2_normalize([Const] [In] UNormalizer2* norm2, [Const] [In] ushort* src, [In] int length, [In] [Out] ushort* dest, [In] int capacity, [In] [Out] UErrorCode* pErrorCode);
int unorm2_normalizeSecondAndAppend([Const] [In] UNormalizer2* norm2, [In] [Out] ushort* first, [In] int firstLength, [In] int firstCapacity, [Const] [In] ushort* second, [In] int secondLength, [In] [Out] UErrorCode* pErrorCode);
int unorm2_append([Const] [In] UNormalizer2* norm2, [In] [Out] ushort* first, [In] int firstLength, [In] int firstCapacity, [Const] [In] ushort* second, [In] int secondLength, [In] [Out] UErrorCode* pErrorCode);
int unorm2_getDecomposition([Const] [In] UNormalizer2* norm2, [In] int c, [In] [Out] ushort* decomposition, [In] int capacity, [In] [Out] UErrorCode* pErrorCode);
int unorm2_getRawDecomposition([Const] [In] UNormalizer2* norm2, [In] int c, [In] [Out] ushort* decomposition, [In] int capacity, [In] [Out] UErrorCode* pErrorCode);
int unorm2_composePair([Const] [In] UNormalizer2* norm2, [In] int a, [In] int b);
byte unorm2_getCombiningClass([Const] [In] UNormalizer2* norm2, [In] int c);
sbyte unorm2_isNormalized([Const] [In] UNormalizer2* norm2, [Const] [In] ushort* s, [In] int length, [In] [Out] UErrorCode* pErrorCode);
UNormalizationCheckResult unorm2_quickCheck([Const] [In] UNormalizer2* norm2, [Const] [In] ushort* s, [In] int length, [In] [Out] UErrorCode* pErrorCode);
int unorm2_spanQuickCheckYes([Const] [In] UNormalizer2* norm2, [Const] [In] ushort* s, [In] int length, [In] [Out] UErrorCode* pErrorCode);
sbyte unorm2_hasBoundaryBefore([Const] [In] UNormalizer2* norm2, [In] int c);
sbyte unorm2_hasBoundaryAfter([Const] [In] UNormalizer2* norm2, [In] int c);
sbyte unorm2_isInert([Const] [In] UNormalizer2* norm2, [In] int c);
int unorm_compare([Const] [In] ushort* s1, [In] int length1, [Const] [In] ushort* s2, [In] int length2, [In] uint options, [In] [Out] UErrorCode* pErrorCode);
UConverterSelector* ucnvsel_open([Const] [In] sbyte** converterList, [In] int converterListSize, [Const] [In] USet* excludedCodePoints, [Const] [In] UConverterUnicodeSet whichSet, [In] [Out] UErrorCode* status);
void ucnvsel_close([In] [Out] UConverterSelector* sel);
UConverterSelector* ucnvsel_openFromSerialized([Const] [In] void* buffer, [In] int length, [In] [Out] UErrorCode* status);
int ucnvsel_serialize([Const] [In] UConverterSelector* sel, [In] [Out] void* buffer, [In] int bufferCapacity, [In] [Out] UErrorCode* status);
UEnumeration* ucnvsel_selectForString([Const] [In] UConverterSelector* sel, [Const] [In] ushort* s, [In] int length, [In] [Out] UErrorCode* status);
UEnumeration* ucnvsel_selectForUTF8([Const] [In] UConverterSelector* sel, [Const] [In] PSTR s, [In] int length, [In] [Out] UErrorCode* status);
void u_charsToUChars([Const] [In] PSTR cs, [In] [Out] ushort* us, [In] int length);
void u_UCharsToChars([Const] [In] ushort* us, [In] PSTR cs, [In] int length);
int u_strlen([Const] [In] ushort* s);
int u_countChar32([Const] [In] ushort* s, [In] int length);
sbyte u_strHasMoreChar32Than([Const] [In] ushort* s, [In] int length, [In] int number);
ushort* u_strcat([In] [Out] ushort* dst, [Const] [In] ushort* src);
ushort* u_strncat([In] [Out] ushort* dst, [Const] [In] ushort* src, [In] int n);
ushort* u_strstr([Const] [In] ushort* s, [Const] [In] ushort* substring);
ushort* u_strFindFirst([Const] [In] ushort* s, [In] int length, [Const] [In] ushort* substring, [In] int subLength);
ushort* u_strchr([Const] [In] ushort* s, [In] ushort c);
ushort* u_strchr32([Const] [In] ushort* s, [In] int c);
ushort* u_strrstr([Const] [In] ushort* s, [Const] [In] ushort* substring);
ushort* u_strFindLast([Const] [In] ushort* s, [In] int length, [Const] [In] ushort* substring, [In] int subLength);
ushort* u_strrchr([Const] [In] ushort* s, [In] ushort c);
ushort* u_strrchr32([Const] [In] ushort* s, [In] int c);
ushort* u_strpbrk([Const] [In] ushort* string, [Const] [In] ushort* matchSet);
int u_strcspn([Const] [In] ushort* string, [Const] [In] ushort* matchSet);
int u_strspn([Const] [In] ushort* string, [Const] [In] ushort* matchSet);
ushort* u_strtok_r([In] [Out] ushort* src, [Const] [In] ushort* delim, [In] [Out] ushort** saveState);
int u_strcmp([Const] [In] ushort* s1, [Const] [In] ushort* s2);
int u_strcmpCodePointOrder([Const] [In] ushort* s1, [Const] [In] ushort* s2);
int u_strCompare([Const] [In] ushort* s1, [In] int length1, [Const] [In] ushort* s2, [In] int length2, [In] sbyte codePointOrder);
int u_strCompareIter([In] [Out] UCharIterator* iter1, [In] [Out] UCharIterator* iter2, [In] sbyte codePointOrder);
int u_strCaseCompare([Const] [In] ushort* s1, [In] int length1, [Const] [In] ushort* s2, [In] int length2, [In] uint options, [In] [Out] UErrorCode* pErrorCode);
int u_strncmp([Const] [In] ushort* ucs1, [Const] [In] ushort* ucs2, [In] int n);
int u_strncmpCodePointOrder([Const] [In] ushort* s1, [Const] [In] ushort* s2, [In] int n);
int u_strcasecmp([Const] [In] ushort* s1, [Const] [In] ushort* s2, [In] uint options);
int u_strncasecmp([Const] [In] ushort* s1, [Const] [In] ushort* s2, [In] int n, [In] uint options);
int u_memcasecmp([Const] [In] ushort* s1, [Const] [In] ushort* s2, [In] int length, [In] uint options);
ushort* u_strcpy([In] [Out] ushort* dst, [Const] [In] ushort* src);
ushort* u_strncpy([In] [Out] ushort* dst, [Const] [In] ushort* src, [In] int n);
ushort* u_uastrcpy([In] [Out] ushort* dst, [Const] [In] PSTR src);
ushort* u_uastrncpy([In] [Out] ushort* dst, [Const] [In] PSTR src, [In] int n);
PSTR u_austrcpy([In] PSTR dst, [Const] [In] ushort* src);
PSTR u_austrncpy([In] PSTR dst, [Const] [In] ushort* src, [In] int n);
ushort* u_memcpy([In] [Out] ushort* dest, [Const] [In] ushort* src, [In] int count);
ushort* u_memmove([In] [Out] ushort* dest, [Const] [In] ushort* src, [In] int count);
ushort* u_memset([In] [Out] ushort* dest, [In] ushort c, [In] int count);
int u_memcmp([Const] [In] ushort* buf1, [Const] [In] ushort* buf2, [In] int count);
int u_memcmpCodePointOrder([Const] [In] ushort* s1, [Const] [In] ushort* s2, [In] int count);
ushort* u_memchr([Const] [In] ushort* s, [In] ushort c, [In] int count);
ushort* u_memchr32([Const] [In] ushort* s, [In] int c, [In] int count);
ushort* u_memrchr([Const] [In] ushort* s, [In] ushort c, [In] int count);
ushort* u_memrchr32([Const] [In] ushort* s, [In] int c, [In] int count);
int u_unescape([Const] [In] PSTR src, [In] [Out] ushort* dest, [In] int destCapacity);
int u_unescapeAt([In] UNESCAPE_CHAR_AT charAt, [In] [Out] int* offset, [In] int length, [In] [Out] void* context);
int u_strToUpper([In] [Out] ushort* dest, [In] int destCapacity, [Const] [In] ushort* src, [In] int srcLength, [Const] [In] PSTR locale, [In] [Out] UErrorCode* pErrorCode);
int u_strToLower([In] [Out] ushort* dest, [In] int destCapacity, [Const] [In] ushort* src, [In] int srcLength, [Const] [In] PSTR locale, [In] [Out] UErrorCode* pErrorCode);
int u_strToTitle([In] [Out] ushort* dest, [In] int destCapacity, [Const] [In] ushort* src, [In] int srcLength, [In] [Out] UBreakIterator* titleIter, [Const] [In] PSTR locale, [In] [Out] UErrorCode* pErrorCode);
int u_strFoldCase([In] [Out] ushort* dest, [In] int destCapacity, [Const] [In] ushort* src, [In] int srcLength, [In] uint options, [In] [Out] UErrorCode* pErrorCode);
PWSTR u_strToWCS([In] PWSTR dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] ushort* src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
ushort* u_strFromWCS([In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] PWSTR src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
PSTR u_strToUTF8([In] PSTR dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] ushort* src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
ushort* u_strFromUTF8([In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] PSTR src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
PSTR u_strToUTF8WithSub([In] PSTR dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] ushort* src, [In] int srcLength, [In] int subchar, [In] [Out] int* pNumSubstitutions, [In] [Out] UErrorCode* pErrorCode);
ushort* u_strFromUTF8WithSub([In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] PSTR src, [In] int srcLength, [In] int subchar, [In] [Out] int* pNumSubstitutions, [In] [Out] UErrorCode* pErrorCode);
ushort* u_strFromUTF8Lenient([In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] PSTR src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
int* u_strToUTF32([In] [Out] int* dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] ushort* src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
ushort* u_strFromUTF32([In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] int* src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
int* u_strToUTF32WithSub([In] [Out] int* dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] ushort* src, [In] int srcLength, [In] int subchar, [In] [Out] int* pNumSubstitutions, [In] [Out] UErrorCode* pErrorCode);
ushort* u_strFromUTF32WithSub([In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] int* src, [In] int srcLength, [In] int subchar, [In] [Out] int* pNumSubstitutions, [In] [Out] UErrorCode* pErrorCode);
PSTR u_strToJavaModifiedUTF8([In] PSTR dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] ushort* src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
ushort* u_strFromJavaModifiedUTF8WithSub([In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] int* pDestLength, [Const] [In] PSTR src, [In] int srcLength, [In] int subchar, [In] [Out] int* pNumSubstitutions, [In] [Out] UErrorCode* pErrorCode);
UCaseMap* ucasemap_open([Const] [In] PSTR locale, [In] uint options, [In] [Out] UErrorCode* pErrorCode);
void ucasemap_close([In] [Out] UCaseMap* csm);
PSTR ucasemap_getLocale([Const] [In] UCaseMap* csm);
uint ucasemap_getOptions([Const] [In] UCaseMap* csm);
void ucasemap_setLocale([In] [Out] UCaseMap* csm, [Const] [In] PSTR locale, [In] [Out] UErrorCode* pErrorCode);
void ucasemap_setOptions([In] [Out] UCaseMap* csm, [In] uint options, [In] [Out] UErrorCode* pErrorCode);
UBreakIterator* ucasemap_getBreakIterator([Const] [In] UCaseMap* csm);
void ucasemap_setBreakIterator([In] [Out] UCaseMap* csm, [In] [Out] UBreakIterator* iterToAdopt, [In] [Out] UErrorCode* pErrorCode);
int ucasemap_toTitle([In] [Out] UCaseMap* csm, [In] [Out] ushort* dest, [In] int destCapacity, [Const] [In] ushort* src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
int ucasemap_utf8ToLower([Const] [In] UCaseMap* csm, [In] PSTR dest, [In] int destCapacity, [Const] [In] PSTR src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
int ucasemap_utf8ToUpper([Const] [In] UCaseMap* csm, [In] PSTR dest, [In] int destCapacity, [Const] [In] PSTR src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
int ucasemap_utf8ToTitle([In] [Out] UCaseMap* csm, [In] PSTR dest, [In] int destCapacity, [Const] [In] PSTR src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
int ucasemap_utf8FoldCase([Const] [In] UCaseMap* csm, [In] PSTR dest, [In] int destCapacity, [Const] [In] PSTR src, [In] int srcLength, [In] [Out] UErrorCode* pErrorCode);
UStringPrepProfile* usprep_open([Const] [In] PSTR path, [Const] [In] PSTR fileName, [In] [Out] UErrorCode* status);
UStringPrepProfile* usprep_openByType([In] UStringPrepProfileType type, [In] [Out] UErrorCode* status);
void usprep_close([In] [Out] UStringPrepProfile* profile);
int usprep_prepare([Const] [In] UStringPrepProfile* prep, [Const] [In] ushort* src, [In] int srcLength, [In] [Out] ushort* dest, [In] int destCapacity, [In] int options, [In] [Out] UParseError* parseError, [In] [Out] UErrorCode* status);
UIDNA* uidna_openUTS46([In] uint options, [In] [Out] UErrorCode* pErrorCode);
void uidna_close([In] [Out] UIDNA* idna);
int uidna_labelToASCII([Const] [In] UIDNA* idna, [Const] [In] ushort* label, [In] int length, [In] [Out] ushort* dest, [In] int capacity, [In] [Out] UIDNAInfo* pInfo, [In] [Out] UErrorCode* pErrorCode);
int uidna_labelToUnicode([Const] [In] UIDNA* idna, [Const] [In] ushort* label, [In] int length, [In] [Out] ushort* dest, [In] int capacity, [In] [Out] UIDNAInfo* pInfo, [In] [Out] UErrorCode* pErrorCode);
int uidna_nameToASCII([Const] [In] UIDNA* idna, [Const] [In] ushort* name, [In] int length, [In] [Out] ushort* dest, [In] int capacity, [In] [Out] UIDNAInfo* pInfo, [In] [Out] UErrorCode* pErrorCode);
int uidna_nameToUnicode([Const] [In] UIDNA* idna, [Const] [In] ushort* name, [In] int length, [In] [Out] ushort* dest, [In] int capacity, [In] [Out] UIDNAInfo* pInfo, [In] [Out] UErrorCode* pErrorCode);
int uidna_labelToASCII_UTF8([Const] [In] UIDNA* idna, [Const] [In] PSTR label, [In] int length, [In] PSTR dest, [In] int capacity, [In] [Out] UIDNAInfo* pInfo, [In] [Out] UErrorCode* pErrorCode);
int uidna_labelToUnicodeUTF8([Const] [In] UIDNA* idna, [Const] [In] PSTR label, [In] int length, [In] PSTR dest, [In] int capacity, [In] [Out] UIDNAInfo* pInfo, [In] [Out] UErrorCode* pErrorCode);
int uidna_nameToASCII_UTF8([Const] [In] UIDNA* idna, [Const] [In] PSTR name, [In] int length, [In] PSTR dest, [In] int capacity, [In] [Out] UIDNAInfo* pInfo, [In] [Out] UErrorCode* pErrorCode);
int uidna_nameToUnicodeUTF8([Const] [In] UIDNA* idna, [Const] [In] PSTR name, [In] int length, [In] PSTR dest, [In] int capacity, [In] [Out] UIDNAInfo* pInfo, [In] [Out] UErrorCode* pErrorCode);
UBreakIterator* ubrk_open([In] UBreakIteratorType type, [Const] [In] PSTR locale, [Const] [In] ushort* text, [In] int textLength, [In] [Out] UErrorCode* status);
UBreakIterator* ubrk_openRules([Const] [In] ushort* rules, [In] int rulesLength, [Const] [In] ushort* text, [In] int textLength, [In] [Out] UParseError* parseErr, [In] [Out] UErrorCode* status);
UBreakIterator* ubrk_openBinaryRules([Const] [In] byte* binaryRules, [In] int rulesLength, [Const] [In] ushort* text, [In] int textLength, [In] [Out] UErrorCode* status);
UBreakIterator* ubrk_safeClone([Const] [In] UBreakIterator* bi, [In] [Out] void* stackBuffer, [In] [Out] int* pBufferSize, [In] [Out] UErrorCode* status);
void ubrk_close([In] [Out] UBreakIterator* bi);
void ubrk_setText([In] [Out] UBreakIterator* bi, [Const] [In] ushort* text, [In] int textLength, [In] [Out] UErrorCode* status);
void ubrk_setUText([In] [Out] UBreakIterator* bi, [In] [Out] UText* text, [In] [Out] UErrorCode* status);
int ubrk_current([Const] [In] UBreakIterator* bi);
int ubrk_next([In] [Out] UBreakIterator* bi);
int ubrk_previous([In] [Out] UBreakIterator* bi);
int ubrk_first([In] [Out] UBreakIterator* bi);
int ubrk_last([In] [Out] UBreakIterator* bi);
int ubrk_preceding([In] [Out] UBreakIterator* bi, [In] int offset);
int ubrk_following([In] [Out] UBreakIterator* bi, [In] int offset);
PSTR ubrk_getAvailable([In] int index);
int ubrk_countAvailable();
sbyte ubrk_isBoundary([In] [Out] UBreakIterator* bi, [In] int offset);
int ubrk_getRuleStatus([In] [Out] UBreakIterator* bi);
int ubrk_getRuleStatusVec([In] [Out] UBreakIterator* bi, [In] [Out] int* fillInVec, [In] int capacity, [In] [Out] UErrorCode* status);
PSTR ubrk_getLocaleByType([Const] [In] UBreakIterator* bi, [In] ULocDataLocaleType type, [In] [Out] UErrorCode* status);
void ubrk_refreshUText([In] [Out] UBreakIterator* bi, [In] [Out] UText* text, [In] [Out] UErrorCode* status);
int ubrk_getBinaryRules([In] [Out] UBreakIterator* bi, [In] [Out] byte* binaryRules, [In] int rulesCapacity, [In] [Out] UErrorCode* status);
void u_getDataVersion([In] [Out] byte* dataVersionFillin, [In] [Out] UErrorCode* status);
UEnumeration* ucal_openTimeZoneIDEnumeration([In] USystemTimeZoneType zoneType, [Const] [In] PSTR region, [Const] [In] int* rawOffset, [In] [Out] UErrorCode* ec);
UEnumeration* ucal_openTimeZones([In] [Out] UErrorCode* ec);
UEnumeration* ucal_openCountryTimeZones([Const] [In] PSTR country, [In] [Out] UErrorCode* ec);
int ucal_getDefaultTimeZone([In] [Out] ushort* result, [In] int resultCapacity, [In] [Out] UErrorCode* ec);
void ucal_setDefaultTimeZone([Const] [In] ushort* zoneID, [In] [Out] UErrorCode* ec);
int ucal_getHostTimeZone([In] [Out] ushort* result, [In] int resultCapacity, [In] [Out] UErrorCode* ec);
int ucal_getDSTSavings([Const] [In] ushort* zoneID, [In] [Out] UErrorCode* ec);
double ucal_getNow();
void** ucal_open([Const] [In] ushort* zoneID, [In] int len, [Const] [In] PSTR locale, [In] UCalendarType type, [In] [Out] UErrorCode* status);
void ucal_close([In] [Out] void** cal);
void** ucal_clone([Const] [In] void** cal, [In] [Out] UErrorCode* status);
void ucal_setTimeZone([In] [Out] void** cal, [Const] [In] ushort* zoneID, [In] int len, [In] [Out] UErrorCode* status);
int ucal_getTimeZoneID([Const] [In] void** cal, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status);
int ucal_getTimeZoneDisplayName([Const] [In] void** cal, [In] UCalendarDisplayNameType type, [Const] [In] PSTR locale, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status);
sbyte ucal_inDaylightTime([Const] [In] void** cal, [In] [Out] UErrorCode* status);
void ucal_setGregorianChange([In] [Out] void** cal, [In] double date, [In] [Out] UErrorCode* pErrorCode);
double ucal_getGregorianChange([Const] [In] void** cal, [In] [Out] UErrorCode* pErrorCode);
int ucal_getAttribute([Const] [In] void** cal, [In] UCalendarAttribute attr);
void ucal_setAttribute([In] [Out] void** cal, [In] UCalendarAttribute attr, [In] int newValue);
PSTR ucal_getAvailable([In] int localeIndex);
int ucal_countAvailable();
double ucal_getMillis([Const] [In] void** cal, [In] [Out] UErrorCode* status);
void ucal_setMillis([In] [Out] void** cal, [In] double dateTime, [In] [Out] UErrorCode* status);
void ucal_setDate([In] [Out] void** cal, [In] int year, [In] int month, [In] int date, [In] [Out] UErrorCode* status);
void ucal_setDateTime([In] [Out] void** cal, [In] int year, [In] int month, [In] int date, [In] int hour, [In] int minute, [In] int second, [In] [Out] UErrorCode* status);
sbyte ucal_equivalentTo([Const] [In] void** cal1, [Const] [In] void** cal2);
void ucal_add([In] [Out] void** cal, [In] UCalendarDateFields field, [In] int amount, [In] [Out] UErrorCode* status);
void ucal_roll([In] [Out] void** cal, [In] UCalendarDateFields field, [In] int amount, [In] [Out] UErrorCode* status);
int ucal_get([Const] [In] void** cal, [In] UCalendarDateFields field, [In] [Out] UErrorCode* status);
void ucal_set([In] [Out] void** cal, [In] UCalendarDateFields field, [In] int value);
sbyte ucal_isSet([Const] [In] void** cal, [In] UCalendarDateFields field);
void ucal_clearField([In] [Out] void** cal, [In] UCalendarDateFields field);
void ucal_clear([In] [Out] void** calendar);
int ucal_getLimit([Const] [In] void** cal, [In] UCalendarDateFields field, [In] UCalendarLimitType type, [In] [Out] UErrorCode* status);
PSTR ucal_getLocaleByType([Const] [In] void** cal, [In] ULocDataLocaleType type, [In] [Out] UErrorCode* status);
PSTR ucal_getTZDataVersion([In] [Out] UErrorCode* status);
int ucal_getCanonicalTimeZoneID([Const] [In] ushort* id, [In] int len, [In] [Out] ushort* result, [In] int resultCapacity, [In] [Out] sbyte* isSystemID, [In] [Out] UErrorCode* status);
PSTR ucal_getType([Const] [In] void** cal, [In] [Out] UErrorCode* status);
UEnumeration* ucal_getKeywordValuesForLocale([Const] [In] PSTR key, [Const] [In] PSTR locale, [In] sbyte commonlyUsed, [In] [Out] UErrorCode* status);
UCalendarWeekdayType ucal_getDayOfWeekType([Const] [In] void** cal, [In] UCalendarDaysOfWeek dayOfWeek, [In] [Out] UErrorCode* status);
int ucal_getWeekendTransition([Const] [In] void** cal, [In] UCalendarDaysOfWeek dayOfWeek, [In] [Out] UErrorCode* status);
sbyte ucal_isWeekend([Const] [In] void** cal, [In] double date, [In] [Out] UErrorCode* status);
int ucal_getFieldDifference([In] [Out] void** cal, [In] double target, [In] UCalendarDateFields field, [In] [Out] UErrorCode* status);
sbyte ucal_getTimeZoneTransitionDate([Const] [In] void** cal, [In] UTimeZoneTransitionType type, [In] [Out] double* transition, [In] [Out] UErrorCode* status);
int ucal_getWindowsTimeZoneID([Const] [In] ushort* id, [In] int len, [In] [Out] ushort* winid, [In] int winidCapacity, [In] [Out] UErrorCode* status);
int ucal_getTimeZoneIDForWindowsID([Const] [In] ushort* winid, [In] int len, [Const] [In] PSTR region, [In] [Out] ushort* id, [In] int idCapacity, [In] [Out] UErrorCode* status);
UCollator* ucol_open([Const] [In] PSTR loc, [In] [Out] UErrorCode* status);
UCollator* ucol_openRules([Const] [In] ushort* rules, [In] int rulesLength, [In] UColAttributeValue normalizationMode, [In] UColAttributeValue strength, [In] [Out] UParseError* parseError, [In] [Out] UErrorCode* status);
void ucol_getContractionsAndExpansions([Const] [In] UCollator* coll, [In] [Out] USet* contractions, [In] [Out] USet* expansions, [In] sbyte addPrefixes, [In] [Out] UErrorCode* status);
void ucol_close([In] [Out] UCollator* coll);
UCollationResult ucol_strcoll([Const] [In] UCollator* coll, [Const] [In] ushort* source, [In] int sourceLength, [Const] [In] ushort* target, [In] int targetLength);
UCollationResult ucol_strcollUTF8([Const] [In] UCollator* coll, [Const] [In] PSTR source, [In] int sourceLength, [Const] [In] PSTR target, [In] int targetLength, [In] [Out] UErrorCode* status);
sbyte ucol_greater([Const] [In] UCollator* coll, [Const] [In] ushort* source, [In] int sourceLength, [Const] [In] ushort* target, [In] int targetLength);
sbyte ucol_greaterOrEqual([Const] [In] UCollator* coll, [Const] [In] ushort* source, [In] int sourceLength, [Const] [In] ushort* target, [In] int targetLength);
sbyte ucol_equal([Const] [In] UCollator* coll, [Const] [In] ushort* source, [In] int sourceLength, [Const] [In] ushort* target, [In] int targetLength);
UCollationResult ucol_strcollIter([Const] [In] UCollator* coll, [In] [Out] UCharIterator* sIter, [In] [Out] UCharIterator* tIter, [In] [Out] UErrorCode* status);
UColAttributeValue ucol_getStrength([Const] [In] UCollator* coll);
void ucol_setStrength([In] [Out] UCollator* coll, [In] UColAttributeValue strength);
int ucol_getReorderCodes([Const] [In] UCollator* coll, [In] [Out] int* dest, [In] int destCapacity, [In] [Out] UErrorCode* pErrorCode);
void ucol_setReorderCodes([In] [Out] UCollator* coll, [Const] [In] int* reorderCodes, [In] int reorderCodesLength, [In] [Out] UErrorCode* pErrorCode);
int ucol_getEquivalentReorderCodes([In] int reorderCode, [In] [Out] int* dest, [In] int destCapacity, [In] [Out] UErrorCode* pErrorCode);
int ucol_getDisplayName([Const] [In] PSTR objLoc, [Const] [In] PSTR dispLoc, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status);
PSTR ucol_getAvailable([In] int localeIndex);
int ucol_countAvailable();
UEnumeration* ucol_openAvailableLocales([In] [Out] UErrorCode* status);
UEnumeration* ucol_getKeywords([In] [Out] UErrorCode* status);
UEnumeration* ucol_getKeywordValues([Const] [In] PSTR keyword, [In] [Out] UErrorCode* status);
UEnumeration* ucol_getKeywordValuesForLocale([Const] [In] PSTR key, [Const] [In] PSTR locale, [In] sbyte commonlyUsed, [In] [Out] UErrorCode* status);
int ucol_getFunctionalEquivalent([In] PSTR result, [In] int resultCapacity, [Const] [In] PSTR keyword, [Const] [In] PSTR locale, [In] [Out] sbyte* isAvailable, [In] [Out] UErrorCode* status);
ushort* ucol_getRules([Const] [In] UCollator* coll, [In] [Out] int* length);
int ucol_getSortKey([Const] [In] UCollator* coll, [Const] [In] ushort* source, [In] int sourceLength, [In] [Out] byte* result, [In] int resultLength);
int ucol_nextSortKeyPart([Const] [In] UCollator* coll, [In] [Out] UCharIterator* iter, [In] [Out] uint* state, [In] [Out] byte* dest, [In] int count, [In] [Out] UErrorCode* status);
int ucol_getBound([Const] [In] byte* source, [In] int sourceLength, [In] UColBoundMode boundType, [In] uint noOfLevels, [In] [Out] byte* result, [In] int resultLength, [In] [Out] UErrorCode* status);
void ucol_getVersion([Const] [In] UCollator* coll, [In] [Out] byte* info);
void ucol_getUCAVersion([Const] [In] UCollator* coll, [In] [Out] byte* info);
int ucol_mergeSortkeys([Const] [In] byte* src1, [In] int src1Length, [Const] [In] byte* src2, [In] int src2Length, [In] [Out] byte* dest, [In] int destCapacity);
void ucol_setAttribute([In] [Out] UCollator* coll, [In] UColAttribute attr, [In] UColAttributeValue value, [In] [Out] UErrorCode* status);
UColAttributeValue ucol_getAttribute([Const] [In] UCollator* coll, [In] UColAttribute attr, [In] [Out] UErrorCode* status);
void ucol_setMaxVariable([In] [Out] UCollator* coll, [In] UColReorderCode group, [In] [Out] UErrorCode* pErrorCode);
UColReorderCode ucol_getMaxVariable([Const] [In] UCollator* coll);
uint ucol_getVariableTop([Const] [In] UCollator* coll, [In] [Out] UErrorCode* status);
UCollator* ucol_safeClone([Const] [In] UCollator* coll, [In] [Out] void* stackBuffer, [In] [Out] int* pBufferSize, [In] [Out] UErrorCode* status);
int ucol_getRulesEx([Const] [In] UCollator* coll, [In] UColRuleOption delta, [In] [Out] ushort* buffer, [In] int bufferLen);
PSTR ucol_getLocaleByType([Const] [In] UCollator* coll, [In] ULocDataLocaleType type, [In] [Out] UErrorCode* status);
USet* ucol_getTailoredSet([Const] [In] UCollator* coll, [In] [Out] UErrorCode* status);
int ucol_cloneBinary([Const] [In] UCollator* coll, [In] [Out] byte* buffer, [In] int capacity, [In] [Out] UErrorCode* status);
UCollator* ucol_openBinary([Const] [In] byte* bin, [In] int length, [Const] [In] UCollator* base, [In] [Out] UErrorCode* status);
UCollationElements* ucol_openElements([Const] [In] UCollator* coll, [Const] [In] ushort* text, [In] int textLength, [In] [Out] UErrorCode* status);
int ucol_keyHashCode([Const] [In] byte* key, [In] int length);
void ucol_closeElements([In] [Out] UCollationElements* elems);
void ucol_reset([In] [Out] UCollationElements* elems);
int ucol_next([In] [Out] UCollationElements* elems, [In] [Out] UErrorCode* status);
int ucol_previous([In] [Out] UCollationElements* elems, [In] [Out] UErrorCode* status);
int ucol_getMaxExpansion([Const] [In] UCollationElements* elems, [In] int order);
void ucol_setText([In] [Out] UCollationElements* elems, [Const] [In] ushort* text, [In] int textLength, [In] [Out] UErrorCode* status);
int ucol_getOffset([Const] [In] UCollationElements* elems);
void ucol_setOffset([In] [Out] UCollationElements* elems, [In] int offset, [In] [Out] UErrorCode* status);
int ucol_primaryOrder([In] int order);
int ucol_secondaryOrder([In] int order);
int ucol_tertiaryOrder([In] int order);
UCharsetDetector* ucsdet_open([In] [Out] UErrorCode* status);
void ucsdet_close([In] [Out] UCharsetDetector* ucsd);
void ucsdet_setText([In] [Out] UCharsetDetector* ucsd, [Const] [In] PSTR textIn, [In] int len, [In] [Out] UErrorCode* status);
void ucsdet_setDeclaredEncoding([In] [Out] UCharsetDetector* ucsd, [Const] [In] PSTR encoding, [In] int length, [In] [Out] UErrorCode* status);
UCharsetMatch* ucsdet_detect([In] [Out] UCharsetDetector* ucsd, [In] [Out] UErrorCode* status);
UCharsetMatch** ucsdet_detectAll([In] [Out] UCharsetDetector* ucsd, [In] [Out] int* matchesFound, [In] [Out] UErrorCode* status);
PSTR ucsdet_getName([Const] [In] UCharsetMatch* ucsm, [In] [Out] UErrorCode* status);
int ucsdet_getConfidence([Const] [In] UCharsetMatch* ucsm, [In] [Out] UErrorCode* status);
PSTR ucsdet_getLanguage([Const] [In] UCharsetMatch* ucsm, [In] [Out] UErrorCode* status);
int ucsdet_getUChars([Const] [In] UCharsetMatch* ucsm, [In] [Out] ushort* buf, [In] int cap, [In] [Out] UErrorCode* status);
UEnumeration* ucsdet_getAllDetectableCharsets([Const] [In] UCharsetDetector* ucsd, [In] [Out] UErrorCode* status);
sbyte ucsdet_isInputFilterEnabled([Const] [In] UCharsetDetector* ucsd);
sbyte ucsdet_enableInputFilter([In] [Out] UCharsetDetector* ucsd, [In] sbyte filter);
UFieldPositionIterator* ufieldpositer_open([In] [Out] UErrorCode* status);
void ufieldpositer_close([In] [Out] UFieldPositionIterator* fpositer);
int ufieldpositer_next([In] [Out] UFieldPositionIterator* fpositer, [In] [Out] int* beginIndex, [In] [Out] int* endIndex);
void** ufmt_open([In] [Out] UErrorCode* status);
void ufmt_close([In] [Out] void** fmt);
UFormattableType ufmt_getType([Const] [In] void** fmt, [In] [Out] UErrorCode* status);
sbyte ufmt_isNumeric([Const] [In] void** fmt);
double ufmt_getDate([Const] [In] void** fmt, [In] [Out] UErrorCode* status);
double ufmt_getDouble([In] [Out] void** fmt, [In] [Out] UErrorCode* status);
int ufmt_getLong([In] [Out] void** fmt, [In] [Out] UErrorCode* status);
long ufmt_getInt64([In] [Out] void** fmt, [In] [Out] UErrorCode* status);
void* ufmt_getObject([Const] [In] void** fmt, [In] [Out] UErrorCode* status);
ushort* ufmt_getUChars([In] [Out] void** fmt, [In] [Out] int* len, [In] [Out] UErrorCode* status);
int ufmt_getArrayLength([Const] [In] void** fmt, [In] [Out] UErrorCode* status);
void** ufmt_getArrayItemByIndex([In] [Out] void** fmt, [In] int n, [In] [Out] UErrorCode* status);
PSTR ufmt_getDecNumChars([In] [Out] void** fmt, [In] [Out] int* len, [In] [Out] UErrorCode* status);
UConstrainedFieldPosition* ucfpos_open([In] [Out] UErrorCode* ec);
void ucfpos_reset([In] [Out] UConstrainedFieldPosition* ucfpos, [In] [Out] UErrorCode* ec);
void ucfpos_close([In] [Out] UConstrainedFieldPosition* ucfpos);
void ucfpos_constrainCategory([In] [Out] UConstrainedFieldPosition* ucfpos, [In] int category, [In] [Out] UErrorCode* ec);
void ucfpos_constrainField([In] [Out] UConstrainedFieldPosition* ucfpos, [In] int category, [In] int field, [In] [Out] UErrorCode* ec);
int ucfpos_getCategory([Const] [In] UConstrainedFieldPosition* ucfpos, [In] [Out] UErrorCode* ec);
int ucfpos_getField([Const] [In] UConstrainedFieldPosition* ucfpos, [In] [Out] UErrorCode* ec);
void ucfpos_getIndexes([Const] [In] UConstrainedFieldPosition* ucfpos, [In] [Out] int* pStart, [In] [Out] int* pLimit, [In] [Out] UErrorCode* ec);
long ucfpos_getInt64IterationContext([Const] [In] UConstrainedFieldPosition* ucfpos, [In] [Out] UErrorCode* ec);
void ucfpos_setInt64IterationContext([In] [Out] UConstrainedFieldPosition* ucfpos, [In] long context, [In] [Out] UErrorCode* ec);
sbyte ucfpos_matchesField([Const] [In] UConstrainedFieldPosition* ucfpos, [In] int category, [In] int field, [In] [Out] UErrorCode* ec);
void ucfpos_setState([In] [Out] UConstrainedFieldPosition* ucfpos, [In] int category, [In] int field, [In] int start, [In] int limit, [In] [Out] UErrorCode* ec);
ushort* ufmtval_getString([Const] [In] UFormattedValue* ufmtval, [In] [Out] int* pLength, [In] [Out] UErrorCode* ec);
sbyte ufmtval_nextPosition([Const] [In] UFormattedValue* ufmtval, [In] [Out] UConstrainedFieldPosition* ucfpos, [In] [Out] UErrorCode* ec);
UDateIntervalFormat* udtitvfmt_open([Const] [In] PSTR locale, [Const] [In] ushort* skeleton, [In] int skeletonLength, [Const] [In] ushort* tzID, [In] int tzIDLength, [In] [Out] UErrorCode* status);
void udtitvfmt_close([In] [Out] UDateIntervalFormat* formatter);
UFormattedDateInterval* udtitvfmt_openResult([In] [Out] UErrorCode* ec);
UFormattedValue* udtitvfmt_resultAsValue([Const] [In] UFormattedDateInterval* uresult, [In] [Out] UErrorCode* ec);
void udtitvfmt_closeResult([In] [Out] UFormattedDateInterval* uresult);
int udtitvfmt_format([Const] [In] UDateIntervalFormat* formatter, [In] double fromDate, [In] double toDate, [In] [Out] ushort* result, [In] int resultCapacity, [In] [Out] UFieldPosition* position, [In] [Out] UErrorCode* status);
UGenderInfo* ugender_getInstance([Const] [In] PSTR locale, [In] [Out] UErrorCode* status);
UGender ugender_getListGender([Const] [In] UGenderInfo* genderInfo, [Const] [In] UGender* genders, [In] int size, [In] [Out] UErrorCode* status);
UListFormatter* ulistfmt_open([Const] [In] PSTR locale, [In] [Out] UErrorCode* status);
UListFormatter* ulistfmt_openForType([Const] [In] PSTR locale, [In] UListFormatterType type, [In] UListFormatterWidth width, [In] [Out] UErrorCode* status);
void ulistfmt_close([In] [Out] UListFormatter* listfmt);
UFormattedList* ulistfmt_openResult([In] [Out] UErrorCode* ec);
UFormattedValue* ulistfmt_resultAsValue([Const] [In] UFormattedList* uresult, [In] [Out] UErrorCode* ec);
void ulistfmt_closeResult([In] [Out] UFormattedList* uresult);
int ulistfmt_format([Const] [In] UListFormatter* listfmt, [Const] [In] ushort** strings, [Const] [In] int* stringLengths, [In] int stringCount, [In] [Out] ushort* result, [In] int resultCapacity, [In] [Out] UErrorCode* status);
void ulistfmt_formatStringsToResult([Const] [In] UListFormatter* listfmt, [Const] [In] ushort** strings, [Const] [In] int* stringLengths, [In] int stringCount, [In] [Out] UFormattedList* uresult, [In] [Out] UErrorCode* status);
ULocaleData* ulocdata_open([Const] [In] PSTR localeID, [In] [Out] UErrorCode* status);
void ulocdata_close([In] [Out] ULocaleData* uld);
void ulocdata_setNoSubstitute([In] [Out] ULocaleData* uld, [In] sbyte setting);
sbyte ulocdata_getNoSubstitute([In] [Out] ULocaleData* uld);
USet* ulocdata_getExemplarSet([In] [Out] ULocaleData* uld, [In] [Out] USet* fillIn, [In] uint options, [In] ULocaleDataExemplarSetType extype, [In] [Out] UErrorCode* status);
int ulocdata_getDelimiter([In] [Out] ULocaleData* uld, [In] ULocaleDataDelimiterType type, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status);
UMeasurementSystem ulocdata_getMeasurementSystem([Const] [In] PSTR localeID, [In] [Out] UErrorCode* status);
void ulocdata_getPaperSize([Const] [In] PSTR localeID, [In] [Out] int* height, [In] [Out] int* width, [In] [Out] UErrorCode* status);
void ulocdata_getCLDRVersion([In] [Out] byte* versionArray, [In] [Out] UErrorCode* status);
int ulocdata_getLocaleDisplayPattern([In] [Out] ULocaleData* uld, [In] [Out] ushort* pattern, [In] int patternCapacity, [In] [Out] UErrorCode* status);
int ulocdata_getLocaleSeparator([In] [Out] ULocaleData* uld, [In] [Out] ushort* separator, [In] int separatorCapacity, [In] [Out] UErrorCode* status);
int u_formatMessage([Const] [In] PSTR locale, [Const] [In] ushort* pattern, [In] int patternLength, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status, ...);
int u_vformatMessage([Const] [In] PSTR locale, [Const] [In] ushort* pattern, [In] int patternLength, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] sbyte* ap, [In] [Out] UErrorCode* status);
void u_parseMessage([Const] [In] PSTR locale, [Const] [In] ushort* pattern, [In] int patternLength, [Const] [In] ushort* source, [In] int sourceLength, [In] [Out] UErrorCode* status, ...);
void u_vparseMessage([Const] [In] PSTR locale, [Const] [In] ushort* pattern, [In] int patternLength, [Const] [In] ushort* source, [In] int sourceLength, [In] [Out] sbyte* ap, [In] [Out] UErrorCode* status);
int u_formatMessageWithError([Const] [In] PSTR locale, [Const] [In] ushort* pattern, [In] int patternLength, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UParseError* parseError, [In] [Out] UErrorCode* status, ...);
int u_vformatMessageWithError([Const] [In] PSTR locale, [Const] [In] ushort* pattern, [In] int patternLength, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UParseError* parseError, [In] [Out] sbyte* ap, [In] [Out] UErrorCode* status);
void u_parseMessageWithError([Const] [In] PSTR locale, [Const] [In] ushort* pattern, [In] int patternLength, [Const] [In] ushort* source, [In] int sourceLength, [In] [Out] UParseError* parseError, [In] [Out] UErrorCode* status, ...);
void u_vparseMessageWithError([Const] [In] PSTR locale, [Const] [In] ushort* pattern, [In] int patternLength, [Const] [In] ushort* source, [In] int sourceLength, [In] [Out] sbyte* ap, [In] [Out] UParseError* parseError, [In] [Out] UErrorCode* status);
void** umsg_open([Const] [In] ushort* pattern, [In] int patternLength, [Const] [In] PSTR locale, [In] [Out] UParseError* parseError, [In] [Out] UErrorCode* status);
void umsg_close([In] [Out] void** format);
void* umsg_clone([Const] [In] void** fmt, [In] [Out] UErrorCode* status);
void umsg_setLocale([In] [Out] void** fmt, [Const] [In] PSTR locale);
PSTR umsg_getLocale([Const] [In] void** fmt);
void umsg_applyPattern([In] [Out] void** fmt, [Const] [In] ushort* pattern, [In] int patternLength, [In] [Out] UParseError* parseError, [In] [Out] UErrorCode* status);
int umsg_toPattern([Const] [In] void** fmt, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status);
int umsg_format([Const] [In] void** fmt, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status, ...);
int umsg_vformat([Const] [In] void** fmt, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] sbyte* ap, [In] [Out] UErrorCode* status);
void umsg_parse([Const] [In] void** fmt, [Const] [In] ushort* source, [In] int sourceLength, [In] [Out] int* count, [In] [Out] UErrorCode* status, ...);
void umsg_vparse([Const] [In] void** fmt, [Const] [In] ushort* source, [In] int sourceLength, [In] [Out] int* count, [In] [Out] sbyte* ap, [In] [Out] UErrorCode* status);
int umsg_autoQuoteApostrophe([Const] [In] ushort* pattern, [In] int patternLength, [In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] UErrorCode* ec);
void** unum_open([In] UNumberFormatStyle style, [Const] [In] ushort* pattern, [In] int patternLength, [Const] [In] PSTR locale, [In] [Out] UParseError* parseErr, [In] [Out] UErrorCode* status);
void unum_close([In] [Out] void** fmt);
void** unum_clone([Const] [In] void** fmt, [In] [Out] UErrorCode* status);
int unum_format([Const] [In] void** fmt, [In] int number, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UFieldPosition* pos, [In] [Out] UErrorCode* status);
int unum_formatInt64([Const] [In] void** fmt, [In] long number, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UFieldPosition* pos, [In] [Out] UErrorCode* status);
int unum_formatDouble([Const] [In] void** fmt, [In] double number, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UFieldPosition* pos, [In] [Out] UErrorCode* status);
int unum_formatDoubleForFields([Const] [In] void** format, [In] double number, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UFieldPositionIterator* fpositer, [In] [Out] UErrorCode* status);
int unum_formatDecimal([Const] [In] void** fmt, [Const] [In] PSTR number, [In] int length, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UFieldPosition* pos, [In] [Out] UErrorCode* status);
int unum_formatDoubleCurrency([Const] [In] void** fmt, [In] double number, [In] [Out] ushort* currency, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UFieldPosition* pos, [In] [Out] UErrorCode* status);
int unum_formatUFormattable([Const] [In] void** fmt, [Const] [In] void** number, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UFieldPosition* pos, [In] [Out] UErrorCode* status);
int unum_parse([Const] [In] void** fmt, [Const] [In] ushort* text, [In] int textLength, [In] [Out] int* parsePos, [In] [Out] UErrorCode* status);
long unum_parseInt64([Const] [In] void** fmt, [Const] [In] ushort* text, [In] int textLength, [In] [Out] int* parsePos, [In] [Out] UErrorCode* status);
double unum_parseDouble([Const] [In] void** fmt, [Const] [In] ushort* text, [In] int textLength, [In] [Out] int* parsePos, [In] [Out] UErrorCode* status);
int unum_parseDecimal([Const] [In] void** fmt, [Const] [In] ushort* text, [In] int textLength, [In] [Out] int* parsePos, [In] PSTR outBuf, [In] int outBufLength, [In] [Out] UErrorCode* status);
double unum_parseDoubleCurrency([Const] [In] void** fmt, [Const] [In] ushort* text, [In] int textLength, [In] [Out] int* parsePos, [In] [Out] ushort* currency, [In] [Out] UErrorCode* status);
void** unum_parseToUFormattable([Const] [In] void** fmt, [In] [Out] void** result, [Const] [In] ushort* text, [In] int textLength, [In] [Out] int* parsePos, [In] [Out] UErrorCode* status);
void unum_applyPattern([In] [Out] void** format, [In] sbyte localized, [Const] [In] ushort* pattern, [In] int patternLength, [In] [Out] UParseError* parseError, [In] [Out] UErrorCode* status);
PSTR unum_getAvailable([In] int localeIndex);
int unum_countAvailable();
int unum_getAttribute([Const] [In] void** fmt, [In] UNumberFormatAttribute attr);
void unum_setAttribute([In] [Out] void** fmt, [In] UNumberFormatAttribute attr, [In] int newValue);
double unum_getDoubleAttribute([Const] [In] void** fmt, [In] UNumberFormatAttribute attr);
void unum_setDoubleAttribute([In] [Out] void** fmt, [In] UNumberFormatAttribute attr, [In] double newValue);
int unum_getTextAttribute([Const] [In] void** fmt, [In] UNumberFormatTextAttribute tag, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status);
void unum_setTextAttribute([In] [Out] void** fmt, [In] UNumberFormatTextAttribute tag, [Const] [In] ushort* newValue, [In] int newValueLength, [In] [Out] UErrorCode* status);
int unum_toPattern([Const] [In] void** fmt, [In] sbyte isPatternLocalized, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status);
int unum_getSymbol([Const] [In] void** fmt, [In] UNumberFormatSymbol symbol, [In] [Out] ushort* buffer, [In] int size, [In] [Out] UErrorCode* status);
void unum_setSymbol([In] [Out] void** fmt, [In] UNumberFormatSymbol symbol, [Const] [In] ushort* value, [In] int length, [In] [Out] UErrorCode* status);
PSTR unum_getLocaleByType([Const] [In] void** fmt, [In] ULocDataLocaleType type, [In] [Out] UErrorCode* status);
void unum_setContext([In] [Out] void** fmt, [In] UDisplayContext value, [In] [Out] UErrorCode* status);
UDisplayContext unum_getContext([Const] [In] void** fmt, [In] UDisplayContextType type, [In] [Out] UErrorCode* status);
UCalendarDateFields udat_toCalendarDateField([In] UDateFormatField field);
void** udat_open([In] UDateFormatStyle timeStyle, [In] UDateFormatStyle dateStyle, [Const] [In] PSTR locale, [Const] [In] ushort* tzID, [In] int tzIDLength, [Const] [In] ushort* pattern, [In] int patternLength, [In] [Out] UErrorCode* status);
void udat_close([In] [Out] void** format);
sbyte udat_getBooleanAttribute([Const] [In] void** fmt, [In] UDateFormatBooleanAttribute attr, [In] [Out] UErrorCode* status);
void udat_setBooleanAttribute([In] [Out] void** fmt, [In] UDateFormatBooleanAttribute attr, [In] sbyte newValue, [In] [Out] UErrorCode* status);
void** udat_clone([Const] [In] void** fmt, [In] [Out] UErrorCode* status);
int udat_format([Const] [In] void** format, [In] double dateToFormat, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UFieldPosition* position, [In] [Out] UErrorCode* status);
int udat_formatCalendar([Const] [In] void** format, [In] [Out] void** calendar, [In] [Out] ushort* result, [In] int capacity, [In] [Out] UFieldPosition* position, [In] [Out] UErrorCode* status);
int udat_formatForFields([Const] [In] void** format, [In] double dateToFormat, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UFieldPositionIterator* fpositer, [In] [Out] UErrorCode* status);
int udat_formatCalendarForFields([Const] [In] void** format, [In] [Out] void** calendar, [In] [Out] ushort* result, [In] int capacity, [In] [Out] UFieldPositionIterator* fpositer, [In] [Out] UErrorCode* status);
double udat_parse([Const] [In] void** format, [Const] [In] ushort* text, [In] int textLength, [In] [Out] int* parsePos, [In] [Out] UErrorCode* status);
void udat_parseCalendar([Const] [In] void** format, [In] [Out] void** calendar, [Const] [In] ushort* text, [In] int textLength, [In] [Out] int* parsePos, [In] [Out] UErrorCode* status);
sbyte udat_isLenient([Const] [In] void** fmt);
void udat_setLenient([In] [Out] void** fmt, [In] sbyte isLenient);
void** udat_getCalendar([Const] [In] void** fmt);
void udat_setCalendar([In] [Out] void** fmt, [Const] [In] void** calendarToSet);
void** udat_getNumberFormat([Const] [In] void** fmt);
void** udat_getNumberFormatForField([Const] [In] void** fmt, [In] ushort field);
void udat_adoptNumberFormatForFields([In] [Out] void** fmt, [Const] [In] ushort* fields, [In] [Out] void** numberFormatToSet, [In] [Out] UErrorCode* status);
void udat_setNumberFormat([In] [Out] void** fmt, [Const] [In] void** numberFormatToSet);
void udat_adoptNumberFormat([In] [Out] void** fmt, [In] [Out] void** numberFormatToAdopt);
PSTR udat_getAvailable([In] int localeIndex);
int udat_countAvailable();
double udat_get2DigitYearStart([Const] [In] void** fmt, [In] [Out] UErrorCode* status);
void udat_set2DigitYearStart([In] [Out] void** fmt, [In] double d, [In] [Out] UErrorCode* status);
int udat_toPattern([Const] [In] void** fmt, [In] sbyte localized, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status);
void udat_applyPattern([In] [Out] void** format, [In] sbyte localized, [Const] [In] ushort* pattern, [In] int patternLength);
int udat_getSymbols([Const] [In] void** fmt, [In] UDateFormatSymbolType type, [In] int symbolIndex, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status);
int udat_countSymbols([Const] [In] void** fmt, [In] UDateFormatSymbolType type);
void udat_setSymbols([In] [Out] void** format, [In] UDateFormatSymbolType type, [In] int symbolIndex, [In] [Out] ushort* value, [In] int valueLength, [In] [Out] UErrorCode* status);
PSTR udat_getLocaleByType([Const] [In] void** fmt, [In] ULocDataLocaleType type, [In] [Out] UErrorCode* status);
void udat_setContext([In] [Out] void** fmt, [In] UDisplayContext value, [In] [Out] UErrorCode* status);
UDisplayContext udat_getContext([Const] [In] void** fmt, [In] UDisplayContextType type, [In] [Out] UErrorCode* status);
void** udatpg_open([Const] [In] PSTR locale, [In] [Out] UErrorCode* pErrorCode);
void** udatpg_openEmpty([In] [Out] UErrorCode* pErrorCode);
void udatpg_close([In] [Out] void** dtpg);
void** udatpg_clone([Const] [In] void** dtpg, [In] [Out] UErrorCode* pErrorCode);
int udatpg_getBestPattern([In] [Out] void** dtpg, [Const] [In] ushort* skeleton, [In] int length, [In] [Out] ushort* bestPattern, [In] int capacity, [In] [Out] UErrorCode* pErrorCode);
int udatpg_getBestPatternWithOptions([In] [Out] void** dtpg, [Const] [In] ushort* skeleton, [In] int length, [In] UDateTimePatternMatchOptions options, [In] [Out] ushort* bestPattern, [In] int capacity, [In] [Out] UErrorCode* pErrorCode);
int udatpg_getSkeleton([In] [Out] void** unusedDtpg, [Const] [In] ushort* pattern, [In] int length, [In] [Out] ushort* skeleton, [In] int capacity, [In] [Out] UErrorCode* pErrorCode);
int udatpg_getBaseSkeleton([In] [Out] void** unusedDtpg, [Const] [In] ushort* pattern, [In] int length, [In] [Out] ushort* baseSkeleton, [In] int capacity, [In] [Out] UErrorCode* pErrorCode);
UDateTimePatternConflict udatpg_addPattern([In] [Out] void** dtpg, [Const] [In] ushort* pattern, [In] int patternLength, [In] sbyte override, [In] [Out] ushort* conflictingPattern, [In] int capacity, [In] [Out] int* pLength, [In] [Out] UErrorCode* pErrorCode);
void udatpg_setAppendItemFormat([In] [Out] void** dtpg, [In] UDateTimePatternField field, [Const] [In] ushort* value, [In] int length);
ushort* udatpg_getAppendItemFormat([Const] [In] void** dtpg, [In] UDateTimePatternField field, [In] [Out] int* pLength);
void udatpg_setAppendItemName([In] [Out] void** dtpg, [In] UDateTimePatternField field, [Const] [In] ushort* value, [In] int length);
ushort* udatpg_getAppendItemName([Const] [In] void** dtpg, [In] UDateTimePatternField field, [In] [Out] int* pLength);
int udatpg_getFieldDisplayName([Const] [In] void** dtpg, [In] UDateTimePatternField field, [In] UDateTimePGDisplayWidth width, [In] [Out] ushort* fieldName, [In] int capacity, [In] [Out] UErrorCode* pErrorCode);
void udatpg_setDateTimeFormat([Const] [In] void** dtpg, [Const] [In] ushort* dtFormat, [In] int length);
ushort* udatpg_getDateTimeFormat([Const] [In] void** dtpg, [In] [Out] int* pLength);
void udatpg_setDecimal([In] [Out] void** dtpg, [Const] [In] ushort* decimal, [In] int length);
ushort* udatpg_getDecimal([Const] [In] void** dtpg, [In] [Out] int* pLength);
int udatpg_replaceFieldTypes([In] [Out] void** dtpg, [Const] [In] ushort* pattern, [In] int patternLength, [Const] [In] ushort* skeleton, [In] int skeletonLength, [In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] UErrorCode* pErrorCode);
int udatpg_replaceFieldTypesWithOptions([In] [Out] void** dtpg, [Const] [In] ushort* pattern, [In] int patternLength, [Const] [In] ushort* skeleton, [In] int skeletonLength, [In] UDateTimePatternMatchOptions options, [In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] UErrorCode* pErrorCode);
UEnumeration* udatpg_openSkeletons([Const] [In] void** dtpg, [In] [Out] UErrorCode* pErrorCode);
UEnumeration* udatpg_openBaseSkeletons([Const] [In] void** dtpg, [In] [Out] UErrorCode* pErrorCode);
ushort* udatpg_getPatternForSkeleton([Const] [In] void** dtpg, [Const] [In] ushort* skeleton, [In] int skeletonLength, [In] [Out] int* pLength);
UNumberFormatter* unumf_openForSkeletonAndLocale([Const] [In] ushort* skeleton, [In] int skeletonLen, [Const] [In] PSTR locale, [In] [Out] UErrorCode* ec);
UNumberFormatter* unumf_openForSkeletonAndLocaleWithError([Const] [In] ushort* skeleton, [In] int skeletonLen, [Const] [In] PSTR locale, [In] [Out] UParseError* perror, [In] [Out] UErrorCode* ec);
UFormattedNumber* unumf_openResult([In] [Out] UErrorCode* ec);
void unumf_formatInt([Const] [In] UNumberFormatter* uformatter, [In] long value, [In] [Out] UFormattedNumber* uresult, [In] [Out] UErrorCode* ec);
void unumf_formatDouble([Const] [In] UNumberFormatter* uformatter, [In] double value, [In] [Out] UFormattedNumber* uresult, [In] [Out] UErrorCode* ec);
void unumf_formatDecimal([Const] [In] UNumberFormatter* uformatter, [Const] [In] PSTR value, [In] int valueLen, [In] [Out] UFormattedNumber* uresult, [In] [Out] UErrorCode* ec);
UFormattedValue* unumf_resultAsValue([Const] [In] UFormattedNumber* uresult, [In] [Out] UErrorCode* ec);
int unumf_resultToString([Const] [In] UFormattedNumber* uresult, [In] [Out] ushort* buffer, [In] int bufferCapacity, [In] [Out] UErrorCode* ec);
sbyte unumf_resultNextFieldPosition([Const] [In] UFormattedNumber* uresult, [In] [Out] UFieldPosition* ufpos, [In] [Out] UErrorCode* ec);
void unumf_resultGetAllFieldPositions([Const] [In] UFormattedNumber* uresult, [In] [Out] UFieldPositionIterator* ufpositer, [In] [Out] UErrorCode* ec);
void unumf_close([In] [Out] UNumberFormatter* uformatter);
void unumf_closeResult([In] [Out] UFormattedNumber* uresult);
UNumberingSystem* unumsys_open([Const] [In] PSTR locale, [In] [Out] UErrorCode* status);
UNumberingSystem* unumsys_openByName([Const] [In] PSTR name, [In] [Out] UErrorCode* status);
void unumsys_close([In] [Out] UNumberingSystem* unumsys);
UEnumeration* unumsys_openAvailableNames([In] [Out] UErrorCode* status);
PSTR unumsys_getName([Const] [In] UNumberingSystem* unumsys);
sbyte unumsys_isAlgorithmic([Const] [In] UNumberingSystem* unumsys);
int unumsys_getRadix([Const] [In] UNumberingSystem* unumsys);
int unumsys_getDescription([Const] [In] UNumberingSystem* unumsys, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status);
UPluralRules* uplrules_open([Const] [In] PSTR locale, [In] [Out] UErrorCode* status);
UPluralRules* uplrules_openForType([Const] [In] PSTR locale, [In] UPluralType type, [In] [Out] UErrorCode* status);
void uplrules_close([In] [Out] UPluralRules* uplrules);
int uplrules_select([Const] [In] UPluralRules* uplrules, [In] double number, [In] [Out] ushort* keyword, [In] int capacity, [In] [Out] UErrorCode* status);
int uplrules_selectFormatted([Const] [In] UPluralRules* uplrules, [Const] [In] UFormattedNumber* number, [In] [Out] ushort* keyword, [In] int capacity, [In] [Out] UErrorCode* status);
UEnumeration* uplrules_getKeywords([Const] [In] UPluralRules* uplrules, [In] [Out] UErrorCode* status);
URegularExpression* uregex_open([Const] [In] ushort* pattern, [In] int patternLength, [In] uint flags, [In] [Out] UParseError* pe, [In] [Out] UErrorCode* status);
URegularExpression* uregex_openUText([In] [Out] UText* pattern, [In] uint flags, [In] [Out] UParseError* pe, [In] [Out] UErrorCode* status);
URegularExpression* uregex_openC([Const] [In] PSTR pattern, [In] uint flags, [In] [Out] UParseError* pe, [In] [Out] UErrorCode* status);
void uregex_close([In] [Out] URegularExpression* regexp);
URegularExpression* uregex_clone([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
ushort* uregex_pattern([Const] [In] URegularExpression* regexp, [In] [Out] int* patLength, [In] [Out] UErrorCode* status);
UText* uregex_patternUText([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
int uregex_flags([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
void uregex_setText([In] [Out] URegularExpression* regexp, [Const] [In] ushort* text, [In] int textLength, [In] [Out] UErrorCode* status);
void uregex_setUText([In] [Out] URegularExpression* regexp, [In] [Out] UText* text, [In] [Out] UErrorCode* status);
ushort* uregex_getText([In] [Out] URegularExpression* regexp, [In] [Out] int* textLength, [In] [Out] UErrorCode* status);
UText* uregex_getUText([In] [Out] URegularExpression* regexp, [In] [Out] UText* dest, [In] [Out] UErrorCode* status);
void uregex_refreshUText([In] [Out] URegularExpression* regexp, [In] [Out] UText* text, [In] [Out] UErrorCode* status);
sbyte uregex_matches([In] [Out] URegularExpression* regexp, [In] int startIndex, [In] [Out] UErrorCode* status);
sbyte uregex_matches64([In] [Out] URegularExpression* regexp, [In] long startIndex, [In] [Out] UErrorCode* status);
sbyte uregex_lookingAt([In] [Out] URegularExpression* regexp, [In] int startIndex, [In] [Out] UErrorCode* status);
sbyte uregex_lookingAt64([In] [Out] URegularExpression* regexp, [In] long startIndex, [In] [Out] UErrorCode* status);
sbyte uregex_find([In] [Out] URegularExpression* regexp, [In] int startIndex, [In] [Out] UErrorCode* status);
sbyte uregex_find64([In] [Out] URegularExpression* regexp, [In] long startIndex, [In] [Out] UErrorCode* status);
sbyte uregex_findNext([In] [Out] URegularExpression* regexp, [In] [Out] UErrorCode* status);
int uregex_groupCount([In] [Out] URegularExpression* regexp, [In] [Out] UErrorCode* status);
int uregex_groupNumberFromName([In] [Out] URegularExpression* regexp, [Const] [In] ushort* groupName, [In] int nameLength, [In] [Out] UErrorCode* status);
int uregex_groupNumberFromCName([In] [Out] URegularExpression* regexp, [Const] [In] PSTR groupName, [In] int nameLength, [In] [Out] UErrorCode* status);
int uregex_group([In] [Out] URegularExpression* regexp, [In] int groupNum, [In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] UErrorCode* status);
UText* uregex_groupUText([In] [Out] URegularExpression* regexp, [In] int groupNum, [In] [Out] UText* dest, [In] [Out] long* groupLength, [In] [Out] UErrorCode* status);
int uregex_start([In] [Out] URegularExpression* regexp, [In] int groupNum, [In] [Out] UErrorCode* status);
long uregex_start64([In] [Out] URegularExpression* regexp, [In] int groupNum, [In] [Out] UErrorCode* status);
int uregex_end([In] [Out] URegularExpression* regexp, [In] int groupNum, [In] [Out] UErrorCode* status);
long uregex_end64([In] [Out] URegularExpression* regexp, [In] int groupNum, [In] [Out] UErrorCode* status);
void uregex_reset([In] [Out] URegularExpression* regexp, [In] int index, [In] [Out] UErrorCode* status);
void uregex_reset64([In] [Out] URegularExpression* regexp, [In] long index, [In] [Out] UErrorCode* status);
void uregex_setRegion([In] [Out] URegularExpression* regexp, [In] int regionStart, [In] int regionLimit, [In] [Out] UErrorCode* status);
void uregex_setRegion64([In] [Out] URegularExpression* regexp, [In] long regionStart, [In] long regionLimit, [In] [Out] UErrorCode* status);
void uregex_setRegionAndStart([In] [Out] URegularExpression* regexp, [In] long regionStart, [In] long regionLimit, [In] long startIndex, [In] [Out] UErrorCode* status);
int uregex_regionStart([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
long uregex_regionStart64([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
int uregex_regionEnd([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
long uregex_regionEnd64([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
sbyte uregex_hasTransparentBounds([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
void uregex_useTransparentBounds([In] [Out] URegularExpression* regexp, [In] sbyte b, [In] [Out] UErrorCode* status);
sbyte uregex_hasAnchoringBounds([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
void uregex_useAnchoringBounds([In] [Out] URegularExpression* regexp, [In] sbyte b, [In] [Out] UErrorCode* status);
sbyte uregex_hitEnd([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
sbyte uregex_requireEnd([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
int uregex_replaceAll([In] [Out] URegularExpression* regexp, [Const] [In] ushort* replacementText, [In] int replacementLength, [In] [Out] ushort* destBuf, [In] int destCapacity, [In] [Out] UErrorCode* status);
UText* uregex_replaceAllUText([In] [Out] URegularExpression* regexp, [In] [Out] UText* replacement, [In] [Out] UText* dest, [In] [Out] UErrorCode* status);
int uregex_replaceFirst([In] [Out] URegularExpression* regexp, [Const] [In] ushort* replacementText, [In] int replacementLength, [In] [Out] ushort* destBuf, [In] int destCapacity, [In] [Out] UErrorCode* status);
UText* uregex_replaceFirstUText([In] [Out] URegularExpression* regexp, [In] [Out] UText* replacement, [In] [Out] UText* dest, [In] [Out] UErrorCode* status);
int uregex_appendReplacement([In] [Out] URegularExpression* regexp, [Const] [In] ushort* replacementText, [In] int replacementLength, [In] [Out] ushort** destBuf, [In] [Out] int* destCapacity, [In] [Out] UErrorCode* status);
void uregex_appendReplacementUText([In] [Out] URegularExpression* regexp, [In] [Out] UText* replacementText, [In] [Out] UText* dest, [In] [Out] UErrorCode* status);
int uregex_appendTail([In] [Out] URegularExpression* regexp, [In] [Out] ushort** destBuf, [In] [Out] int* destCapacity, [In] [Out] UErrorCode* status);
UText* uregex_appendTailUText([In] [Out] URegularExpression* regexp, [In] [Out] UText* dest, [In] [Out] UErrorCode* status);
int uregex_split([In] [Out] URegularExpression* regexp, [In] [Out] ushort* destBuf, [In] int destCapacity, [In] [Out] int* requiredCapacity, [In] [Out] ushort** destFields, [In] int destFieldsCapacity, [In] [Out] UErrorCode* status);
int uregex_splitUText([In] [Out] URegularExpression* regexp, [In] [Out] UText** destFields, [In] int destFieldsCapacity, [In] [Out] UErrorCode* status);
void uregex_setTimeLimit([In] [Out] URegularExpression* regexp, [In] int limit, [In] [Out] UErrorCode* status);
int uregex_getTimeLimit([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
void uregex_setStackLimit([In] [Out] URegularExpression* regexp, [In] int limit, [In] [Out] UErrorCode* status);
int uregex_getStackLimit([Const] [In] URegularExpression* regexp, [In] [Out] UErrorCode* status);
void uregex_setMatchCallback([In] [Out] URegularExpression* regexp, [In] URegexMatchCallback callback, [Const] [In] void* context, [In] [Out] UErrorCode* status);
void uregex_getMatchCallback([Const] [In] URegularExpression* regexp, [In] [Out] URegexMatchCallback* callback, [Const] [In] void** context, [In] [Out] UErrorCode* status);
void uregex_setFindProgressCallback([In] [Out] URegularExpression* regexp, [In] URegexFindProgressCallback callback, [Const] [In] void* context, [In] [Out] UErrorCode* status);
void uregex_getFindProgressCallback([Const] [In] URegularExpression* regexp, [In] [Out] URegexFindProgressCallback* callback, [Const] [In] void** context, [In] [Out] UErrorCode* status);
URegion* uregion_getRegionFromCode([Const] [In] PSTR regionCode, [In] [Out] UErrorCode* status);
URegion* uregion_getRegionFromNumericCode([In] int code, [In] [Out] UErrorCode* status);
UEnumeration* uregion_getAvailable([In] URegionType type, [In] [Out] UErrorCode* status);
sbyte uregion_areEqual([Const] [In] URegion* uregion, [Const] [In] URegion* otherRegion);
URegion* uregion_getContainingRegion([Const] [In] URegion* uregion);
URegion* uregion_getContainingRegionOfType([Const] [In] URegion* uregion, [In] URegionType type);
UEnumeration* uregion_getContainedRegions([Const] [In] URegion* uregion, [In] [Out] UErrorCode* status);
UEnumeration* uregion_getContainedRegionsOfType([Const] [In] URegion* uregion, [In] URegionType type, [In] [Out] UErrorCode* status);
sbyte uregion_contains([Const] [In] URegion* uregion, [Const] [In] URegion* otherRegion);
UEnumeration* uregion_getPreferredValues([Const] [In] URegion* uregion, [In] [Out] UErrorCode* status);
PSTR uregion_getRegionCode([Const] [In] URegion* uregion);
int uregion_getNumericCode([Const] [In] URegion* uregion);
URegionType uregion_getType([Const] [In] URegion* uregion);
URelativeDateTimeFormatter* ureldatefmt_open([Const] [In] PSTR locale, [In] [Out] void** nfToAdopt, [In] UDateRelativeDateTimeFormatterStyle width, [In] UDisplayContext capitalizationContext, [In] [Out] UErrorCode* status);
void ureldatefmt_close([In] [Out] URelativeDateTimeFormatter* reldatefmt);
UFormattedRelativeDateTime* ureldatefmt_openResult([In] [Out] UErrorCode* ec);
UFormattedValue* ureldatefmt_resultAsValue([Const] [In] UFormattedRelativeDateTime* ufrdt, [In] [Out] UErrorCode* ec);
void ureldatefmt_closeResult([In] [Out] UFormattedRelativeDateTime* ufrdt);
int ureldatefmt_formatNumeric([Const] [In] URelativeDateTimeFormatter* reldatefmt, [In] double offset, [In] URelativeDateTimeUnit unit, [In] [Out] ushort* result, [In] int resultCapacity, [In] [Out] UErrorCode* status);
void ureldatefmt_formatNumericToResult([Const] [In] URelativeDateTimeFormatter* reldatefmt, [In] double offset, [In] URelativeDateTimeUnit unit, [In] [Out] UFormattedRelativeDateTime* result, [In] [Out] UErrorCode* status);
int ureldatefmt_format([Const] [In] URelativeDateTimeFormatter* reldatefmt, [In] double offset, [In] URelativeDateTimeUnit unit, [In] [Out] ushort* result, [In] int resultCapacity, [In] [Out] UErrorCode* status);
void ureldatefmt_formatToResult([Const] [In] URelativeDateTimeFormatter* reldatefmt, [In] double offset, [In] URelativeDateTimeUnit unit, [In] [Out] UFormattedRelativeDateTime* result, [In] [Out] UErrorCode* status);
int ureldatefmt_combineDateAndTime([Const] [In] URelativeDateTimeFormatter* reldatefmt, [Const] [In] ushort* relativeDateString, [In] int relativeDateStringLen, [Const] [In] ushort* timeString, [In] int timeStringLen, [In] [Out] ushort* result, [In] int resultCapacity, [In] [Out] UErrorCode* status);
UStringSearch* usearch_open([Const] [In] ushort* pattern, [In] int patternlength, [Const] [In] ushort* text, [In] int textlength, [Const] [In] PSTR locale, [In] [Out] UBreakIterator* breakiter, [In] [Out] UErrorCode* status);
UStringSearch* usearch_openFromCollator([Const] [In] ushort* pattern, [In] int patternlength, [Const] [In] ushort* text, [In] int textlength, [Const] [In] UCollator* collator, [In] [Out] UBreakIterator* breakiter, [In] [Out] UErrorCode* status);
void usearch_close([In] [Out] UStringSearch* searchiter);
void usearch_setOffset([In] [Out] UStringSearch* strsrch, [In] int position, [In] [Out] UErrorCode* status);
int usearch_getOffset([Const] [In] UStringSearch* strsrch);
void usearch_setAttribute([In] [Out] UStringSearch* strsrch, [In] USearchAttribute attribute, [In] USearchAttributeValue value, [In] [Out] UErrorCode* status);
USearchAttributeValue usearch_getAttribute([Const] [In] UStringSearch* strsrch, [In] USearchAttribute attribute);
int usearch_getMatchedStart([Const] [In] UStringSearch* strsrch);
int usearch_getMatchedLength([Const] [In] UStringSearch* strsrch);
int usearch_getMatchedText([Const] [In] UStringSearch* strsrch, [In] [Out] ushort* result, [In] int resultCapacity, [In] [Out] UErrorCode* status);
void usearch_setBreakIterator([In] [Out] UStringSearch* strsrch, [In] [Out] UBreakIterator* breakiter, [In] [Out] UErrorCode* status);
UBreakIterator* usearch_getBreakIterator([Const] [In] UStringSearch* strsrch);
void usearch_setText([In] [Out] UStringSearch* strsrch, [Const] [In] ushort* text, [In] int textlength, [In] [Out] UErrorCode* status);
ushort* usearch_getText([Const] [In] UStringSearch* strsrch, [In] [Out] int* length);
UCollator* usearch_getCollator([Const] [In] UStringSearch* strsrch);
void usearch_setCollator([In] [Out] UStringSearch* strsrch, [Const] [In] UCollator* collator, [In] [Out] UErrorCode* status);
void usearch_setPattern([In] [Out] UStringSearch* strsrch, [Const] [In] ushort* pattern, [In] int patternlength, [In] [Out] UErrorCode* status);
ushort* usearch_getPattern([Const] [In] UStringSearch* strsrch, [In] [Out] int* length);
int usearch_first([In] [Out] UStringSearch* strsrch, [In] [Out] UErrorCode* status);
int usearch_following([In] [Out] UStringSearch* strsrch, [In] int position, [In] [Out] UErrorCode* status);
int usearch_last([In] [Out] UStringSearch* strsrch, [In] [Out] UErrorCode* status);
int usearch_preceding([In] [Out] UStringSearch* strsrch, [In] int position, [In] [Out] UErrorCode* status);
int usearch_next([In] [Out] UStringSearch* strsrch, [In] [Out] UErrorCode* status);
int usearch_previous([In] [Out] UStringSearch* strsrch, [In] [Out] UErrorCode* status);
void usearch_reset([In] [Out] UStringSearch* strsrch);
USpoofChecker* uspoof_open([In] [Out] UErrorCode* status);
USpoofChecker* uspoof_openFromSerialized([Const] [In] void* data, [In] int length, [In] [Out] int* pActualLength, [In] [Out] UErrorCode* pErrorCode);
USpoofChecker* uspoof_openFromSource([Const] [In] PSTR confusables, [In] int confusablesLen, [Const] [In] PSTR confusablesWholeScript, [In] int confusablesWholeScriptLen, [In] [Out] int* errType, [In] [Out] UParseError* pe, [In] [Out] UErrorCode* status);
void uspoof_close([In] [Out] USpoofChecker* sc);
USpoofChecker* uspoof_clone([Const] [In] USpoofChecker* sc, [In] [Out] UErrorCode* status);
void uspoof_setChecks([In] [Out] USpoofChecker* sc, [In] int checks, [In] [Out] UErrorCode* status);
int uspoof_getChecks([Const] [In] USpoofChecker* sc, [In] [Out] UErrorCode* status);
void uspoof_setRestrictionLevel([In] [Out] USpoofChecker* sc, [In] URestrictionLevel restrictionLevel);
URestrictionLevel uspoof_getRestrictionLevel([Const] [In] USpoofChecker* sc);
void uspoof_setAllowedLocales([In] [Out] USpoofChecker* sc, [Const] [In] PSTR localesList, [In] [Out] UErrorCode* status);
PSTR uspoof_getAllowedLocales([In] [Out] USpoofChecker* sc, [In] [Out] UErrorCode* status);
void uspoof_setAllowedChars([In] [Out] USpoofChecker* sc, [Const] [In] USet* chars, [In] [Out] UErrorCode* status);
USet* uspoof_getAllowedChars([Const] [In] USpoofChecker* sc, [In] [Out] UErrorCode* status);
int uspoof_check([Const] [In] USpoofChecker* sc, [Const] [In] ushort* id, [In] int length, [In] [Out] int* position, [In] [Out] UErrorCode* status);
int uspoof_checkUTF8([Const] [In] USpoofChecker* sc, [Const] [In] PSTR id, [In] int length, [In] [Out] int* position, [In] [Out] UErrorCode* status);
int uspoof_check2([Const] [In] USpoofChecker* sc, [Const] [In] ushort* id, [In] int length, [In] [Out] USpoofCheckResult* checkResult, [In] [Out] UErrorCode* status);
int uspoof_check2UTF8([Const] [In] USpoofChecker* sc, [Const] [In] PSTR id, [In] int length, [In] [Out] USpoofCheckResult* checkResult, [In] [Out] UErrorCode* status);
USpoofCheckResult* uspoof_openCheckResult([In] [Out] UErrorCode* status);
void uspoof_closeCheckResult([In] [Out] USpoofCheckResult* checkResult);
int uspoof_getCheckResultChecks([Const] [In] USpoofCheckResult* checkResult, [In] [Out] UErrorCode* status);
URestrictionLevel uspoof_getCheckResultRestrictionLevel([Const] [In] USpoofCheckResult* checkResult, [In] [Out] UErrorCode* status);
USet* uspoof_getCheckResultNumerics([Const] [In] USpoofCheckResult* checkResult, [In] [Out] UErrorCode* status);
int uspoof_areConfusable([Const] [In] USpoofChecker* sc, [Const] [In] ushort* id1, [In] int length1, [Const] [In] ushort* id2, [In] int length2, [In] [Out] UErrorCode* status);
int uspoof_areConfusableUTF8([Const] [In] USpoofChecker* sc, [Const] [In] PSTR id1, [In] int length1, [Const] [In] PSTR id2, [In] int length2, [In] [Out] UErrorCode* status);
int uspoof_getSkeleton([Const] [In] USpoofChecker* sc, [In] uint type, [Const] [In] ushort* id, [In] int length, [In] [Out] ushort* dest, [In] int destCapacity, [In] [Out] UErrorCode* status);
int uspoof_getSkeletonUTF8([Const] [In] USpoofChecker* sc, [In] uint type, [Const] [In] PSTR id, [In] int length, [In] PSTR dest, [In] int destCapacity, [In] [Out] UErrorCode* status);
USet* uspoof_getInclusionSet([In] [Out] UErrorCode* status);
USet* uspoof_getRecommendedSet([In] [Out] UErrorCode* status);
int uspoof_serialize([In] [Out] USpoofChecker* sc, [In] [Out] void* data, [In] int capacity, [In] [Out] UErrorCode* status);
long utmscale_getTimeScaleValue([In] UDateTimeScale timeScale, [In] UTimeScaleValue value, [In] [Out] UErrorCode* status);
long utmscale_fromInt64([In] long otherTime, [In] UDateTimeScale timeScale, [In] [Out] UErrorCode* status);
long utmscale_toInt64([In] long universalTime, [In] UDateTimeScale timeScale, [In] [Out] UErrorCode* status);
void** utrans_openU([Const] [In] ushort* id, [In] int idLength, [In] UTransDirection dir, [Const] [In] ushort* rules, [In] int rulesLength, [In] [Out] UParseError* parseError, [In] [Out] UErrorCode* pErrorCode);
void** utrans_openInverse([Const] [In] void** trans, [In] [Out] UErrorCode* status);
void** utrans_clone([Const] [In] void** trans, [In] [Out] UErrorCode* status);
void utrans_close([In] [Out] void** trans);
ushort* utrans_getUnicodeID([Const] [In] void** trans, [In] [Out] int* resultLength);
void utrans_register([In] [Out] void** adoptedTrans, [In] [Out] UErrorCode* status);
void utrans_unregisterID([Const] [In] ushort* id, [In] int idLength);
void utrans_setFilter([In] [Out] void** trans, [Const] [In] ushort* filterPattern, [In] int filterPatternLen, [In] [Out] UErrorCode* status);
int utrans_countAvailableIDs();
UEnumeration* utrans_openIDs([In] [Out] UErrorCode* pErrorCode);
void utrans_trans([Const] [In] void** trans, [In] [Out] void** rep, [Const] [In] UReplaceableCallbacks* repFunc, [In] int start, [In] [Out] int* limit, [In] [Out] UErrorCode* status);
void utrans_transIncremental([Const] [In] void** trans, [In] [Out] void** rep, [Const] [In] UReplaceableCallbacks* repFunc, [In] [Out] UTransPosition* pos, [In] [Out] UErrorCode* status);
void utrans_transUChars([Const] [In] void** trans, [In] [Out] ushort* text, [In] [Out] int* textLength, [In] int textCapacity, [In] int start, [In] [Out] int* limit, [In] [Out] UErrorCode* status);
void utrans_transIncrementalUChars([Const] [In] void** trans, [In] [Out] ushort* text, [In] [Out] int* textLength, [In] int textCapacity, [In] [Out] UTransPosition* pos, [In] [Out] UErrorCode* status);
int utrans_toRules([Const] [In] void** trans, [In] sbyte escapeUnprintable, [In] [Out] ushort* result, [In] int resultLength, [In] [Out] UErrorCode* status);
USet* utrans_getSourceSet([Const] [In] void** trans, [In] sbyte ignoreFilter, [In] [Out] USet* fillIn, [In] [Out] UErrorCode* status);
