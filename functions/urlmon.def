HRESULT CreateUri([Const] [In] PWSTR pwzURI, [In] URI_CREATE_FLAGS dwFlags, [Reserved] [In] nuint dwReserved, [Out] IUri* ppURI);
HRESULT CreateUriWithFragment([Const] [In] PWSTR pwzURI, [Const] [In] [Optional] PWSTR pwzFragment, [In] uint dwFlags, [Reserved] [In] nuint dwReserved, [Out] IUri* ppURI);
HRESULT CreateUriFromMultiByteString([Const] [In] PSTR pszANSIInputUri, [In] uint dwEncodingFlags, [In] uint dwCodePage, [In] uint dwCreateFlags, [Reserved] [In] nuint dwReserved, [Out] IUri* ppUri);
HRESULT CreateIUriBuilder([In] [Optional] IUri pIUri, [In] uint dwFlags, [In] nuint dwReserved, [Out] IUriBuilder* ppIUriBuilder);
HRESULT CreateURLMoniker([In] [Optional] IMoniker pMkCtx, [Const] [In] PWSTR szURL, [Out] IMoniker* ppmk);
HRESULT CreateURLMonikerEx([In] [Optional] IMoniker pMkCtx, [Const] [In] PWSTR szURL, [Out] IMoniker* ppmk, [In] uint dwFlags);
HRESULT GetClassURL([Const] [In] PWSTR szURL, [Out] Guid* pClsID);
HRESULT CreateAsyncBindCtx([In] uint reserved, [In] IBindStatusCallback pBSCb, [In] [Optional] IEnumFORMATETC pEFetc, [Out] IBindCtx* ppBC);
HRESULT CreateURLMonikerEx2([In] [Optional] IMoniker pMkCtx, [In] IUri pUri, [Out] IMoniker* ppmk, [In] uint dwFlags);
HRESULT CreateAsyncBindCtxEx([In] IBindCtx pbc, [In] uint dwOptions, [In] IBindStatusCallback pBSCb, [In] [Optional] IEnumFORMATETC pEnum, [Out] IBindCtx* ppBC, [In] uint reserved);
HRESULT MkParseDisplayNameEx([In] IBindCtx pbc, [Const] [In] PWSTR szDisplayName, [Out] uint* pchEaten, [Out] IMoniker* ppmk);
HRESULT RegisterBindStatusCallback([In] IBindCtx pBC, [In] IBindStatusCallback pBSCb, [Out] IBindStatusCallback* ppBSCBPrev, [In] uint dwReserved);
HRESULT RevokeBindStatusCallback([In] IBindCtx pBC, [In] IBindStatusCallback pBSCb);
HRESULT GetClassFileOrMime([In] [Optional] IBindCtx pBC, [Const] [In] [Optional] PWSTR szFilename, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* pBuffer, [In] uint cbSize, [Const] [In] [Optional] PWSTR szMime, [In] uint dwReserved, [Out] Guid* pclsid);
HRESULT IsValidURL([In] [Optional] IBindCtx pBC, [Const] [In] PWSTR szURL, [In] uint dwReserved);
HRESULT CoGetClassObjectFromURL([Const] [In] Guid* rCLASSID, [Const] [In] PWSTR szCODE, [In] uint dwFileVersionMS, [In] uint dwFileVersionLS, [Const] [In] PWSTR szTYPE, [In] IBindCtx pBindCtx, [In] CLSCTX dwClsContext, [Reserved] [In] [Out] void* pvReserved, [Const] [In] Guid* riid, [Out] void** ppv);
HRESULT IEInstallScope([Out] uint* pdwScope);
HRESULT FaultInIEFeature([In] HWND hWnd, [In] uCLSSPEC* pClassSpec, [In] [Out] [Optional] QUERYCONTEXT* pQuery, [In] uint dwFlags);
HRESULT GetComponentIDFromCLSSPEC([In] uCLSSPEC* pClassspec, [Out] PSTR* ppszComponentID);
HRESULT IsAsyncMoniker([In] IMoniker pmk);
HRESULT RegisterMediaTypes([In] uint ctypes, [Const] [NativeArrayInfo(CountParamIndex = 0)] [In] PSTR* rgszTypes, [NativeArrayInfo(CountParamIndex = 0)] [Out] ushort* rgcfTypes);
HRESULT FindMediaType([Const] [In] PSTR rgszTypes, [Out] ushort* rgcfTypes);
HRESULT CreateFormatEnumerator([In] uint cfmtetc, [NativeArrayInfo(CountParamIndex = 0)] [In] FORMATETC* rgfmtetc, [Out] IEnumFORMATETC* ppenumfmtetc);
HRESULT RegisterFormatEnumerator([In] IBindCtx pBC, [In] IEnumFORMATETC pEFetc, [In] uint reserved);
HRESULT RevokeFormatEnumerator([In] IBindCtx pBC, [In] IEnumFORMATETC pEFetc);
HRESULT RegisterMediaTypeClass([In] IBindCtx pBC, [In] uint ctypes, [Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PSTR* rgszTypes, [NativeArrayInfo(CountParamIndex = 1)] [In] Guid* rgclsID, [In] uint reserved);
HRESULT FindMediaTypeClass([In] IBindCtx pBC, [Const] [In] PSTR szType, [Out] Guid* pclsID, [In] uint reserved);
HRESULT UrlMkSetSessionOption([In] uint dwOption, [MemorySize(BytesParamIndex = 2)] [In] [Optional] void* pBuffer, [In] uint dwBufferLength, [Reserved] [In] uint dwReserved);
HRESULT UrlMkGetSessionOption([In] uint dwOption, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] void* pBuffer, [In] uint dwBufferLength, [Out] uint* pdwBufferLengthOut, [Reserved] [In] uint dwReserved);
HRESULT FindMimeFromData([In] [Optional] IBindCtx pBC, [Const] [In] [Optional] PWSTR pwzUrl, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* pBuffer, [In] uint cbSize, [Const] [In] [Optional] PWSTR pwzMimeProposed, [In] uint dwMimeFlags, [Out] PWSTR* ppwzMimeOut, [Reserved] [In] uint dwReserved);
HRESULT ObtainUserAgentString([In] uint dwOption, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszUAOut, [In] [Out] uint* cbSize);
HRESULT CompareSecurityIds([NativeArrayInfo(CountParamIndex = 1)] [In] byte* pbSecurityId1, [In] uint dwLen1, [NativeArrayInfo(CountParamIndex = 3)] [In] byte* pbSecurityId2, [In] uint dwLen2, [In] uint dwReserved);
HRESULT CompatFlagsFromClsid([In] Guid* pclsid, [Out] uint* pdwCompatFlags, [Out] uint* pdwMiscStatusFlags);
HRESULT SetAccessForIEAppContainer([In] HANDLE hObject, [In] IEObjectType ieObjectType, [In] uint dwAccessMask);
HRESULT HlinkSimpleNavigateToString([Const] [In] [Optional] PWSTR szTarget, [Const] [In] [Optional] PWSTR szLocation, [Const] [In] [Optional] PWSTR szTargetFrameName, [In] IUnknown pUnk, [In] [Optional] IBindCtx pbc, [In] [Optional] IBindStatusCallback param5, [In] uint grfHLNF, [In] uint dwReserved);
HRESULT HlinkSimpleNavigateToMoniker([In] [Optional] IMoniker pmkTarget, [Const] [In] [Optional] PWSTR szLocation, [Const] [In] [Optional] PWSTR szTargetFrameName, [In] [Optional] IUnknown pUnk, [In] [Optional] IBindCtx pbc, [In] [Optional] IBindStatusCallback param5, [In] uint grfHLNF, [In] uint dwReserved);
HRESULT URLOpenStreamA([In] [Optional] IUnknown param0, [Const] [In] PSTR param1, [In] uint param2, [In] [Optional] IBindStatusCallback param3);
HRESULT URLOpenStreamW([In] [Optional] IUnknown param0, [Const] [In] PWSTR param1, [In] uint param2, [In] [Optional] IBindStatusCallback param3);
HRESULT URLOpenPullStreamA([In] [Optional] IUnknown param0, [Const] [In] PSTR param1, [In] uint param2, [In] [Optional] IBindStatusCallback param3);
HRESULT URLOpenPullStreamW([In] [Optional] IUnknown param0, [Const] [In] PWSTR param1, [In] uint param2, [In] [Optional] IBindStatusCallback param3);
HRESULT URLDownloadToFileA([In] [Optional] IUnknown param0, [Const] [In] PSTR param1, [Const] [In] [Optional] PSTR param2, [In] uint param3, [In] [Optional] IBindStatusCallback param4);
HRESULT URLDownloadToFileW([In] [Optional] IUnknown param0, [Const] [In] PWSTR param1, [Const] [In] [Optional] PWSTR param2, [In] uint param3, [In] [Optional] IBindStatusCallback param4);
HRESULT URLDownloadToCacheFileA([In] [Optional] IUnknown param0, [Const] [In] PSTR param1, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR param2, [In] uint cchFileName, [In] uint param4, [In] [Optional] IBindStatusCallback param5);
HRESULT URLDownloadToCacheFileW([In] [Optional] IUnknown param0, [Const] [In] PWSTR param1, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR param2, [In] uint cchFileName, [In] uint param4, [In] [Optional] IBindStatusCallback param5);
HRESULT URLOpenBlockingStreamA([In] [Optional] IUnknown param0, [Const] [In] PSTR param1, [Out] IStream* param2, [In] uint param3, [In] [Optional] IBindStatusCallback param4);
HRESULT URLOpenBlockingStreamW([In] [Optional] IUnknown param0, [Const] [In] PWSTR param1, [Out] IStream* param2, [In] uint param3, [In] [Optional] IBindStatusCallback param4);
HRESULT HlinkGoBack([In] IUnknown pUnk);
HRESULT HlinkGoForward([In] IUnknown pUnk);
HRESULT HlinkNavigateString([In] [Optional] IUnknown pUnk, [Const] [In] [Optional] PWSTR szTarget);
HRESULT HlinkNavigateMoniker([In] [Optional] IUnknown pUnk, [In] [Optional] IMoniker pmkTarget);
HRESULT CoInternetParseUrl([Const] [In] PWSTR pwzUrl, [In] PARSEACTION ParseAction, [In] uint dwFlags, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR pszResult, [In] uint cchResult, [Out] uint* pcchResult, [In] uint dwReserved);
HRESULT CoInternetParseIUri([In] IUri pIUri, [In] PARSEACTION ParseAction, [In] uint dwFlags, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR pwzResult, [In] uint cchResult, [Out] uint* pcchResult, [Reserved] [In] nuint dwReserved);
HRESULT CoInternetCombineUrl([Const] [In] PWSTR pwzBaseUrl, [Const] [In] PWSTR pwzRelativeUrl, [In] uint dwCombineFlags, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR pszResult, [In] uint cchResult, [Out] [Optional] uint* pcchResult, [Reserved] [In] uint dwReserved);
HRESULT CoInternetCombineUrlEx([In] [Optional] IUri pBaseUri, [Const] [In] [Optional] PWSTR pwzRelativeUrl, [In] uint dwCombineFlags, [Out] IUri* ppCombinedUri, [In] [Optional] nuint dwReserved);
HRESULT CoInternetCombineIUri([In] IUri pBaseUri, [In] IUri pRelativeUri, [In] uint dwCombineFlags, [Out] IUri* ppCombinedUri, [In] [Optional] nuint dwReserved);
HRESULT CoInternetCompareUrl([Const] [In] PWSTR pwzUrl1, [Const] [In] PWSTR pwzUrl2, [In] uint dwFlags);
HRESULT CoInternetGetProtocolFlags([Const] [In] PWSTR pwzUrl, [Out] uint* pdwFlags, [In] uint dwReserved);
HRESULT CoInternetQueryInfo([Const] [In] PWSTR pwzUrl, [In] QUERYOPTION QueryOptions, [In] uint dwQueryFlags, [MemorySize(BytesParamIndex = 4)] [Out] void* pvBuffer, [In] uint cbBuffer, [Out] [Optional] uint* pcbBuffer, [In] uint dwReserved);
HRESULT CoInternetGetSession([In] uint dwSessionMode, [Out] IInternetSession* ppIInternetSession, [In] uint dwReserved);
HRESULT CoInternetGetSecurityUrl([Const] [In] PWSTR pwszUrl, [Out] PWSTR* ppwszSecUrl, [In] PSUACTION psuAction, [Reserved] [In] uint dwReserved);
HRESULT CoInternetGetSecurityUrlEx([In] IUri pUri, [Out] IUri* ppSecUri, [In] PSUACTION psuAction, [Reserved] [In] nuint dwReserved);
HRESULT CoInternetSetFeatureEnabled([In] INTERNETFEATURELIST FeatureEntry, [In] uint dwFlags, [In] BOOL fEnable);
HRESULT CoInternetIsFeatureEnabled([In] INTERNETFEATURELIST FeatureEntry, [In] uint dwFlags);
HRESULT CoInternetIsFeatureEnabledForUrl([In] INTERNETFEATURELIST FeatureEntry, [In] uint dwFlags, [Const] [In] [Optional] PWSTR szURL, [In] [Optional] IInternetSecurityManager pSecMgr);
HRESULT CoInternetIsFeatureEnabledForIUri([In] INTERNETFEATURELIST FeatureEntry, [In] uint dwFlags, [In] [Optional] IUri pIUri, [In] [Optional] IInternetSecurityManagerEx2 pSecMgr);
HRESULT CoInternetIsFeatureZoneElevationEnabled([Const] [In] [Optional] PWSTR szFromURL, [Const] [In] PWSTR szToURL, [In] [Optional] IInternetSecurityManager pSecMgr, [In] uint dwFlags);
HRESULT CopyStgMedium([Const] [In] STGMEDIUM* pcstgmedSrc, [Out] STGMEDIUM* pstgmedDest);
HRESULT CopyBindInfo([Const] [In] BINDINFO* pcbiSrc, [Out] BINDINFO* pbiDest);
void ReleaseBindInfo([In] [Out] BINDINFO* pbindinfo);
PWSTR IEGetUserPrivateNamespaceName();
HRESULT CoInternetCreateSecurityManager([In] [Optional] IServiceProvider pSP, [Out] IInternetSecurityManager* ppSM, [In] uint dwReserved);
HRESULT CoInternetCreateZoneManager([In] [Optional] IServiceProvider pSP, [Out] IInternetZoneManager* ppZM, [In] uint dwReserved);
HRESULT GetSoftwareUpdateInfo([Const] [In] PWSTR szDistUnit, [Out] SOFTDISTINFO* psdi);
HRESULT SetSoftwareUpdateAdvertisementState([Const] [In] PWSTR szDistUnit, [In] uint dwAdState, [In] uint dwAdvertisedVersionMS, [In] uint dwAdvertisedVersionLS);
BOOL IsLoggingEnabledA([Const] [In] PSTR pszUrl);
BOOL IsLoggingEnabledW([Const] [In] PWSTR pwszUrl);
BOOL WriteHitLogging([In] HIT_LOGGING_INFO* lpLogginginfo);
