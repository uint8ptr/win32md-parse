JsErrorCode JsCreateContext([In] void* runtime, [In] IDebugApplication64 debugApplication, [Out] void** newContext);
JsErrorCode JsStartDebugging([In] IDebugApplication64 debugApplication);
JsErrorCode JsCreateRuntime([In] JsRuntimeAttributes attributes, [In] JsRuntimeVersion runtimeVersion, [In] [Optional] JsThreadServiceCallback threadService, [Out] void** runtime);
JsErrorCode JsCollectGarbage([In] void* runtime);
JsErrorCode JsDisposeRuntime([In] void* runtime);
JsErrorCode JsGetRuntimeMemoryUsage([In] void* runtime, [Out] nuint* memoryUsage);
JsErrorCode JsGetRuntimeMemoryLimit([In] void* runtime, [Out] nuint* memoryLimit);
JsErrorCode JsSetRuntimeMemoryLimit([In] void* runtime, [In] nuint memoryLimit);
JsErrorCode JsSetRuntimeMemoryAllocationCallback([In] void* runtime, [In] [Optional] void* callbackState, [In] JsMemoryAllocationCallback allocationCallback);
JsErrorCode JsSetRuntimeBeforeCollectCallback([In] void* runtime, [In] [Optional] void* callbackState, [In] JsBeforeCollectCallback beforeCollectCallback);
JsErrorCode JsAddRef([In] void* ref, [Out] [Optional] uint* count);
JsErrorCode JsRelease([In] void* ref, [Out] [Optional] uint* count);
JsErrorCode JsCreateContext([In] void* runtime, [In] IDebugApplication32 debugApplication, [Out] void** newContext);
JsErrorCode JsGetCurrentContext([Out] void** currentContext);
JsErrorCode JsSetCurrentContext([In] void* context);
JsErrorCode JsGetRuntime([In] void* context, [Out] void** runtime);
JsErrorCode JsStartDebugging([In] IDebugApplication32 debugApplication);
JsErrorCode JsIdle([Out] [Optional] uint* nextIdleTick);
JsErrorCode JsParseScript([Const] [In] PWSTR script, [In] nuint sourceContext, [Const] [In] PWSTR sourceUrl, [Out] void** result);
JsErrorCode JsRunScript([Const] [In] PWSTR script, [In] nuint sourceContext, [Const] [In] PWSTR sourceUrl, [Out] void** result);
JsErrorCode JsSerializeScript([Const] [In] PWSTR script, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] byte* buffer, [In] [Out] uint* bufferSize);
JsErrorCode JsParseSerializedScript([Const] [In] PWSTR script, [In] byte* buffer, [In] nuint sourceContext, [Const] [In] PWSTR sourceUrl, [Out] void** result);
JsErrorCode JsRunSerializedScript([Const] [In] PWSTR script, [In] byte* buffer, [In] nuint sourceContext, [Const] [In] PWSTR sourceUrl, [Out] void** result);
JsErrorCode JsGetPropertyIdFromName([Const] [In] PWSTR name, [Out] void** propertyId);
JsErrorCode JsGetPropertyNameFromId([In] void* propertyId, [Const] [Out] ushort** name);
JsErrorCode JsGetUndefinedValue([Out] void** undefinedValue);
JsErrorCode JsGetNullValue([Out] void** nullValue);
JsErrorCode JsGetTrueValue([Out] void** trueValue);
JsErrorCode JsGetFalseValue([Out] void** falseValue);
JsErrorCode JsBoolToBoolean([In] byte value, [Out] void** booleanValue);
JsErrorCode JsBooleanToBool([In] void* value, [Out] bool* boolValue);
JsErrorCode JsConvertValueToBoolean([In] void* value, [Out] void** booleanValue);
JsErrorCode JsGetValueType([In] void* value, [Out] JsValueType* type);
JsErrorCode JsDoubleToNumber([In] double doubleValue, [Out] void** value);
JsErrorCode JsIntToNumber([In] int intValue, [Out] void** value);
JsErrorCode JsNumberToDouble([In] void* value, [Out] double* doubleValue);
JsErrorCode JsConvertValueToNumber([In] void* value, [Out] void** numberValue);
JsErrorCode JsGetStringLength([In] void* stringValue, [Out] int* length);
JsErrorCode JsPointerToString([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PWSTR stringValue, [In] nuint stringLength, [Out] void** value);
JsErrorCode JsStringToPointer([In] void* value, [Const] [Out] ushort** stringValue, [Out] nuint* stringLength);
JsErrorCode JsConvertValueToString([In] void* value, [Out] void** stringValue);
JsErrorCode JsVariantToValue([In] VARIANT* variant, [Out] void** value);
JsErrorCode JsValueToVariant([In] void* object, [Out] VARIANT* variant);
JsErrorCode JsGetGlobalObject([Out] void** globalObject);
JsErrorCode JsCreateObject([Out] void** object);
JsErrorCode JsCreateExternalObject([In] [Optional] void* data, [In] [Optional] JsFinalizeCallback finalizeCallback, [Out] void** object);
JsErrorCode JsConvertValueToObject([In] void* value, [Out] void** object);
JsErrorCode JsGetPrototype([In] void* object, [Out] void** prototypeObject);
JsErrorCode JsSetPrototype([In] void* object, [In] void* prototypeObject);
JsErrorCode JsGetExtensionAllowed([In] void* object, [Out] bool* value);
JsErrorCode JsPreventExtension([In] void* object);
JsErrorCode JsGetProperty([In] void* object, [In] void* propertyId, [Out] void** value);
JsErrorCode JsGetOwnPropertyDescriptor([In] void* object, [In] void* propertyId, [Out] void** propertyDescriptor);
JsErrorCode JsGetOwnPropertyNames([In] void* object, [Out] void** propertyNames);
JsErrorCode JsSetProperty([In] void* object, [In] void* propertyId, [In] void* value, [In] byte useStrictRules);
JsErrorCode JsHasProperty([In] void* object, [In] void* propertyId, [Out] bool* hasProperty);
JsErrorCode JsDeleteProperty([In] void* object, [In] void* propertyId, [In] byte useStrictRules, [Out] void** result);
JsErrorCode JsDefineProperty([In] void* object, [In] void* propertyId, [In] void* propertyDescriptor, [Out] bool* result);
JsErrorCode JsHasIndexedProperty([In] void* object, [In] void* index, [Out] bool* result);
JsErrorCode JsGetIndexedProperty([In] void* object, [In] void* index, [Out] void** result);
JsErrorCode JsSetIndexedProperty([In] void* object, [In] void* index, [In] void* value);
JsErrorCode JsDeleteIndexedProperty([In] void* object, [In] void* index);
JsErrorCode JsEquals([In] void* object1, [In] void* object2, [Out] bool* result);
JsErrorCode JsStrictEquals([In] void* object1, [In] void* object2, [Out] bool* result);
JsErrorCode JsHasExternalData([In] void* object, [Out] bool* value);
JsErrorCode JsGetExternalData([In] void* object, [Out] void** externalData);
JsErrorCode JsSetExternalData([In] void* object, [In] [Optional] void* externalData);
JsErrorCode JsCreateArray([In] uint length, [Out] void** result);
JsErrorCode JsCallFunction([In] void* function, [NativeArrayInfo(CountParamIndex = 2)] [In] void** arguments, [In] ushort argumentCount, [Out] [Optional] void** result);
JsErrorCode JsConstructObject([In] void* function, [NativeArrayInfo(CountParamIndex = 2)] [In] void** arguments, [In] ushort argumentCount, [Out] void** result);
JsErrorCode JsCreateFunction([In] JsNativeFunction nativeFunction, [In] [Optional] void* callbackState, [Out] void** function);
JsErrorCode JsCreateError([In] void* message, [Out] void** error);
JsErrorCode JsCreateRangeError([In] void* message, [Out] void** error);
JsErrorCode JsCreateReferenceError([In] void* message, [Out] void** error);
JsErrorCode JsCreateSyntaxError([In] void* message, [Out] void** error);
JsErrorCode JsCreateTypeError([In] void* message, [Out] void** error);
JsErrorCode JsCreateURIError([In] void* message, [Out] void** error);
JsErrorCode JsHasException([Out] bool* hasException);
JsErrorCode JsGetAndClearException([Out] void** exception);
JsErrorCode JsSetException([In] void* exception);
JsErrorCode JsDisableRuntimeExecution([In] void* runtime);
JsErrorCode JsEnableRuntimeExecution([In] void* runtime);
JsErrorCode JsIsRuntimeExecutionDisabled([In] void* runtime, [Out] bool* isDisabled);
JsErrorCode JsStartProfiling([In] IActiveScriptProfilerCallback callback, [In] PROFILER_EVENT_MASK eventMask, [In] uint context);
JsErrorCode JsStopProfiling([In] HRESULT reason);
JsErrorCode JsEnumerateHeap([Out] IActiveScriptProfilerHeapEnum* enumerator);
JsErrorCode JsIsEnumeratingHeap([Out] bool* isEnumeratingHeap);
