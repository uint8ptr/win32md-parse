HRESULT CryptXmlClose([In] void* hCryptXml);
HRESULT CryptXmlGetTransforms([Const] [Out] CRYPT_XML_TRANSFORM_CHAIN_CONFIG** ppConfig);
HRESULT CryptXmlOpenToEncode([Const] [In] [Optional] CRYPT_XML_TRANSFORM_CHAIN_CONFIG* pConfig, [In] CRYPT_XML_FLAGS dwFlags, [Const] [In] [Optional] PWSTR wszId, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] CRYPT_XML_PROPERTY* rgProperty, [In] uint cProperty, [Const] [In] [Optional] CRYPT_XML_BLOB* pEncoded, [Out] void** phSignature);
HRESULT CryptXmlOpenToDecode([Const] [In] [Optional] CRYPT_XML_TRANSFORM_CHAIN_CONFIG* pConfig, [In] CRYPT_XML_FLAGS dwFlags, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] CRYPT_XML_PROPERTY* rgProperty, [In] uint cProperty, [Const] [In] CRYPT_XML_BLOB* pEncoded, [Out] void** phCryptXml);
HRESULT CryptXmlAddObject([In] void* hSignatureOrObject, [In] uint dwFlags, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] CRYPT_XML_PROPERTY* rgProperty, [In] uint cProperty, [Const] [In] CRYPT_XML_BLOB* pEncoded, [Const] [Out] [Optional] CRYPT_XML_OBJECT** ppObject);
HRESULT CryptXmlCreateReference([In] void* hCryptXml, [In] uint dwFlags, [Const] [In] [Optional] PWSTR wszId, [Const] [In] [Optional] PWSTR wszURI, [Const] [In] [Optional] PWSTR wszType, [Const] [In] CRYPT_XML_ALGORITHM* pDigestMethod, [In] uint cTransform, [Const] [NativeArrayInfo(CountParamIndex = 6)] [In] [Optional] CRYPT_XML_ALGORITHM* rgTransform, [Out] void** phReference);
HRESULT CryptXmlDigestReference([In] void* hReference, [In] uint dwFlags, [In] CRYPT_XML_DATA_PROVIDER* pDataProviderIn);
HRESULT CryptXmlSetHMACSecret([In] void* hSignature, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pbSecret, [In] uint cbSecret);
HRESULT CryptXmlSign([In] void* hSignature, [In] [Optional] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hKey, [In] CERT_KEY_SPEC dwKeySpec, [In] CRYPT_XML_FLAGS dwFlags, [In] CRYPT_XML_KEYINFO_SPEC dwKeyInfoSpec, [Const] [In] [Optional] void* pvKeyInfoSpec, [Const] [In] CRYPT_XML_ALGORITHM* pSignatureMethod, [Const] [In] CRYPT_XML_ALGORITHM* pCanonicalization);
HRESULT CryptXmlImportPublicKey([In] CRYPT_XML_FLAGS dwFlags, [Const] [In] CRYPT_XML_KEY_VALUE* pKeyValue, [Out] BCRYPT_KEY_HANDLE* phKey);
HRESULT CryptXmlVerifySignature([In] void* hSignature, [In] [Optional] BCRYPT_KEY_HANDLE hKey, [In] CRYPT_XML_FLAGS dwFlags);
HRESULT CryptXmlGetDocContext([In] void* hCryptXml, [Const] [Out] CRYPT_XML_DOC_CTXT** ppStruct);
HRESULT CryptXmlGetSignature([In] void* hCryptXml, [Const] [Out] CRYPT_XML_SIGNATURE** ppStruct);
HRESULT CryptXmlGetReference([In] void* hCryptXml, [Const] [Out] CRYPT_XML_REFERENCE** ppStruct);
HRESULT CryptXmlGetStatus([In] void* hCryptXml, [Out] CRYPT_XML_STATUS* pStatus);
HRESULT CryptXmlEncode([In] void* hCryptXml, [In] CRYPT_XML_CHARSET dwCharset, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] CRYPT_XML_PROPERTY* rgProperty, [In] uint cProperty, [In] [Out] void* pvCallbackState, [In] PFN_CRYPT_XML_WRITE_CALLBACK pfnWrite);
HRESULT CryptXmlGetAlgorithmInfo([Const] [In] CRYPT_XML_ALGORITHM* pXmlAlgorithm, [In] CRYPT_XML_FLAGS dwFlags, [Out] CRYPT_XML_ALGORITHM_INFO** ppAlgInfo);
CRYPT_XML_ALGORITHM_INFO* CryptXmlFindAlgorithmInfo([In] uint dwFindByType, [Const] [In] void* pvFindBy, [In] uint dwGroupId, [In] uint dwFlags);
HRESULT CryptXmlEnumAlgorithmInfo([In] uint dwGroupId, [In] uint dwFlags, [In] [Out] [Optional] void* pvArg, [In] PFN_CRYPT_XML_ENUM_ALG_INFO pfnEnumAlgInfo);
