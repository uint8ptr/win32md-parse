HRESULT DRMSetGlobalOptions([In] DRMGLOBALOPTIONS eGlobalOptions, [In] [Out] void* pvdata, [In] uint dwlen);
HRESULT DRMGetClientVersion([In] [Out] DRM_CLIENT_VERSION_INFO* pDRMClientVersionInfo);
HRESULT DRMInitEnvironment([In] DRMSECURITYPROVIDERTYPE eSecurityProviderType, [In] DRMSPECTYPE eSpecification, [In] [Optional] PWSTR wszSecurityProvider, [In] [Optional] PWSTR wszManifestCredentials, [In] PWSTR wszMachineCredentials, [In] [Out] uint* phEnv, [In] [Out] uint* phDefaultLibrary);
HRESULT DRMLoadLibrary([In] uint hEnv, [In] DRMSPECTYPE eSpecification, [In] PWSTR wszLibraryProvider, [In] [Optional] PWSTR wszCredentials, [In] [Out] uint* phLibrary);
HRESULT DRMCreateEnablingPrincipal([In] uint hEnv, [In] uint hLibrary, [In] PWSTR wszObject, [In] [Out] DRMID* pidPrincipal, [In] PWSTR wszCredentials, [In] [Out] uint* phEnablingPrincipal);
HRESULT DRMCloseHandle([In] uint handle);
HRESULT DRMCloseEnvironmentHandle([In] uint hEnv);
HRESULT DRMDuplicateHandle([In] uint hToCopy, [In] [Out] uint* phCopy);
HRESULT DRMDuplicateEnvironmentHandle([In] uint hToCopy, [In] [Out] uint* phCopy);
HRESULT DRMRegisterRevocationList([In] uint hEnv, [In] [Optional] PWSTR wszRevocationList);
HRESULT DRMCheckSecurity([In] uint hEnv, [In] uint cLevel);
HRESULT DRMRegisterContent([In] BOOL fRegister);
HRESULT DRMEncrypt([In] uint hCryptoProvider, [In] uint iPosition, [In] uint cNumInBytes, [In] [Out] byte* pbInData, [In] [Out] uint* pcNumOutBytes, [In] [Out] byte* pbOutData);
HRESULT DRMDecrypt([In] uint hCryptoProvider, [In] uint iPosition, [In] uint cNumInBytes, [In] [Out] byte* pbInData, [In] [Out] uint* pcNumOutBytes, [In] [Out] byte* pbOutData);
HRESULT DRMCreateBoundLicense([In] uint hEnv, [In] [Out] DRMBOUNDLICENSEPARAMS* pParams, [In] PWSTR wszLicenseChain, [In] [Out] uint* phBoundLicense, [In] [Out] uint* phErrorLog);
HRESULT DRMCreateEnablingBitsDecryptor([In] uint hBoundLicense, [In] [Optional] PWSTR wszRight, [In] uint hAuxLib, [In] [Optional] PWSTR wszAuxPlug, [In] [Out] uint* phDecryptor);
HRESULT DRMCreateEnablingBitsEncryptor([In] uint hBoundLicense, [In] [Optional] PWSTR wszRight, [In] uint hAuxLib, [In] [Optional] PWSTR wszAuxPlug, [In] [Out] uint* phEncryptor);
HRESULT DRMAttest([In] uint hEnablingPrincipal, [In] PWSTR wszData, [In] DRMATTESTTYPE eType, [In] [Out] uint* pcAttestedBlob, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR wszAttestedBlob);
HRESULT DRMGetTime([In] uint hEnv, [In] DRMTIMETYPE eTimerIdType, [In] [Out] SYSTEMTIME* poTimeObject);
HRESULT DRMGetInfo([In] uint handle, [In] PWSTR wszAttribute, [In] DRMENCODINGTYPE* peEncoding, [In] [Out] uint* pcBuffer, [In] [Out] byte* pbBuffer);
HRESULT DRMGetEnvironmentInfo([In] uint handle, [In] [Optional] PWSTR wszAttribute, [In] [Out] DRMENCODINGTYPE* peEncoding, [In] [Out] uint* pcBuffer, [In] [Out] byte* pbBuffer);
HRESULT DRMGetProcAddress([In] uint hLibrary, [In] PWSTR wszProcName, [In] [Out] FARPROC* ppfnProcAddress);
HRESULT DRMGetBoundLicenseObjectCount([In] uint hQueryRoot, [In] PWSTR wszSubObjectType, [In] [Out] uint* pcSubObjects);
HRESULT DRMGetBoundLicenseObject([In] uint hQueryRoot, [In] PWSTR wszSubObjectType, [In] uint iWhich, [In] [Out] uint* phSubObject);
HRESULT DRMGetBoundLicenseAttributeCount([In] uint hQueryRoot, [In] PWSTR wszAttribute, [In] [Out] uint* pcAttributes);
HRESULT DRMGetBoundLicenseAttribute([In] uint hQueryRoot, [In] PWSTR wszAttribute, [In] uint iWhich, [In] [Out] DRMENCODINGTYPE* peEncoding, [In] [Out] uint* pcBuffer, [In] [Out] byte* pbBuffer);
HRESULT DRMCreateClientSession([In] DRMCALLBACK pfnCallback, [In] uint uCallbackVersion, [In] PWSTR wszGroupIDProviderType, [In] [Optional] PWSTR wszGroupID, [In] [Out] uint* phClient);
HRESULT DRMIsActivated([In] uint hClient, [In] uint uFlags, [In] [Out] DRM_ACTSERV_INFO* pActServInfo);
HRESULT DRMActivate([In] uint hClient, [In] uint uFlags, [In] uint uLangID, [In] [Out] DRM_ACTSERV_INFO* pActServInfo, [In] [Out] void* pvContext, [In] HWND hParentWnd);
HRESULT DRMGetServiceLocation([In] uint hClient, [In] uint uServiceType, [In] uint uServiceLocation, [In] [Optional] PWSTR wszIssuanceLicense, [In] [Out] uint* puServiceURLLength, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR wszServiceURL);
HRESULT DRMCreateLicenseStorageSession([In] uint hEnv, [In] uint hDefaultLibrary, [In] uint hClient, [In] uint uFlags, [In] PWSTR wszIssuanceLicense, [In] [Out] uint* phLicenseStorage);
HRESULT DRMAddLicense([In] uint hLicenseStorage, [In] uint uFlags, [In] PWSTR wszLicense);
HRESULT DRMAcquireAdvisories([In] uint hLicenseStorage, [In] PWSTR wszLicense, [In] [Optional] PWSTR wszURL, [In] [Out] void* pvContext);
HRESULT DRMEnumerateLicense([In] uint hSession, [In] uint uFlags, [In] uint uIndex, [In] [Out] BOOL* pfSharedFlag, [In] [Out] uint* puCertificateDataLen, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR wszCertificateData);
HRESULT DRMAcquireLicense([In] uint hSession, [In] uint uFlags, [In] [Optional] PWSTR wszGroupIdentityCredential, [In] [Optional] PWSTR wszRequestedRights, [In] [Optional] PWSTR wszCustomData, [In] [Optional] PWSTR wszURL, [In] [Out] void* pvContext);
HRESULT DRMDeleteLicense([In] uint hSession, [In] PWSTR wszLicenseId);
HRESULT DRMCloseSession([In] uint hSession);
HRESULT DRMDuplicateSession([In] uint hSessionIn, [In] [Out] uint* phSessionOut);
HRESULT DRMGetSecurityProvider([In] uint uFlags, [In] [Out] uint* puTypeLen, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR wszType, [In] [Out] uint* puPathLen, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR wszPath);
HRESULT DRMEncode([In] PWSTR wszAlgID, [In] uint uDataLen, [In] [Out] byte* pbDecodedData, [In] [Out] uint* puEncodedStringLen, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR wszEncodedString);
HRESULT DRMDecode([In] PWSTR wszAlgID, [In] PWSTR wszEncodedString, [In] [Out] uint* puDecodedDataLen, [In] [Out] byte* pbDecodedData);
HRESULT DRMConstructCertificateChain([In] uint cCertificates, [NativeArrayInfo(CountParamIndex = 0)] [In] PWSTR* rgwszCertificates, [In] [Out] uint* pcChain, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR wszChain);
HRESULT DRMParseUnboundLicense([In] PWSTR wszCertificate, [In] [Out] uint* phQueryRoot);
HRESULT DRMCloseQueryHandle([In] uint hQuery);
HRESULT DRMGetUnboundLicenseObjectCount([In] uint hQueryRoot, [In] PWSTR wszSubObjectType, [In] [Out] uint* pcSubObjects);
HRESULT DRMGetUnboundLicenseObject([In] uint hQueryRoot, [In] PWSTR wszSubObjectType, [In] uint iIndex, [In] [Out] uint* phSubQuery);
HRESULT DRMGetUnboundLicenseAttributeCount([In] uint hQueryRoot, [In] PWSTR wszAttributeType, [In] [Out] uint* pcAttributes);
HRESULT DRMGetUnboundLicenseAttribute([In] uint hQueryRoot, [In] PWSTR wszAttributeType, [In] uint iWhich, [In] [Out] DRMENCODINGTYPE* peEncoding, [In] [Out] uint* pcBuffer, [In] [Out] byte* pbBuffer);
HRESULT DRMGetCertificateChainCount([In] PWSTR wszChain, [In] [Out] uint* pcCertCount);
HRESULT DRMDeconstructCertificateChain([In] PWSTR wszChain, [In] uint iWhich, [In] [Out] uint* pcCert, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR wszCert);
HRESULT DRMVerify([In] [Optional] PWSTR wszData, [In] [Out] uint* pcAttestedData, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR wszAttestedData, [In] [Out] DRMATTESTTYPE* peType, [In] [Out] uint* pcPrincipal, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR wszPrincipal, [In] [Out] uint* pcManifest, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PWSTR wszManifest);
HRESULT DRMCreateUser([In] [Optional] PWSTR wszUserName, [In] [Optional] PWSTR wszUserId, [In] [Optional] PWSTR wszUserIdType, [In] [Out] uint* phUser);
HRESULT DRMCreateRight([In] PWSTR wszRightName, [In] [Out] SYSTEMTIME* pstFrom, [In] [Out] SYSTEMTIME* pstUntil, [In] uint cExtendedInfo, [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] PWSTR* pwszExtendedInfoName, [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] PWSTR* pwszExtendedInfoValue, [In] [Out] uint* phRight);
HRESULT DRMCreateIssuanceLicense([In] [Out] SYSTEMTIME* pstTimeFrom, [In] [Out] SYSTEMTIME* pstTimeUntil, [In] [Optional] PWSTR wszReferralInfoName, [In] [Optional] PWSTR wszReferralInfoURL, [In] uint hOwner, [In] [Optional] PWSTR wszIssuanceLicense, [In] uint hBoundLicense, [In] [Out] uint* phIssuanceLicense);
HRESULT DRMAddRightWithUser([In] uint hIssuanceLicense, [In] uint hRight, [In] uint hUser);
HRESULT DRMClearAllRights([In] uint hIssuanceLicense);
HRESULT DRMSetMetaData([In] uint hIssuanceLicense, [In] PWSTR wszContentId, [In] PWSTR wszContentIdType, [In] [Optional] PWSTR wszSKUId, [In] [Optional] PWSTR wszSKUIdType, [In] [Optional] PWSTR wszContentType, [In] [Optional] PWSTR wszContentName);
HRESULT DRMSetUsagePolicy([In] uint hIssuanceLicense, [In] DRM_USAGEPOLICY_TYPE eUsagePolicyType, [In] BOOL fDelete, [In] BOOL fExclusion, [In] [Optional] PWSTR wszName, [In] [Optional] PWSTR wszMinVersion, [In] [Optional] PWSTR wszMaxVersion, [In] [Optional] PWSTR wszPublicKey, [In] [Optional] PWSTR wszDigestAlgorithm, [In] [Out] byte* pbDigest, [In] uint cbDigest);
HRESULT DRMSetRevocationPoint([In] uint hIssuanceLicense, [In] BOOL fDelete, [In] PWSTR wszId, [In] PWSTR wszIdType, [In] PWSTR wszURL, [In] [Out] SYSTEMTIME* pstFrequency, [In] [Optional] PWSTR wszName, [In] [Optional] PWSTR wszPublicKey);
HRESULT DRMSetApplicationSpecificData([In] uint hIssuanceLicense, [In] BOOL fDelete, [In] [Optional] PWSTR wszName, [In] [Optional] PWSTR wszValue);
HRESULT DRMSetNameAndDescription([In] uint hIssuanceLicense, [In] BOOL fDelete, [In] uint lcid, [In] [Optional] PWSTR wszName, [In] [Optional] PWSTR wszDescription);
HRESULT DRMSetIntervalTime([In] uint hIssuanceLicense, [In] uint cDays);
HRESULT DRMGetIssuanceLicenseTemplate([In] uint hIssuanceLicense, [In] [Out] uint* puIssuanceLicenseTemplateLength, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR wszIssuanceLicenseTemplate);
HRESULT DRMGetSignedIssuanceLicense([In] uint hEnv, [In] uint hIssuanceLicense, [In] uint uFlags, [In] [Out] byte* pbSymKey, [In] uint cbSymKey, [In] [Optional] PWSTR wszSymKeyType, [In] [Optional] PWSTR wszClientLicensorCertificate, [In] DRMCALLBACK pfnCallback, [In] [Optional] PWSTR wszURL, [In] [Out] void* pvContext);
HRESULT DRMGetSignedIssuanceLicenseEx([In] uint hEnv, [In] uint hIssuanceLicense, [In] uint uFlags, [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* pbSymKey, [In] uint cbSymKey, [In] [Optional] PWSTR wszSymKeyType, [In] [Optional] void* pvReserved, [In] uint hEnablingPrincipal, [In] uint hBoundLicenseCLC, [In] DRMCALLBACK pfnCallback, [In] void* pvContext);
HRESULT DRMClosePubHandle([In] uint hPub);
HRESULT DRMDuplicatePubHandle([In] uint hPubIn, [In] [Out] uint* phPubOut);
HRESULT DRMGetUserInfo([In] uint hUser, [In] [Out] uint* puUserNameLength, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR wszUserName, [In] [Out] uint* puUserIdLength, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR wszUserId, [In] [Out] uint* puUserIdTypeLength, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR wszUserIdType);
HRESULT DRMGetRightInfo([In] uint hRight, [In] [Out] uint* puRightNameLength, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR wszRightName, [In] [Out] SYSTEMTIME* pstFrom, [In] [Out] SYSTEMTIME* pstUntil);
HRESULT DRMGetRightExtendedInfo([In] uint hRight, [In] uint uIndex, [In] [Out] uint* puExtendedInfoNameLength, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR wszExtendedInfoName, [In] [Out] uint* puExtendedInfoValueLength, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR wszExtendedInfoValue);
HRESULT DRMGetUsers([In] uint hIssuanceLicense, [In] uint uIndex, [In] [Out] uint* phUser);
HRESULT DRMGetUserRights([In] uint hIssuanceLicense, [In] uint hUser, [In] uint uIndex, [In] [Out] uint* phRight);
HRESULT DRMGetMetaData([In] uint hIssuanceLicense, [In] [Out] uint* puContentIdLength, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR wszContentId, [In] [Out] uint* puContentIdTypeLength, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR wszContentIdType, [In] [Out] uint* puSKUIdLength, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR wszSKUId, [In] [Out] uint* puSKUIdTypeLength, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] PWSTR wszSKUIdType, [In] [Out] uint* puContentTypeLength, [NativeArrayInfo(CountParamIndex = 9)] [Out] [Optional] PWSTR wszContentType, [In] [Out] uint* puContentNameLength, [NativeArrayInfo(CountParamIndex = 11)] [Out] [Optional] PWSTR wszContentName);
HRESULT DRMGetApplicationSpecificData([In] uint hIssuanceLicense, [In] uint uIndex, [In] [Out] uint* puNameLength, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR wszName, [In] [Out] uint* puValueLength, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR wszValue);
HRESULT DRMGetIssuanceLicenseInfo([In] uint hIssuanceLicense, [In] [Out] SYSTEMTIME* pstTimeFrom, [In] [Out] SYSTEMTIME* pstTimeUntil, [In] uint uFlags, [In] [Out] uint* puDistributionPointNameLength, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR wszDistributionPointName, [In] [Out] uint* puDistributionPointURLLength, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PWSTR wszDistributionPointURL, [In] [Out] uint* phOwner, [In] [Out] BOOL* pfOfficial);
HRESULT DRMGetRevocationPoint([In] uint hIssuanceLicense, [In] [Out] uint* puIdLength, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR wszId, [In] [Out] uint* puIdTypeLength, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR wszIdType, [In] [Out] uint* puURLLength, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR wszRL, [In] [Out] SYSTEMTIME* pstFrequency, [In] [Out] uint* puNameLength, [NativeArrayInfo(CountParamIndex = 8)] [Out] [Optional] PWSTR wszName, [In] [Out] uint* puPublicKeyLength, [NativeArrayInfo(CountParamIndex = 10)] [Out] [Optional] PWSTR wszPublicKey);
HRESULT DRMGetUsagePolicy([In] uint hIssuanceLicense, [In] uint uIndex, [In] [Out] DRM_USAGEPOLICY_TYPE* peUsagePolicyType, [In] [Out] BOOL* pfExclusion, [In] [Out] uint* puNameLength, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR wszName, [In] [Out] uint* puMinVersionLength, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PWSTR wszMinVersion, [In] [Out] uint* puMaxVersionLength, [NativeArrayInfo(CountParamIndex = 8)] [Out] [Optional] PWSTR wszMaxVersion, [In] [Out] uint* puPublicKeyLength, [NativeArrayInfo(CountParamIndex = 10)] [Out] [Optional] PWSTR wszPublicKey, [In] [Out] uint* puDigestAlgorithmLength, [NativeArrayInfo(CountParamIndex = 12)] [Out] [Optional] PWSTR wszDigestAlgorithm, [In] [Out] uint* pcbDigest, [In] [Out] byte* pbDigest);
HRESULT DRMGetNameAndDescription([In] uint hIssuanceLicense, [In] uint uIndex, [In] [Out] uint* pulcid, [In] [Out] uint* puNameLength, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR wszName, [In] [Out] uint* puDescriptionLength, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR wszDescription);
HRESULT DRMGetOwnerLicense([In] uint hIssuanceLicense, [In] [Out] uint* puOwnerLicenseLength, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR wszOwnerLicense);
HRESULT DRMGetIntervalTime([In] uint hIssuanceLicense, [In] [Out] uint* pcDays);
HRESULT DRMRepair();
HRESULT DRMRegisterProtectedWindow([In] uint hEnv, [In] HWND hwnd);
HRESULT DRMIsWindowProtected([In] HWND hwnd, [In] [Out] BOOL* pfProtected);
HRESULT DRMAcquireIssuanceLicenseTemplate([In] uint hClient, [In] uint uFlags, [In] [Out] void* pvReserved, [In] uint cTemplates, [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] PWSTR* pwszTemplateIds, [In] PWSTR wszUrl, [In] [Out] void* pvContext);
