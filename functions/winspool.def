BOOL EnumPrintersA([In] uint Flags, [In] [Optional] PSTR Name, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pPrinterEnum, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL EnumPrintersW([In] uint Flags, [In] [Optional] PWSTR Name, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pPrinterEnum, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
HANDLE GetSpoolFileHandle([In] HANDLE hPrinter);
HANDLE CommitSpoolData([In] HANDLE hPrinter, [In] HANDLE hSpoolFile, [In] uint cbCommit);
BOOL CloseSpoolFileHandle([In] HANDLE hPrinter, [In] HANDLE hSpoolFile);
BOOL OpenPrinterA([In] [Optional] PSTR pPrinterName, [Out] HANDLE* phPrinter, [In] [Optional] PRINTER_DEFAULTSA* pDefault);
BOOL OpenPrinterW([In] [Optional] PWSTR pPrinterName, [Out] HANDLE* phPrinter, [In] [Optional] PRINTER_DEFAULTSW* pDefault);
BOOL ResetPrinterA([In] HANDLE hPrinter, [In] [Optional] PRINTER_DEFAULTSA* pDefault);
BOOL ResetPrinterW([In] HANDLE hPrinter, [In] [Optional] PRINTER_DEFAULTSW* pDefault);
BOOL SetJobA([In] HANDLE hPrinter, [In] uint JobId, [In] uint Level, [Reserved] [In] [Optional] byte* pJob, [In] uint Command);
BOOL SetJobW([In] HANDLE hPrinter, [In] uint JobId, [In] uint Level, [Reserved] [In] [Optional] byte* pJob, [In] uint Command);
BOOL GetJobA([In] HANDLE hPrinter, [In] uint JobId, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pJob, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL GetJobW([In] HANDLE hPrinter, [In] uint JobId, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pJob, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL EnumJobsA([In] HANDLE hPrinter, [In] uint FirstJob, [In] uint NoJobs, [In] uint Level, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pJob, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL EnumJobsW([In] HANDLE hPrinter, [In] uint FirstJob, [In] uint NoJobs, [In] uint Level, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pJob, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
HANDLE AddPrinterA([In] [Optional] PSTR pName, [In] uint Level, [In] byte* pPrinter);
HANDLE AddPrinterW([In] [Optional] PWSTR pName, [In] uint Level, [In] byte* pPrinter);
BOOL DeletePrinter([In] HANDLE hPrinter);
BOOL SetPrinterA([In] HANDLE hPrinter, [In] uint Level, [In] [Optional] byte* pPrinter, [In] uint Command);
BOOL SetPrinterW([In] HANDLE hPrinter, [In] uint Level, [In] [Optional] byte* pPrinter, [In] uint Command);
BOOL GetPrinterA([In] HANDLE hPrinter, [In] uint Level, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pPrinter, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL GetPrinterW([In] HANDLE hPrinter, [In] uint Level, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pPrinter, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL AddPrinterDriverA([In] [Optional] PSTR pName, [In] uint Level, [In] byte* pDriverInfo);
BOOL AddPrinterDriverW([In] [Optional] PWSTR pName, [In] uint Level, [In] byte* pDriverInfo);
BOOL AddPrinterDriverExA([In] [Optional] PSTR pName, [In] uint Level, [In] byte* lpbDriverInfo, [In] uint dwFileCopyFlags);
BOOL AddPrinterDriverExW([In] [Optional] PWSTR pName, [In] uint Level, [In] byte* lpbDriverInfo, [In] uint dwFileCopyFlags);
BOOL EnumPrinterDriversA([In] [Optional] PSTR pName, [In] [Optional] PSTR pEnvironment, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pDriverInfo, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL EnumPrinterDriversW([In] [Optional] PWSTR pName, [In] [Optional] PWSTR pEnvironment, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pDriverInfo, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL GetPrinterDriverA([In] HANDLE hPrinter, [In] [Optional] PSTR pEnvironment, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pDriverInfo, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL GetPrinterDriverW([In] HANDLE hPrinter, [In] [Optional] PWSTR pEnvironment, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pDriverInfo, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL GetPrinterDriverDirectoryA([In] [Optional] PSTR pName, [In] [Optional] PSTR pEnvironment, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pDriverDirectory, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL GetPrinterDriverDirectoryW([In] [Optional] PWSTR pName, [In] [Optional] PWSTR pEnvironment, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pDriverDirectory, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL DeletePrinterDriverA([In] [Optional] PSTR pName, [In] [Optional] PSTR pEnvironment, [In] PSTR pDriverName);
BOOL DeletePrinterDriverW([In] [Optional] PWSTR pName, [In] [Optional] PWSTR pEnvironment, [In] PWSTR pDriverName);
BOOL DeletePrinterDriverExA([In] [Optional] PSTR pName, [In] [Optional] PSTR pEnvironment, [In] PSTR pDriverName, [In] uint dwDeleteFlag, [In] uint dwVersionFlag);
BOOL DeletePrinterDriverExW([In] [Optional] PWSTR pName, [In] [Optional] PWSTR pEnvironment, [In] PWSTR pDriverName, [In] uint dwDeleteFlag, [In] uint dwVersionFlag);
BOOL AddPrintProcessorA([In] [Optional] PSTR pName, [In] [Optional] PSTR pEnvironment, [In] PSTR pPathName, [In] PSTR pPrintProcessorName);
BOOL AddPrintProcessorW([In] [Optional] PWSTR pName, [In] [Optional] PWSTR pEnvironment, [In] PWSTR pPathName, [In] PWSTR pPrintProcessorName);
BOOL EnumPrintProcessorsA([In] [Optional] PSTR pName, [In] [Optional] PSTR pEnvironment, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pPrintProcessorInfo, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL EnumPrintProcessorsW([In] [Optional] PWSTR pName, [In] [Optional] PWSTR pEnvironment, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pPrintProcessorInfo, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL GetPrintProcessorDirectoryA([In] [Optional] PSTR pName, [In] [Optional] PSTR pEnvironment, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pPrintProcessorInfo, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL GetPrintProcessorDirectoryW([In] [Optional] PWSTR pName, [In] [Optional] PWSTR pEnvironment, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pPrintProcessorInfo, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL EnumPrintProcessorDatatypesA([In] [Optional] PSTR pName, [In] PSTR pPrintProcessorName, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pDatatypes, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL EnumPrintProcessorDatatypesW([In] [Optional] PWSTR pName, [In] PWSTR pPrintProcessorName, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pDatatypes, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL DeletePrintProcessorA([In] [Optional] PSTR pName, [In] [Optional] PSTR pEnvironment, [In] PSTR pPrintProcessorName);
BOOL DeletePrintProcessorW([In] [Optional] PWSTR pName, [In] [Optional] PWSTR pEnvironment, [In] PWSTR pPrintProcessorName);
uint StartDocPrinterA([In] HANDLE hPrinter, [In] uint Level, [In] DOC_INFO_1A* pDocInfo);
uint StartDocPrinterW([In] HANDLE hPrinter, [In] uint Level, [In] DOC_INFO_1W* pDocInfo);
BOOL StartPagePrinter([In] HANDLE hPrinter);
BOOL WritePrinter([In] HANDLE hPrinter, [MemorySize(BytesParamIndex = 2)] [In] void* pBuf, [In] uint cbBuf, [Out] uint* pcWritten);
BOOL FlushPrinter([In] HANDLE hPrinter, [MemorySize(BytesParamIndex = 2)] [In] [Optional] void* pBuf, [In] uint cbBuf, [Out] uint* pcWritten, [In] uint cSleep);
BOOL EndPagePrinter([In] HANDLE hPrinter);
BOOL AbortPrinter([In] HANDLE hPrinter);
BOOL ReadPrinter([In] HANDLE hPrinter, [MemorySize(BytesParamIndex = 2)] [Out] void* pBuf, [In] uint cbBuf, [Out] uint* pNoBytesRead);
BOOL EndDocPrinter([In] HANDLE hPrinter);
BOOL AddJobA([In] HANDLE hPrinter, [In] uint Level, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pData, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL AddJobW([In] HANDLE hPrinter, [In] uint Level, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pData, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL ScheduleJob([In] HANDLE hPrinter, [In] uint JobId);
BOOL PrinterProperties([In] HWND hWnd, [In] HANDLE hPrinter);
int DocumentPropertiesA([In] [Optional] HWND hWnd, [In] HANDLE hPrinter, [In] PSTR pDeviceName, [Out] [Optional] DEVMODEA* pDevModeOutput, [In] [Optional] DEVMODEA* pDevModeInput, [In] uint fMode);
int DocumentPropertiesW([In] [Optional] HWND hWnd, [In] HANDLE hPrinter, [In] PWSTR pDeviceName, [Out] [Optional] DEVMODEW* pDevModeOutput, [In] [Optional] DEVMODEW* pDevModeInput, [In] uint fMode);
int AdvancedDocumentPropertiesA([In] HWND hWnd, [In] HANDLE hPrinter, [In] PSTR pDeviceName, [In] [Out] [Optional] DEVMODEA* pDevModeOutput, [In] [Optional] DEVMODEA* pDevModeInput);
int AdvancedDocumentPropertiesW([In] HWND hWnd, [In] HANDLE hPrinter, [In] PWSTR pDeviceName, [In] [Out] [Optional] DEVMODEW* pDevModeOutput, [In] [Optional] DEVMODEW* pDevModeInput);
int ExtDeviceMode([In] [Optional] HWND hWnd, [In] [Optional] HANDLE hInst, [In] [Out] [Optional] DEVMODEA* pDevModeOutput, [In] [Optional] PSTR pDeviceName, [In] [Optional] PSTR pPort, [In] [Optional] DEVMODEA* pDevModeInput, [In] [Optional] PSTR pProfile, [In] uint fMode);
uint GetPrinterDataA([In] HANDLE hPrinter, [In] PSTR pValueName, [Out] [Optional] uint* pType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pData, [In] uint nSize, [Out] uint* pcbNeeded);
uint GetPrinterDataW([In] HANDLE hPrinter, [In] PWSTR pValueName, [Out] [Optional] uint* pType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pData, [In] uint nSize, [Out] uint* pcbNeeded);
uint GetPrinterDataExA([In] HANDLE hPrinter, [Const] [In] PSTR pKeyName, [Const] [In] PSTR pValueName, [Out] [Optional] uint* pType, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pData, [In] uint nSize, [Out] uint* pcbNeeded);
uint GetPrinterDataExW([In] HANDLE hPrinter, [Const] [In] PWSTR pKeyName, [Const] [In] PWSTR pValueName, [Out] [Optional] uint* pType, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pData, [In] uint nSize, [Out] uint* pcbNeeded);
uint EnumPrinterDataA([In] HANDLE hPrinter, [In] uint dwIndex, [MemorySize(BytesParamIndex = 3)] [Out] PSTR pValueName, [In] uint cbValueName, [Out] uint* pcbValueName, [Out] [Optional] uint* pType, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] byte* pData, [In] uint cbData, [Out] [Optional] uint* pcbData);
uint EnumPrinterDataW([In] HANDLE hPrinter, [In] uint dwIndex, [MemorySize(BytesParamIndex = 3)] [Out] PWSTR pValueName, [In] uint cbValueName, [Out] uint* pcbValueName, [Out] [Optional] uint* pType, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] byte* pData, [In] uint cbData, [Out] [Optional] uint* pcbData);
uint EnumPrinterDataExA([In] HANDLE hPrinter, [Const] [In] PSTR pKeyName, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pEnumValues, [In] uint cbEnumValues, [Out] uint* pcbEnumValues, [Out] uint* pnEnumValues);
uint EnumPrinterDataExW([In] HANDLE hPrinter, [Const] [In] PWSTR pKeyName, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pEnumValues, [In] uint cbEnumValues, [Out] uint* pcbEnumValues, [Out] uint* pnEnumValues);
uint EnumPrinterKeyA([In] HANDLE hPrinter, [Const] [In] PSTR pKeyName, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] PSTR pSubkey, [In] uint cbSubkey, [Out] uint* pcbSubkey);
uint EnumPrinterKeyW([In] HANDLE hPrinter, [Const] [In] PWSTR pKeyName, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] PWSTR pSubkey, [In] uint cbSubkey, [Out] uint* pcbSubkey);
uint SetPrinterDataA([In] HANDLE hPrinter, [In] PSTR pValueName, [In] uint Type, [MemorySize(BytesParamIndex = 4)] [In] byte* pData, [In] uint cbData);
uint SetPrinterDataW([In] HANDLE hPrinter, [In] PWSTR pValueName, [In] uint Type, [MemorySize(BytesParamIndex = 4)] [In] byte* pData, [In] uint cbData);
uint SetPrinterDataExA([In] HANDLE hPrinter, [Const] [In] PSTR pKeyName, [Const] [In] PSTR pValueName, [In] uint Type, [MemorySize(BytesParamIndex = 5)] [In] byte* pData, [In] uint cbData);
uint SetPrinterDataExW([In] HANDLE hPrinter, [Const] [In] PWSTR pKeyName, [Const] [In] PWSTR pValueName, [In] uint Type, [MemorySize(BytesParamIndex = 5)] [In] byte* pData, [In] uint cbData);
uint DeletePrinterDataA([In] HANDLE hPrinter, [In] PSTR pValueName);
uint DeletePrinterDataW([In] HANDLE hPrinter, [In] PWSTR pValueName);
uint DeletePrinterDataExA([In] HANDLE hPrinter, [Const] [In] PSTR pKeyName, [Const] [In] PSTR pValueName);
uint DeletePrinterDataExW([In] HANDLE hPrinter, [Const] [In] PWSTR pKeyName, [Const] [In] PWSTR pValueName);
uint DeletePrinterKeyA([In] HANDLE hPrinter, [Const] [In] PSTR pKeyName);
uint DeletePrinterKeyW([In] HANDLE hPrinter, [Const] [In] PWSTR pKeyName);
uint WaitForPrinterChange([In] HANDLE hPrinter, [In] uint Flags);
HANDLE FindFirstPrinterChangeNotification([In] HANDLE hPrinter, [In] uint fdwFilter, [In] uint fdwOptions, [In] [Optional] void* pPrinterNotifyOptions);
BOOL FindNextPrinterChangeNotification([In] HANDLE hChange, [Out] [Optional] uint* pdwChange, [In] [Optional] void* pvReserved, [Out] [Optional] void** ppPrinterNotifyInfo);
BOOL FreePrinterNotifyInfo([In] PRINTER_NOTIFY_INFO* pPrinterNotifyInfo);
BOOL FindClosePrinterChangeNotification([In] HANDLE hChange);
uint PrinterMessageBoxA([In] HANDLE hPrinter, [In] uint Error, [In] HWND hWnd, [In] PSTR pText, [In] PSTR pCaption, [In] uint dwType);
uint PrinterMessageBoxW([In] HANDLE hPrinter, [In] uint Error, [In] HWND hWnd, [In] PWSTR pText, [In] PWSTR pCaption, [In] uint dwType);
BOOL ClosePrinter([In] HANDLE hPrinter);
BOOL AddFormA([In] HANDLE hPrinter, [In] uint Level, [In] byte* pForm);
BOOL AddFormW([In] HANDLE hPrinter, [In] uint Level, [In] byte* pForm);
BOOL DeleteFormA([In] HANDLE hPrinter, [In] PSTR pFormName);
BOOL DeleteFormW([In] HANDLE hPrinter, [In] PWSTR pFormName);
BOOL GetFormA([In] HANDLE hPrinter, [In] PSTR pFormName, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pForm, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL GetFormW([In] HANDLE hPrinter, [In] PWSTR pFormName, [In] uint Level, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pForm, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL SetFormA([In] HANDLE hPrinter, [In] PSTR pFormName, [In] uint Level, [In] byte* pForm);
BOOL SetFormW([In] HANDLE hPrinter, [In] PWSTR pFormName, [In] uint Level, [In] byte* pForm);
BOOL EnumFormsA([In] HANDLE hPrinter, [In] uint Level, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pForm, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL EnumFormsW([In] HANDLE hPrinter, [In] uint Level, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pForm, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL EnumMonitorsA([In] [Optional] PSTR pName, [In] uint Level, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pMonitor, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL EnumMonitorsW([In] [Optional] PWSTR pName, [In] uint Level, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pMonitor, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL AddMonitorA([In] [Optional] PSTR pName, [In] uint Level, [In] [Optional] byte* pMonitors);
BOOL AddMonitorW([In] [Optional] PWSTR pName, [In] uint Level, [In] [Optional] byte* pMonitors);
BOOL DeleteMonitorA([In] [Optional] PSTR pName, [In] [Optional] PSTR pEnvironment, [In] PSTR pMonitorName);
BOOL DeleteMonitorW([In] [Optional] PWSTR pName, [In] [Optional] PWSTR pEnvironment, [In] PWSTR pMonitorName);
BOOL EnumPortsA([In] [Optional] PSTR pName, [In] uint Level, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pPort, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL EnumPortsW([In] [Optional] PWSTR pName, [In] uint Level, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pPort, [In] uint cbBuf, [Out] uint* pcbNeeded, [Out] uint* pcReturned);
BOOL AddPortA([In] [Optional] PSTR pName, [In] HWND hWnd, [In] PSTR pMonitorName);
BOOL AddPortW([In] [Optional] PWSTR pName, [In] HWND hWnd, [In] PWSTR pMonitorName);
BOOL ConfigurePortA([In] [Optional] PSTR pName, [In] HWND hWnd, [In] PSTR pPortName);
BOOL ConfigurePortW([In] [Optional] PWSTR pName, [In] HWND hWnd, [In] PWSTR pPortName);
BOOL DeletePortA([In] [Optional] PSTR pName, [In] HWND hWnd, [In] PSTR pPortName);
BOOL DeletePortW([In] [Optional] PWSTR pName, [In] HWND hWnd, [In] PWSTR pPortName);
BOOL XcvDataW([In] HANDLE hXcv, [Const] [In] PWSTR pszDataName, [MemorySize(BytesParamIndex = 3)] [In] [Optional] byte* pInputData, [In] uint cbInputData, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pOutputData, [In] uint cbOutputData, [Out] uint* pcbOutputNeeded, [Out] [Optional] uint* pdwStatus);
BOOL GetDefaultPrinterA([NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PSTR pszBuffer, [In] [Out] uint* pcchBuffer);
BOOL GetDefaultPrinterW([NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR pszBuffer, [In] [Out] uint* pcchBuffer);
BOOL SetDefaultPrinterA([Const] [In] [Optional] PSTR pszPrinter);
BOOL SetDefaultPrinterW([Const] [In] [Optional] PWSTR pszPrinter);
BOOL SetPortA([In] [Optional] PSTR pName, [In] PSTR pPortName, [In] uint dwLevel, [In] byte* pPortInfo);
BOOL SetPortW([In] [Optional] PWSTR pName, [In] PWSTR pPortName, [In] uint dwLevel, [In] byte* pPortInfo);
BOOL AddPrinterConnectionA([In] PSTR pName);
BOOL AddPrinterConnectionW([In] PWSTR pName);
BOOL DeletePrinterConnectionA([In] PSTR pName);
BOOL DeletePrinterConnectionW([In] PWSTR pName);
HANDLE ConnectToPrinterDlg([In] HWND hwnd, [In] uint Flags);
BOOL AddPrintProvidorA([In] [Optional] PSTR pName, [In] uint Level, [In] byte* pProvidorInfo);
BOOL AddPrintProvidorW([In] [Optional] PWSTR pName, [In] uint Level, [In] byte* pProvidorInfo);
BOOL DeletePrintProvidorA([In] [Optional] PSTR pName, [In] [Optional] PSTR pEnvironment, [In] PSTR pPrintProvidorName);
BOOL DeletePrintProvidorW([In] [Optional] PWSTR pName, [In] [Optional] PWSTR pEnvironment, [In] PWSTR pPrintProvidorName);
BOOL IsValidDevmodeA([In] [Optional] DEVMODEA* pDevmode, [In] nuint DevmodeSize);
BOOL IsValidDevmodeW([In] [Optional] DEVMODEW* pDevmode, [In] nuint DevmodeSize);
BOOL OpenPrinter2A([Const] [In] [Optional] PSTR pPrinterName, [Out] HANDLE* phPrinter, [In] [Optional] PRINTER_DEFAULTSA* pDefault, [In] [Optional] PRINTER_OPTIONSA* pOptions);
BOOL OpenPrinter2W([Const] [In] [Optional] PWSTR pPrinterName, [Out] HANDLE* phPrinter, [In] [Optional] PRINTER_DEFAULTSW* pDefault, [In] [Optional] PRINTER_OPTIONSW* pOptions);
BOOL AddPrinterConnection2A([In] [Optional] HWND hWnd, [Const] [In] PSTR pszName, [In] uint dwLevel, [In] void* pConnectionInfo);
BOOL AddPrinterConnection2W([In] [Optional] HWND hWnd, [Const] [In] PWSTR pszName, [In] uint dwLevel, [In] void* pConnectionInfo);
HRESULT InstallPrinterDriverFromPackageA([Const] [In] [Optional] PSTR pszServer, [Const] [In] [Optional] PSTR pszInfPath, [Const] [In] PSTR pszDriverName, [Const] [In] [Optional] PSTR pszEnvironment, [In] uint dwFlags);
HRESULT InstallPrinterDriverFromPackageW([Const] [In] [Optional] PWSTR pszServer, [Const] [In] [Optional] PWSTR pszInfPath, [Const] [In] PWSTR pszDriverName, [Const] [In] [Optional] PWSTR pszEnvironment, [In] uint dwFlags);
HRESULT UploadPrinterDriverPackageA([Const] [In] [Optional] PSTR pszServer, [Const] [In] PSTR pszInfPath, [Const] [In] [Optional] PSTR pszEnvironment, [In] uint dwFlags, [In] HWND hwnd, [NativeArrayInfo(CountParamIndex = 6)] [Out] PSTR pszDestInfPath, [In] [Out] uint* pcchDestInfPath);
HRESULT UploadPrinterDriverPackageW([Const] [In] [Optional] PWSTR pszServer, [Const] [In] PWSTR pszInfPath, [Const] [In] [Optional] PWSTR pszEnvironment, [In] uint dwFlags, [In] HWND hwnd, [NativeArrayInfo(CountParamIndex = 6)] [Out] PWSTR pszDestInfPath, [In] [Out] uint* pcchDestInfPath);
HRESULT GetCorePrinterDriversA([Const] [In] [Optional] PSTR pszServer, [Const] [In] [Optional] PSTR pszEnvironment, [Const] [In] PSTR pszzCoreDriverDependencies, [In] uint cCorePrinterDrivers, [NativeArrayInfo(CountParamIndex = 3)] [Out] CORE_PRINTER_DRIVERA* pCorePrinterDrivers);
HRESULT GetCorePrinterDriversW([Const] [In] [Optional] PWSTR pszServer, [Const] [In] [Optional] PWSTR pszEnvironment, [Const] [In] PWSTR pszzCoreDriverDependencies, [In] uint cCorePrinterDrivers, [NativeArrayInfo(CountParamIndex = 3)] [Out] CORE_PRINTER_DRIVERW* pCorePrinterDrivers);
HRESULT CorePrinterDriverInstalledA([Const] [In] [Optional] PSTR pszServer, [Const] [In] [Optional] PSTR pszEnvironment, [In] Guid CoreDriverGUID, [In] FILETIME ftDriverDate, [In] ulong dwlDriverVersion, [Out] BOOL* pbDriverInstalled);
HRESULT CorePrinterDriverInstalledW([Const] [In] [Optional] PWSTR pszServer, [Const] [In] [Optional] PWSTR pszEnvironment, [In] Guid CoreDriverGUID, [In] FILETIME ftDriverDate, [In] ulong dwlDriverVersion, [Out] BOOL* pbDriverInstalled);
HRESULT GetPrinterDriverPackagePathA([Const] [In] [Optional] PSTR pszServer, [Const] [In] [Optional] PSTR pszEnvironment, [Const] [In] [Optional] PSTR pszLanguage, [Const] [In] PSTR pszPackageID, [NativeArrayInfo(CountParamIndex = 5)] [In] [Out] [Optional] PSTR pszDriverPackageCab, [In] [Optional] uint cchDriverPackageCab, [Out] uint* pcchRequiredSize);
HRESULT GetPrinterDriverPackagePathW([Const] [In] [Optional] PWSTR pszServer, [Const] [In] [Optional] PWSTR pszEnvironment, [Const] [In] [Optional] PWSTR pszLanguage, [Const] [In] PWSTR pszPackageID, [NativeArrayInfo(CountParamIndex = 5)] [In] [Out] [Optional] PWSTR pszDriverPackageCab, [In] [Optional] uint cchDriverPackageCab, [Out] uint* pcchRequiredSize);
HRESULT DeletePrinterDriverPackageA([Const] [In] [Optional] PSTR pszServer, [Const] [In] PSTR pszInfPath, [Const] [In] [Optional] PSTR pszEnvironment);
HRESULT DeletePrinterDriverPackageW([Const] [In] [Optional] PWSTR pszServer, [Const] [In] PWSTR pszInfPath, [Const] [In] [Optional] PWSTR pszEnvironment);
HRESULT ReportJobProcessingProgress([In] HANDLE printerHandle, [In] uint jobId, [In] EPrintXPSJobOperation jobOperation, [In] EPrintXPSJobProgress jobProgress);
BOOL GetPrinterDriver2A([In] [Optional] HWND hWnd, [In] HANDLE hPrinter, [In] [Optional] PSTR pEnvironment, [In] uint Level, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pDriverInfo, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL GetPrinterDriver2W([In] [Optional] HWND hWnd, [In] HANDLE hPrinter, [In] [Optional] PWSTR pEnvironment, [In] uint Level, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pDriverInfo, [In] uint cbBuf, [Out] uint* pcbNeeded);
BOOL GetPrintExecutionData([Out] PRINT_EXECUTION_DATA* pData);
uint GetJobNamedPropertyValue([In] HANDLE hPrinter, [In] uint JobId, [Const] [In] PWSTR pszName, [Out] PrintPropertyValue* pValue);
void FreePrintPropertyValue([In] [Out] PrintPropertyValue* pValue);
void FreePrintNamedPropertyArray([In] uint cProperties, [NativeArrayInfo(CountParamIndex = 0)] [In] [Out] [Optional] PrintNamedProperty** ppProperties);
uint SetJobNamedProperty([In] HANDLE hPrinter, [In] uint JobId, [Const] [In] PrintNamedProperty* pProperty);
uint DeleteJobNamedProperty([In] HANDLE hPrinter, [In] uint JobId, [Const] [In] PWSTR pszName);
uint EnumJobNamedProperties([In] HANDLE hPrinter, [In] uint JobId, [Out] uint* pcProperties, [Out] PrintNamedProperty** ppProperties);
HRESULT GetPrintOutputInfo([In] HWND hWnd, [Const] [In] PWSTR pszPrinter, [Out] HANDLE* phFile, [Out] PWSTR* ppszOutputFile);
BOOL DevQueryPrintEx([In] [Out] DEVQUERYPRINT_INFO* pDQPInfo);
HRESULT RegisterForPrintAsyncNotifications([Const] [In] [Optional] PWSTR pszName, [In] Guid* pNotificationType, [In] PrintAsyncNotifyUserFilter eUserFilter, [In] PrintAsyncNotifyConversationStyle eConversationStyle, [In] IPrintAsyncNotifyCallback pCallback, [Out] HANDLE* phNotify);
HRESULT UnRegisterForPrintAsyncNotifications([In] HANDLE param0);
HRESULT CreatePrintAsyncNotifyChannel([Const] [In] [Optional] PWSTR pszName, [In] Guid* pNotificationType, [In] PrintAsyncNotifyUserFilter eUserFilter, [In] PrintAsyncNotifyConversationStyle eConversationStyle, [In] [Optional] IPrintAsyncNotifyCallback pCallback, [Out] IPrintAsyncNotifyChannel* ppIAsynchNotification);
HANDLE CreatePrinterIC([In] HANDLE hPrinter, [In] [Optional] DEVMODEW* pDevMode);
BOOL PlayGdiScriptOnPrinterIC([In] HANDLE hPrinterIC, [MemorySize(BytesParamIndex = 2)] [In] byte* pIn, [In] uint cIn, [MemorySize(BytesParamIndex = 4)] [Out] byte* pOut, [In] uint cOut, [In] uint ul);
BOOL DeletePrinterIC([In] HANDLE hPrinterIC);
BOOL DevQueryPrint([In] HANDLE hPrinter, [In] DEVMODEA* pDevMode, [Out] uint* pResID);
uint RouterFreeBidiResponseContainer([In] BIDI_RESPONSE_CONTAINER* pData);
int DeviceCapabilitiesA([Const] [In] PSTR pDevice, [Const] [In] [Optional] PSTR pPort, [In] DEVICE_CAPABILITIES fwCapability, [Out] [Optional] PSTR pOutput, [Const] [In] [Optional] DEVMODEA* pDevMode);
int DeviceCapabilitiesW([Const] [In] PWSTR pDevice, [Const] [In] [Optional] PWSTR pPort, [In] DEVICE_CAPABILITIES fwCapability, [Out] [Optional] PWSTR pOutput, [Const] [In] [Optional] DEVMODEW* pDevMode);
