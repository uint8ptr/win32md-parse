uint wglSwapMultipleBuffers([In] uint param0, [Const] [In] WGLSWAP* param1);
BOOL wglCopyContext([In] HGLRC param0, [In] HGLRC param1, [In] uint param2);
HGLRC wglCreateContext([In] HDC param0);
HGLRC wglCreateLayerContext([In] HDC param0, [In] int param1);
BOOL wglDeleteContext([In] HGLRC param0);
HGLRC wglGetCurrentContext();
HDC wglGetCurrentDC();
PROC wglGetProcAddress([Const] [In] PSTR param0);
BOOL wglMakeCurrent([In] HDC param0, [In] HGLRC param1);
BOOL wglShareLists([In] HGLRC param0, [In] HGLRC param1);
BOOL wglUseFontBitmapsA([In] HDC param0, [In] uint param1, [In] uint param2, [In] uint param3);
BOOL wglUseFontBitmapsW([In] HDC param0, [In] uint param1, [In] uint param2, [In] uint param3);
BOOL wglUseFontOutlinesA([In] HDC param0, [In] uint param1, [In] uint param2, [In] uint param3, [In] float param4, [In] float param5, [In] int param6, [In] [Out] GLYPHMETRICSFLOAT* param7);
BOOL wglUseFontOutlinesW([In] HDC param0, [In] uint param1, [In] uint param2, [In] uint param3, [In] float param4, [In] float param5, [In] int param6, [In] [Out] GLYPHMETRICSFLOAT* param7);
BOOL wglDescribeLayerPlane([In] HDC param0, [In] int param1, [In] int param2, [In] uint param3, [In] [Out] LAYERPLANEDESCRIPTOR* param4);
int wglSetLayerPaletteEntries([In] HDC param0, [In] int param1, [In] int param2, [In] int param3, [Const] [In] COLORREF* param4);
int wglGetLayerPaletteEntries([In] HDC param0, [In] int param1, [In] int param2, [In] int param3, [In] [Out] COLORREF* param4);
BOOL wglRealizeLayerPalette([In] HDC param0, [In] int param1, [In] BOOL param2);
BOOL wglSwapLayerBuffers([In] HDC param0, [In] uint param1);
void glAccum([In] uint op, [In] float value);
void glAlphaFunc([In] uint func, [In] float ref);
byte glAreTexturesResident([In] int n, [Const] [In] uint* textures, [In] [Out] byte* residences);
void glArrayElement([In] int i);
void glBegin([In] uint mode);
void glBindTexture([In] uint target, [In] uint texture);
void glBitmap([In] int width, [In] int height, [In] float xorig, [In] float yorig, [In] float xmove, [In] float ymove, [Const] [In] byte* bitmap);
void glBlendFunc([In] uint sfactor, [In] uint dfactor);
void glCallList([In] uint list);
void glCallLists([In] int n, [In] uint type, [Const] [In] void* lists);
void glClear([In] uint mask);
void glClearAccum([In] float red, [In] float green, [In] float blue, [In] float alpha);
void glClearColor([In] float red, [In] float green, [In] float blue, [In] float alpha);
void glClearDepth([In] double depth);
void glClearIndex([In] float c);
void glClearStencil([In] int s);
void glClipPlane([In] uint plane, [Const] [In] double* equation);
void glColor3b([In] sbyte red, [In] sbyte green, [In] sbyte blue);
void glColor3bv([Const] [In] sbyte* v);
void glColor3d([In] double red, [In] double green, [In] double blue);
void glColor3dv([Const] [In] double* v);
void glColor3f([In] float red, [In] float green, [In] float blue);
void glColor3fv([Const] [In] float* v);
void glColor3i([In] int red, [In] int green, [In] int blue);
void glColor3iv([Const] [In] int* v);
void glColor3s([In] short red, [In] short green, [In] short blue);
void glColor3sv([Const] [In] short* v);
void glColor3ub([In] byte red, [In] byte green, [In] byte blue);
void glColor3ubv([Const] [In] byte* v);
void glColor3ui([In] uint red, [In] uint green, [In] uint blue);
void glColor3uiv([Const] [In] uint* v);
void glColor3us([In] ushort red, [In] ushort green, [In] ushort blue);
void glColor3usv([Const] [In] ushort* v);
void glColor4b([In] sbyte red, [In] sbyte green, [In] sbyte blue, [In] sbyte alpha);
void glColor4bv([Const] [In] sbyte* v);
void glColor4d([In] double red, [In] double green, [In] double blue, [In] double alpha);
void glColor4dv([Const] [In] double* v);
void glColor4f([In] float red, [In] float green, [In] float blue, [In] float alpha);
void glColor4fv([Const] [In] float* v);
void glColor4i([In] int red, [In] int green, [In] int blue, [In] int alpha);
void glColor4iv([Const] [In] int* v);
void glColor4s([In] short red, [In] short green, [In] short blue, [In] short alpha);
void glColor4sv([Const] [In] short* v);
void glColor4ub([In] byte red, [In] byte green, [In] byte blue, [In] byte alpha);
void glColor4ubv([Const] [In] byte* v);
void glColor4ui([In] uint red, [In] uint green, [In] uint blue, [In] uint alpha);
void glColor4uiv([Const] [In] uint* v);
void glColor4us([In] ushort red, [In] ushort green, [In] ushort blue, [In] ushort alpha);
void glColor4usv([Const] [In] ushort* v);
void glColorMask([In] byte red, [In] byte green, [In] byte blue, [In] byte alpha);
void glColorMaterial([In] uint face, [In] uint mode);
void glColorPointer([In] int size, [In] uint type, [In] int stride, [Const] [In] void* pointer);
void glCopyPixels([In] int x, [In] int y, [In] int width, [In] int height, [In] uint type);
void glCopyTexImage1D([In] uint target, [In] int level, [In] uint internalFormat, [In] int x, [In] int y, [In] int width, [In] int border);
void glCopyTexImage2D([In] uint target, [In] int level, [In] uint internalFormat, [In] int x, [In] int y, [In] int width, [In] int height, [In] int border);
void glCopyTexSubImage1D([In] uint target, [In] int level, [In] int xoffset, [In] int x, [In] int y, [In] int width);
void glCopyTexSubImage2D([In] uint target, [In] int level, [In] int xoffset, [In] int yoffset, [In] int x, [In] int y, [In] int width, [In] int height);
void glCullFace([In] uint mode);
void glDeleteLists([In] uint list, [In] int range);
void glDeleteTextures([In] int n, [Const] [In] uint* textures);
void glDepthFunc([In] uint func);
void glDepthMask([In] byte flag);
void glDepthRange([In] double zNear, [In] double zFar);
void glDisable([In] uint cap);
void glDisableClientState([In] uint array);
void glDrawArrays([In] uint mode, [In] int first, [In] int count);
void glDrawBuffer([In] uint mode);
void glDrawElements([In] uint mode, [In] int count, [In] uint type, [Const] [In] void* indices);
void glDrawPixels([In] int width, [In] int height, [In] uint format, [In] uint type, [Const] [In] void* pixels);
void glEdgeFlag([In] byte flag);
void glEdgeFlagPointer([In] int stride, [Const] [In] void* pointer);
void glEdgeFlagv([Const] [In] byte* flag);
void glEnable([In] uint cap);
void glEnableClientState([In] uint array);
void glEnd();
void glEndList();
void glEvalCoord1d([In] double u);
void glEvalCoord1dv([Const] [In] double* u);
void glEvalCoord1f([In] float u);
void glEvalCoord1fv([Const] [In] float* u);
void glEvalCoord2d([In] double u, [In] double v);
void glEvalCoord2dv([Const] [In] double* u);
void glEvalCoord2f([In] float u, [In] float v);
void glEvalCoord2fv([Const] [In] float* u);
void glEvalMesh1([In] uint mode, [In] int i1, [In] int i2);
void glEvalMesh2([In] uint mode, [In] int i1, [In] int i2, [In] int j1, [In] int j2);
void glEvalPoint1([In] int i);
void glEvalPoint2([In] int i, [In] int j);
void glFeedbackBuffer([In] int size, [In] uint type, [In] [Out] float* buffer);
void glFinish();
void glFlush();
void glFogf([In] uint pname, [In] float param1);
void glFogfv([In] uint pname, [Const] [In] float* params);
void glFogi([In] uint pname, [In] int param1);
void glFogiv([In] uint pname, [Const] [In] int* params);
void glFrontFace([In] uint mode);
void glFrustum([In] double left, [In] double right, [In] double bottom, [In] double top, [In] double zNear, [In] double zFar);
uint glGenLists([In] int range);
void glGenTextures([In] int n, [In] [Out] uint* textures);
void glGetBooleanv([In] uint pname, [In] [Out] byte* params);
void glGetClipPlane([In] uint plane, [In] [Out] double* equation);
void glGetDoublev([In] uint pname, [In] [Out] double* params);
uint glGetError();
void glGetFloatv([In] uint pname, [In] [Out] float* params);
void glGetIntegerv([In] uint pname, [In] [Out] int* params);
void glGetLightfv([In] uint light, [In] uint pname, [In] [Out] float* params);
void glGetLightiv([In] uint light, [In] uint pname, [In] [Out] int* params);
void glGetMapdv([In] uint target, [In] uint query, [In] [Out] double* v);
void glGetMapfv([In] uint target, [In] uint query, [In] [Out] float* v);
void glGetMapiv([In] uint target, [In] uint query, [In] [Out] int* v);
void glGetMaterialfv([In] uint face, [In] uint pname, [In] [Out] float* params);
void glGetMaterialiv([In] uint face, [In] uint pname, [In] [Out] int* params);
void glGetPixelMapfv([In] uint map, [In] [Out] float* values);
void glGetPixelMapuiv([In] uint map, [In] [Out] uint* values);
void glGetPixelMapusv([In] uint map, [In] [Out] ushort* values);
void glGetPointerv([In] uint pname, [In] [Out] void** params);
void glGetPolygonStipple([In] [Out] byte* mask);
byte* glGetString([In] uint name);
void glGetTexEnvfv([In] uint target, [In] uint pname, [In] [Out] float* params);
void glGetTexEnviv([In] uint target, [In] uint pname, [In] [Out] int* params);
void glGetTexGendv([In] uint coord, [In] uint pname, [In] [Out] double* params);
void glGetTexGenfv([In] uint coord, [In] uint pname, [In] [Out] float* params);
void glGetTexGeniv([In] uint coord, [In] uint pname, [In] [Out] int* params);
void glGetTexImage([In] uint target, [In] int level, [In] uint format, [In] uint type, [In] [Out] void* pixels);
void glGetTexLevelParameterfv([In] uint target, [In] int level, [In] uint pname, [In] [Out] float* params);
void glGetTexLevelParameteriv([In] uint target, [In] int level, [In] uint pname, [In] [Out] int* params);
void glGetTexParameterfv([In] uint target, [In] uint pname, [In] [Out] float* params);
void glGetTexParameteriv([In] uint target, [In] uint pname, [In] [Out] int* params);
void glHint([In] uint target, [In] uint mode);
void glIndexMask([In] uint mask);
void glIndexPointer([In] uint type, [In] int stride, [Const] [In] void* pointer);
void glIndexd([In] double c);
void glIndexdv([Const] [In] double* c);
void glIndexf([In] float c);
void glIndexfv([Const] [In] float* c);
void glIndexi([In] int c);
void glIndexiv([Const] [In] int* c);
void glIndexs([In] short c);
void glIndexsv([Const] [In] short* c);
void glIndexub([In] byte c);
void glIndexubv([Const] [In] byte* c);
void glInitNames();
void glInterleavedArrays([In] uint format, [In] int stride, [Const] [In] void* pointer);
byte glIsEnabled([In] uint cap);
byte glIsList([In] uint list);
byte glIsTexture([In] uint texture);
void glLightModelf([In] uint pname, [In] float param1);
void glLightModelfv([In] uint pname, [Const] [In] float* params);
void glLightModeli([In] uint pname, [In] int param1);
void glLightModeliv([In] uint pname, [Const] [In] int* params);
void glLightf([In] uint light, [In] uint pname, [In] float param2);
void glLightfv([In] uint light, [In] uint pname, [Const] [In] float* params);
void glLighti([In] uint light, [In] uint pname, [In] int param2);
void glLightiv([In] uint light, [In] uint pname, [Const] [In] int* params);
void glLineStipple([In] int factor, [In] ushort pattern);
void glLineWidth([In] float width);
void glListBase([In] uint base);
void glLoadIdentity();
void glLoadMatrixd([Const] [In] double* m);
void glLoadMatrixf([Const] [In] float* m);
void glLoadName([In] uint name);
void glLogicOp([In] uint opcode);
void glMap1d([In] uint target, [In] double u1, [In] double u2, [In] int stride, [In] int order, [Const] [In] double* points);
void glMap1f([In] uint target, [In] float u1, [In] float u2, [In] int stride, [In] int order, [Const] [In] float* points);
void glMap2d([In] uint target, [In] double u1, [In] double u2, [In] int ustride, [In] int uorder, [In] double v1, [In] double v2, [In] int vstride, [In] int vorder, [Const] [In] double* points);
void glMap2f([In] uint target, [In] float u1, [In] float u2, [In] int ustride, [In] int uorder, [In] float v1, [In] float v2, [In] int vstride, [In] int vorder, [Const] [In] float* points);
void glMapGrid1d([In] int un, [In] double u1, [In] double u2);
void glMapGrid1f([In] int un, [In] float u1, [In] float u2);
void glMapGrid2d([In] int un, [In] double u1, [In] double u2, [In] int vn, [In] double v1, [In] double v2);
void glMapGrid2f([In] int un, [In] float u1, [In] float u2, [In] int vn, [In] float v1, [In] float v2);
void glMaterialf([In] uint face, [In] uint pname, [In] float param2);
void glMaterialfv([In] uint face, [In] uint pname, [Const] [In] float* params);
void glMateriali([In] uint face, [In] uint pname, [In] int param2);
void glMaterialiv([In] uint face, [In] uint pname, [Const] [In] int* params);
void glMatrixMode([In] uint mode);
void glMultMatrixd([Const] [In] double* m);
void glMultMatrixf([Const] [In] float* m);
void glNewList([In] uint list, [In] uint mode);
void glNormal3b([In] sbyte nx, [In] sbyte ny, [In] sbyte nz);
void glNormal3bv([Const] [In] sbyte* v);
void glNormal3d([In] double nx, [In] double ny, [In] double nz);
void glNormal3dv([Const] [In] double* v);
void glNormal3f([In] float nx, [In] float ny, [In] float nz);
void glNormal3fv([Const] [In] float* v);
void glNormal3i([In] int nx, [In] int ny, [In] int nz);
void glNormal3iv([Const] [In] int* v);
void glNormal3s([In] short nx, [In] short ny, [In] short nz);
void glNormal3sv([Const] [In] short* v);
void glNormalPointer([In] uint type, [In] int stride, [Const] [In] void* pointer);
void glOrtho([In] double left, [In] double right, [In] double bottom, [In] double top, [In] double zNear, [In] double zFar);
void glPassThrough([In] float token);
void glPixelMapfv([In] uint map, [In] int mapsize, [Const] [In] float* values);
void glPixelMapuiv([In] uint map, [In] int mapsize, [Const] [In] uint* values);
void glPixelMapusv([In] uint map, [In] int mapsize, [Const] [In] ushort* values);
void glPixelStoref([In] uint pname, [In] float param1);
void glPixelStorei([In] uint pname, [In] int param1);
void glPixelTransferf([In] uint pname, [In] float param1);
void glPixelTransferi([In] uint pname, [In] int param1);
void glPixelZoom([In] float xfactor, [In] float yfactor);
void glPointSize([In] float size);
void glPolygonMode([In] uint face, [In] uint mode);
void glPolygonOffset([In] float factor, [In] float units);
void glPolygonStipple([Const] [In] byte* mask);
void glPopAttrib();
void glPopClientAttrib();
void glPopMatrix();
void glPopName();
void glPrioritizeTextures([In] int n, [Const] [In] uint* textures, [Const] [In] float* priorities);
void glPushAttrib([In] uint mask);
void glPushClientAttrib([In] uint mask);
void glPushMatrix();
void glPushName([In] uint name);
void glRasterPos2d([In] double x, [In] double y);
void glRasterPos2dv([Const] [In] double* v);
void glRasterPos2f([In] float x, [In] float y);
void glRasterPos2fv([Const] [In] float* v);
void glRasterPos2i([In] int x, [In] int y);
void glRasterPos2iv([Const] [In] int* v);
void glRasterPos2s([In] short x, [In] short y);
void glRasterPos2sv([Const] [In] short* v);
void glRasterPos3d([In] double x, [In] double y, [In] double z);
void glRasterPos3dv([Const] [In] double* v);
void glRasterPos3f([In] float x, [In] float y, [In] float z);
void glRasterPos3fv([Const] [In] float* v);
void glRasterPos3i([In] int x, [In] int y, [In] int z);
void glRasterPos3iv([Const] [In] int* v);
void glRasterPos3s([In] short x, [In] short y, [In] short z);
void glRasterPos3sv([Const] [In] short* v);
void glRasterPos4d([In] double x, [In] double y, [In] double z, [In] double w);
void glRasterPos4dv([Const] [In] double* v);
void glRasterPos4f([In] float x, [In] float y, [In] float z, [In] float w);
void glRasterPos4fv([Const] [In] float* v);
void glRasterPos4i([In] int x, [In] int y, [In] int z, [In] int w);
void glRasterPos4iv([Const] [In] int* v);
void glRasterPos4s([In] short x, [In] short y, [In] short z, [In] short w);
void glRasterPos4sv([Const] [In] short* v);
void glReadBuffer([In] uint mode);
void glReadPixels([In] int x, [In] int y, [In] int width, [In] int height, [In] uint format, [In] uint type, [In] [Out] void* pixels);
void glRectd([In] double x1, [In] double y1, [In] double x2, [In] double y2);
void glRectdv([Const] [In] double* v1, [Const] [In] double* v2);
void glRectf([In] float x1, [In] float y1, [In] float x2, [In] float y2);
void glRectfv([Const] [In] float* v1, [Const] [In] float* v2);
void glRecti([In] int x1, [In] int y1, [In] int x2, [In] int y2);
void glRectiv([Const] [In] int* v1, [Const] [In] int* v2);
void glRects([In] short x1, [In] short y1, [In] short x2, [In] short y2);
void glRectsv([Const] [In] short* v1, [Const] [In] short* v2);
int glRenderMode([In] uint mode);
void glRotated([In] double angle, [In] double x, [In] double y, [In] double z);
void glRotatef([In] float angle, [In] float x, [In] float y, [In] float z);
void glScaled([In] double x, [In] double y, [In] double z);
void glScalef([In] float x, [In] float y, [In] float z);
void glScissor([In] int x, [In] int y, [In] int width, [In] int height);
void glSelectBuffer([In] int size, [In] [Out] uint* buffer);
void glShadeModel([In] uint mode);
void glStencilFunc([In] uint func, [In] int ref, [In] uint mask);
void glStencilMask([In] uint mask);
void glStencilOp([In] uint fail, [In] uint zfail, [In] uint zpass);
void glTexCoord1d([In] double s);
void glTexCoord1dv([Const] [In] double* v);
void glTexCoord1f([In] float s);
void glTexCoord1fv([Const] [In] float* v);
void glTexCoord1i([In] int s);
void glTexCoord1iv([Const] [In] int* v);
void glTexCoord1s([In] short s);
void glTexCoord1sv([Const] [In] short* v);
void glTexCoord2d([In] double s, [In] double t);
void glTexCoord2dv([Const] [In] double* v);
void glTexCoord2f([In] float s, [In] float t);
void glTexCoord2fv([Const] [In] float* v);
void glTexCoord2i([In] int s, [In] int t);
void glTexCoord2iv([Const] [In] int* v);
void glTexCoord2s([In] short s, [In] short t);
void glTexCoord2sv([Const] [In] short* v);
void glTexCoord3d([In] double s, [In] double t, [In] double r);
void glTexCoord3dv([Const] [In] double* v);
void glTexCoord3f([In] float s, [In] float t, [In] float r);
void glTexCoord3fv([Const] [In] float* v);
void glTexCoord3i([In] int s, [In] int t, [In] int r);
void glTexCoord3iv([Const] [In] int* v);
void glTexCoord3s([In] short s, [In] short t, [In] short r);
void glTexCoord3sv([Const] [In] short* v);
void glTexCoord4d([In] double s, [In] double t, [In] double r, [In] double q);
void glTexCoord4dv([Const] [In] double* v);
void glTexCoord4f([In] float s, [In] float t, [In] float r, [In] float q);
void glTexCoord4fv([Const] [In] float* v);
void glTexCoord4i([In] int s, [In] int t, [In] int r, [In] int q);
void glTexCoord4iv([Const] [In] int* v);
void glTexCoord4s([In] short s, [In] short t, [In] short r, [In] short q);
void glTexCoord4sv([Const] [In] short* v);
void glTexCoordPointer([In] int size, [In] uint type, [In] int stride, [Const] [In] void* pointer);
void glTexEnvf([In] uint target, [In] uint pname, [In] float param2);
void glTexEnvfv([In] uint target, [In] uint pname, [Const] [In] float* params);
void glTexEnvi([In] uint target, [In] uint pname, [In] int param2);
void glTexEnviv([In] uint target, [In] uint pname, [Const] [In] int* params);
void glTexGend([In] uint coord, [In] uint pname, [In] double param2);
void glTexGendv([In] uint coord, [In] uint pname, [Const] [In] double* params);
void glTexGenf([In] uint coord, [In] uint pname, [In] float param2);
void glTexGenfv([In] uint coord, [In] uint pname, [Const] [In] float* params);
void glTexGeni([In] uint coord, [In] uint pname, [In] int param2);
void glTexGeniv([In] uint coord, [In] uint pname, [Const] [In] int* params);
void glTexImage1D([In] uint target, [In] int level, [In] int internalformat, [In] int width, [In] int border, [In] uint format, [In] uint type, [Const] [In] void* pixels);
void glTexImage2D([In] uint target, [In] int level, [In] int internalformat, [In] int width, [In] int height, [In] int border, [In] uint format, [In] uint type, [Const] [In] void* pixels);
void glTexParameterf([In] uint target, [In] uint pname, [In] float param2);
void glTexParameterfv([In] uint target, [In] uint pname, [Const] [In] float* params);
void glTexParameteri([In] uint target, [In] uint pname, [In] int param2);
void glTexParameteriv([In] uint target, [In] uint pname, [Const] [In] int* params);
void glTexSubImage1D([In] uint target, [In] int level, [In] int xoffset, [In] int width, [In] uint format, [In] uint type, [Const] [In] void* pixels);
void glTexSubImage2D([In] uint target, [In] int level, [In] int xoffset, [In] int yoffset, [In] int width, [In] int height, [In] uint format, [In] uint type, [Const] [In] void* pixels);
void glTranslated([In] double x, [In] double y, [In] double z);
void glTranslatef([In] float x, [In] float y, [In] float z);
void glVertex2d([In] double x, [In] double y);
void glVertex2dv([Const] [In] double* v);
void glVertex2f([In] float x, [In] float y);
void glVertex2fv([Const] [In] float* v);
void glVertex2i([In] int x, [In] int y);
void glVertex2iv([Const] [In] int* v);
void glVertex2s([In] short x, [In] short y);
void glVertex2sv([Const] [In] short* v);
void glVertex3d([In] double x, [In] double y, [In] double z);
void glVertex3dv([Const] [In] double* v);
void glVertex3f([In] float x, [In] float y, [In] float z);
void glVertex3fv([Const] [In] float* v);
void glVertex3i([In] int x, [In] int y, [In] int z);
void glVertex3iv([Const] [In] int* v);
void glVertex3s([In] short x, [In] short y, [In] short z);
void glVertex3sv([Const] [In] short* v);
void glVertex4d([In] double x, [In] double y, [In] double z, [In] double w);
void glVertex4dv([Const] [In] double* v);
void glVertex4f([In] float x, [In] float y, [In] float z, [In] float w);
void glVertex4fv([Const] [In] float* v);
void glVertex4i([In] int x, [In] int y, [In] int z, [In] int w);
void glVertex4iv([Const] [In] int* v);
void glVertex4s([In] short x, [In] short y, [In] short z, [In] short w);
void glVertex4sv([Const] [In] short* v);
void glVertexPointer([In] int size, [In] uint type, [In] int stride, [Const] [In] void* pointer);
void glViewport([In] int x, [In] int y, [In] int width, [In] int height);
