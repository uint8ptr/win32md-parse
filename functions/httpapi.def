uint HttpInitialize([In] HTTPAPI_VERSION Version, [In] HTTP_INITIALIZE Flags, [Reserved] [In] [Out] void* pReserved);
uint HttpTerminate([In] HTTP_INITIALIZE Flags, [Reserved] [In] [Out] void* pReserved);
uint HttpCreateHttpHandle([Out] HANDLE* RequestQueueHandle, [Reserved] [In] uint Reserved);
uint HttpCreateRequestQueue([In] HTTPAPI_VERSION Version, [Const] [In] [Optional] PWSTR Name, [In] [Optional] SECURITY_ATTRIBUTES* SecurityAttributes, [In] [Optional] uint Flags, [Out] HANDLE* RequestQueueHandle);
uint HttpCloseRequestQueue([In] HANDLE RequestQueueHandle);
uint HttpSetRequestQueueProperty([In] HANDLE RequestQueueHandle, [In] HTTP_SERVER_PROPERTY Property, [MemorySize(BytesParamIndex = 3)] [In] void* PropertyInformation, [In] uint PropertyInformationLength, [Reserved] [In] uint Reserved1, [Reserved] [In] [Out] void* Reserved2);
uint HttpQueryRequestQueueProperty([In] HANDLE RequestQueueHandle, [In] HTTP_SERVER_PROPERTY Property, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* PropertyInformation, [In] uint PropertyInformationLength, [Reserved] [In] uint Reserved1, [Out] [Optional] uint* ReturnLength, [Reserved] [In] [Out] void* Reserved2);
uint HttpSetRequestProperty([In] HANDLE RequestQueueHandle, [In] ulong Id, [In] HTTP_REQUEST_PROPERTY PropertyId, [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* Input, [In] uint InputPropertySize, [In] OVERLAPPED* Overlapped);
uint HttpShutdownRequestQueue([In] HANDLE RequestQueueHandle);
uint HttpReceiveClientCertificate([In] HANDLE RequestQueueHandle, [In] ulong ConnectionId, [In] uint Flags, [MemorySize(BytesParamIndex = 4)] [Out] HTTP_SSL_CLIENT_CERT_INFO* SslClientCertInfo, [In] uint SslClientCertInfoSize, [Out] [Optional] uint* BytesReceived, [In] [Optional] OVERLAPPED* Overlapped);
uint HttpCreateServerSession([In] HTTPAPI_VERSION Version, [Out] ulong* ServerSessionId, [Reserved] [In] uint Reserved);
uint HttpCloseServerSession([In] ulong ServerSessionId);
uint HttpQueryServerSessionProperty([In] ulong ServerSessionId, [In] HTTP_SERVER_PROPERTY Property, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* PropertyInformation, [In] uint PropertyInformationLength, [Out] [Optional] uint* ReturnLength);
uint HttpSetServerSessionProperty([In] ulong ServerSessionId, [In] HTTP_SERVER_PROPERTY Property, [MemorySize(BytesParamIndex = 3)] [In] void* PropertyInformation, [In] uint PropertyInformationLength);
uint HttpAddUrl([In] HANDLE RequestQueueHandle, [Const] [In] PWSTR FullyQualifiedUrl, [Reserved] [In] [Out] void* Reserved);
uint HttpRemoveUrl([In] HANDLE RequestQueueHandle, [Const] [In] PWSTR FullyQualifiedUrl);
uint HttpCreateUrlGroup([In] ulong ServerSessionId, [Out] ulong* pUrlGroupId, [Reserved] [In] uint Reserved);
uint HttpCloseUrlGroup([In] ulong UrlGroupId);
uint HttpAddUrlToUrlGroup([In] ulong UrlGroupId, [Const] [In] PWSTR pFullyQualifiedUrl, [In] ulong UrlContext, [Reserved] [In] uint Reserved);
uint HttpRemoveUrlFromUrlGroup([In] ulong UrlGroupId, [Const] [In] PWSTR pFullyQualifiedUrl, [In] uint Flags);
uint HttpSetUrlGroupProperty([In] ulong UrlGroupId, [In] HTTP_SERVER_PROPERTY Property, [MemorySize(BytesParamIndex = 3)] [In] void* PropertyInformation, [In] uint PropertyInformationLength);
uint HttpQueryUrlGroupProperty([In] ulong UrlGroupId, [In] HTTP_SERVER_PROPERTY Property, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* PropertyInformation, [In] uint PropertyInformationLength, [Out] [Optional] uint* ReturnLength);
uint HttpPrepareUrl([Reserved] [In] [Out] void* Reserved, [Reserved] [In] uint Flags, [Const] [In] PWSTR Url, [Out] PWSTR* PreparedUrl);
uint HttpReceiveHttpRequest([In] HANDLE RequestQueueHandle, [In] ulong RequestId, [In] HTTP_RECEIVE_HTTP_REQUEST_FLAGS Flags, [MemorySize(BytesParamIndex = 4)] [Out] HTTP_REQUEST_V2* RequestBuffer, [In] uint RequestBufferLength, [Out] [Optional] uint* BytesReturned, [In] [Optional] OVERLAPPED* Overlapped);
uint HttpReceiveRequestEntityBody([In] HANDLE RequestQueueHandle, [In] ulong RequestId, [In] uint Flags, [MemorySize(BytesParamIndex = 4)] [Out] void* EntityBuffer, [In] uint EntityBufferLength, [Out] [Optional] uint* BytesReturned, [In] [Optional] OVERLAPPED* Overlapped);
uint HttpSendHttpResponse([In] HANDLE RequestQueueHandle, [In] ulong RequestId, [In] uint Flags, [In] HTTP_RESPONSE_V2* HttpResponse, [In] [Optional] HTTP_CACHE_POLICY* CachePolicy, [Out] [Optional] uint* BytesSent, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2, [In] [Optional] OVERLAPPED* Overlapped, [In] [Optional] HTTP_LOG_DATA* LogData);
uint HttpSendResponseEntityBody([In] HANDLE RequestQueueHandle, [In] ulong RequestId, [In] uint Flags, [In] [Optional] ushort EntityChunkCount, [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] HTTP_DATA_CHUNK* EntityChunks, [Out] [Optional] uint* BytesSent, [Reserved] [Optional] void* Reserved1, [Reserved] [Optional] uint Reserved2, [In] [Optional] OVERLAPPED* Overlapped, [In] [Optional] HTTP_LOG_DATA* LogData);
uint HttpDeclarePush([In] HANDLE RequestQueueHandle, [In] ulong RequestId, [In] HTTP_VERB Verb, [Const] [In] PWSTR Path, [Const] [In] [Optional] PSTR Query, [In] [Optional] HTTP_REQUEST_HEADERS* Headers);
uint HttpWaitForDisconnect([In] HANDLE RequestQueueHandle, [In] ulong ConnectionId, [In] [Optional] OVERLAPPED* Overlapped);
uint HttpWaitForDisconnectEx([In] HANDLE RequestQueueHandle, [In] ulong ConnectionId, [Reserved] [In] [Optional] uint Reserved, [In] [Optional] OVERLAPPED* Overlapped);
uint HttpCancelHttpRequest([In] HANDLE RequestQueueHandle, [In] ulong RequestId, [In] [Optional] OVERLAPPED* Overlapped);
uint HttpWaitForDemandStart([In] HANDLE RequestQueueHandle, [In] [Optional] OVERLAPPED* Overlapped);
BOOL HttpIsFeatureSupported([In] HTTP_FEATURE_ID FeatureId);
uint HttpDelegateRequestEx([In] HANDLE RequestQueueHandle, [In] HANDLE DelegateQueueHandle, [In] ulong RequestId, [In] ulong DelegateUrlGroupId, [In] uint PropertyInfoSetSize, [In] HTTP_DELEGATE_REQUEST_PROPERTY_INFO* PropertyInfoSet);
uint HttpFindUrlGroupId([Const] [In] PWSTR FullyQualifiedUrl, [In] HANDLE RequestQueueHandle, [Out] ulong* UrlGroupId);
uint HttpFlushResponseCache([In] HANDLE RequestQueueHandle, [Const] [In] PWSTR UrlPrefix, [In] uint Flags, [In] [Optional] OVERLAPPED* Overlapped);
uint HttpAddFragmentToCache([In] HANDLE RequestQueueHandle, [Const] [In] PWSTR UrlPrefix, [In] HTTP_DATA_CHUNK* DataChunk, [In] HTTP_CACHE_POLICY* CachePolicy, [In] [Optional] OVERLAPPED* Overlapped);
uint HttpReadFragmentFromCache([In] HANDLE RequestQueueHandle, [Const] [In] PWSTR UrlPrefix, [In] [Optional] HTTP_BYTE_RANGE* ByteRange, [MemorySize(BytesParamIndex = 4)] [Out] void* Buffer, [In] uint BufferLength, [Out] [Optional] uint* BytesRead, [In] [Optional] OVERLAPPED* Overlapped);
uint HttpSetServiceConfiguration([Reserved] [In] HANDLE ServiceHandle, [In] HTTP_SERVICE_CONFIG_ID ConfigId, [MemorySize(BytesParamIndex = 3)] [In] void* pConfigInformation, [In] uint ConfigInformationLength, [Reserved] [In] [Out] OVERLAPPED* pOverlapped);
uint HttpUpdateServiceConfiguration([Reserved] [In] HANDLE Handle, [In] HTTP_SERVICE_CONFIG_ID ConfigId, [MemorySize(BytesParamIndex = 3)] [In] void* ConfigInfo, [In] uint ConfigInfoLength, [Reserved] [In] [Out] OVERLAPPED* Overlapped);
uint HttpDeleteServiceConfiguration([Reserved] [In] HANDLE ServiceHandle, [In] HTTP_SERVICE_CONFIG_ID ConfigId, [MemorySize(BytesParamIndex = 3)] [In] void* pConfigInformation, [In] uint ConfigInformationLength, [Reserved] [In] [Out] OVERLAPPED* pOverlapped);
uint HttpQueryServiceConfiguration([Reserved] [In] HANDLE ServiceHandle, [In] HTTP_SERVICE_CONFIG_ID ConfigId, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* pInput, [In] uint InputLength, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] void* pOutput, [In] uint OutputLength, [Out] [Optional] uint* pReturnLength, [Reserved] [In] [Out] OVERLAPPED* pOverlapped);
uint HttpGetExtension([In] HTTPAPI_VERSION Version, [In] uint Extension, [Out] void* Buffer, [In] uint BufferSize);
