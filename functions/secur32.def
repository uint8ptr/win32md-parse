NTSTATUS LsaRegisterLogonProcess([In] STRING* LogonProcessName, [Out] HANDLE* LsaHandle, [Out] uint* SecurityMode);
NTSTATUS LsaLogonUser([In] HANDLE LsaHandle, [In] STRING* OriginName, [In] SECURITY_LOGON_TYPE LogonType, [In] uint AuthenticationPackage, [MemorySize(BytesParamIndex = 5)] [In] void* AuthenticationInformation, [In] uint AuthenticationInformationLength, [In] [Optional] TOKEN_GROUPS* LocalGroups, [In] TOKEN_SOURCE* SourceContext, [Out] void** ProfileBuffer, [Out] uint* ProfileBufferLength, [In] [Out] LUID* LogonId, [Out] HANDLE* Token, [Out] QUOTA_LIMITS* Quotas, [Out] int* SubStatus);
NTSTATUS LsaLookupAuthenticationPackage([In] HANDLE LsaHandle, [In] STRING* PackageName, [Out] uint* AuthenticationPackage);
NTSTATUS LsaFreeReturnBuffer([In] void* Buffer);
NTSTATUS LsaCallAuthenticationPackage([In] HANDLE LsaHandle, [In] uint AuthenticationPackage, [MemorySize(BytesParamIndex = 3)] [In] void* ProtocolSubmitBuffer, [In] uint SubmitBufferLength, [Out] [Optional] void** ProtocolReturnBuffer, [Out] [Optional] uint* ReturnBufferLength, [Out] [Optional] int* ProtocolStatus);
NTSTATUS LsaDeregisterLogonProcess([In] HANDLE LsaHandle);
NTSTATUS LsaConnectUntrusted([Out] HANDLE* LsaHandle);
NTSTATUS LsaEnumerateLogonSessions([Out] uint* LogonSessionCount, [Out] LUID** LogonSessionList);
NTSTATUS LsaGetLogonSessionData([In] LUID* LogonId, [Out] SECURITY_LOGON_SESSION_DATA** ppLogonSessionData);
NTSTATUS LsaRegisterPolicyChangeNotification([In] POLICY_NOTIFICATION_INFORMATION_CLASS InformationClass, [In] HANDLE NotificationEventHandle);
NTSTATUS LsaUnregisterPolicyChangeNotification([In] POLICY_NOTIFICATION_INFORMATION_CLASS InformationClass, [In] HANDLE NotificationEventHandle);
HRESULT AcquireCredentialsHandleW([In] [Optional] PWSTR pszPrincipal, [In] PWSTR pszPackage, [In] SECPKG_CRED fCredentialUse, [In] [Optional] void* pvLogonId, [In] [Optional] void* pAuthData, [In] [Optional] SEC_GET_KEY_FN pGetKeyFn, [In] [Optional] void* pvGetKeyArgument, [Out] SecHandle* phCredential, [Out] [Optional] LARGE_INTEGER* ptsExpiry);
HRESULT AcquireCredentialsHandleA([In] [Optional] PSTR pszPrincipal, [In] PSTR pszPackage, [In] SECPKG_CRED fCredentialUse, [In] [Optional] void* pvLogonId, [In] [Optional] void* pAuthData, [In] [Optional] SEC_GET_KEY_FN pGetKeyFn, [In] [Optional] void* pvGetKeyArgument, [Out] SecHandle* phCredential, [Out] [Optional] LARGE_INTEGER* ptsExpiry);
HRESULT FreeCredentialsHandle([In] SecHandle* phCredential);
HRESULT AddCredentialsW([In] SecHandle* hCredentials, [In] [Optional] PWSTR pszPrincipal, [In] PWSTR pszPackage, [In] uint fCredentialUse, [In] [Optional] void* pAuthData, [In] [Optional] SEC_GET_KEY_FN pGetKeyFn, [In] [Optional] void* pvGetKeyArgument, [Out] [Optional] LARGE_INTEGER* ptsExpiry);
HRESULT AddCredentialsA([In] SecHandle* hCredentials, [In] [Optional] PSTR pszPrincipal, [In] PSTR pszPackage, [In] uint fCredentialUse, [In] [Optional] void* pAuthData, [In] [Optional] SEC_GET_KEY_FN pGetKeyFn, [In] [Optional] void* pvGetKeyArgument, [Out] [Optional] LARGE_INTEGER* ptsExpiry);
HRESULT ChangeAccountPasswordW([In] ushort* pszPackageName, [In] ushort* pszDomainName, [In] ushort* pszAccountName, [In] ushort* pszOldPassword, [In] ushort* pszNewPassword, [In] BOOLEAN bImpersonating, [In] uint dwReserved, [In] [Out] SecBufferDesc* pOutput);
HRESULT ChangeAccountPasswordA([In] sbyte* pszPackageName, [In] sbyte* pszDomainName, [In] sbyte* pszAccountName, [In] sbyte* pszOldPassword, [In] sbyte* pszNewPassword, [In] BOOLEAN bImpersonating, [In] uint dwReserved, [In] [Out] SecBufferDesc* pOutput);
HRESULT InitializeSecurityContextW([In] [Optional] SecHandle* phCredential, [In] [Optional] SecHandle* phContext, [In] [Optional] ushort* pszTargetName, [In] ISC_REQ_FLAGS fContextReq, [In] uint Reserved1, [In] uint TargetDataRep, [In] [Optional] SecBufferDesc* pInput, [In] uint Reserved2, [In] [Out] [Optional] SecHandle* phNewContext, [In] [Out] [Optional] SecBufferDesc* pOutput, [Out] uint* pfContextAttr, [Out] [Optional] LARGE_INTEGER* ptsExpiry);
HRESULT InitializeSecurityContextA([In] [Optional] SecHandle* phCredential, [In] [Optional] SecHandle* phContext, [In] [Optional] sbyte* pszTargetName, [In] ISC_REQ_FLAGS fContextReq, [In] uint Reserved1, [In] uint TargetDataRep, [In] [Optional] SecBufferDesc* pInput, [In] uint Reserved2, [In] [Out] [Optional] SecHandle* phNewContext, [In] [Out] [Optional] SecBufferDesc* pOutput, [Out] uint* pfContextAttr, [Out] [Optional] LARGE_INTEGER* ptsExpiry);
HRESULT AcceptSecurityContext([In] [Optional] SecHandle* phCredential, [In] [Optional] SecHandle* phContext, [In] [Optional] SecBufferDesc* pInput, [In] ASC_REQ_FLAGS fContextReq, [In] uint TargetDataRep, [In] [Out] [Optional] SecHandle* phNewContext, [In] [Out] [Optional] SecBufferDesc* pOutput, [Out] uint* pfContextAttr, [Out] [Optional] LARGE_INTEGER* ptsExpiry);
HRESULT CompleteAuthToken([In] SecHandle* phContext, [In] SecBufferDesc* pToken);
HRESULT ImpersonateSecurityContext([In] SecHandle* phContext);
HRESULT RevertSecurityContext([In] SecHandle* phContext);
HRESULT QuerySecurityContextToken([In] SecHandle* phContext, [Out] void** Token);
HRESULT DeleteSecurityContext([In] SecHandle* phContext);
HRESULT ApplyControlToken([In] SecHandle* phContext, [In] SecBufferDesc* pInput);
HRESULT QueryContextAttributesW([In] SecHandle* phContext, [In] SECPKG_ATTR ulAttribute, [Out] void* pBuffer);
HRESULT QueryContextAttributesA([In] SecHandle* phContext, [In] SECPKG_ATTR ulAttribute, [Out] void* pBuffer);
HRESULT SetContextAttributesW([In] SecHandle* phContext, [In] SECPKG_ATTR ulAttribute, [MemorySize(BytesParamIndex = 3)] [In] void* pBuffer, [In] uint cbBuffer);
HRESULT SetContextAttributesA([In] SecHandle* phContext, [In] SECPKG_ATTR ulAttribute, [MemorySize(BytesParamIndex = 3)] [In] void* pBuffer, [In] uint cbBuffer);
HRESULT QueryCredentialsAttributesW([In] SecHandle* phCredential, [In] uint ulAttribute, [In] [Out] void* pBuffer);
HRESULT QueryCredentialsAttributesA([In] SecHandle* phCredential, [In] uint ulAttribute, [In] [Out] void* pBuffer);
HRESULT SetCredentialsAttributesW([In] SecHandle* phCredential, [In] uint ulAttribute, [MemorySize(BytesParamIndex = 3)] [In] void* pBuffer, [In] uint cbBuffer);
HRESULT SetCredentialsAttributesA([In] SecHandle* phCredential, [In] uint ulAttribute, [MemorySize(BytesParamIndex = 3)] [In] void* pBuffer, [In] uint cbBuffer);
HRESULT FreeContextBuffer([In] [Out] void* pvContextBuffer);
HRESULT MakeSignature([In] SecHandle* phContext, [In] uint fQOP, [In] SecBufferDesc* pMessage, [In] uint MessageSeqNo);
HRESULT VerifySignature([In] SecHandle* phContext, [In] SecBufferDesc* pMessage, [In] uint MessageSeqNo, [Out] uint* pfQOP);
HRESULT EncryptMessage([In] SecHandle* phContext, [In] uint fQOP, [In] SecBufferDesc* pMessage, [In] uint MessageSeqNo);
HRESULT DecryptMessage([In] SecHandle* phContext, [In] SecBufferDesc* pMessage, [In] uint MessageSeqNo, [Out] [Optional] uint* pfQOP);
HRESULT EnumerateSecurityPackagesW([Out] uint* pcPackages, [Out] SecPkgInfoW** ppPackageInfo);
HRESULT EnumerateSecurityPackagesA([Out] uint* pcPackages, [Out] SecPkgInfoA** ppPackageInfo);
HRESULT QuerySecurityPackageInfoW([In] PWSTR pszPackageName, [Out] SecPkgInfoW** ppPackageInfo);
HRESULT QuerySecurityPackageInfoA([In] PSTR pszPackageName, [Out] SecPkgInfoA** ppPackageInfo);
HRESULT ExportSecurityContext([In] SecHandle* phContext, [In] EXPORT_SECURITY_CONTEXT_FLAGS fFlags, [Out] SecBuffer* pPackedContext, [Out] void** pToken);
HRESULT ImportSecurityContextW([In] PWSTR pszPackage, [In] SecBuffer* pPackedContext, [In] void* Token, [Out] SecHandle* phContext);
HRESULT ImportSecurityContextA([In] PSTR pszPackage, [In] SecBuffer* pPackedContext, [In] void* Token, [Out] SecHandle* phContext);
SecurityFunctionTableA* InitSecurityInterfaceA();
SecurityFunctionTableW* InitSecurityInterfaceW();
HRESULT SaslEnumerateProfilesA([Out] PSTR* ProfileList, [Out] uint* ProfileCount);
HRESULT SaslEnumerateProfilesW([Out] PWSTR* ProfileList, [Out] uint* ProfileCount);
HRESULT SaslGetProfilePackageA([In] PSTR ProfileName, [Out] SecPkgInfoA** PackageInfo);
HRESULT SaslGetProfilePackageW([In] PWSTR ProfileName, [Out] SecPkgInfoW** PackageInfo);
HRESULT SaslIdentifyPackageA([In] SecBufferDesc* pInput, [Out] SecPkgInfoA** PackageInfo);
HRESULT SaslIdentifyPackageW([In] SecBufferDesc* pInput, [Out] SecPkgInfoW** PackageInfo);
HRESULT SaslInitializeSecurityContextW([In] [Optional] SecHandle* phCredential, [In] [Optional] SecHandle* phContext, [In] [Optional] PWSTR pszTargetName, [In] ISC_REQ_FLAGS fContextReq, [In] uint Reserved1, [In] uint TargetDataRep, [In] [Optional] SecBufferDesc* pInput, [In] uint Reserved2, [In] [Out] [Optional] SecHandle* phNewContext, [In] [Out] [Optional] SecBufferDesc* pOutput, [Out] uint* pfContextAttr, [Out] [Optional] LARGE_INTEGER* ptsExpiry);
HRESULT SaslInitializeSecurityContextA([In] [Optional] SecHandle* phCredential, [In] [Optional] SecHandle* phContext, [In] [Optional] PSTR pszTargetName, [In] ISC_REQ_FLAGS fContextReq, [In] uint Reserved1, [In] uint TargetDataRep, [In] [Optional] SecBufferDesc* pInput, [In] uint Reserved2, [In] [Out] [Optional] SecHandle* phNewContext, [In] [Out] [Optional] SecBufferDesc* pOutput, [Out] uint* pfContextAttr, [Out] [Optional] LARGE_INTEGER* ptsExpiry);
HRESULT SaslAcceptSecurityContext([In] [Optional] SecHandle* phCredential, [In] [Optional] SecHandle* phContext, [In] [Optional] SecBufferDesc* pInput, [In] ASC_REQ_FLAGS fContextReq, [In] uint TargetDataRep, [In] [Out] [Optional] SecHandle* phNewContext, [In] [Out] [Optional] SecBufferDesc* pOutput, [Out] uint* pfContextAttr, [Out] [Optional] LARGE_INTEGER* ptsExpiry);
HRESULT SaslSetContextOption([In] SecHandle* ContextHandle, [In] uint Option, [In] void* Value, [In] uint Size);
HRESULT SaslGetContextOption([In] SecHandle* ContextHandle, [In] uint Option, [Out] void* Value, [In] uint Size, [Out] [Optional] uint* Needed);
HRESULT SspiPrepareForCredRead([In] void* AuthIdentity, [Const] [In] PWSTR pszTargetName, [Out] uint* pCredmanCredentialType, [Out] PWSTR* ppszCredmanTargetName);
HRESULT SspiPrepareForCredWrite([In] void* AuthIdentity, [Const] [In] [Optional] PWSTR pszTargetName, [Out] uint* pCredmanCredentialType, [Out] PWSTR* ppszCredmanTargetName, [Out] PWSTR* ppszCredmanUserName, [Out] byte** ppCredentialBlob, [Out] uint* pCredentialBlobSize);
HRESULT SspiEncryptAuthIdentity([In] [Out] void* AuthData);
HRESULT SspiDecryptAuthIdentity([In] [Out] void* EncryptedAuthData);
BOOLEAN SspiIsAuthIdentityEncrypted([In] void* EncryptedAuthData);
HRESULT SspiEncodeAuthIdentityAsStrings([In] void* pAuthIdentity, [Out] [Optional] PWSTR* ppszUserName, [Out] [Optional] PWSTR* ppszDomainName, [Out] [Optional] PWSTR* ppszPackedCredentialsString);
HRESULT SspiValidateAuthIdentity([In] void* AuthData);
HRESULT SspiCopyAuthIdentity([In] void* AuthData, [Out] void** AuthDataCopy);
void SspiFreeAuthIdentity([In] [Optional] void* AuthData);
void SspiZeroAuthIdentity([In] [Optional] void* AuthData);
void SspiLocalFree([In] [Optional] void* DataBuffer);
HRESULT SspiEncodeStringsAsAuthIdentity([Const] [In] [Optional] PWSTR pszUserName, [Const] [In] [Optional] PWSTR pszDomainName, [Const] [In] [Optional] PWSTR pszPackedCredentialsString, [Out] void** ppAuthIdentity);
HRESULT SspiCompareAuthIdentities([In] [Optional] void* AuthIdentity1, [In] [Optional] void* AuthIdentity2, [Out] [Optional] BOOLEAN* SameSuppliedUser, [Out] [Optional] BOOLEAN* SameSuppliedIdentity);
HRESULT SspiMarshalAuthIdentity([In] void* AuthIdentity, [Out] uint* AuthIdentityLength, [Out] sbyte** AuthIdentityByteArray);
HRESULT SspiUnmarshalAuthIdentity([In] uint AuthIdentityLength, [MemorySize(BytesParamIndex = 0)] [In] PSTR AuthIdentityByteArray, [Out] void** ppAuthIdentity);
HRESULT SspiGetTargetHostName([Const] [In] PWSTR pszTargetName, [Out] PWSTR* pszHostName);
HRESULT SspiExcludePackage([In] [Optional] void* AuthIdentity, [Const] [In] PWSTR pszPackageName, [Out] void** ppNewAuthIdentity);
HRESULT AddSecurityPackageA([In] PSTR pszPackageName, [In] [Optional] SECURITY_PACKAGE_OPTIONS* pOptions);
HRESULT AddSecurityPackageW([In] PWSTR pszPackageName, [In] [Optional] SECURITY_PACKAGE_OPTIONS* pOptions);
HRESULT DeleteSecurityPackageA([In] PSTR pszPackageName);
HRESULT DeleteSecurityPackageW([In] PWSTR pszPackageName);
NTSTATUS CredMarshalTargetInfo([In] CREDENTIAL_TARGET_INFORMATIONW* InTargetInfo, [Out] ushort** Buffer, [Out] uint* BufferSize);
NTSTATUS CredUnmarshalTargetInfo([MemorySize(BytesParamIndex = 1)] [In] ushort* Buffer, [In] uint BufferSize, [Out] [Optional] CREDENTIAL_TARGET_INFORMATIONW** RetTargetInfo, [Out] [Optional] uint* RetActualSize);
BOOLEAN GetUserNameExA([In] EXTENDED_NAME_FORMAT NameFormat, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpNameBuffer, [In] [Out] uint* nSize);
BOOLEAN GetUserNameExW([In] EXTENDED_NAME_FORMAT NameFormat, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpNameBuffer, [In] [Out] uint* nSize);
BOOLEAN GetComputerObjectNameA([In] EXTENDED_NAME_FORMAT NameFormat, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpNameBuffer, [In] [Out] uint* nSize);
BOOLEAN GetComputerObjectNameW([In] EXTENDED_NAME_FORMAT NameFormat, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpNameBuffer, [In] [Out] uint* nSize);
BOOLEAN TranslateNameA([Const] [In] PSTR lpAccountName, [In] EXTENDED_NAME_FORMAT AccountNameFormat, [In] EXTENDED_NAME_FORMAT DesiredNameFormat, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR lpTranslatedName, [In] [Out] uint* nSize);
BOOLEAN TranslateNameW([Const] [In] PWSTR lpAccountName, [In] EXTENDED_NAME_FORMAT AccountNameFormat, [In] EXTENDED_NAME_FORMAT DesiredNameFormat, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR lpTranslatedName, [In] [Out] uint* nSize);
