void* FCICreate([In] ERF* perf, [In] PFNFCIFILEPLACED pfnfcifp, [In] PFNFCIALLOC pfna, [In] PFNFCIFREE pfnf, [In] PFNFCIOPEN pfnopen, [In] PFNFCIREAD pfnread, [In] PFNFCIWRITE pfnwrite, [In] PFNFCICLOSE pfnclose, [In] PFNFCISEEK pfnseek, [In] PFNFCIDELETE pfndelete, [In] PFNFCIGETTEMPFILE pfnfcigtf, [In] CCAB* pccab, [In] [Optional] void* pv);
BOOL FCIAddFile([In] void* hfci, [In] PSTR pszSourceFile, [In] PSTR pszFileName, [In] BOOL fExecute, [In] PFNFCIGETNEXTCABINET pfnfcignc, [In] PFNFCISTATUS pfnfcis, [In] PFNFCIGETOPENINFO pfnfcigoi, [In] ushort typeCompress);
BOOL FCIFlushCabinet([In] void* hfci, [In] BOOL fGetNextCab, [In] PFNFCIGETNEXTCABINET pfnfcignc, [In] PFNFCISTATUS pfnfcis);
BOOL FCIFlushFolder([In] void* hfci, [In] PFNFCIGETNEXTCABINET pfnfcignc, [In] PFNFCISTATUS pfnfcis);
BOOL FCIDestroy([In] void* hfci);
void* FDICreate([In] PFNALLOC pfnalloc, [In] PFNFREE pfnfree, [In] PFNOPEN pfnopen, [In] PFNREAD pfnread, [In] PFNWRITE pfnwrite, [In] PFNCLOSE pfnclose, [In] PFNSEEK pfnseek, [In] FDICREATE_CPU_TYPE cpuType, [In] [Out] ERF* perf);
BOOL FDIIsCabinet([In] void* hfdi, [In] nint hf, [Out] [Optional] FDICABINETINFO* pfdici);
BOOL FDICopy([In] void* hfdi, [In] PSTR pszCabinet, [In] PSTR pszCabPath, [In] int flags, [In] PFNFDINOTIFY pfnfdin, [In] PFNFDIDECRYPT pfnfdid, [In] [Optional] void* pvUser);
BOOL FDIDestroy([In] void* hfdi);
BOOL FDITruncateCabinet([In] void* hfdi, [In] PSTR pszCabinetName, [In] ushort iFolderToDelete);
BOOL CreateCompressor([In] COMPRESS_ALGORITHM Algorithm, [In] [Optional] COMPRESS_ALLOCATION_ROUTINES* AllocationRoutines, [Out] nint* CompressorHandle);
BOOL SetCompressorInformation([In] COMPRESSOR_HANDLE CompressorHandle, [In] COMPRESS_INFORMATION_CLASS CompressInformationClass, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* CompressInformation, [In] nuint CompressInformationSize);
BOOL QueryCompressorInformation([In] COMPRESSOR_HANDLE CompressorHandle, [In] COMPRESS_INFORMATION_CLASS CompressInformationClass, [MemorySize(BytesParamIndex = 3)] [Out] void* CompressInformation, [In] nuint CompressInformationSize);
BOOL Compress([In] COMPRESSOR_HANDLE CompressorHandle, [Const] [MemorySize(BytesParamIndex = 2)] [In] [Optional] void* UncompressedData, [In] nuint UncompressedDataSize, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* CompressedBuffer, [In] nuint CompressedBufferSize, [Out] nuint* CompressedDataSize);
BOOL ResetCompressor([In] COMPRESSOR_HANDLE CompressorHandle);
BOOL CloseCompressor([In] COMPRESSOR_HANDLE CompressorHandle);
BOOL CreateDecompressor([In] COMPRESS_ALGORITHM Algorithm, [In] [Optional] COMPRESS_ALLOCATION_ROUTINES* AllocationRoutines, [Out] nint* DecompressorHandle);
BOOL SetDecompressorInformation([In] nint DecompressorHandle, [In] COMPRESS_INFORMATION_CLASS CompressInformationClass, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* CompressInformation, [In] nuint CompressInformationSize);
BOOL QueryDecompressorInformation([In] nint DecompressorHandle, [In] COMPRESS_INFORMATION_CLASS CompressInformationClass, [MemorySize(BytesParamIndex = 3)] [Out] void* CompressInformation, [In] nuint CompressInformationSize);
BOOL Decompress([In] nint DecompressorHandle, [Const] [MemorySize(BytesParamIndex = 2)] [In] [Optional] void* CompressedData, [In] nuint CompressedDataSize, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* UncompressedBuffer, [In] nuint UncompressedBufferSize, [Out] [Optional] nuint* UncompressedDataSize);
BOOL ResetDecompressor([In] nint DecompressorHandle);
BOOL CloseDecompressor([In] nint DecompressorHandle);
