ITEMIDLIST* SHSimpleIDListFromPath([Const] [In] PWSTR pszPath);
HRESULT SHCreateItemFromIDList([In] ITEMIDLIST* pidl, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHCreateItemFromParsingName([Const] [In] PWSTR pszPath, [In] [Optional] IBindCtx pbc, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHCreateItemWithParent([In] [Optional] ITEMIDLIST* pidlParent, [In] [Optional] IShellFolder psfParent, [In] ITEMIDLIST* pidl, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppvItem);
HRESULT SHCreateItemFromRelativeName([In] IShellItem psiParent, [Const] [In] PWSTR pszName, [In] [Optional] IBindCtx pbc, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHCreateItemInKnownFolder([Const] [In] Guid* kfid, [In] uint dwKFFlags, [Const] [In] [Optional] PWSTR pszItem, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHGetIDListFromObject([In] IUnknown punk, [Out] ITEMIDLIST** ppidl);
HRESULT SHGetItemFromObject([In] IUnknown punk, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHGetNameFromIDList([In] ITEMIDLIST* pidl, [In] SIGDN sigdnName, [Out] PWSTR* ppszName);
HRESULT SHGetItemFromDataObject([In] IDataObject pdtobj, [In] DATAOBJ_GET_ITEM_FLAGS dwFlags, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHCreateShellItemArray([In] [Optional] ITEMIDLIST* pidlParent, [In] [Optional] IShellFolder psf, [In] uint cidl, [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] ITEMIDLIST** ppidl, [Out] IShellItemArray* ppsiItemArray);
HRESULT SHCreateShellItemArrayFromDataObject([In] IDataObject pdo, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHCreateShellItemArrayFromIDLists([In] uint cidl, [NativeArrayInfo(CountParamIndex = 0)] [In] ITEMIDLIST** rgpidl, [Out] IShellItemArray* ppsiItemArray);
HRESULT SHCreateShellItemArrayFromShellItem([In] IShellItem psi, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHCreateAssociationRegistration([Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHCreateDefaultExtractIcon([Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SetCurrentProcessExplicitAppUserModelID([Const] [In] PWSTR AppID);
HRESULT GetCurrentProcessExplicitAppUserModelID([Out] PWSTR* AppID);
HRESULT SHGetTemporaryPropertyForItem([In] IShellItem psi, [Const] [In] PROPERTYKEY* propkey, [Out] PROPVARIANT* ppropvar);
HRESULT SHSetTemporaryPropertyForItem([In] IShellItem psi, [Const] [In] PROPERTYKEY* propkey, [Const] [In] PROPVARIANT* propvar);
HRESULT SHShowManageLibraryUI([In] IShellItem psiLibrary, [In] HWND hwndOwner, [Const] [In] [Optional] PWSTR pszTitle, [Const] [In] [Optional] PWSTR pszInstruction, [In] LIBRARYMANAGEDIALOGOPTIONS lmdOptions);
HRESULT SHResolveLibrary([In] IShellItem psiLibrary);
HRESULT SHAssocEnumHandlers([Const] [In] PWSTR pszExtra, [In] ASSOC_FILTER afFilter, [Out] IEnumAssocHandlers* ppEnumHandler);
HRESULT SHAssocEnumHandlersForProtocolByApplication([Const] [In] PWSTR protocol, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** enumHandlers);
HRESULT SHCreateDefaultPropertiesOp([In] IShellItem psi, [Out] IFileOperation* ppFileOp);
HRESULT SHSetDefaultProperties([In] [Optional] HWND hwnd, [In] IShellItem psi, [In] uint dwFileOpFlags, [In] [Optional] IFileOperationProgressSink pfops);
HRESULT SHGetMalloc([Out] IMalloc* ppMalloc);
void* SHAlloc([In] nuint cb);
void SHFree([In] [Optional] void* pv);
int SHGetIconOverlayIndexA([Const] [In] [Optional] PSTR pszIconPath, [In] int iIconIndex);
int SHGetIconOverlayIndexW([Const] [In] [Optional] PWSTR pszIconPath, [In] int iIconIndex);
ITEMIDLIST* ILClone([In] ITEMIDLIST* pidl);
ITEMIDLIST* ILCloneFirst([In] ITEMIDLIST* pidl);
ITEMIDLIST* ILCombine([In] [Optional] ITEMIDLIST* pidl1, [In] [Optional] ITEMIDLIST* pidl2);
void ILFree([In] [Optional] ITEMIDLIST* pidl);
ITEMIDLIST* ILGetNext([In] [Optional] ITEMIDLIST* pidl);
uint ILGetSize([In] [Optional] ITEMIDLIST* pidl);
ITEMIDLIST* ILFindChild([In] ITEMIDLIST* pidlParent, [In] ITEMIDLIST* pidlChild);
ITEMIDLIST* ILFindLastID([In] ITEMIDLIST* pidl);
BOOL ILRemoveLastID([In] [Out] [Optional] ITEMIDLIST* pidl);
BOOL ILIsEqual([In] ITEMIDLIST* pidl1, [In] ITEMIDLIST* pidl2);
BOOL ILIsParent([In] ITEMIDLIST* pidl1, [In] ITEMIDLIST* pidl2, [In] BOOL fImmediate);
HRESULT ILSaveToStream([In] IStream pstm, [In] ITEMIDLIST* pidl);
HRESULT ILLoadFromStreamEx([In] IStream pstm, [Out] ITEMIDLIST** pidl);
ITEMIDLIST* ILCreateFromPathA([Const] [In] PSTR pszPath);
ITEMIDLIST* ILCreateFromPathW([Const] [In] PWSTR pszPath);
HRESULT SHILCreateFromPath([Const] [In] PWSTR pszPath, [Out] ITEMIDLIST** ppidl, [In] [Out] [Optional] uint* rgfInOut);
ITEMIDLIST* ILAppendID([In] [Optional] ITEMIDLIST* pidl, [In] SHITEMID* pmkid, [In] BOOL fAppend);
BOOL SHGetPathFromIDListEx([In] ITEMIDLIST* pidl, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszPath, [In] uint cchPath, [In] GPFIDL_FLAGS uOpts);
BOOL SHGetPathFromIDListA([In] ITEMIDLIST* pidl, [NativeArrayInfo(CountConst = 260)] [Out] PSTR pszPath);
BOOL SHGetPathFromIDListW([In] ITEMIDLIST* pidl, [NativeArrayInfo(CountConst = 260)] [Out] PWSTR pszPath);
int SHCreateDirectory([In] [Optional] HWND hwnd, [Const] [In] PWSTR pszPath);
int SHCreateDirectoryExA([In] [Optional] HWND hwnd, [Const] [In] PSTR pszPath, [Const] [In] [Optional] SECURITY_ATTRIBUTES* psa);
int SHCreateDirectoryExW([In] [Optional] HWND hwnd, [Const] [In] PWSTR pszPath, [Const] [In] [Optional] SECURITY_ATTRIBUTES* psa);
HRESULT SHOpenFolderAndSelectItems([In] ITEMIDLIST* pidlFolder, [In] uint cidl, [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] ITEMIDLIST** apidl, [In] uint dwFlags);
HRESULT SHCreateShellItem([In] [Optional] ITEMIDLIST* pidlParent, [In] [Optional] IShellFolder psfParent, [In] ITEMIDLIST* pidl, [Out] IShellItem* ppsi);
HRESULT SHGetSpecialFolderLocation([Reserved] [In] HWND hwnd, [In] int csidl, [Out] ITEMIDLIST** ppidl);
ITEMIDLIST* SHCloneSpecialIDList([Reserved] [In] HWND hwnd, [In] int csidl, [In] BOOL fCreate);
BOOL SHGetSpecialFolderPathA([Reserved] [In] HWND hwnd, [NativeArrayInfo(CountConst = 260)] [Out] PSTR pszPath, [In] int csidl, [In] BOOL fCreate);
BOOL SHGetSpecialFolderPathW([Reserved] [In] HWND hwnd, [NativeArrayInfo(CountConst = 260)] [Out] PWSTR pszPath, [In] int csidl, [In] BOOL fCreate);
void SHFlushSFCache();
HRESULT SHGetFolderPathA([Reserved] [In] HWND hwnd, [In] int csidl, [In] [Optional] HANDLE hToken, [In] uint dwFlags, [NativeArrayInfo(CountConst = 260)] [Out] PSTR pszPath);
HRESULT SHGetFolderPathW([Reserved] [In] HWND hwnd, [In] int csidl, [In] [Optional] HANDLE hToken, [In] uint dwFlags, [NativeArrayInfo(CountConst = 260)] [Out] PWSTR pszPath);
HRESULT SHGetFolderLocation([Reserved] [In] HWND hwnd, [In] int csidl, [In] [Optional] HANDLE hToken, [In] uint dwFlags, [Out] ITEMIDLIST** ppidl);
HRESULT SHSetFolderPathA([In] int csidl, [In] [Optional] HANDLE hToken, [In] uint dwFlags, [Const] [In] PSTR pszPath);
HRESULT SHSetFolderPathW([In] int csidl, [In] [Optional] HANDLE hToken, [In] uint dwFlags, [Const] [In] PWSTR pszPath);
HRESULT SHGetFolderPathAndSubDirA([Reserved] [In] HWND hwnd, [In] int csidl, [In] [Optional] HANDLE hToken, [In] uint dwFlags, [Const] [In] [Optional] PSTR pszSubDir, [NativeArrayInfo(CountConst = 260)] [Out] PSTR pszPath);
HRESULT SHGetFolderPathAndSubDirW([Reserved] [In] HWND hwnd, [In] int csidl, [In] [Optional] HANDLE hToken, [In] uint dwFlags, [Const] [In] [Optional] PWSTR pszSubDir, [NativeArrayInfo(CountConst = 260)] [Out] PWSTR pszPath);
HRESULT SHGetKnownFolderIDList([Const] [In] Guid* rfid, [In] uint dwFlags, [In] [Optional] HANDLE hToken, [Out] ITEMIDLIST** ppidl);
HRESULT SHSetKnownFolderPath([Const] [In] Guid* rfid, [In] uint dwFlags, [In] [Optional] HANDLE hToken, [Const] [In] PWSTR pszPath);
HRESULT SHGetKnownFolderPath([Const] [In] Guid* rfid, [In] KNOWN_FOLDER_FLAG dwFlags, [In] [Optional] HANDLE hToken, [FreeWith("CoTaskMemFree")] [Out] PWSTR* ppszPath);
HRESULT SHGetKnownFolderItem([Const] [In] Guid* rfid, [In] KNOWN_FOLDER_FLAG flags, [In] [Optional] HANDLE hToken, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHGetSetFolderCustomSettings([In] [Out] SHFOLDERCUSTOMSETTINGS* pfcs, [Const] [In] PWSTR pszPath, [In] uint dwReadWrite);
ITEMIDLIST* SHBrowseForFolderA([In] BROWSEINFOA* lpbi);
ITEMIDLIST* SHBrowseForFolderW([In] BROWSEINFOW* lpbi);
HRESULT SHLoadInProc([Const] [In] Guid* rclsid);
HRESULT SHGetDesktopFolder([Out] IShellFolder* ppshf);
void SHChangeNotify([In] SHCNE_ID wEventId, [In] SHCNF_FLAGS uFlags, [Const] [In] [Optional] void* dwItem1, [Const] [In] [Optional] void* dwItem2);
void SHAddToRecentDocs([In] uint uFlags, [Const] [In] [Optional] void* pv);
int SHHandleUpdateImage([In] ITEMIDLIST* pidlExtra);
void SHUpdateImageA([Const] [In] PSTR pszHashItem, [In] int iIndex, [In] uint uFlags, [In] int iImageIndex);
void SHUpdateImageW([Const] [In] PWSTR pszHashItem, [In] int iIndex, [In] uint uFlags, [In] int iImageIndex);
uint SHChangeNotifyRegister([In] HWND hwnd, [In] SHCNRF_SOURCE fSources, [In] int fEvents, [In] uint wMsg, [In] int cEntries, [Const] [In] SHChangeNotifyEntry* pshcne);
BOOL SHChangeNotifyDeregister([In] uint ulID);
ShFindChangeNotificationHandle SHChangeNotification_Lock([In] HANDLE hChange, [In] uint dwProcId, [Out] [Optional] ITEMIDLIST*** pppidl, [Out] [Optional] int* plEvent);
BOOL SHChangeNotification_Unlock([In] HANDLE hLock);
HRESULT SHGetRealIDL([In] IShellFolder psf, [In] ITEMIDLIST* pidlSimple, [Out] ITEMIDLIST** ppidlReal);
HRESULT SHGetInstanceExplorer([Out] IUnknown* ppunk);
HRESULT SHGetDataFromIDListA([In] IShellFolder psf, [In] ITEMIDLIST* pidl, [In] SHGDFIL_FORMAT nFormat, [MemorySize(BytesParamIndex = 4)] [Out] void* pv, [In] int cb);
HRESULT SHGetDataFromIDListW([In] IShellFolder psf, [In] ITEMIDLIST* pidl, [In] SHGDFIL_FORMAT nFormat, [MemorySize(BytesParamIndex = 4)] [Out] void* pv, [In] int cb);
int RestartDialog([In] [Optional] HWND hwnd, [Const] [In] [Optional] PWSTR pszPrompt, [In] uint dwReturn);
int RestartDialogEx([In] [Optional] HWND hwnd, [Const] [In] [Optional] PWSTR pszPrompt, [In] uint dwReturn, [In] uint dwReasonCode);
HRESULT SHCoCreateInstance([Const] [In] [Optional] PWSTR pszCLSID, [Const] [In] [Optional] Guid* pclsid, [In] [Optional] IUnknown pUnkOuter, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHCreateDataObject([In] [Optional] ITEMIDLIST* pidlFolder, [In] uint cidl, [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] ITEMIDLIST** apidl, [In] [Optional] IDataObject pdtInner, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT CIDLData_CreateFromIDArray([In] ITEMIDLIST* pidlFolder, [In] uint cidl, [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] ITEMIDLIST** apidl, [Out] IDataObject* ppdtobj);
HRESULT SHCreateStdEnumFmtEtc([In] uint cfmt, [Const] [NativeArrayInfo(CountParamIndex = 0)] [In] FORMATETC* afmt, [Out] IEnumFORMATETC* ppenumFormatEtc);
HRESULT SHDoDragDrop([In] [Optional] HWND hwnd, [In] IDataObject pdata, [In] [Optional] IDropSource pdsrc, [In] DROPEFFECT dwEffect, [Out] DROPEFFECT* pdwEffect);
BOOL DAD_SetDragImage([In] HIMAGELIST him, [In] [Out] POINT* pptOffset);
BOOL DAD_DragEnterEx([In] HWND hwndTarget, [Const] [In] POINT ptStart);
BOOL DAD_DragEnterEx2([In] HWND hwndTarget, [Const] [In] POINT ptStart, [In] [Optional] IDataObject pdtObject);
BOOL DAD_ShowDragImage([In] BOOL fShow);
BOOL DAD_DragMove([In] POINT pt);
BOOL DAD_DragLeave();
BOOL DAD_AutoScroll([In] HWND hwnd, [In] [Out] AUTO_SCROLL_DATA* pad, [Const] [In] POINT* pptNow);
BOOL ReadCabinetState([MemorySize(BytesParamIndex = 1)] [Out] CABINETSTATE* pcs, [In] int cLength);
BOOL WriteCabinetState([In] CABINETSTATE* pcs);
BOOL PathMakeUniqueName([NativeArrayInfo(CountParamIndex = 1)] [Out] PWSTR pszUniqueName, [In] uint cchMax, [Const] [In] PWSTR pszTemplate, [Const] [In] [Optional] PWSTR pszLongPlate, [Const] [In] [Optional] PWSTR pszDir);
BOOL PathIsExe([Const] [In] PWSTR pszPath);
PCS_RET PathCleanupSpec([Const] [In] [Optional] PWSTR pszDir, [In] [Out] PWSTR pszSpec);
int PathResolve([NativeArrayInfo(CountConst = 260)] [In] [Out] PWSTR pszPath, [In] [Optional] ushort** dirs, [In] PRF_FLAGS fFlags);
BOOL GetFileNameFromBrowse([In] [Optional] HWND hwnd, [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] PWSTR pszFilePath, [In] uint cchFilePath, [Const] [In] [Optional] PWSTR pszWorkingDir, [Const] [In] PWSTR pszDefExt, [Const] [In] [Optional] PWSTR pszFilters, [Const] [In] [Optional] PWSTR pszTitle);
int DriveType([In] int iDrive);
int RealDriveType([In] int iDrive, [In] BOOL fOKToHitNet);
int IsNetDrive([In] int iDrive);
uint Shell_MergeMenus([In] HMENU hmDst, [In] HMENU hmSrc, [In] uint uInsert, [In] uint uIDAdjust, [In] uint uIDAdjustMax, [In] MM_FLAGS uFlags);
BOOL SHObjectProperties([In] [Optional] HWND hwnd, [In] SHOP_TYPE shopObjectType, [Const] [In] PWSTR pszObjectName, [Const] [In] [Optional] PWSTR pszPropertyPage);
uint SHFormatDrive([In] HWND hwnd, [In] uint drive, [In] SHFMT_ID fmtID, [In] SHFMT_OPT options);
void SHDestroyPropSheetExtArray([In] HPSXA hpsxa);
uint SHAddFromPropSheetExtArray([In] HPSXA hpsxa, [In] LPFNSVADDPROPSHEETPAGE lpfnAddPage, [In] LPARAM lParam);
uint SHReplaceFromPropSheetExtArray([In] HPSXA hpsxa, [In] uint uPageID, [In] LPFNSVADDPROPSHEETPAGE lpfnReplaceWith, [In] LPARAM lParam);
IStream OpenRegStream([In] HKEY hkey, [Const] [In] [Optional] PWSTR pszSubkey, [Const] [In] [Optional] PWSTR pszValue, [In] uint grfMode);
BOOL SHFindFiles([In] [Optional] ITEMIDLIST* pidlFolder, [In] [Optional] ITEMIDLIST* pidlSaveFile);
void PathGetShortPath([NativeArrayInfo(CountConst = 260)] [In] [Out] PWSTR pszLongPath);
BOOL PathYetAnotherMakeUniqueName([NativeArrayInfo(CountConst = 260)] [Out] PWSTR pszUniqueName, [Const] [In] PWSTR pszPath, [Const] [In] [Optional] PWSTR pszShort, [Const] [In] [Optional] PWSTR pszFileSpec);
BOOL Win32DeleteFile([Const] [In] PWSTR pszPath);
uint SHRestricted([In] RESTRICTIONS rest);
BOOL SignalFileOpen([In] ITEMIDLIST* pidl);
HRESULT AssocGetDetailsOfPropKey([In] IShellFolder psf, [In] ITEMIDLIST* pidl, [Const] [In] PROPERTYKEY* pkey, [Out] VARIANT* pv, [Out] [Optional] BOOL* pfFoundPropKey);
HRESULT SHStartNetConnectionDialogW([In] [Optional] HWND hwnd, [Const] [In] [Optional] PWSTR pszRemoteName, [In] uint dwType);
HRESULT SHDefExtractIconA([Const] [In] PSTR pszIconFile, [In] int iIndex, [In] uint uFlags, [Out] [Optional] HICON* phiconLarge, [Out] [Optional] HICON* phiconSmall, [In] uint nIconSize);
HRESULT SHDefExtractIconW([Const] [In] PWSTR pszIconFile, [In] int iIndex, [In] uint uFlags, [Out] [Optional] HICON* phiconLarge, [Out] [Optional] HICON* phiconSmall, [In] uint nIconSize);
HRESULT SHOpenWithDialog([In] [Optional] HWND hwndParent, [Const] [In] OPENASINFO* poainfo);
BOOL Shell_GetImageLists([Out] [Optional] HIMAGELIST* phiml, [Out] [Optional] HIMAGELIST* phimlSmall);
int Shell_GetCachedImageIndex([Const] [In] PWSTR pwszIconPath, [In] int iIconIndex, [In] uint uIconFlags);
int Shell_GetCachedImageIndexA([Const] [In] PSTR pszIconPath, [In] int iIconIndex, [In] uint uIconFlags);
int Shell_GetCachedImageIndexW([Const] [In] PWSTR pszIconPath, [In] int iIconIndex, [In] uint uIconFlags);
BOOL SHValidateUNC([In] [Optional] HWND hwndOwner, [In] [Out] PWSTR pszFile, [In] VALIDATEUNC_OPTION fConnect);
void SHSetInstanceExplorer([In] [Optional] IUnknown punk);
BOOL IsUserAnAdmin();
LRESULT SHShellFolderView_Message([In] HWND hwndMain, [In] uint uMsg, [In] LPARAM lParam);
HRESULT SHCreateShellFolderView([Const] [In] SFV_CREATE* pcsfv, [Out] IShellView* ppsv);
HRESULT CDefFolderMenu_Create2([In] [Optional] ITEMIDLIST* pidlFolder, [In] [Optional] HWND hwnd, [In] uint cidl, [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] ITEMIDLIST** apidl, [In] [Optional] IShellFolder psf, [In] [Optional] LPFNDFMCALLBACK pfn, [In] uint nKeys, [Const] [NativeArrayInfo(CountParamIndex = 6)] [In] [Optional] HKEY* ahkeys, [Out] IContextMenu* ppcm);
HRESULT SHCreateDefaultContextMenu([Const] [In] DEFCONTEXTMENU* pdcm, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
IContextMenu SHFind_InitMenuPopup([In] HMENU hmenu, [In] [Optional] HWND hwndOwner, [In] uint idCmdFirst, [In] uint idCmdLast);
HRESULT SHCreateShellFolderViewEx([In] CSFV* pcsfv, [Out] IShellView* ppsv);
void SHGetSetSettings([In] [Out] [Optional] SHELLSTATEA* lpss, [In] SSF_MASK dwMask, [In] BOOL bSet);
void SHGetSettings([Out] SHELLFLAGSTATE* psfs, [In] uint dwMask);
HRESULT SHBindToParent([In] ITEMIDLIST* pidl, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv, [Out] [Optional] ITEMIDLIST** ppidlLast);
HRESULT SHBindToFolderIDListParent([In] [Optional] IShellFolder psfRoot, [In] ITEMIDLIST* pidl, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv, [Out] [Optional] ITEMIDLIST** ppidlLast);
HRESULT SHBindToFolderIDListParentEx([In] [Optional] IShellFolder psfRoot, [In] ITEMIDLIST* pidl, [In] [Optional] IBindCtx ppbc, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv, [Out] [Optional] ITEMIDLIST** ppidlLast);
HRESULT SHBindToObject([In] [Optional] IShellFolder psf, [In] ITEMIDLIST* pidl, [In] [Optional] IBindCtx pbc, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHParseDisplayName([Const] [In] PWSTR pszName, [In] [Optional] IBindCtx pbc, [Out] ITEMIDLIST** ppidl, [In] uint sfgaoIn, [Out] [Optional] uint* psfgaoOut);
HRESULT SHPathPrepareForWriteA([In] [Optional] HWND hwnd, [In] [Optional] IUnknown punkEnableModless, [Const] [In] PSTR pszPath, [In] uint dwFlags);
HRESULT SHPathPrepareForWriteW([In] [Optional] HWND hwnd, [In] [Optional] IUnknown punkEnableModless, [Const] [In] PWSTR pszPath, [In] uint dwFlags);
HRESULT SHCreateFileExtractIconW([Const] [In] PWSTR pszFile, [In] uint dwFileAttributes, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHLimitInputEdit([In] HWND hwndEdit, [In] IShellFolder psf);
HRESULT SHGetAttributesFromDataObject([In] [Optional] IDataObject pdo, [In] uint dwAttributeMask, [Out] [Optional] uint* pdwAttributes, [Out] [Optional] uint* pcItems);
int SHMapPIDLToSystemImageListIndex([In] IShellFolder pshf, [In] ITEMIDLIST* pidl, [Out] [Optional] int* piIndexSel);
HRESULT SHCLSIDFromString([Const] [In] PWSTR psz, [Out] Guid* pclsid);
int PickIconDlg([In] [Optional] HWND hwnd, [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] PWSTR pszIconPath, [In] uint cchIconPath, [In] [Out] [Optional] int* piIconIndex);
HRESULT StgMakeUniqueName([In] IStorage pstgParent, [Const] [In] PWSTR pszFileSpec, [In] uint grfMode, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
void SHChangeNotifyRegisterThread([In] SCNRT_STATUS status);
void PathQualify([In] [Out] PWSTR psz);
BOOL PathIsSlowA([Const] [In] PSTR pszFile, [In] uint dwAttr);
BOOL PathIsSlowW([Const] [In] PWSTR pszFile, [In] uint dwAttr);
HPSXA SHCreatePropSheetExtArray([In] HKEY hKey, [Const] [In] [Optional] PWSTR pszSubKey, [In] uint max_iface);
BOOL SHOpenPropSheetW([Const] [In] [Optional] PWSTR pszCaption, [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] HKEY* ahkeys, [In] uint ckeys, [Const] [In] [Optional] Guid* pclsidDefault, [In] IDataObject pdtobj, [In] [Optional] IShellBrowser psb, [Const] [In] [Optional] PWSTR pStartPage);
HRESULT SHMultiFileProperties([In] IDataObject pdtobj, [In] uint dwFlags);
HRESULT SHCreateQueryCancelAutoPlayMoniker([Out] IMoniker* ppmoniker);
PWSTR* CommandLineToArgvW([Const] [In] PWSTR lpCmdLine, [Out] int* pNumArgs);
uint DragQueryFileA([In] HDROP hDrop, [In] uint iFile, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR lpszFile, [In] uint cch);
uint DragQueryFileW([In] HDROP hDrop, [In] uint iFile, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR lpszFile, [In] uint cch);
BOOL DragQueryPoint([In] HDROP hDrop, [Out] POINT* ppt);
void DragFinish([In] HDROP hDrop);
void DragAcceptFiles([In] HWND hWnd, [In] BOOL fAccept);
HINSTANCE ShellExecuteA([In] [Optional] HWND hwnd, [Const] [In] [Optional] PSTR lpOperation, [Const] [In] PSTR lpFile, [Const] [In] [Optional] PSTR lpParameters, [Const] [In] [Optional] PSTR lpDirectory, [In] SHOW_WINDOW_CMD nShowCmd);
HINSTANCE ShellExecuteW([In] [Optional] HWND hwnd, [Const] [In] [Optional] PWSTR lpOperation, [Const] [In] PWSTR lpFile, [Const] [In] [Optional] PWSTR lpParameters, [Const] [In] [Optional] PWSTR lpDirectory, [In] SHOW_WINDOW_CMD nShowCmd);
HINSTANCE FindExecutableA([Const] [In] PSTR lpFile, [Const] [In] [Optional] PSTR lpDirectory, [NativeArrayInfo(CountConst = 260)] [Out] PSTR lpResult);
HINSTANCE FindExecutableW([Const] [In] PWSTR lpFile, [Const] [In] [Optional] PWSTR lpDirectory, [NativeArrayInfo(CountConst = 260)] [Out] PWSTR lpResult);
int ShellAboutA([In] [Optional] HWND hWnd, [Const] [In] PSTR szApp, [Const] [In] [Optional] PSTR szOtherStuff, [In] [Optional] HICON hIcon);
int ShellAboutW([In] [Optional] HWND hWnd, [Const] [In] PWSTR szApp, [Const] [In] [Optional] PWSTR szOtherStuff, [In] [Optional] HICON hIcon);
HICON DuplicateIcon([Reserved] [In] HINSTANCE hInst, [In] HICON hIcon);
HICON ExtractAssociatedIconA([Reserved] [In] HINSTANCE hInst, [NativeArrayInfo(CountConst = 128)] [In] [Out] PSTR pszIconPath, [In] [Out] ushort* piIcon);
HICON ExtractAssociatedIconW([Reserved] [In] HINSTANCE hInst, [NativeArrayInfo(CountConst = 128)] [In] [Out] PWSTR pszIconPath, [In] [Out] ushort* piIcon);
HICON ExtractAssociatedIconExA([Reserved] [In] HINSTANCE hInst, [NativeArrayInfo(CountConst = 128)] [In] [Out] PSTR pszIconPath, [In] [Out] ushort* piIconIndex, [In] [Out] ushort* piIconId);
HICON ExtractAssociatedIconExW([Reserved] [In] HINSTANCE hInst, [NativeArrayInfo(CountConst = 128)] [In] [Out] PWSTR pszIconPath, [In] [Out] ushort* piIconIndex, [In] [Out] ushort* piIconId);
HICON ExtractIconA([Reserved] [In] HINSTANCE hInst, [Const] [In] PSTR pszExeFileName, [In] uint nIconIndex);
HICON ExtractIconW([Reserved] [In] HINSTANCE hInst, [Const] [In] PWSTR pszExeFileName, [In] uint nIconIndex);
nuint SHAppBarMessage([In] uint dwMessage, [In] [Out] APPBARDATA* pData);
uint DoEnvironmentSubstA([NativeArrayInfo(CountParamIndex = 1)] [In] [Out] PSTR pszSrc, [In] uint cchSrc);
uint DoEnvironmentSubstW([NativeArrayInfo(CountParamIndex = 1)] [In] [Out] PWSTR pszSrc, [In] uint cchSrc);
uint ExtractIconExA([Const] [In] PSTR lpszFile, [In] int nIconIndex, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] HICON* phiconLarge, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] HICON* phiconSmall, [In] uint nIcons);
uint ExtractIconExW([Const] [In] PWSTR lpszFile, [In] int nIconIndex, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] HICON* phiconLarge, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] HICON* phiconSmall, [In] uint nIcons);
int SHFileOperationA([In] [Out] SHFILEOPSTRUCTA* lpFileOp);
int SHFileOperationW([In] [Out] SHFILEOPSTRUCTW* lpFileOp);
void SHFreeNameMappings([In] [Optional] HANDLE hNameMappings);
BOOL ShellExecuteExA([In] [Out] SHELLEXECUTEINFOA* pExecInfo);
BOOL ShellExecuteExW([In] [Out] SHELLEXECUTEINFOW* pExecInfo);
BOOL SHCreateProcessAsUserW([In] [Out] SHCREATEPROCESSINFOW* pscpi);
HRESULT SHEvaluateSystemCommandTemplate([Const] [In] PWSTR pszCmdTemplate, [Out] PWSTR* ppszApplication, [Out] [Optional] PWSTR* ppszCommandLine, [Out] [Optional] PWSTR* ppszParameters);
HRESULT AssocCreateForClasses([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] ASSOCIATIONELEMENT* rgClasses, [In] uint cClasses, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHQueryRecycleBinA([Const] [In] [Optional] PSTR pszRootPath, [In] [Out] SHQUERYRBINFO* pSHQueryRBInfo);
HRESULT SHQueryRecycleBinW([Const] [In] [Optional] PWSTR pszRootPath, [In] [Out] SHQUERYRBINFO* pSHQueryRBInfo);
HRESULT SHEmptyRecycleBinA([In] [Optional] HWND hwnd, [Const] [In] [Optional] PSTR pszRootPath, [In] uint dwFlags);
HRESULT SHEmptyRecycleBinW([In] [Optional] HWND hwnd, [Const] [In] [Optional] PWSTR pszRootPath, [In] uint dwFlags);
HRESULT SHQueryUserNotificationState([Out] QUERY_USER_NOTIFICATION_STATE* pquns);
BOOL Shell_NotifyIconA([In] NOTIFY_ICON_MESSAGE dwMessage, [In] NOTIFYICONDATAA* lpData);
BOOL Shell_NotifyIconW([In] NOTIFY_ICON_MESSAGE dwMessage, [In] NOTIFYICONDATAW* lpData);
HRESULT Shell_NotifyIconGetRect([Const] [In] NOTIFYICONIDENTIFIER* identifier, [Out] RECT* iconLocation);
nuint SHGetFileInfoA([Const] [In] PSTR pszPath, [In] FILE_FLAGS_AND_ATTRIBUTES dwFileAttributes, [MemorySize(BytesParamIndex = 3)] [In] [Out] [Optional] SHFILEINFOA* psfi, [In] uint cbFileInfo, [In] SHGFI_FLAGS uFlags);
nuint SHGetFileInfoW([Const] [In] PWSTR pszPath, [In] FILE_FLAGS_AND_ATTRIBUTES dwFileAttributes, [MemorySize(BytesParamIndex = 3)] [In] [Out] [Optional] SHFILEINFOW* psfi, [In] uint cbFileInfo, [In] SHGFI_FLAGS uFlags);
HRESULT SHGetStockIconInfo([In] SHSTOCKICONID siid, [In] SHGSI_FLAGS uFlags, [In] [Out] SHSTOCKICONINFO* psii);
BOOL SHGetDiskFreeSpaceExA([Const] [In] PSTR pszDirectoryName, [Out] [Optional] ULARGE_INTEGER* pulFreeBytesAvailableToCaller, [Out] [Optional] ULARGE_INTEGER* pulTotalNumberOfBytes, [Out] [Optional] ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
BOOL SHGetDiskFreeSpaceExW([Const] [In] PWSTR pszDirectoryName, [Out] [Optional] ULARGE_INTEGER* pulFreeBytesAvailableToCaller, [Out] [Optional] ULARGE_INTEGER* pulTotalNumberOfBytes, [Out] [Optional] ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
BOOL SHGetNewLinkInfoA([Const] [In] PSTR pszLinkTo, [Const] [In] PSTR pszDir, [NativeArrayInfo(CountConst = 260)] [Out] PSTR pszName, [Out] BOOL* pfMustCopy, [In] uint uFlags);
BOOL SHGetNewLinkInfoW([Const] [In] PWSTR pszLinkTo, [Const] [In] PWSTR pszDir, [NativeArrayInfo(CountConst = 260)] [Out] PWSTR pszName, [Out] BOOL* pfMustCopy, [In] uint uFlags);
BOOL SHInvokePrinterCommandA([In] [Optional] HWND hwnd, [In] uint uAction, [Const] [In] PSTR lpBuf1, [Const] [In] [Optional] PSTR lpBuf2, [In] BOOL fModal);
BOOL SHInvokePrinterCommandW([In] [Optional] HWND hwnd, [In] uint uAction, [Const] [In] PWSTR lpBuf1, [Const] [In] [Optional] PWSTR lpBuf2, [In] BOOL fModal);
HRESULT SHLoadNonloadedIconOverlayIdentifiers();
HRESULT SHIsFileAvailableOffline([Const] [In] PWSTR pwszPath, [Out] [Optional] uint* pdwStatus);
HRESULT SHSetLocalizedName([Const] [In] PWSTR pszPath, [Const] [In] PWSTR pszResModule, [In] int idsRes);
HRESULT SHRemoveLocalizedName([Const] [In] PWSTR pszPath);
HRESULT SHGetLocalizedName([Const] [In] PWSTR pszPath, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszResModule, [In] uint cch, [Out] int* pidsRes);
BOOL IsLFNDriveA([Const] [In] [Optional] PSTR pszPath);
BOOL IsLFNDriveW([Const] [In] [Optional] PWSTR pszPath);
HRESULT SHEnumerateUnreadMailAccountsW([In] [Optional] HKEY hKeyUser, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pszMailAddress, [In] int cchMailAddress);
HRESULT SHGetUnreadMailCountW([In] [Optional] HKEY hKeyUser, [Const] [In] [Optional] PWSTR pszMailAddress, [Out] [Optional] uint* pdwCount, [Out] [Optional] FILETIME* pFileTime, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR pszShellExecuteCommand, [In] int cchShellExecuteCommand);
HRESULT SHSetUnreadMailCountW([Const] [In] PWSTR pszMailAddress, [In] uint dwCount, [Const] [In] PWSTR pszShellExecuteCommand);
BOOL SHTestTokenMembership([In] [Optional] HANDLE hToken, [In] uint ulRID);
HRESULT SHGetImageList([In] int iImageList, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppvObj);
BOOL InitNetworkAddressControl();
HRESULT SHGetDriveMedia([Const] [In] PWSTR pszDrive, [Out] uint* pdwMediaContent);
HRESULT SHGetPropertyStoreFromIDList([In] ITEMIDLIST* pidl, [In] GETPROPERTYSTOREFLAGS flags, [Const] [In] Guid* riid, [Out] void** ppv);
HRESULT SHGetPropertyStoreFromParsingName([Const] [In] PWSTR pszPath, [In] [Optional] IBindCtx pbc, [In] GETPROPERTYSTOREFLAGS flags, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT SHAddDefaultPropertiesByExt([Const] [In] PWSTR pszExt, [In] IPropertyStore pPropStore);
HANDLE PifMgr_OpenProperties([Const] [In] PWSTR pszApp, [Const] [In] [Optional] PWSTR pszPIF, [In] uint hInf, [In] uint flOpt);
int PifMgr_GetProperties([In] [Optional] HANDLE hProps, [Const] [In] [Optional] PSTR pszGroup, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* lpProps, [In] int cbProps, [In] uint flOpt);
int PifMgr_SetProperties([In] [Optional] HANDLE hProps, [Const] [In] [Optional] PSTR pszGroup, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* lpProps, [In] int cbProps, [In] uint flOpt);
HANDLE PifMgr_CloseProperties([In] [Optional] HANDLE hProps, [In] uint flOpt);
HRESULT SHPropStgCreate([In] IPropertySetStorage psstg, [Const] [In] Guid* fmtid, [Const] [In] [Optional] Guid* pclsid, [In] uint grfFlags, [In] uint grfMode, [In] uint dwDisposition, [Out] IPropertyStorage* ppstg, [Out] [Optional] uint* puCodePage);
HRESULT SHPropStgReadMultiple([In] IPropertyStorage pps, [In] uint uCodePage, [In] uint cpspec, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PROPSPEC* rgpspec, [NativeArrayInfo(CountParamIndex = 2)] [Out] PROPVARIANT* rgvar);
HRESULT SHPropStgWriteMultiple([In] IPropertyStorage pps, [In] [Out] [Optional] uint* puCodePage, [In] uint cpspec, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PROPSPEC* rgpspec, [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] PROPVARIANT* rgvar, [In] uint propidNameFirst);
HRESULT SHGetPropertyStoreForWindow([In] HWND hwnd, [Const] [In] Guid* riid, [Out] void** ppv);
