HRESULT WinBioEnumServiceProviders([In] uint Factor, [Out] WINBIO_BSP_SCHEMA** BspSchemaArray, [Out] nuint* BspCount);
HRESULT WinBioEnumBiometricUnits([In] uint Factor, [Out] WINBIO_UNIT_SCHEMA** UnitSchemaArray, [Out] nuint* UnitCount);
HRESULT WinBioEnumDatabases([In] uint Factor, [Out] WINBIO_STORAGE_SCHEMA** StorageSchemaArray, [Out] nuint* StorageCount);
HRESULT WinBioAsyncOpenFramework([In] WINBIO_ASYNC_NOTIFICATION_METHOD NotificationMethod, [In] [Optional] HWND TargetWindow, [In] [Optional] uint MessageCode, [In] [Optional] PWINBIO_ASYNC_COMPLETION_CALLBACK CallbackRoutine, [In] [Optional] void* UserData, [In] BOOL AsynchronousOpen, [Out] [Optional] uint* FrameworkHandle);
HRESULT WinBioCloseFramework([In] uint FrameworkHandle);
HRESULT WinBioAsyncEnumServiceProviders([In] uint FrameworkHandle, [In] uint Factor);
HRESULT WinBioAsyncEnumBiometricUnits([In] uint FrameworkHandle, [In] uint Factor);
HRESULT WinBioAsyncEnumDatabases([In] uint FrameworkHandle, [In] uint Factor);
HRESULT WinBioAsyncMonitorFrameworkChanges([In] uint FrameworkHandle, [In] uint ChangeTypes);
HRESULT WinBioOpenSession([In] uint Factor, [In] WINBIO_POOL PoolType, [In] uint Flags, [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] uint* UnitArray, [In] [Optional] nuint UnitCount, [In] [Optional] Guid* DatabaseId, [Out] uint* SessionHandle);
HRESULT WinBioAsyncOpenSession([In] uint Factor, [In] WINBIO_POOL PoolType, [In] uint Flags, [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] uint* UnitArray, [In] [Optional] nuint UnitCount, [In] [Optional] Guid* DatabaseId, [In] WINBIO_ASYNC_NOTIFICATION_METHOD NotificationMethod, [In] [Optional] HWND TargetWindow, [In] [Optional] uint MessageCode, [In] [Optional] PWINBIO_ASYNC_COMPLETION_CALLBACK CallbackRoutine, [In] [Optional] void* UserData, [In] BOOL AsynchronousOpen, [Out] [Optional] uint* SessionHandle);
HRESULT WinBioCloseSession([In] uint SessionHandle);
HRESULT WinBioVerify([In] uint SessionHandle, [In] WINBIO_IDENTITY* Identity, [In] byte SubFactor, [Out] [Optional] uint* UnitId, [Out] [Optional] byte* Match, [Out] [Optional] uint* RejectDetail);
HRESULT WinBioVerifyWithCallback([In] uint SessionHandle, [In] WINBIO_IDENTITY* Identity, [In] byte SubFactor, [In] PWINBIO_VERIFY_CALLBACK VerifyCallback, [In] [Optional] void* VerifyCallbackContext);
HRESULT WinBioIdentify([In] uint SessionHandle, [Out] [Optional] uint* UnitId, [Out] [Optional] WINBIO_IDENTITY* Identity, [Out] [Optional] byte* SubFactor, [Out] [Optional] uint* RejectDetail);
HRESULT WinBioIdentifyWithCallback([In] uint SessionHandle, [In] PWINBIO_IDENTIFY_CALLBACK IdentifyCallback, [In] [Optional] void* IdentifyCallbackContext);
HRESULT WinBioWait([In] uint SessionHandle);
HRESULT WinBioCancel([In] uint SessionHandle);
HRESULT WinBioLocateSensor([In] uint SessionHandle, [Out] [Optional] uint* UnitId);
HRESULT WinBioLocateSensorWithCallback([In] uint SessionHandle, [In] PWINBIO_LOCATE_SENSOR_CALLBACK LocateCallback, [In] [Optional] void* LocateCallbackContext);
HRESULT WinBioEnrollBegin([In] uint SessionHandle, [In] byte SubFactor, [In] uint UnitId);
HRESULT WinBioEnrollSelect([In] uint SessionHandle, [In] ulong SelectorValue);
HRESULT WinBioEnrollCapture([In] uint SessionHandle, [Out] [Optional] uint* RejectDetail);
HRESULT WinBioEnrollCaptureWithCallback([In] uint SessionHandle, [In] PWINBIO_ENROLL_CAPTURE_CALLBACK EnrollCallback, [In] [Optional] void* EnrollCallbackContext);
HRESULT WinBioEnrollCommit([In] uint SessionHandle, [Out] [Optional] WINBIO_IDENTITY* Identity, [Out] [Optional] byte* IsNewTemplate);
HRESULT WinBioEnrollDiscard([In] uint SessionHandle);
HRESULT WinBioEnumEnrollments([In] uint SessionHandle, [In] uint UnitId, [In] WINBIO_IDENTITY* Identity, [Out] [Optional] byte** SubFactorArray, [Out] [Optional] nuint* SubFactorCount);
HRESULT WinBioImproveBegin([In] uint SessionHandle, [In] uint UnitId);
HRESULT WinBioImproveEnd([In] uint SessionHandle);
HRESULT WinBioRegisterEventMonitor([In] uint SessionHandle, [In] uint EventMask, [In] PWINBIO_EVENT_CALLBACK EventCallback, [In] [Optional] void* EventCallbackContext);
HRESULT WinBioUnregisterEventMonitor([In] uint SessionHandle);
HRESULT WinBioMonitorPresence([In] uint SessionHandle, [In] uint UnitId);
HRESULT WinBioCaptureSample([In] uint SessionHandle, [In] byte Purpose, [In] byte Flags, [Out] [Optional] uint* UnitId, [Out] [Optional] WINBIO_BIR** Sample, [Out] [Optional] nuint* SampleSize, [Out] [Optional] uint* RejectDetail);
HRESULT WinBioCaptureSampleWithCallback([In] uint SessionHandle, [In] byte Purpose, [In] byte Flags, [In] PWINBIO_CAPTURE_CALLBACK CaptureCallback, [In] [Optional] void* CaptureCallbackContext);
HRESULT WinBioDeleteTemplate([In] uint SessionHandle, [In] uint UnitId, [In] WINBIO_IDENTITY* Identity, [In] byte SubFactor);
HRESULT WinBioLockUnit([In] uint SessionHandle, [In] uint UnitId);
HRESULT WinBioUnlockUnit([In] uint SessionHandle, [In] uint UnitId);
HRESULT WinBioControlUnit([In] uint SessionHandle, [In] uint UnitId, [In] WINBIO_COMPONENT Component, [In] uint ControlCode, [MemorySize(BytesParamIndex = 5)] [In] byte* SendBuffer, [In] nuint SendBufferSize, [MemorySize(BytesParamIndex = 7)] [Out] byte* ReceiveBuffer, [In] nuint ReceiveBufferSize, [In] [Out] nuint* ReceiveDataSize, [Out] [Optional] uint* OperationStatus);
HRESULT WinBioControlUnitPrivileged([In] uint SessionHandle, [In] uint UnitId, [In] WINBIO_COMPONENT Component, [In] uint ControlCode, [MemorySize(BytesParamIndex = 5)] [In] byte* SendBuffer, [In] nuint SendBufferSize, [MemorySize(BytesParamIndex = 7)] [Out] byte* ReceiveBuffer, [In] nuint ReceiveBufferSize, [In] [Out] nuint* ReceiveDataSize, [Out] [Optional] uint* OperationStatus);
HRESULT WinBioGetProperty([In] uint SessionHandle, [In] uint PropertyType, [In] uint PropertyId, [In] [Optional] uint UnitId, [In] [Optional] WINBIO_IDENTITY* Identity, [In] [Optional] byte SubFactor, [Out] [Optional] void** PropertyBuffer, [Out] [Optional] nuint* PropertyBufferSize);
HRESULT WinBioSetProperty([In] uint SessionHandle, [In] uint PropertyType, [In] uint PropertyId, [In] [Optional] uint UnitId, [In] [Optional] WINBIO_IDENTITY* Identity, [In] [Optional] byte SubFactor, [MemorySize(BytesParamIndex = 7)] [In] void* PropertyBuffer, [In] nuint PropertyBufferSize);
HRESULT WinBioFree([In] void* Address);
HRESULT WinBioSetCredential([In] WINBIO_CREDENTIAL_TYPE Type, [MemorySize(BytesParamIndex = 2)] [In] byte* Credential, [In] nuint CredentialSize, [In] WINBIO_CREDENTIAL_FORMAT Format);
HRESULT WinBioRemoveCredential([In] WINBIO_IDENTITY Identity, [In] WINBIO_CREDENTIAL_TYPE Type);
HRESULT WinBioRemoveAllCredentials();
HRESULT WinBioRemoveAllDomainCredentials();
HRESULT WinBioGetCredentialState([In] WINBIO_IDENTITY Identity, [In] WINBIO_CREDENTIAL_TYPE Type, [Out] WINBIO_CREDENTIAL_STATE* CredentialState);
HRESULT WinBioLogonIdentifiedUser([In] uint SessionHandle);
HRESULT WinBioGetEnrolledFactors([In] WINBIO_IDENTITY* AccountOwner, [Out] uint* EnrolledFactors);
void WinBioGetEnabledSetting([Out] byte* Value, [Out] WINBIO_SETTING_SOURCE* Source);
void WinBioGetLogonSetting([Out] byte* Value, [Out] WINBIO_SETTING_SOURCE* Source);
void WinBioGetDomainLogonSetting([Out] byte* Value, [Out] WINBIO_SETTING_SOURCE* Source);
HRESULT WinBioAcquireFocus();
HRESULT WinBioReleaseFocus();
