HKL ImmInstallIMEA([Const] [In] PSTR lpszIMEFileName, [Const] [In] PSTR lpszLayoutText);
HKL ImmInstallIMEW([Const] [In] PWSTR lpszIMEFileName, [Const] [In] PWSTR lpszLayoutText);
HWND ImmGetDefaultIMEWnd([In] HWND param0);
uint ImmGetDescriptionA([In] HKL param0, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpszDescription, [In] uint uBufLen);
uint ImmGetDescriptionW([In] HKL param0, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpszDescription, [In] uint uBufLen);
uint ImmGetIMEFileNameA([In] HKL param0, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpszFileName, [In] uint uBufLen);
uint ImmGetIMEFileNameW([In] HKL param0, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpszFileName, [In] uint uBufLen);
uint ImmGetProperty([In] HKL param0, [In] uint param1);
BOOL ImmIsIME([In] HKL param0);
BOOL ImmSimulateHotKey([In] HWND param0, [In] IME_HOTKEY_IDENTIFIER param1);
HIMC ImmCreateContext();
BOOL ImmDestroyContext([In] HIMC param0);
HIMC ImmGetContext([In] HWND param0);
BOOL ImmReleaseContext([In] HWND param0, [In] HIMC param1);
HIMC ImmAssociateContext([In] HWND param0, [In] HIMC param1);
BOOL ImmAssociateContextEx([In] HWND param0, [In] HIMC param1, [In] uint param2);
int ImmGetCompositionStringA([In] HIMC param0, [In] IME_COMPOSITION_STRING param1, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* lpBuf, [In] uint dwBufLen);
int ImmGetCompositionStringW([In] HIMC param0, [In] IME_COMPOSITION_STRING param1, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* lpBuf, [In] uint dwBufLen);
BOOL ImmSetCompositionStringA([In] HIMC param0, [In] SET_COMPOSITION_STRING_TYPE dwIndex, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* lpComp, [In] uint dwCompLen, [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* lpRead, [In] uint dwReadLen);
BOOL ImmSetCompositionStringW([In] HIMC param0, [In] SET_COMPOSITION_STRING_TYPE dwIndex, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* lpComp, [In] uint dwCompLen, [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* lpRead, [In] uint dwReadLen);
uint ImmGetCandidateListCountA([In] HIMC param0, [Out] uint* lpdwListCount);
uint ImmGetCandidateListCountW([In] HIMC param0, [Out] uint* lpdwListCount);
uint ImmGetCandidateListA([In] HIMC param0, [In] uint deIndex, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] CANDIDATELIST* lpCandList, [In] uint dwBufLen);
uint ImmGetCandidateListW([In] HIMC param0, [In] uint deIndex, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] CANDIDATELIST* lpCandList, [In] uint dwBufLen);
uint ImmGetGuideLineA([In] HIMC param0, [In] GET_GUIDE_LINE_TYPE dwIndex, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] PSTR lpBuf, [In] uint dwBufLen);
uint ImmGetGuideLineW([In] HIMC param0, [In] GET_GUIDE_LINE_TYPE dwIndex, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] PWSTR lpBuf, [In] uint dwBufLen);
BOOL ImmGetConversionStatus([In] HIMC param0, [Out] [Optional] IME_CONVERSION_MODE* lpfdwConversion, [Out] [Optional] IME_SENTENCE_MODE* lpfdwSentence);
BOOL ImmSetConversionStatus([In] HIMC param0, [In] IME_CONVERSION_MODE param1, [In] IME_SENTENCE_MODE param2);
BOOL ImmGetOpenStatus([In] HIMC param0);
BOOL ImmSetOpenStatus([In] HIMC param0, [In] BOOL param1);
BOOL ImmGetCompositionFontA([In] HIMC param0, [Out] LOGFONTA* lplf);
BOOL ImmGetCompositionFontW([In] HIMC param0, [Out] LOGFONTW* lplf);
BOOL ImmSetCompositionFontA([In] HIMC param0, [In] LOGFONTA* lplf);
BOOL ImmSetCompositionFontW([In] HIMC param0, [In] LOGFONTW* lplf);
BOOL ImmConfigureIMEA([In] HKL param0, [In] HWND param1, [In] uint param2, [In] [Out] void* param3);
BOOL ImmConfigureIMEW([In] HKL param0, [In] HWND param1, [In] uint param2, [In] [Out] void* param3);
LRESULT ImmEscapeA([In] HKL param0, [In] HIMC param1, [In] IME_ESCAPE param2, [In] [Out] void* param3);
LRESULT ImmEscapeW([In] HKL param0, [In] HIMC param1, [In] IME_ESCAPE param2, [In] [Out] void* param3);
uint ImmGetConversionListA([In] HKL param0, [In] HIMC param1, [Const] [In] PSTR lpSrc, [MemorySize(BytesParamIndex = 4)] [Out] CANDIDATELIST* lpDst, [In] uint dwBufLen, [In] GET_CONVERSION_LIST_FLAG uFlag);
uint ImmGetConversionListW([In] HKL param0, [In] HIMC param1, [Const] [In] PWSTR lpSrc, [MemorySize(BytesParamIndex = 4)] [Out] CANDIDATELIST* lpDst, [In] uint dwBufLen, [In] GET_CONVERSION_LIST_FLAG uFlag);
BOOL ImmNotifyIME([In] HIMC param0, [In] NOTIFY_IME_ACTION dwAction, [In] NOTIFY_IME_INDEX dwIndex, [In] uint dwValue);
BOOL ImmGetStatusWindowPos([In] HIMC param0, [Out] POINT* lpptPos);
BOOL ImmSetStatusWindowPos([In] HIMC param0, [In] POINT* lpptPos);
BOOL ImmGetCompositionWindow([In] HIMC param0, [Out] COMPOSITIONFORM* lpCompForm);
BOOL ImmSetCompositionWindow([In] HIMC param0, [In] COMPOSITIONFORM* lpCompForm);
BOOL ImmGetCandidateWindow([In] HIMC param0, [In] uint param1, [Out] CANDIDATEFORM* lpCandidate);
BOOL ImmSetCandidateWindow([In] HIMC param0, [In] CANDIDATEFORM* lpCandidate);
BOOL ImmIsUIMessageA([In] HWND param0, [In] uint param1, [In] WPARAM param2, [In] LPARAM param3);
BOOL ImmIsUIMessageW([In] HWND param0, [In] uint param1, [In] WPARAM param2, [In] LPARAM param3);
uint ImmGetVirtualKey([In] HWND param0);
BOOL ImmRegisterWordA([In] HKL param0, [Const] [In] PSTR lpszReading, [In] uint param2, [Const] [In] PSTR lpszRegister);
BOOL ImmRegisterWordW([In] HKL param0, [Const] [In] PWSTR lpszReading, [In] uint param2, [Const] [In] PWSTR lpszRegister);
BOOL ImmUnregisterWordA([In] HKL param0, [Const] [In] PSTR lpszReading, [In] uint param2, [Const] [In] PSTR lpszUnregister);
BOOL ImmUnregisterWordW([In] HKL param0, [Const] [In] PWSTR lpszReading, [In] uint param2, [Const] [In] PWSTR lpszUnregister);
uint ImmGetRegisterWordStyleA([In] HKL param0, [In] uint nItem, [NativeArrayInfo(CountParamIndex = 1)] [Out] STYLEBUFA* lpStyleBuf);
uint ImmGetRegisterWordStyleW([In] HKL param0, [In] uint nItem, [NativeArrayInfo(CountParamIndex = 1)] [Out] STYLEBUFW* lpStyleBuf);
uint ImmEnumRegisterWordA([In] HKL param0, [In] REGISTERWORDENUMPROCA param1, [Const] [In] [Optional] PSTR lpszReading, [In] uint param3, [Const] [In] [Optional] PSTR lpszRegister, [In] [Out] void* param5);
uint ImmEnumRegisterWordW([In] HKL param0, [In] REGISTERWORDENUMPROCW param1, [Const] [In] [Optional] PWSTR lpszReading, [In] uint param3, [Const] [In] [Optional] PWSTR lpszRegister, [In] [Out] void* param5);
BOOL ImmDisableIME([In] uint param0);
BOOL ImmEnumInputContext([In] uint idThread, [In] IMCENUMPROC lpfn, [In] LPARAM lParam);
uint ImmGetImeMenuItemsA([In] HIMC param0, [In] uint param1, [In] uint param2, [Out] [Optional] IMEMENUITEMINFOA* lpImeParentMenu, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] IMEMENUITEMINFOA* lpImeMenu, [In] uint dwSize);
uint ImmGetImeMenuItemsW([In] HIMC param0, [In] uint param1, [In] uint param2, [Out] [Optional] IMEMENUITEMINFOW* lpImeParentMenu, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] IMEMENUITEMINFOW* lpImeMenu, [In] uint dwSize);
BOOL ImmDisableTextFrameService([In] uint idThread);
BOOL ImmDisableLegacyIME();
BOOL ImmGetHotKey([In] uint param0, [Out] uint* lpuModifiers, [Out] uint* lpuVKey, [Out] nint* phKL);
BOOL ImmSetHotKey([In] uint param0, [In] uint param1, [In] uint param2, [In] HKL param3);
BOOL ImmGenerateMessage([In] HIMC param0);
LRESULT ImmRequestMessageA([In] HIMC param0, [In] WPARAM param1, [In] LPARAM param2);
LRESULT ImmRequestMessageW([In] HIMC param0, [In] WPARAM param1, [In] LPARAM param2);
HWND ImmCreateSoftKeyboard([In] uint param0, [In] HWND param1, [In] int param2, [In] int param3);
BOOL ImmDestroySoftKeyboard([In] HWND param0);
BOOL ImmShowSoftKeyboard([In] HWND param0, [In] int param1);
INPUTCONTEXT* ImmLockIMC([In] HIMC param0);
BOOL ImmUnlockIMC([In] HIMC param0);
uint ImmGetIMCLockCount([In] HIMC param0);
HIMCC ImmCreateIMCC([In] uint param0);
HIMCC ImmDestroyIMCC([In] HIMCC param0);
void* ImmLockIMCC([In] HIMCC param0);
BOOL ImmUnlockIMCC([In] HIMCC param0);
uint ImmGetIMCCLockCount([In] HIMCC param0);
HIMCC ImmReSizeIMCC([In] HIMCC param0, [In] uint param1);
uint ImmGetIMCCSize([In] HIMCC param0);
