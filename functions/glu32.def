byte* gluErrorString([In] uint errCode);
PWSTR gluErrorUnicodeStringEXT([In] uint errCode);
byte* gluGetString([In] uint name);
void gluOrtho2D([In] double left, [In] double right, [In] double bottom, [In] double top);
void gluPerspective([In] double fovy, [In] double aspect, [In] double zNear, [In] double zFar);
void gluPickMatrix([In] double x, [In] double y, [In] double width, [In] double height, [In] [Out] int* viewport);
void gluLookAt([In] double eyex, [In] double eyey, [In] double eyez, [In] double centerx, [In] double centery, [In] double centerz, [In] double upx, [In] double upy, [In] double upz);
int gluProject([In] double objx, [In] double objy, [In] double objz, [Const] [In] double* modelMatrix, [Const] [In] double* projMatrix, [Const] [In] int* viewport, [In] [Out] double* winx, [In] [Out] double* winy, [In] [Out] double* winz);
int gluUnProject([In] double winx, [In] double winy, [In] double winz, [Const] [In] double* modelMatrix, [Const] [In] double* projMatrix, [Const] [In] int* viewport, [In] [Out] double* objx, [In] [Out] double* objy, [In] [Out] double* objz);
int gluScaleImage([In] uint format, [In] int widthin, [In] int heightin, [In] uint typein, [Const] [In] void* datain, [In] int widthout, [In] int heightout, [In] uint typeout, [In] [Out] void* dataout);
int gluBuild1DMipmaps([In] uint target, [In] int components, [In] int width, [In] uint format, [In] uint type, [Const] [In] void* data);
int gluBuild2DMipmaps([In] uint target, [In] int components, [In] int width, [In] int height, [In] uint format, [In] uint type, [Const] [In] void* data);
GLUquadric* gluNewQuadric();
void gluDeleteQuadric([In] [Out] GLUquadric* state);
void gluQuadricNormals([In] [Out] GLUquadric* quadObject, [In] uint normals);
void gluQuadricTexture([In] [Out] GLUquadric* quadObject, [In] byte textureCoords);
void gluQuadricOrientation([In] [Out] GLUquadric* quadObject, [In] uint orientation);
void gluQuadricDrawStyle([In] [Out] GLUquadric* quadObject, [In] uint drawStyle);
void gluCylinder([In] [Out] GLUquadric* qobj, [In] double baseRadius, [In] double topRadius, [In] double height, [In] int slices, [In] int stacks);
void gluDisk([In] [Out] GLUquadric* qobj, [In] double innerRadius, [In] double outerRadius, [In] int slices, [In] int loops);
void gluPartialDisk([In] [Out] GLUquadric* qobj, [In] double innerRadius, [In] double outerRadius, [In] int slices, [In] int loops, [In] double startAngle, [In] double sweepAngle);
void gluSphere([In] [Out] GLUquadric* qobj, [In] double radius, [In] int slices, [In] int stacks);
void gluQuadricCallback([In] [Out] GLUquadric* qobj, [In] uint which, [In] nint fn);
GLUtesselator* gluNewTess();
void gluDeleteTess([In] [Out] GLUtesselator* tess);
void gluTessBeginPolygon([In] [Out] GLUtesselator* tess, [In] [Out] void* polygon_data);
void gluTessBeginContour([In] [Out] GLUtesselator* tess);
void gluTessVertex([In] [Out] GLUtesselator* tess, [In] [Out] double* coords, [In] [Out] void* data);
void gluTessEndContour([In] [Out] GLUtesselator* tess);
void gluTessEndPolygon([In] [Out] GLUtesselator* tess);
void gluTessProperty([In] [Out] GLUtesselator* tess, [In] uint which, [In] double value);
void gluTessNormal([In] [Out] GLUtesselator* tess, [In] double x, [In] double y, [In] double z);
void gluTessCallback([In] [Out] GLUtesselator* tess, [In] uint which, [In] nint fn);
void gluGetTessProperty([In] [Out] GLUtesselator* tess, [In] uint which, [In] [Out] double* value);
GLUnurbs* gluNewNurbsRenderer();
void gluDeleteNurbsRenderer([In] [Out] GLUnurbs* nobj);
void gluBeginSurface([In] [Out] GLUnurbs* nobj);
void gluBeginCurve([In] [Out] GLUnurbs* nobj);
void gluEndCurve([In] [Out] GLUnurbs* nobj);
void gluEndSurface([In] [Out] GLUnurbs* nobj);
void gluBeginTrim([In] [Out] GLUnurbs* nobj);
void gluEndTrim([In] [Out] GLUnurbs* nobj);
void gluPwlCurve([In] [Out] GLUnurbs* nobj, [In] int count, [In] [Out] float* array, [In] int stride, [In] uint type);
void gluNurbsCurve([In] [Out] GLUnurbs* nobj, [In] int nknots, [In] [Out] float* knot, [In] int stride, [In] [Out] float* ctlarray, [In] int order, [In] uint type);
void gluNurbsSurface([In] [Out] GLUnurbs* nobj, [In] int sknot_count, [In] [Out] float* sknot, [In] int tknot_count, [In] [Out] float* tknot, [In] int s_stride, [In] int t_stride, [In] [Out] float* ctlarray, [In] int sorder, [In] int torder, [In] uint type);
void gluLoadSamplingMatrices([In] [Out] GLUnurbs* nobj, [Const] [In] float* modelMatrix, [Const] [In] float* projMatrix, [Const] [In] int* viewport);
void gluNurbsProperty([In] [Out] GLUnurbs* nobj, [In] uint property, [In] float value);
void gluGetNurbsProperty([In] [Out] GLUnurbs* nobj, [In] uint property, [In] [Out] float* value);
void gluNurbsCallback([In] [Out] GLUnurbs* nobj, [In] uint which, [In] nint fn);
void gluBeginPolygon([In] [Out] GLUtesselator* tess);
void gluNextContour([In] [Out] GLUtesselator* tess, [In] uint type);
void gluEndPolygon([In] [Out] GLUtesselator* tess);
