HRESULT WHvGetCapability([In] WHV_CAPABILITY_CODE CapabilityCode, [MemorySize(BytesParamIndex = 2)] [Out] void* CapabilityBuffer, [In] uint CapabilityBufferSizeInBytes, [Out] [Optional] uint* WrittenSizeInBytes);
HRESULT WHvCreatePartition([Out] WHV_PARTITION_HANDLE* Partition);
HRESULT WHvSetupPartition([In] WHV_PARTITION_HANDLE Partition);
HRESULT WHvResetPartition([In] WHV_PARTITION_HANDLE Partition);
HRESULT WHvDeletePartition([In] WHV_PARTITION_HANDLE Partition);
HRESULT WHvGetPartitionProperty([In] WHV_PARTITION_HANDLE Partition, [In] WHV_PARTITION_PROPERTY_CODE PropertyCode, [MemorySize(BytesParamIndex = 3)] [Out] void* PropertyBuffer, [In] uint PropertyBufferSizeInBytes, [Out] [Optional] uint* WrittenSizeInBytes);
HRESULT WHvSetPartitionProperty([In] WHV_PARTITION_HANDLE Partition, [In] WHV_PARTITION_PROPERTY_CODE PropertyCode, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* PropertyBuffer, [In] uint PropertyBufferSizeInBytes);
HRESULT WHvSuspendPartitionTime([In] WHV_PARTITION_HANDLE Partition);
HRESULT WHvResumePartitionTime([In] WHV_PARTITION_HANDLE Partition);
HRESULT WHvMapGpaRange([In] WHV_PARTITION_HANDLE Partition, [In] void* SourceAddress, [In] ulong GuestAddress, [In] ulong SizeInBytes, [In] WHV_MAP_GPA_RANGE_FLAGS Flags);
HRESULT WHvMapGpaRange2([In] WHV_PARTITION_HANDLE Partition, [In] HANDLE Process, [In] void* SourceAddress, [In] ulong GuestAddress, [In] ulong SizeInBytes, [In] WHV_MAP_GPA_RANGE_FLAGS Flags);
HRESULT WHvUnmapGpaRange([In] WHV_PARTITION_HANDLE Partition, [In] ulong GuestAddress, [In] ulong SizeInBytes);
HRESULT WHvTranslateGva([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [In] ulong Gva, [In] WHV_TRANSLATE_GVA_FLAGS TranslateFlags, [Out] WHV_TRANSLATE_GVA_RESULT* TranslationResult, [Out] ulong* Gpa);
HRESULT WHvCreateVirtualProcessor([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [In] uint Flags);
HRESULT WHvCreateVirtualProcessor2([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] WHV_VIRTUAL_PROCESSOR_PROPERTY* Properties, [In] uint PropertyCount);
HRESULT WHvDeleteVirtualProcessor([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex);
HRESULT WHvRunVirtualProcessor([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [MemorySize(BytesParamIndex = 3)] [Out] void* ExitContext, [In] uint ExitContextSizeInBytes);
HRESULT WHvCancelRunVirtualProcessor([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [In] uint Flags);
HRESULT WHvGetVirtualProcessorRegisters([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] WHV_REGISTER_NAME* RegisterNames, [In] uint RegisterCount, [NativeArrayInfo(CountParamIndex = 3)] [Out] WHV_REGISTER_VALUE* RegisterValues);
HRESULT WHvSetVirtualProcessorRegisters([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] WHV_REGISTER_NAME* RegisterNames, [In] uint RegisterCount, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] WHV_REGISTER_VALUE* RegisterValues);
HRESULT WHvGetVirtualProcessorInterruptControllerState([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [MemorySize(BytesParamIndex = 3)] [Out] void* State, [In] uint StateSize, [Out] [Optional] uint* WrittenSize);
HRESULT WHvSetVirtualProcessorInterruptControllerState([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* State, [In] uint StateSize);
HRESULT WHvRequestInterrupt([In] WHV_PARTITION_HANDLE Partition, [Const] [In] WHV_INTERRUPT_CONTROL* Interrupt, [In] uint InterruptControlSize);
HRESULT WHvGetVirtualProcessorXsaveState([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [MemorySize(BytesParamIndex = 3)] [Out] void* Buffer, [In] uint BufferSizeInBytes, [Out] uint* BytesWritten);
HRESULT WHvSetVirtualProcessorXsaveState([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* Buffer, [In] uint BufferSizeInBytes);
HRESULT WHvQueryGpaRangeDirtyBitmap([In] WHV_PARTITION_HANDLE Partition, [In] ulong GuestAddress, [In] ulong RangeSizeInBytes, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] ulong* Bitmap, [In] uint BitmapSizeInBytes);
HRESULT WHvGetPartitionCounters([In] WHV_PARTITION_HANDLE Partition, [In] WHV_PARTITION_COUNTER_SET CounterSet, [MemorySize(BytesParamIndex = 3)] [Out] void* Buffer, [In] uint BufferSizeInBytes, [Out] [Optional] uint* BytesWritten);
HRESULT WHvGetVirtualProcessorCounters([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [In] WHV_PROCESSOR_COUNTER_SET CounterSet, [MemorySize(BytesParamIndex = 4)] [Out] void* Buffer, [In] uint BufferSizeInBytes, [Out] [Optional] uint* BytesWritten);
HRESULT WHvGetVirtualProcessorInterruptControllerState2([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [MemorySize(BytesParamIndex = 3)] [Out] void* State, [In] uint StateSize, [Out] [Optional] uint* WrittenSize);
HRESULT WHvSetVirtualProcessorInterruptControllerState2([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* State, [In] uint StateSize);
HRESULT WHvRegisterPartitionDoorbellEvent([In] WHV_PARTITION_HANDLE Partition, [Const] [In] WHV_DOORBELL_MATCH_DATA* MatchData, [In] HANDLE EventHandle);
HRESULT WHvUnregisterPartitionDoorbellEvent([In] WHV_PARTITION_HANDLE Partition, [Const] [In] WHV_DOORBELL_MATCH_DATA* MatchData);
HRESULT WHvAdviseGpaRange([In] WHV_PARTITION_HANDLE Partition, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] WHV_MEMORY_RANGE_ENTRY* GpaRanges, [In] uint GpaRangesCount, [In] WHV_ADVISE_GPA_RANGE_CODE Advice, [Const] [MemorySize(BytesParamIndex = 5)] [In] void* AdviceBuffer, [In] uint AdviceBufferSizeInBytes);
HRESULT WHvReadGpaRange([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [In] ulong GuestAddress, [In] WHV_ACCESS_GPA_CONTROLS Controls, [MemorySize(BytesParamIndex = 5)] [Out] void* Data, [In] uint DataSizeInBytes);
HRESULT WHvWriteGpaRange([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [In] ulong GuestAddress, [In] WHV_ACCESS_GPA_CONTROLS Controls, [Const] [MemorySize(BytesParamIndex = 5)] [In] void* Data, [In] uint DataSizeInBytes);
HRESULT WHvSignalVirtualProcessorSynicEvent([In] WHV_PARTITION_HANDLE Partition, [In] WHV_SYNIC_EVENT_PARAMETERS SynicEvent, [Out] [Optional] BOOL* NewlySignaled);
HRESULT WHvGetVirtualProcessorState([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [In] WHV_VIRTUAL_PROCESSOR_STATE_TYPE StateType, [MemorySize(BytesParamIndex = 4)] [Out] void* Buffer, [In] uint BufferSizeInBytes, [Out] [Optional] uint* BytesWritten);
HRESULT WHvSetVirtualProcessorState([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [In] WHV_VIRTUAL_PROCESSOR_STATE_TYPE StateType, [Const] [MemorySize(BytesParamIndex = 4)] [In] void* Buffer, [In] uint BufferSizeInBytes);
HRESULT WHvAllocateVpciResource([Const] [In] [Optional] Guid* ProviderId, [In] WHV_ALLOCATE_VPCI_RESOURCE_FLAGS Flags, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] void* ResourceDescriptor, [In] uint ResourceDescriptorSizeInBytes, [Out] HANDLE* VpciResource);
HRESULT WHvCreateVpciDevice([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId, [In] HANDLE VpciResource, [In] WHV_CREATE_VPCI_DEVICE_FLAGS Flags, [In] [Optional] HANDLE NotificationEventHandle);
HRESULT WHvDeleteVpciDevice([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId);
HRESULT WHvGetVpciDeviceProperty([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId, [In] WHV_VPCI_DEVICE_PROPERTY_CODE PropertyCode, [MemorySize(BytesParamIndex = 4)] [Out] void* PropertyBuffer, [In] uint PropertyBufferSizeInBytes, [Out] [Optional] uint* WrittenSizeInBytes);
HRESULT WHvGetVpciDeviceNotification([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId, [MemorySize(BytesParamIndex = 3)] [Out] WHV_VPCI_DEVICE_NOTIFICATION* Notification, [In] uint NotificationSizeInBytes);
HRESULT WHvMapVpciDeviceMmioRanges([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId, [Out] uint* MappingCount, [Out] WHV_VPCI_MMIO_MAPPING** Mappings);
HRESULT WHvUnmapVpciDeviceMmioRanges([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId);
HRESULT WHvSetVpciDevicePowerState([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId, [In] DEVICE_POWER_STATE PowerState);
HRESULT WHvReadVpciDeviceRegister([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId, [Const] [In] WHV_VPCI_DEVICE_REGISTER* Register, [Out] void* Data);
HRESULT WHvWriteVpciDeviceRegister([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId, [Const] [In] WHV_VPCI_DEVICE_REGISTER* Register, [Const] [In] void* Data);
HRESULT WHvMapVpciDeviceInterrupt([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId, [In] uint Index, [In] uint MessageCount, [Const] [In] WHV_VPCI_INTERRUPT_TARGET* Target, [Out] ulong* MsiAddress, [Out] uint* MsiData);
HRESULT WHvUnmapVpciDeviceInterrupt([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId, [In] uint Index);
HRESULT WHvRetargetVpciDeviceInterrupt([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId, [In] ulong MsiAddress, [In] uint MsiData, [Const] [In] WHV_VPCI_INTERRUPT_TARGET* Target);
HRESULT WHvRequestVpciDeviceInterrupt([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId, [In] ulong MsiAddress, [In] uint MsiData);
HRESULT WHvGetVpciDeviceInterruptTarget([In] WHV_PARTITION_HANDLE Partition, [In] ulong LogicalDeviceId, [In] uint Index, [In] uint MultiMessageNumber, [MemorySize(BytesParamIndex = 5)] [Out] WHV_VPCI_INTERRUPT_TARGET* Target, [In] uint TargetSizeInBytes, [Out] [Optional] uint* BytesWritten);
HRESULT WHvCreateTrigger([In] WHV_PARTITION_HANDLE Partition, [Const] [In] WHV_TRIGGER_PARAMETERS* Parameters, [Out] void** TriggerHandle, [Out] HANDLE* EventHandle);
HRESULT WHvUpdateTriggerParameters([In] WHV_PARTITION_HANDLE Partition, [Const] [In] WHV_TRIGGER_PARAMETERS* Parameters, [In] void* TriggerHandle);
HRESULT WHvDeleteTrigger([In] WHV_PARTITION_HANDLE Partition, [In] void* TriggerHandle);
HRESULT WHvCreateNotificationPort([In] WHV_PARTITION_HANDLE Partition, [Const] [In] WHV_NOTIFICATION_PORT_PARAMETERS* Parameters, [In] HANDLE EventHandle, [Out] void** PortHandle);
HRESULT WHvSetNotificationPortProperty([In] WHV_PARTITION_HANDLE Partition, [In] void* PortHandle, [In] WHV_NOTIFICATION_PORT_PROPERTY_CODE PropertyCode, [In] ulong PropertyValue);
HRESULT WHvDeleteNotificationPort([In] WHV_PARTITION_HANDLE Partition, [In] void* PortHandle);
HRESULT WHvPostVirtualProcessorSynicMessage([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [In] uint SintIndex, [Const] [MemorySize(BytesParamIndex = 4)] [In] void* Message, [In] uint MessageSizeInBytes);
HRESULT WHvGetVirtualProcessorCpuidOutput([In] WHV_PARTITION_HANDLE Partition, [In] uint VpIndex, [In] uint Eax, [In] uint Ecx, [Out] WHV_CPUID_OUTPUT* CpuidOutput);
HRESULT WHvGetInterruptTargetVpSet([In] WHV_PARTITION_HANDLE Partition, [In] ulong Destination, [In] WHV_INTERRUPT_DESTINATION_MODE DestinationMode, [NativeArrayInfo(CountParamIndex = 4)] [Out] uint* TargetVps, [In] uint VpCount, [Out] uint* TargetVpCount);
HRESULT WHvStartPartitionMigration([In] WHV_PARTITION_HANDLE Partition, [Out] HANDLE* MigrationHandle);
HRESULT WHvCancelPartitionMigration([In] WHV_PARTITION_HANDLE Partition);
HRESULT WHvCompletePartitionMigration([In] WHV_PARTITION_HANDLE Partition);
HRESULT WHvAcceptPartitionMigration([In] HANDLE MigrationHandle, [Out] WHV_PARTITION_HANDLE* Partition);
