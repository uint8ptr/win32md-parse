uint MprAdminConnectionEnumEx([In] nint hRasServer, [In] MPRAPI_OBJECT_HEADER* pObjectHeader, [In] uint dwPreferedMaxLen, [Out] uint* lpdwEntriesRead, [Out] uint* lpdwTotalEntries, [Out] RAS_CONNECTION_EX** ppRasConn, [In] uint* lpdwResumeHandle);
uint MprAdminConnectionGetInfoEx([In] nint hRasServer, [In] HANDLE hRasConnection, [Out] RAS_CONNECTION_EX* pRasConnection);
uint MprAdminServerGetInfoEx([In] nint hMprServer, [Out] MPR_SERVER_EX1* pServerInfo);
uint MprAdminServerSetInfoEx([In] nint hMprServer, [In] MPR_SERVER_SET_CONFIG_EX1* pServerInfo);
uint MprConfigServerGetInfoEx([In] HANDLE hMprConfig, [Out] MPR_SERVER_EX1* pServerInfo);
uint MprConfigServerSetInfoEx([In] HANDLE hMprConfig, [In] MPR_SERVER_SET_CONFIG_EX1* pSetServerConfig);
uint MprAdminUpdateConnection([In] nint hRasServer, [In] HANDLE hRasConnection, [In] RAS_UPDATE_CONNECTION* pRasUpdateConnection);
uint MprAdminIsServiceInitialized([In] PWSTR lpwsServerName, [In] BOOL* fIsServiceInitialized);
uint MprAdminInterfaceSetCustomInfoEx([In] nint hMprServer, [In] HANDLE hInterface, [In] MPR_IF_CUSTOMINFOEX2* pCustomInfo);
uint MprAdminInterfaceGetCustomInfoEx([In] nint hMprServer, [In] HANDLE hInterface, [Out] MPR_IF_CUSTOMINFOEX2* pCustomInfo);
uint MprConfigInterfaceGetCustomInfoEx([In] HANDLE hMprConfig, [In] HANDLE hRouterInterface, [Out] MPR_IF_CUSTOMINFOEX2* pCustomInfo);
uint MprConfigInterfaceSetCustomInfoEx([In] HANDLE hMprConfig, [In] HANDLE hRouterInterface, [In] MPR_IF_CUSTOMINFOEX2* pCustomInfo);
uint MprAdminConnectionEnum([In] nint hRasServer, [In] uint dwLevel, [Out] byte** lplpbBuffer, [In] uint dwPrefMaxLen, [Out] uint* lpdwEntriesRead, [Out] uint* lpdwTotalEntries, [In] [Optional] uint* lpdwResumeHandle);
uint MprAdminPortEnum([In] nint hRasServer, [In] uint dwLevel, [In] HANDLE hRasConnection, [Out] byte** lplpbBuffer, [In] uint dwPrefMaxLen, [Out] uint* lpdwEntriesRead, [Out] uint* lpdwTotalEntries, [In] [Optional] uint* lpdwResumeHandle);
uint MprAdminConnectionGetInfo([In] nint hRasServer, [In] uint dwLevel, [In] HANDLE hRasConnection, [Out] byte** lplpbBuffer);
uint MprAdminPortGetInfo([In] nint hRasServer, [In] uint dwLevel, [In] HANDLE hPort, [Out] byte** lplpbBuffer);
uint MprAdminConnectionClearStats([In] nint hRasServer, [In] HANDLE hRasConnection);
uint MprAdminPortClearStats([In] nint hRasServer, [In] HANDLE hPort);
uint MprAdminPortReset([In] nint hRasServer, [In] HANDLE hPort);
uint MprAdminPortDisconnect([In] nint hRasServer, [In] HANDLE hPort);
uint MprAdminConnectionRemoveQuarantine([In] HANDLE hRasServer, [In] HANDLE hRasConnection, [In] BOOL fIsIpAddress);
uint MprAdminUserGetInfo([Const] [In] PWSTR lpszServer, [Const] [In] PWSTR lpszUser, [In] uint dwLevel, [Out] byte* lpbBuffer);
uint MprAdminUserSetInfo([Const] [In] PWSTR lpszServer, [Const] [In] PWSTR lpszUser, [In] uint dwLevel, [Const] [In] byte* lpbBuffer);
uint MprAdminSendUserMessage([In] nint hMprServer, [In] HANDLE hConnection, [In] PWSTR lpwszMessage);
uint MprAdminGetPDCServer([Const] [In] PWSTR lpszDomain, [Const] [In] PWSTR lpszServer, [Out] PWSTR lpszPDCServer);
BOOL MprAdminIsServiceRunning([In] PWSTR lpwsServerName);
uint MprAdminServerConnect([In] [Optional] PWSTR lpwsServerName, [Out] nint* phMprServer);
void MprAdminServerDisconnect([In] nint hMprServer);
uint MprAdminServerGetCredentials([In] nint hMprServer, [In] uint dwLevel, [In] byte** lplpbBuffer);
uint MprAdminServerSetCredentials([In] nint hMprServer, [In] uint dwLevel, [In] byte* lpbBuffer);
uint MprAdminBufferFree([In] void* pBuffer);
uint MprAdminGetErrorString([In] uint dwError, [Out] PWSTR* lplpwsErrorString);
uint MprAdminServerGetInfo([In] nint hMprServer, [In] uint dwLevel, [Out] byte** lplpbBuffer);
uint MprAdminServerSetInfo([In] nint hMprServer, [In] uint dwLevel, [In] byte* lpbBuffer);
uint MprAdminEstablishDomainRasServer([In] PWSTR pszDomain, [In] PWSTR pszMachine, [In] BOOL bEnable);
uint MprAdminIsDomainRasServer([In] PWSTR pszDomain, [In] PWSTR pszMachine, [Out] BOOL* pbIsRasServer);
uint MprAdminTransportCreate([In] nint hMprServer, [In] uint dwTransportId, [In] [Optional] PWSTR lpwsTransportName, [In] byte* pGlobalInfo, [In] uint dwGlobalInfoSize, [In] [Optional] byte* pClientInterfaceInfo, [In] [Optional] uint dwClientInterfaceInfoSize, [In] PWSTR lpwsDLLPath);
uint MprAdminTransportSetInfo([In] nint hMprServer, [In] uint dwTransportId, [In] [Optional] byte* pGlobalInfo, [In] uint dwGlobalInfoSize, [In] [Optional] byte* pClientInterfaceInfo, [In] uint dwClientInterfaceInfoSize);
uint MprAdminTransportGetInfo([In] nint hMprServer, [In] uint dwTransportId, [Out] [Optional] byte** ppGlobalInfo, [Out] [Optional] uint* lpdwGlobalInfoSize, [Out] [Optional] byte** ppClientInterfaceInfo, [Out] [Optional] uint* lpdwClientInterfaceInfoSize);
uint MprAdminDeviceEnum([In] nint hMprServer, [In] uint dwLevel, [Out] byte** lplpbBuffer, [Out] uint* lpdwTotalEntries);
uint MprAdminInterfaceGetHandle([In] nint hMprServer, [In] PWSTR lpwsInterfaceName, [Out] HANDLE* phInterface, [In] BOOL fIncludeClientInterfaces);
uint MprAdminInterfaceCreate([In] nint hMprServer, [In] uint dwLevel, [In] byte* lpbBuffer, [Out] HANDLE* phInterface);
uint MprAdminInterfaceGetInfo([In] nint hMprServer, [In] HANDLE hInterface, [In] uint dwLevel, [In] byte** lplpbBuffer);
uint MprAdminInterfaceSetInfo([In] nint hMprServer, [In] HANDLE hInterface, [In] uint dwLevel, [In] byte* lpbBuffer);
uint MprAdminInterfaceDelete([In] nint hMprServer, [In] HANDLE hInterface);
uint MprAdminInterfaceDeviceGetInfo([In] nint hMprServer, [In] HANDLE hInterface, [In] uint dwIndex, [In] uint dwLevel, [Out] byte** lplpBuffer);
uint MprAdminInterfaceDeviceSetInfo([In] nint hMprServer, [In] HANDLE hInterface, [In] uint dwIndex, [In] uint dwLevel, [In] byte* lpbBuffer);
uint MprAdminInterfaceTransportRemove([In] nint hMprServer, [In] HANDLE hInterface, [In] uint dwTransportId);
uint MprAdminInterfaceTransportAdd([In] nint hMprServer, [In] HANDLE hInterface, [In] uint dwTransportId, [In] byte* pInterfaceInfo, [In] uint dwInterfaceInfoSize);
uint MprAdminInterfaceTransportGetInfo([In] nint hMprServer, [In] HANDLE hInterface, [In] uint dwTransportId, [Out] byte** ppInterfaceInfo, [Out] [Optional] uint* lpdwInterfaceInfoSize);
uint MprAdminInterfaceTransportSetInfo([In] nint hMprServer, [In] HANDLE hInterface, [In] uint dwTransportId, [In] byte* pInterfaceInfo, [In] uint dwInterfaceInfoSize);
uint MprAdminInterfaceEnum([In] nint hMprServer, [In] uint dwLevel, [Out] byte** lplpbBuffer, [In] uint dwPrefMaxLen, [Out] uint* lpdwEntriesRead, [Out] uint* lpdwTotalEntries, [In] [Optional] uint* lpdwResumeHandle);
uint MprAdminInterfaceSetCredentials([In] [Optional] PWSTR lpwsServer, [In] PWSTR lpwsInterfaceName, [In] [Optional] PWSTR lpwsUserName, [In] [Optional] PWSTR lpwsDomainName, [In] [Optional] PWSTR lpwsPassword);
uint MprAdminInterfaceGetCredentials([In] [Optional] PWSTR lpwsServer, [In] PWSTR lpwsInterfaceName, [Out] [Optional] PWSTR lpwsUserName, [Out] [Optional] PWSTR lpwsPassword, [Out] [Optional] PWSTR lpwsDomainName);
uint MprAdminInterfaceSetCredentialsEx([In] nint hMprServer, [In] HANDLE hInterface, [In] uint dwLevel, [In] byte* lpbBuffer);
uint MprAdminInterfaceGetCredentialsEx([In] nint hMprServer, [In] HANDLE hInterface, [In] uint dwLevel, [Out] byte** lplpbBuffer);
uint MprAdminInterfaceConnect([In] nint hMprServer, [In] HANDLE hInterface, [In] HANDLE hEvent, [In] BOOL fSynchronous);
uint MprAdminInterfaceDisconnect([In] nint hMprServer, [In] HANDLE hInterface);
uint MprAdminInterfaceUpdateRoutes([In] nint hMprServer, [In] HANDLE hInterface, [In] uint dwProtocolId, [In] HANDLE hEvent);
uint MprAdminInterfaceQueryUpdateResult([In] nint hMprServer, [In] HANDLE hInterface, [In] uint dwProtocolId, [Out] uint* lpdwUpdateResult);
uint MprAdminInterfaceUpdatePhonebookInfo([In] nint hMprServer, [In] HANDLE hInterface);
uint MprAdminRegisterConnectionNotification([In] nint hMprServer, [In] HANDLE hEventNotification);
uint MprAdminDeregisterConnectionNotification([In] nint hMprServer, [In] HANDLE hEventNotification);
uint MprAdminMIBServerConnect([In] [Optional] PWSTR lpwsServerName, [Out] nint* phMibServer);
void MprAdminMIBServerDisconnect([In] nint hMibServer);
uint MprAdminMIBEntryCreate([In] nint hMibServer, [In] uint dwPid, [In] uint dwRoutingPid, [In] void* lpEntry, [In] uint dwEntrySize);
uint MprAdminMIBEntryDelete([In] nint hMibServer, [In] uint dwProtocolId, [In] uint dwRoutingPid, [In] void* lpEntry, [In] uint dwEntrySize);
uint MprAdminMIBEntrySet([In] nint hMibServer, [In] uint dwProtocolId, [In] uint dwRoutingPid, [In] void* lpEntry, [In] uint dwEntrySize);
uint MprAdminMIBEntryGet([In] nint hMibServer, [In] uint dwProtocolId, [In] uint dwRoutingPid, [In] void* lpInEntry, [In] uint dwInEntrySize, [Out] void** lplpOutEntry, [Out] uint* lpOutEntrySize);
uint MprAdminMIBEntryGetFirst([In] nint hMibServer, [In] uint dwProtocolId, [In] uint dwRoutingPid, [In] void* lpInEntry, [In] uint dwInEntrySize, [Out] void** lplpOutEntry, [Out] uint* lpOutEntrySize);
uint MprAdminMIBEntryGetNext([In] nint hMibServer, [In] uint dwProtocolId, [In] uint dwRoutingPid, [In] void* lpInEntry, [In] uint dwInEntrySize, [Out] void** lplpOutEntry, [Out] uint* lpOutEntrySize);
uint MprAdminMIBBufferFree([In] void* pBuffer);
uint MprConfigServerInstall([In] uint dwLevel, [In] void* pBuffer);
uint MprConfigServerConnect([In] [Optional] PWSTR lpwsServerName, [Out] HANDLE* phMprConfig);
void MprConfigServerDisconnect([In] HANDLE hMprConfig);
uint MprConfigServerRefresh([In] HANDLE hMprConfig);
uint MprConfigBufferFree([In] void* pBuffer);
uint MprConfigServerGetInfo([In] HANDLE hMprConfig, [In] uint dwLevel, [Out] byte** lplpbBuffer);
uint MprConfigServerSetInfo([In] nint hMprServer, [In] uint dwLevel, [In] byte* lpbBuffer);
uint MprConfigServerBackup([In] HANDLE hMprConfig, [In] PWSTR lpwsPath);
uint MprConfigServerRestore([In] HANDLE hMprConfig, [In] PWSTR lpwsPath);
uint MprConfigTransportCreate([In] HANDLE hMprConfig, [In] uint dwTransportId, [In] [Optional] PWSTR lpwsTransportName, [MemorySize(BytesParamIndex = 4)] [In] byte* pGlobalInfo, [In] uint dwGlobalInfoSize, [MemorySize(BytesParamIndex = 6)] [In] [Optional] byte* pClientInterfaceInfo, [In] [Optional] uint dwClientInterfaceInfoSize, [In] [Optional] PWSTR lpwsDLLPath, [Out] HANDLE* phRouterTransport);
uint MprConfigTransportDelete([In] HANDLE hMprConfig, [In] HANDLE hRouterTransport);
uint MprConfigTransportGetHandle([In] HANDLE hMprConfig, [In] uint dwTransportId, [Out] HANDLE* phRouterTransport);
uint MprConfigTransportSetInfo([In] HANDLE hMprConfig, [In] HANDLE hRouterTransport, [MemorySize(BytesParamIndex = 3)] [In] [Optional] byte* pGlobalInfo, [In] [Optional] uint dwGlobalInfoSize, [MemorySize(BytesParamIndex = 5)] [In] [Optional] byte* pClientInterfaceInfo, [In] [Optional] uint dwClientInterfaceInfoSize, [In] [Optional] PWSTR lpwsDLLPath);
uint MprConfigTransportGetInfo([In] HANDLE hMprConfig, [In] HANDLE hRouterTransport, [In] [Out] [Optional] byte** ppGlobalInfo, [Out] [Optional] uint* lpdwGlobalInfoSize, [In] [Out] [Optional] byte** ppClientInterfaceInfo, [Out] [Optional] uint* lpdwClientInterfaceInfoSize, [In] [Out] [Optional] PWSTR* lplpwsDLLPath);
uint MprConfigTransportEnum([In] HANDLE hMprConfig, [In] uint dwLevel, [Out] [Optional] byte** lplpBuffer, [In] uint dwPrefMaxLen, [Out] uint* lpdwEntriesRead, [Out] uint* lpdwTotalEntries, [In] [Out] [Optional] uint* lpdwResumeHandle);
uint MprConfigInterfaceCreate([In] HANDLE hMprConfig, [In] uint dwLevel, [In] byte* lpbBuffer, [Out] HANDLE* phRouterInterface);
uint MprConfigInterfaceDelete([In] HANDLE hMprConfig, [In] HANDLE hRouterInterface);
uint MprConfigInterfaceGetHandle([In] HANDLE hMprConfig, [In] PWSTR lpwsInterfaceName, [Out] HANDLE* phRouterInterface);
uint MprConfigInterfaceGetInfo([In] HANDLE hMprConfig, [In] HANDLE hRouterInterface, [In] uint dwLevel, [In] [Out] byte** lplpBuffer, [Out] uint* lpdwBufferSize);
uint MprConfigInterfaceSetInfo([In] HANDLE hMprConfig, [In] HANDLE hRouterInterface, [In] uint dwLevel, [In] byte* lpbBuffer);
uint MprConfigInterfaceEnum([In] HANDLE hMprConfig, [In] uint dwLevel, [Out] [Optional] byte** lplpBuffer, [In] uint dwPrefMaxLen, [Out] uint* lpdwEntriesRead, [Out] uint* lpdwTotalEntries, [In] [Out] [Optional] uint* lpdwResumeHandle);
uint MprConfigInterfaceTransportAdd([In] HANDLE hMprConfig, [In] HANDLE hRouterInterface, [In] uint dwTransportId, [In] [Optional] PWSTR lpwsTransportName, [MemorySize(BytesParamIndex = 5)] [In] byte* pInterfaceInfo, [In] uint dwInterfaceInfoSize, [Out] HANDLE* phRouterIfTransport);
uint MprConfigInterfaceTransportRemove([In] HANDLE hMprConfig, [In] HANDLE hRouterInterface, [In] HANDLE hRouterIfTransport);
uint MprConfigInterfaceTransportGetHandle([In] HANDLE hMprConfig, [In] HANDLE hRouterInterface, [In] uint dwTransportId, [Out] HANDLE* phRouterIfTransport);
uint MprConfigInterfaceTransportGetInfo([In] HANDLE hMprConfig, [In] HANDLE hRouterInterface, [In] HANDLE hRouterIfTransport, [Out] [Optional] byte** ppInterfaceInfo, [Out] [Optional] uint* lpdwInterfaceInfoSize);
uint MprConfigInterfaceTransportSetInfo([In] HANDLE hMprConfig, [In] HANDLE hRouterInterface, [In] HANDLE hRouterIfTransport, [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* pInterfaceInfo, [In] uint dwInterfaceInfoSize);
uint MprConfigInterfaceTransportEnum([In] HANDLE hMprConfig, [In] HANDLE hRouterInterface, [In] uint dwLevel, [Out] [Optional] byte** lplpBuffer, [In] uint dwPrefMaxLen, [Out] uint* lpdwEntriesRead, [Out] uint* lpdwTotalEntries, [In] [Out] [Optional] uint* lpdwResumeHandle);
uint MprConfigGetFriendlyName([In] HANDLE hMprConfig, [In] PWSTR pszGuidName, [NotNullTerminated] [MemorySize(BytesParamIndex = 3)] [Out] PWSTR pszBuffer, [In] uint dwBufferSize);
uint MprConfigGetGuidName([In] HANDLE hMprConfig, [In] PWSTR pszFriendlyName, [NotNullTerminated] [MemorySize(BytesParamIndex = 3)] [Out] PWSTR pszBuffer, [In] uint dwBufferSize);
uint MprConfigFilterGetInfo([In] HANDLE hMprConfig, [In] uint dwLevel, [In] uint dwTransportId, [In] [Out] byte* lpBuffer);
uint MprConfigFilterSetInfo([In] HANDLE hMprConfig, [In] uint dwLevel, [In] uint dwTransportId, [In] byte* lpBuffer);
uint MprInfoCreate([In] uint dwVersion, [Out] void** lplpNewHeader);
uint MprInfoDelete([In] void* lpHeader);
uint MprInfoRemoveAll([In] void* lpHeader, [Out] void** lplpNewHeader);
uint MprInfoDuplicate([In] void* lpHeader, [Out] void** lplpNewHeader);
uint MprInfoBlockAdd([In] void* lpHeader, [In] uint dwInfoType, [In] uint dwItemSize, [In] uint dwItemCount, [In] byte* lpItemData, [Out] void** lplpNewHeader);
uint MprInfoBlockRemove([In] void* lpHeader, [In] uint dwInfoType, [Out] void** lplpNewHeader);
uint MprInfoBlockSet([In] void* lpHeader, [In] uint dwInfoType, [In] uint dwItemSize, [In] uint dwItemCount, [In] byte* lpItemData, [Out] void** lplpNewHeader);
uint MprInfoBlockFind([In] void* lpHeader, [In] uint dwInfoType, [Out] uint* lpdwItemSize, [Out] uint* lpdwItemCount, [Out] byte** lplpItemData);
uint MprInfoBlockQuerySize([In] void* lpHeader);
