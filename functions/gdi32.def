void* BRUSHOBJ_pvAllocRbrush([In] [Out] BRUSHOBJ* pbo, [In] uint cj);
void* BRUSHOBJ_pvGetRbrush([In] [Out] BRUSHOBJ* pbo);
uint BRUSHOBJ_ulGetBrushColor([In] [Out] BRUSHOBJ* pbo);
HANDLE BRUSHOBJ_hGetColorTransform([In] [Out] BRUSHOBJ* pbo);
uint CLIPOBJ_cEnumStart([In] [Out] CLIPOBJ* pco, [In] BOOL bAll, [In] uint iType, [In] uint iDirection, [In] uint cLimit);
BOOL CLIPOBJ_bEnum([In] [Out] CLIPOBJ* pco, [In] uint cj, [In] [Out] uint* pul);
PATHOBJ* CLIPOBJ_ppoGetPath([In] [Out] CLIPOBJ* pco);
uint FONTOBJ_cGetAllGlyphHandles([In] [Out] FONTOBJ* pfo, [In] [Out] uint* phg);
void FONTOBJ_vGetInfo([In] [Out] FONTOBJ* pfo, [In] uint cjSize, [In] [Out] FONTINFO* pfi);
uint FONTOBJ_cGetGlyphs([In] [Out] FONTOBJ* pfo, [In] uint iMode, [In] uint cGlyph, [In] [Out] uint* phg, [In] [Out] void** ppvGlyph);
XFORMOBJ* FONTOBJ_pxoGetXform([In] FONTOBJ* pfo);
IFIMETRICS* FONTOBJ_pifi([In] FONTOBJ* pfo);
FD_GLYPHSET* FONTOBJ_pfdg([In] [Out] FONTOBJ* pfo);
void* FONTOBJ_pvTrueTypeFontFile([In] [Out] FONTOBJ* pfo, [In] [Out] uint* pcjFile);
FD_GLYPHATTR* FONTOBJ_pQueryGlyphAttrs([In] [Out] FONTOBJ* pfo, [In] uint iMode);
void PATHOBJ_vEnumStart([In] [Out] PATHOBJ* ppo);
BOOL PATHOBJ_bEnum([In] [Out] PATHOBJ* ppo, [In] [Out] PATHDATA* ppd);
void PATHOBJ_vEnumStartClipLines([In] [Out] PATHOBJ* ppo, [In] [Out] CLIPOBJ* pco, [In] [Out] SURFOBJ* pso, [In] [Out] LINEATTRS* pla);
BOOL PATHOBJ_bEnumClipLines([In] [Out] PATHOBJ* ppo, [In] uint cb, [In] [Out] CLIPLINE* pcl);
void PATHOBJ_vGetBounds([In] [Out] PATHOBJ* ppo, [In] [Out] RECTFX* prectfx);
void STROBJ_vEnumStart([In] [Out] STROBJ* pstro);
BOOL STROBJ_bEnum([In] [Out] STROBJ* pstro, [In] [Out] uint* pc, [In] [Out] GLYPHPOS** ppgpos);
BOOL STROBJ_bEnumPositionsOnly([In] [Out] STROBJ* pstro, [In] [Out] uint* pc, [In] [Out] GLYPHPOS** ppgpos);
uint STROBJ_dwGetCodePage([In] [Out] STROBJ* pstro);
BOOL STROBJ_bGetAdvanceWidths([In] [Out] STROBJ* pso, [In] uint iFirst, [In] uint c, [In] [Out] POINTQF* pptqD);
uint XFORMOBJ_iGetXform([In] XFORMOBJ* pxo, [Out] [Optional] XFORML* pxform);
BOOL XFORMOBJ_bApplyXform([In] [Out] XFORMOBJ* pxo, [In] uint iMode, [In] uint cPoints, [In] [Out] void* pvIn, [In] [Out] void* pvOut);
uint XLATEOBJ_iXlate([In] [Out] XLATEOBJ* pxlo, [In] uint iColor);
uint* XLATEOBJ_piVector([In] [Out] XLATEOBJ* pxlo);
uint XLATEOBJ_cGetPalette([In] [Out] XLATEOBJ* pxlo, [In] uint iPal, [In] uint cPal, [In] [Out] uint* pPal);
HANDLE XLATEOBJ_hGetColorTransform([In] [Out] XLATEOBJ* pxlo);
HBITMAP EngCreateBitmap([In] SIZE sizl, [In] int lWidth, [In] uint iFormat, [In] uint fl, [In] [Out] void* pvBits);
HSURF EngCreateDeviceSurface([In] DHSURF dhsurf, [In] SIZE sizl, [In] uint iFormatCompat);
HBITMAP EngCreateDeviceBitmap([In] DHSURF dhsurf, [In] SIZE sizl, [In] uint iFormatCompat);
BOOL EngDeleteSurface([In] HSURF hsurf);
SURFOBJ* EngLockSurface([In] HSURF hsurf);
void EngUnlockSurface([In] [Out] SURFOBJ* pso);
BOOL EngEraseSurface([In] [Out] SURFOBJ* pso, [In] [Out] RECTL* prcl, [In] uint iColor);
BOOL EngAssociateSurface([In] HSURF hsurf, [In] HDEV hdev, [In] uint flHooks);
BOOL EngMarkBandingSurface([In] HSURF hsurf);
BOOL EngCheckAbort([In] [Out] SURFOBJ* pso);
void EngDeletePath([In] [Out] PATHOBJ* ppo);
HPALETTE EngCreatePalette([In] uint iMode, [In] uint cColors, [In] [Out] uint* pulColors, [In] uint flRed, [In] uint flGreen, [In] uint flBlue);
BOOL EngDeletePalette([In] HPALETTE hpal);
CLIPOBJ* EngCreateClip();
void EngDeleteClip([In] [Optional] CLIPOBJ* pco);
BOOL EngBitBlt([In] SURFOBJ* psoTrg, [In] SURFOBJ* psoSrc, [In] SURFOBJ* psoMask, [In] CLIPOBJ* pco, [In] XLATEOBJ* pxlo, [In] RECTL* prclTrg, [In] POINTL* pptlSrc, [In] POINTL* pptlMask, [In] BRUSHOBJ* pbo, [In] POINTL* pptlBrush, [In] uint rop4);
BOOL EngLineTo([In] [Out] SURFOBJ* pso, [In] [Out] CLIPOBJ* pco, [In] [Out] BRUSHOBJ* pbo, [In] int x1, [In] int y1, [In] int x2, [In] int y2, [In] [Out] RECTL* prclBounds, [In] uint mix);
BOOL EngStretchBlt([In] [Out] SURFOBJ* psoDest, [In] [Out] SURFOBJ* psoSrc, [In] [Out] SURFOBJ* psoMask, [In] [Out] CLIPOBJ* pco, [In] [Out] XLATEOBJ* pxlo, [In] [Out] COLORADJUSTMENT* pca, [In] [Out] POINTL* pptlHTOrg, [In] [Out] RECTL* prclDest, [In] [Out] RECTL* prclSrc, [In] [Out] POINTL* pptlMask, [In] uint iMode);
BOOL EngStretchBltROP([In] [Out] SURFOBJ* psoDest, [In] [Out] SURFOBJ* psoSrc, [In] [Out] SURFOBJ* psoMask, [In] [Out] CLIPOBJ* pco, [In] [Out] XLATEOBJ* pxlo, [In] [Out] COLORADJUSTMENT* pca, [In] [Out] POINTL* pptlHTOrg, [In] [Out] RECTL* prclDest, [In] [Out] RECTL* prclSrc, [In] [Out] POINTL* pptlMask, [In] uint iMode, [In] [Out] BRUSHOBJ* pbo, [In] uint rop4);
BOOL EngAlphaBlend([In] [Out] SURFOBJ* psoDest, [In] [Out] SURFOBJ* psoSrc, [In] [Out] CLIPOBJ* pco, [In] [Out] XLATEOBJ* pxlo, [In] [Out] RECTL* prclDest, [In] [Out] RECTL* prclSrc, [In] [Out] BLENDOBJ* pBlendObj);
BOOL EngGradientFill([In] [Out] SURFOBJ* psoDest, [In] [Out] CLIPOBJ* pco, [In] [Out] XLATEOBJ* pxlo, [In] [Out] TRIVERTEX* pVertex, [In] uint nVertex, [In] [Out] void* pMesh, [In] uint nMesh, [In] [Out] RECTL* prclExtents, [In] [Out] POINTL* pptlDitherOrg, [In] uint ulMode);
BOOL EngTransparentBlt([In] SURFOBJ* psoDst, [In] SURFOBJ* psoSrc, [In] [Optional] CLIPOBJ* pco, [In] [Optional] XLATEOBJ* pxlo, [In] RECTL* prclDst, [In] RECTL* prclSrc, [In] uint TransColor, [In] uint bCalledFromBitBlt);
BOOL EngTextOut([In] [Out] SURFOBJ* pso, [In] [Out] STROBJ* pstro, [In] [Out] FONTOBJ* pfo, [In] [Out] CLIPOBJ* pco, [In] [Out] RECTL* prclExtra, [In] [Out] RECTL* prclOpaque, [In] [Out] BRUSHOBJ* pboFore, [In] [Out] BRUSHOBJ* pboOpaque, [In] [Out] POINTL* pptlOrg, [In] uint mix);
BOOL EngStrokePath([In] [Out] SURFOBJ* pso, [In] [Out] PATHOBJ* ppo, [In] [Out] CLIPOBJ* pco, [In] [Out] XFORMOBJ* pxo, [In] [Out] BRUSHOBJ* pbo, [In] [Out] POINTL* pptlBrushOrg, [In] [Out] LINEATTRS* plineattrs, [In] uint mix);
BOOL EngFillPath([In] [Out] SURFOBJ* pso, [In] [Out] PATHOBJ* ppo, [In] [Out] CLIPOBJ* pco, [In] [Out] BRUSHOBJ* pbo, [In] [Out] POINTL* pptlBrushOrg, [In] uint mix, [In] uint flOptions);
BOOL EngStrokeAndFillPath([In] [Out] SURFOBJ* pso, [In] [Out] PATHOBJ* ppo, [In] [Out] CLIPOBJ* pco, [In] [Out] XFORMOBJ* pxo, [In] [Out] BRUSHOBJ* pboStroke, [In] [Out] LINEATTRS* plineattrs, [In] [Out] BRUSHOBJ* pboFill, [In] [Out] POINTL* pptlBrushOrg, [In] uint mixFill, [In] uint flOptions);
BOOL EngPaint([In] [Out] SURFOBJ* pso, [In] [Out] CLIPOBJ* pco, [In] [Out] BRUSHOBJ* pbo, [In] [Out] POINTL* pptlBrushOrg, [In] uint mix);
BOOL EngCopyBits([In] [Out] SURFOBJ* psoDest, [In] [Out] SURFOBJ* psoSrc, [In] [Out] CLIPOBJ* pco, [In] [Out] XLATEOBJ* pxlo, [In] [Out] RECTL* prclDest, [In] [Out] POINTL* pptlSrc);
BOOL EngPlgBlt([In] [Out] SURFOBJ* psoTrg, [In] [Out] SURFOBJ* psoSrc, [In] [Out] SURFOBJ* psoMsk, [In] [Out] CLIPOBJ* pco, [In] [Out] XLATEOBJ* pxlo, [In] [Out] COLORADJUSTMENT* pca, [In] [Out] POINTL* pptlBrushOrg, [In] [Out] POINTFIX* pptfx, [In] [Out] RECTL* prcl, [In] [Out] POINTL* pptl, [In] uint iMode);
int HT_Get8BPPFormatPalette([Out] [Optional] PALETTEENTRY* pPaletteEntry, [In] ushort RedGamma, [In] ushort GreenGamma, [In] ushort BlueGamma);
int HT_Get8BPPMaskPalette([Out] [Optional] PALETTEENTRY* pPaletteEntry, [In] BOOL Use8BPPMaskPal, [In] byte CMYMask, [In] ushort RedGamma, [In] ushort GreenGamma, [In] ushort BlueGamma);
PWSTR EngGetPrinterDataFileName([In] HDEV hdev);
PWSTR EngGetDriverName([In] HDEV hdev);
HANDLE EngLoadModule([In] PWSTR pwsz);
void* EngFindResource([In] HANDLE h, [In] int iName, [In] int iType, [Out] uint* pulSize);
void EngFreeModule([In] HANDLE h);
HSEMAPHORE EngCreateSemaphore();
void EngAcquireSemaphore([In] HSEMAPHORE hsem);
void EngReleaseSemaphore([In] HSEMAPHORE hsem);
void EngDeleteSemaphore([In] HSEMAPHORE hsem);
void EngMultiByteToUnicodeN([MemorySize(BytesParamIndex = 1)] [Out] PWSTR UnicodeString, [In] uint MaxBytesInUnicodeString, [Out] [Optional] uint* BytesInUnicodeString, [NotNullTerminated] [MemorySize(BytesParamIndex = 4)] [In] PSTR MultiByteString, [In] uint BytesInMultiByteString);
void EngUnicodeToMultiByteN([NotNullTerminated] [MemorySize(BytesParamIndex = 1)] [Out] PSTR MultiByteString, [In] uint MaxBytesInMultiByteString, [Out] [Optional] uint* BytesInMultiByteString, [MemorySize(BytesParamIndex = 4)] [In] PWSTR UnicodeString, [In] uint BytesInUnicodeString);
void EngQueryLocalTime([Out] ENG_TIME_FIELDS* param0);
FD_GLYPHSET* EngComputeGlyphSet([In] int nCodePage, [In] int nFirstChar, [In] int cChars);
int EngMultiByteToWideChar([In] uint CodePage, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] PWSTR WideCharString, [In] int BytesInWideCharString, [MemorySize(BytesParamIndex = 4)] [In] [Optional] PSTR MultiByteString, [In] int BytesInMultiByteString);
int EngWideCharToMultiByte([In] uint CodePage, [MemorySize(BytesParamIndex = 2)] [In] [Optional] PWSTR WideCharString, [In] int BytesInWideCharString, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] PSTR MultiByteString, [In] int BytesInMultiByteString);
void EngGetCurrentCodePage([Out] ushort* OemCodePage, [Out] ushort* AnsiCodePage);
BOOL EngQueryEMFInfo([In] HDEV hdev, [Out] EMFINFO* pEMFInfo);
int GetTextCharset([In] HDC hdc);
int GetTextCharsetInfo([In] HDC hdc, [Out] [Optional] FONTSIGNATURE* lpSig, [In] uint dwFlags);
BOOL TranslateCharsetInfo([In] [Out] uint* lpSrc, [Out] CHARSETINFO* lpCs, [In] TRANSLATE_CHARSET_INFO_FLAGS dwFlags);
int GetObjectA([In] HGDIOBJ h, [In] int c, [MemorySize(BytesParamIndex = 1)] [Out] [Optional] void* pv);
int AddFontResourceA([Const] [In] PSTR param0);
int AddFontResourceW([Const] [In] PWSTR param0);
BOOL AnimatePalette([In] HPALETTE hPal, [In] uint iStartIndex, [In] uint cEntries, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PALETTEENTRY* ppe);
BOOL Arc([In] HDC hdc, [In] int x1, [In] int y1, [In] int x2, [In] int y2, [In] int x3, [In] int y3, [In] int x4, [In] int y4);
BOOL BitBlt([In] HDC hdc, [In] int x, [In] int y, [In] int cx, [In] int cy, [In] [Optional] HDC hdcSrc, [In] int x1, [In] int y1, [In] ROP_CODE rop);
BOOL CancelDC([In] HDC hdc);
BOOL Chord([In] HDC hdc, [In] int x1, [In] int y1, [In] int x2, [In] int y2, [In] int x3, [In] int y3, [In] int x4, [In] int y4);
HMETAFILE CloseMetaFile([In] HDC hdc);
GDI_REGION_TYPE CombineRgn([In] [Optional] HRGN hrgnDst, [In] [Optional] HRGN hrgnSrc1, [In] [Optional] HRGN hrgnSrc2, [In] RGN_COMBINE_MODE iMode);
HMETAFILE CopyMetaFileA([In] HMETAFILE param0, [Const] [In] [Optional] PSTR param1);
HMETAFILE CopyMetaFileW([In] HMETAFILE param0, [Const] [In] [Optional] PWSTR param1);
HBITMAP CreateBitmap([In] int nWidth, [In] int nHeight, [In] uint nPlanes, [In] uint nBitCount, [Const] [In] [Optional] void* lpBits);
HBITMAP CreateBitmapIndirect([Const] [In] BITMAP* pbm);
HBRUSH CreateBrushIndirect([Const] [In] LOGBRUSH* plbrush);
HBITMAP CreateCompatibleBitmap([In] HDC hdc, [In] int cx, [In] int cy);
HBITMAP CreateDiscardableBitmap([In] HDC hdc, [In] int cx, [In] int cy);
CreatedHDC CreateCompatibleDC([In] [Optional] HDC hdc);
CreatedHDC CreateDCA([Const] [In] [Optional] PSTR pwszDriver, [Const] [In] [Optional] PSTR pwszDevice, [Const] [In] [Optional] PSTR pszPort, [Const] [In] [Optional] DEVMODEA* pdm);
CreatedHDC CreateDCW([Const] [In] [Optional] PWSTR pwszDriver, [Const] [In] [Optional] PWSTR pwszDevice, [Const] [In] [Optional] PWSTR pszPort, [Const] [In] [Optional] DEVMODEW* pdm);
HBITMAP CreateDIBitmap([In] HDC hdc, [Const] [In] [Optional] BITMAPINFOHEADER* pbmih, [In] uint flInit, [Const] [In] [Optional] void* pjBits, [Const] [In] [Optional] BITMAPINFO* pbmi, [In] DIB_USAGE iUsage);
HBRUSH CreateDIBPatternBrush([In] nint h, [In] DIB_USAGE iUsage);
HBRUSH CreateDIBPatternBrushPt([Const] [In] void* lpPackedDIB, [In] DIB_USAGE iUsage);
HRGN CreateEllipticRgn([In] int x1, [In] int y1, [In] int x2, [In] int y2);
HRGN CreateEllipticRgnIndirect([Const] [In] RECT* lprect);
HFONT CreateFontIndirectA([Const] [In] LOGFONTA* lplf);
HFONT CreateFontIndirectW([Const] [In] LOGFONTW* lplf);
HFONT CreateFontA([In] int cHeight, [In] int cWidth, [In] int cEscapement, [In] int cOrientation, [In] int cWeight, [In] uint bItalic, [In] uint bUnderline, [In] uint bStrikeOut, [In] uint iCharSet, [In] uint iOutPrecision, [In] uint iClipPrecision, [In] uint iQuality, [In] uint iPitchAndFamily, [Const] [In] [Optional] PSTR pszFaceName);
HFONT CreateFontW([In] int cHeight, [In] int cWidth, [In] int cEscapement, [In] int cOrientation, [In] int cWeight, [In] uint bItalic, [In] uint bUnderline, [In] uint bStrikeOut, [In] uint iCharSet, [In] uint iOutPrecision, [In] uint iClipPrecision, [In] uint iQuality, [In] uint iPitchAndFamily, [Const] [In] [Optional] PWSTR pszFaceName);
HBRUSH CreateHatchBrush([In] HATCH_BRUSH_STYLE iHatch, [In] COLORREF color);
CreatedHDC CreateICA([Const] [In] [Optional] PSTR pszDriver, [Const] [In] [Optional] PSTR pszDevice, [Const] [In] [Optional] PSTR pszPort, [Const] [In] [Optional] DEVMODEA* pdm);
CreatedHDC CreateICW([Const] [In] [Optional] PWSTR pszDriver, [Const] [In] [Optional] PWSTR pszDevice, [Const] [In] [Optional] PWSTR pszPort, [Const] [In] [Optional] DEVMODEW* pdm);
HdcMetdataFileHandle CreateMetaFileA([Const] [In] [Optional] PSTR pszFile);
HdcMetdataFileHandle CreateMetaFileW([Const] [In] [Optional] PWSTR pszFile);
HPALETTE CreatePalette([Const] [In] LOGPALETTE* plpal);
HPEN CreatePen([In] PEN_STYLE iStyle, [In] int cWidth, [In] COLORREF color);
HPEN CreatePenIndirect([Const] [In] LOGPEN* plpen);
HRGN CreatePolyPolygonRgn([Const] [In] POINT* pptl, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] int* pc, [In] int cPoly, [In] CREATE_POLYGON_RGN_MODE iMode);
HBRUSH CreatePatternBrush([In] HBITMAP hbm);
HRGN CreateRectRgn([In] int x1, [In] int y1, [In] int x2, [In] int y2);
HRGN CreateRectRgnIndirect([Const] [In] RECT* lprect);
HRGN CreateRoundRectRgn([In] int x1, [In] int y1, [In] int x2, [In] int y2, [In] int w, [In] int h);
BOOL CreateScalableFontResourceA([In] uint fdwHidden, [Const] [In] PSTR lpszFont, [Const] [In] PSTR lpszFile, [Const] [In] [Optional] PSTR lpszPath);
BOOL CreateScalableFontResourceW([In] uint fdwHidden, [Const] [In] PWSTR lpszFont, [Const] [In] PWSTR lpszFile, [Const] [In] [Optional] PWSTR lpszPath);
HBRUSH CreateSolidBrush([In] COLORREF color);
BOOL DeleteDC([In] CreatedHDC hdc);
BOOL DeleteMetaFile([In] HMETAFILE hmf);
BOOL DeleteObject([In] HGDIOBJ ho);
int DrawEscape([In] HDC hdc, [In] int iEscape, [In] int cjIn, [Const] [MemorySize(BytesParamIndex = 2)] [In] [Optional] PSTR lpIn);
BOOL Ellipse([In] HDC hdc, [In] int left, [In] int top, [In] int right, [In] int bottom);
int EnumFontFamiliesExA([In] HDC hdc, [In] LOGFONTA* lpLogfont, [In] FONTENUMPROCA lpProc, [In] LPARAM lParam, [In] uint dwFlags);
int EnumFontFamiliesExW([In] HDC hdc, [In] LOGFONTW* lpLogfont, [In] FONTENUMPROCW lpProc, [In] LPARAM lParam, [In] uint dwFlags);
int EnumFontFamiliesA([In] HDC hdc, [Const] [In] [Optional] PSTR lpLogfont, [In] FONTENUMPROCA lpProc, [In] LPARAM lParam);
int EnumFontFamiliesW([In] HDC hdc, [Const] [In] [Optional] PWSTR lpLogfont, [In] FONTENUMPROCW lpProc, [In] LPARAM lParam);
int EnumFontsA([In] HDC hdc, [Const] [In] [Optional] PSTR lpLogfont, [In] FONTENUMPROCA lpProc, [In] LPARAM lParam);
int EnumFontsW([In] HDC hdc, [Const] [In] [Optional] PWSTR lpLogfont, [In] FONTENUMPROCW lpProc, [In] LPARAM lParam);
int EnumObjects([In] HDC hdc, [In] OBJ_TYPE nType, [In] GOBJENUMPROC lpFunc, [In] LPARAM lParam);
BOOL EqualRgn([In] HRGN hrgn1, [In] HRGN hrgn2);
GDI_REGION_TYPE ExcludeClipRect([In] HDC hdc, [In] int left, [In] int top, [In] int right, [In] int bottom);
HRGN ExtCreateRegion([Const] [In] [Optional] XFORM* lpx, [In] uint nCount, [Const] [MemorySize(BytesParamIndex = 1)] [In] RGNDATA* lpData);
BOOL ExtFloodFill([In] HDC hdc, [In] int x, [In] int y, [In] COLORREF color, [In] EXT_FLOOD_FILL_TYPE type);
BOOL FillRgn([In] HDC hdc, [In] HRGN hrgn, [In] HBRUSH hbr);
BOOL FloodFill([In] HDC hdc, [In] int x, [In] int y, [In] COLORREF color);
BOOL FrameRgn([In] HDC hdc, [In] HRGN hrgn, [In] HBRUSH hbr, [In] int w, [In] int h);
R2_MODE GetROP2([In] HDC hdc);
BOOL GetAspectRatioFilterEx([In] HDC hdc, [Out] SIZE* lpsize);
COLORREF GetBkColor([In] HDC hdc);
COLORREF GetDCBrushColor([In] HDC hdc);
COLORREF GetDCPenColor([In] HDC hdc);
BACKGROUND_MODE GetBkMode([In] HDC hdc);
int GetBitmapBits([In] HBITMAP hbit, [In] int cb, [MemorySize(BytesParamIndex = 1)] [Out] void* lpvBits);
BOOL GetBitmapDimensionEx([In] HBITMAP hbit, [Out] SIZE* lpsize);
uint GetBoundsRect([In] HDC hdc, [Out] RECT* lprect, [In] uint flags);
BOOL GetBrushOrgEx([In] HDC hdc, [Out] POINT* lppt);
BOOL GetCharWidthA([In] HDC hdc, [In] uint iFirst, [In] uint iLast, [Out] int* lpBuffer);
BOOL GetCharWidthW([In] HDC hdc, [In] uint iFirst, [In] uint iLast, [Out] int* lpBuffer);
BOOL GetCharWidth32A([In] HDC hdc, [In] uint iFirst, [In] uint iLast, [Out] int* lpBuffer);
BOOL GetCharWidth32W([In] HDC hdc, [In] uint iFirst, [In] uint iLast, [Out] int* lpBuffer);
BOOL GetCharWidthFloatA([In] HDC hdc, [In] uint iFirst, [In] uint iLast, [Out] float* lpBuffer);
BOOL GetCharWidthFloatW([In] HDC hdc, [In] uint iFirst, [In] uint iLast, [Out] float* lpBuffer);
BOOL GetCharABCWidthsA([In] HDC hdc, [In] uint wFirst, [In] uint wLast, [Out] ABC* lpABC);
BOOL GetCharABCWidthsW([In] HDC hdc, [In] uint wFirst, [In] uint wLast, [Out] ABC* lpABC);
BOOL GetCharABCWidthsFloatA([In] HDC hdc, [In] uint iFirst, [In] uint iLast, [Out] ABCFLOAT* lpABC);
BOOL GetCharABCWidthsFloatW([In] HDC hdc, [In] uint iFirst, [In] uint iLast, [Out] ABCFLOAT* lpABC);
GDI_REGION_TYPE GetClipBox([In] HDC hdc, [Out] RECT* lprect);
int GetClipRgn([In] HDC hdc, [In] HRGN hrgn);
int GetMetaRgn([In] HDC hdc, [In] HRGN hrgn);
HGDIOBJ GetCurrentObject([In] HDC hdc, [In] OBJ_TYPE type);
BOOL GetCurrentPositionEx([In] HDC hdc, [Out] POINT* lppt);
int GetDeviceCaps([In] [Optional] HDC hdc, [In] GET_DEVICE_CAPS_INDEX index);
int GetDIBits([In] HDC hdc, [In] HBITMAP hbm, [In] uint start, [In] uint cLines, [Out] [Optional] void* lpvBits, [In] [Out] BITMAPINFO* lpbmi, [In] DIB_USAGE usage);
uint GetFontData([In] HDC hdc, [In] uint dwTable, [In] uint dwOffset, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* pvBuffer, [In] uint cjBuffer);
uint GetGlyphOutlineA([In] HDC hdc, [In] uint uChar, [In] GET_GLYPH_OUTLINE_FORMAT fuFormat, [Out] GLYPHMETRICS* lpgm, [In] uint cjBuffer, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* pvBuffer, [Const] [In] MAT2* lpmat2);
uint GetGlyphOutlineW([In] HDC hdc, [In] uint uChar, [In] GET_GLYPH_OUTLINE_FORMAT fuFormat, [Out] GLYPHMETRICS* lpgm, [In] uint cjBuffer, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* pvBuffer, [Const] [In] MAT2* lpmat2);
int GetGraphicsMode([In] HDC hdc);
HDC_MAP_MODE GetMapMode([In] HDC hdc);
uint GetMetaFileBitsEx([In] HMETAFILE hMF, [In] uint cbBuffer, [MemorySize(BytesParamIndex = 1)] [Out] [Optional] void* lpData);
HMETAFILE GetMetaFileA([Const] [In] PSTR lpName);
HMETAFILE GetMetaFileW([Const] [In] PWSTR lpName);
COLORREF GetNearestColor([In] HDC hdc, [In] COLORREF color);
uint GetNearestPaletteIndex([In] HPALETTE h, [In] COLORREF color);
uint GetObjectType([In] HGDIOBJ h);
uint GetOutlineTextMetricsA([In] HDC hdc, [In] uint cjCopy, [MemorySize(BytesParamIndex = 1)] [Out] [Optional] OUTLINETEXTMETRICA* potm);
uint GetOutlineTextMetricsW([In] HDC hdc, [In] uint cjCopy, [MemorySize(BytesParamIndex = 1)] [Out] [Optional] OUTLINETEXTMETRICW* potm);
uint GetPaletteEntries([In] HPALETTE hpal, [In] uint iStart, [In] uint cEntries, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PALETTEENTRY* pPalEntries);
COLORREF GetPixel([In] HDC hdc, [In] int x, [In] int y);
int GetPolyFillMode([In] HDC hdc);
BOOL GetRasterizerCaps([MemorySize(BytesParamIndex = 1)] [Out] RASTERIZER_STATUS* lpraststat, [In] uint cjBytes);
int GetRandomRgn([In] HDC hdc, [In] HRGN hrgn, [In] int i);
uint GetRegionData([In] HRGN hrgn, [In] uint nCount, [MemorySize(BytesParamIndex = 1)] [Out] [Optional] RGNDATA* lpRgnData);
GDI_REGION_TYPE GetRgnBox([In] HRGN hrgn, [Out] RECT* lprc);
HGDIOBJ GetStockObject([In] GET_STOCK_OBJECT_FLAGS i);
int GetStretchBltMode([In] HDC hdc);
uint GetSystemPaletteEntries([In] HDC hdc, [In] uint iStart, [In] uint cEntries, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PALETTEENTRY* pPalEntries);
uint GetSystemPaletteUse([In] HDC hdc);
int GetTextCharacterExtra([In] HDC hdc);
TEXT_ALIGN_OPTIONS GetTextAlign([In] HDC hdc);
COLORREF GetTextColor([In] HDC hdc);
BOOL GetTextExtentPointA([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PSTR lpString, [In] int c, [Out] SIZE* lpsz);
BOOL GetTextExtentPointW([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR lpString, [In] int c, [Out] SIZE* lpsz);
BOOL GetTextExtentPoint32A([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PSTR lpString, [In] int c, [Out] SIZE* psizl);
BOOL GetTextExtentPoint32W([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR lpString, [In] int c, [Out] SIZE* psizl);
BOOL GetTextExtentExPointA([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PSTR lpszString, [In] int cchString, [In] int nMaxExtent, [Out] [Optional] int* lpnFit, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] int* lpnDx, [Out] SIZE* lpSize);
BOOL GetTextExtentExPointW([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR lpszString, [In] int cchString, [In] int nMaxExtent, [Out] [Optional] int* lpnFit, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] int* lpnDx, [Out] SIZE* lpSize);
uint GetFontLanguageInfo([In] HDC hdc);
uint GetCharacterPlacementA([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PSTR lpString, [In] int nCount, [In] int nMexExtent, [In] [Out] GCP_RESULTSA* lpResults, [In] GET_CHARACTER_PLACEMENT_FLAGS dwFlags);
uint GetCharacterPlacementW([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR lpString, [In] int nCount, [In] int nMexExtent, [In] [Out] GCP_RESULTSW* lpResults, [In] GET_CHARACTER_PLACEMENT_FLAGS dwFlags);
uint GetFontUnicodeRanges([In] HDC hdc, [Out] [Optional] GLYPHSET* lpgs);
uint GetGlyphIndicesA([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PSTR lpstr, [In] int c, [NativeArrayInfo(CountParamIndex = 2)] [Out] ushort* pgi, [In] uint fl);
uint GetGlyphIndicesW([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR lpstr, [In] int c, [NativeArrayInfo(CountParamIndex = 2)] [Out] ushort* pgi, [In] uint fl);
BOOL GetTextExtentPointI([In] HDC hdc, [NativeArrayInfo(CountParamIndex = 2)] [In] ushort* pgiIn, [In] int cgi, [Out] SIZE* psize);
BOOL GetTextExtentExPointI([In] HDC hdc, [NativeArrayInfo(CountParamIndex = 2)] [In] ushort* lpwszString, [In] int cwchString, [In] int nMaxExtent, [Out] [Optional] int* lpnFit, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] int* lpnDx, [Out] SIZE* lpSize);
BOOL GetCharWidthI([In] HDC hdc, [In] uint giFirst, [In] uint cgi, [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] ushort* pgi, [NativeArrayInfo(CountParamIndex = 2)] [Out] int* piWidths);
BOOL GetCharABCWidthsI([In] HDC hdc, [In] uint giFirst, [In] uint cgi, [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] ushort* pgi, [NativeArrayInfo(CountParamIndex = 2)] [Out] ABC* pabc);
int AddFontResourceExA([Const] [In] PSTR name, [In] FONT_RESOURCE_CHARACTERISTICS fl, [Reserved] [In] [Out] void* res);
int AddFontResourceExW([Const] [In] PWSTR name, [In] FONT_RESOURCE_CHARACTERISTICS fl, [Reserved] [In] [Out] void* res);
BOOL RemoveFontResourceExA([Const] [In] PSTR name, [In] uint fl, [Reserved] [In] [Out] void* pdv);
BOOL RemoveFontResourceExW([Const] [In] PWSTR name, [In] uint fl, [Reserved] [In] [Out] void* pdv);
HANDLE AddFontMemResourceEx([MemorySize(BytesParamIndex = 1)] [In] void* pFileView, [In] uint cjSize, [Reserved] [In] [Out] void* pvResrved, [In] uint* pNumFonts);
BOOL RemoveFontMemResourceEx([In] HANDLE h);
HFONT CreateFontIndirectExA([Const] [In] ENUMLOGFONTEXDVA* param0);
HFONT CreateFontIndirectExW([Const] [In] ENUMLOGFONTEXDVW* param0);
BOOL GetViewportExtEx([In] HDC hdc, [Out] SIZE* lpsize);
BOOL GetViewportOrgEx([In] HDC hdc, [Out] POINT* lppoint);
BOOL GetWindowExtEx([In] HDC hdc, [Out] SIZE* lpsize);
BOOL GetWindowOrgEx([In] HDC hdc, [Out] POINT* lppoint);
GDI_REGION_TYPE IntersectClipRect([In] HDC hdc, [In] int left, [In] int top, [In] int right, [In] int bottom);
BOOL InvertRgn([In] HDC hdc, [In] HRGN hrgn);
BOOL LineDDA([In] int xStart, [In] int yStart, [In] int xEnd, [In] int yEnd, [In] LINEDDAPROC lpProc, [In] [Optional] LPARAM data);
BOOL LineTo([In] HDC hdc, [In] int x, [In] int y);
BOOL MaskBlt([In] HDC hdcDest, [In] int xDest, [In] int yDest, [In] int width, [In] int height, [In] HDC hdcSrc, [In] int xSrc, [In] int ySrc, [In] HBITMAP hbmMask, [In] int xMask, [In] int yMask, [In] uint rop);
BOOL PlgBlt([In] HDC hdcDest, [Const] [NativeArrayInfo(CountConst = 3)] [In] POINT* lpPoint, [In] HDC hdcSrc, [In] int xSrc, [In] int ySrc, [In] int width, [In] int height, [In] [Optional] HBITMAP hbmMask, [In] int xMask, [In] int yMask);
GDI_REGION_TYPE OffsetClipRgn([In] HDC hdc, [In] int x, [In] int y);
GDI_REGION_TYPE OffsetRgn([In] HRGN hrgn, [In] int x, [In] int y);
BOOL PatBlt([In] HDC hdc, [In] int x, [In] int y, [In] int w, [In] int h, [In] ROP_CODE rop);
BOOL Pie([In] HDC hdc, [In] int left, [In] int top, [In] int right, [In] int bottom, [In] int xr1, [In] int yr1, [In] int xr2, [In] int yr2);
BOOL PlayMetaFile([In] HDC hdc, [In] HMETAFILE hmf);
BOOL PaintRgn([In] HDC hdc, [In] HRGN hrgn);
BOOL PolyPolygon([In] HDC hdc, [Const] [In] POINT* apt, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] int* asz, [In] int csz);
BOOL PtInRegion([In] HRGN hrgn, [In] int x, [In] int y);
BOOL PtVisible([In] HDC hdc, [In] int x, [In] int y);
BOOL RectInRegion([In] HRGN hrgn, [Const] [In] RECT* lprect);
BOOL RectVisible([In] HDC hdc, [Const] [In] RECT* lprect);
BOOL Rectangle([In] HDC hdc, [In] int left, [In] int top, [In] int right, [In] int bottom);
BOOL RestoreDC([In] HDC hdc, [In] int nSavedDC);
HDC ResetDCA([In] HDC hdc, [Const] [In] DEVMODEA* lpdm);
HDC ResetDCW([In] HDC hdc, [Const] [In] DEVMODEW* lpdm);
uint RealizePalette([In] HDC hdc);
BOOL RemoveFontResourceA([Const] [In] PSTR lpFileName);
BOOL RemoveFontResourceW([Const] [In] PWSTR lpFileName);
BOOL RoundRect([In] HDC hdc, [In] int left, [In] int top, [In] int right, [In] int bottom, [In] int width, [In] int height);
BOOL ResizePalette([In] HPALETTE hpal, [In] uint n);
int SaveDC([In] HDC hdc);
GDI_REGION_TYPE SelectClipRgn([In] HDC hdc, [In] [Optional] HRGN hrgn);
GDI_REGION_TYPE ExtSelectClipRgn([In] HDC hdc, [In] [Optional] HRGN hrgn, [In] RGN_COMBINE_MODE mode);
GDI_REGION_TYPE SetMetaRgn([In] HDC hdc);
HGDIOBJ SelectObject([In] HDC hdc, [In] HGDIOBJ h);
HPALETTE SelectPalette([In] HDC hdc, [In] HPALETTE hPal, [In] BOOL bForceBkgd);
COLORREF SetBkColor([In] HDC hdc, [In] COLORREF color);
COLORREF SetDCBrushColor([In] HDC hdc, [In] COLORREF color);
COLORREF SetDCPenColor([In] HDC hdc, [In] COLORREF color);
int SetBkMode([In] HDC hdc, [In] BACKGROUND_MODE mode);
int SetBitmapBits([In] HBITMAP hbm, [In] uint cb, [Const] [MemorySize(BytesParamIndex = 1)] [In] void* pvBits);
uint SetBoundsRect([In] HDC hdc, [Const] [In] [Optional] RECT* lprect, [In] SET_BOUNDS_RECT_FLAGS flags);
int SetDIBits([In] [Optional] HDC hdc, [In] HBITMAP hbm, [In] uint start, [In] uint cLines, [Const] [In] void* lpBits, [Const] [In] BITMAPINFO* lpbmi, [In] DIB_USAGE ColorUse);
int SetDIBitsToDevice([In] HDC hdc, [In] int xDest, [In] int yDest, [In] uint w, [In] uint h, [In] int xSrc, [In] int ySrc, [In] uint StartScan, [In] uint cLines, [Const] [In] void* lpvBits, [Const] [In] BITMAPINFO* lpbmi, [In] DIB_USAGE ColorUse);
uint SetMapperFlags([In] HDC hdc, [In] uint flags);
int SetGraphicsMode([In] HDC hdc, [In] GRAPHICS_MODE iMode);
int SetMapMode([In] HDC hdc, [In] HDC_MAP_MODE iMode);
uint SetLayout([In] HDC hdc, [In] DC_LAYOUT l);
uint GetLayout([In] HDC hdc);
HMETAFILE SetMetaFileBitsEx([In] uint cbBuffer, [Const] [MemorySize(BytesParamIndex = 0)] [In] byte* lpData);
uint SetPaletteEntries([In] HPALETTE hpal, [In] uint iStart, [In] uint cEntries, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PALETTEENTRY* pPalEntries);
COLORREF SetPixel([In] HDC hdc, [In] int x, [In] int y, [In] COLORREF color);
BOOL SetPixelV([In] HDC hdc, [In] int x, [In] int y, [In] COLORREF color);
int SetPolyFillMode([In] HDC hdc, [In] CREATE_POLYGON_RGN_MODE mode);
BOOL StretchBlt([In] HDC hdcDest, [In] int xDest, [In] int yDest, [In] int wDest, [In] int hDest, [In] [Optional] HDC hdcSrc, [In] int xSrc, [In] int ySrc, [In] int wSrc, [In] int hSrc, [In] ROP_CODE rop);
BOOL SetRectRgn([In] HRGN hrgn, [In] int left, [In] int top, [In] int right, [In] int bottom);
int StretchDIBits([In] HDC hdc, [In] int xDest, [In] int yDest, [In] int DestWidth, [In] int DestHeight, [In] int xSrc, [In] int ySrc, [In] int SrcWidth, [In] int SrcHeight, [Const] [In] [Optional] void* lpBits, [Const] [In] BITMAPINFO* lpbmi, [In] DIB_USAGE iUsage, [In] ROP_CODE rop);
int SetROP2([In] HDC hdc, [In] R2_MODE rop2);
int SetStretchBltMode([In] HDC hdc, [In] STRETCH_BLT_MODE mode);
uint SetSystemPaletteUse([In] HDC hdc, [In] SYSTEM_PALETTE_USE use);
int SetTextCharacterExtra([In] HDC hdc, [In] int extra);
COLORREF SetTextColor([In] HDC hdc, [In] COLORREF color);
uint SetTextAlign([In] HDC hdc, [In] TEXT_ALIGN_OPTIONS align);
BOOL SetTextJustification([In] HDC hdc, [In] int extra, [In] int count);
BOOL UpdateColors([In] HDC hdc);
BOOL GdiAlphaBlend([In] HDC hdcDest, [In] int xoriginDest, [In] int yoriginDest, [In] int wDest, [In] int hDest, [In] HDC hdcSrc, [In] int xoriginSrc, [In] int yoriginSrc, [In] int wSrc, [In] int hSrc, [In] BLENDFUNCTION ftn);
BOOL GdiTransparentBlt([In] HDC hdcDest, [In] int xoriginDest, [In] int yoriginDest, [In] int wDest, [In] int hDest, [In] HDC hdcSrc, [In] int xoriginSrc, [In] int yoriginSrc, [In] int wSrc, [In] int hSrc, [In] uint crTransparent);
BOOL GdiGradientFill([In] HDC hdc, [NativeArrayInfo(CountParamIndex = 2)] [In] TRIVERTEX* pVertex, [In] uint nVertex, [In] void* pMesh, [In] uint nCount, [In] GRADIENT_FILL ulMode);
BOOL PlayMetaFileRecord([In] HDC hdc, [NativeArrayInfo(CountParamIndex = 3)] [In] HANDLETABLE* lpHandleTable, [In] METARECORD* lpMR, [In] uint noObjs);
BOOL EnumMetaFile([In] HDC hdc, [In] HMETAFILE hmf, [In] MFENUMPROC proc, [In] [Optional] LPARAM param3);
HENHMETAFILE CloseEnhMetaFile([In] HDC hdc);
HENHMETAFILE CopyEnhMetaFileA([In] HENHMETAFILE hEnh, [Const] [In] [Optional] PSTR lpFileName);
HENHMETAFILE CopyEnhMetaFileW([In] HENHMETAFILE hEnh, [Const] [In] [Optional] PWSTR lpFileName);
HdcMetdataEnhFileHandle CreateEnhMetaFileA([In] [Optional] HDC hdc, [Const] [In] [Optional] PSTR lpFilename, [Const] [In] [Optional] RECT* lprc, [Const] [In] [Optional] PSTR lpDesc);
HdcMetdataEnhFileHandle CreateEnhMetaFileW([In] [Optional] HDC hdc, [Const] [In] [Optional] PWSTR lpFilename, [Const] [In] [Optional] RECT* lprc, [Const] [In] [Optional] PWSTR lpDesc);
BOOL DeleteEnhMetaFile([In] [Optional] HENHMETAFILE hmf);
BOOL EnumEnhMetaFile([In] [Optional] HDC hdc, [In] HENHMETAFILE hmf, [In] ENHMFENUMPROC proc, [In] [Optional] void* param3, [Const] [In] [Optional] RECT* lpRect);
HENHMETAFILE GetEnhMetaFileA([Const] [In] PSTR lpName);
HENHMETAFILE GetEnhMetaFileW([Const] [In] PWSTR lpName);
uint GetEnhMetaFileBits([In] HENHMETAFILE hEMF, [In] uint nSize, [MemorySize(BytesParamIndex = 1)] [Out] [Optional] byte* lpData);
uint GetEnhMetaFileDescriptionA([In] HENHMETAFILE hemf, [In] uint cchBuffer, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PSTR lpDescription);
uint GetEnhMetaFileDescriptionW([In] HENHMETAFILE hemf, [In] uint cchBuffer, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR lpDescription);
uint GetEnhMetaFileHeader([In] HENHMETAFILE hemf, [In] uint nSize, [MemorySize(BytesParamIndex = 1)] [Out] [Optional] ENHMETAHEADER* lpEnhMetaHeader);
uint GetEnhMetaFilePaletteEntries([In] HENHMETAFILE hemf, [In] uint nNumEntries, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PALETTEENTRY* lpPaletteEntries);
uint GetWinMetaFileBits([In] HENHMETAFILE hemf, [In] uint cbData16, [MemorySize(BytesParamIndex = 1)] [Out] [Optional] byte* pData16, [In] int iMapMode, [In] HDC hdcRef);
BOOL PlayEnhMetaFile([In] HDC hdc, [In] HENHMETAFILE hmf, [Const] [In] RECT* lprect);
BOOL PlayEnhMetaFileRecord([In] HDC hdc, [NativeArrayInfo(CountParamIndex = 3)] [In] HANDLETABLE* pht, [Const] [In] ENHMETARECORD* pmr, [In] uint cht);
HENHMETAFILE SetEnhMetaFileBits([In] uint nSize, [Const] [MemorySize(BytesParamIndex = 0)] [In] byte* pb);
BOOL GdiComment([In] HDC hdc, [In] uint nSize, [Const] [MemorySize(BytesParamIndex = 1)] [In] byte* lpData);
BOOL GetTextMetricsA([In] HDC hdc, [Out] TEXTMETRICA* lptm);
BOOL GetTextMetricsW([In] HDC hdc, [Out] TEXTMETRICW* lptm);
BOOL AngleArc([In] HDC hdc, [In] int x, [In] int y, [In] uint r, [In] float StartAngle, [In] float SweepAngle);
BOOL PolyPolyline([In] HDC hdc, [Const] [In] POINT* apt, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] uint* asz, [In] uint csz);
BOOL GetWorldTransform([In] HDC hdc, [Out] XFORM* lpxf);
BOOL SetWorldTransform([In] HDC hdc, [Const] [In] XFORM* lpxf);
BOOL ModifyWorldTransform([In] HDC hdc, [Const] [In] [Optional] XFORM* lpxf, [In] MODIFY_WORLD_TRANSFORM_MODE mode);
BOOL CombineTransform([Out] XFORM* lpxfOut, [Const] [In] XFORM* lpxf1, [Const] [In] XFORM* lpxf2);
HBITMAP CreateDIBSection([In] [Optional] HDC hdc, [Const] [In] BITMAPINFO* pbmi, [In] DIB_USAGE usage, [Out] void** ppvBits, [In] [Optional] HANDLE hSection, [In] uint offset);
uint GetDIBColorTable([In] HDC hdc, [In] uint iStart, [In] uint cEntries, [NativeArrayInfo(CountParamIndex = 2)] [Out] RGBQUAD* prgbq);
uint SetDIBColorTable([In] HDC hdc, [In] uint iStart, [In] uint cEntries, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] RGBQUAD* prgbq);
BOOL SetColorAdjustment([In] HDC hdc, [Const] [In] COLORADJUSTMENT* lpca);
BOOL GetColorAdjustment([In] HDC hdc, [Out] COLORADJUSTMENT* lpca);
HPALETTE CreateHalftonePalette([In] [Optional] HDC hdc);
BOOL AbortPath([In] HDC hdc);
BOOL ArcTo([In] HDC hdc, [In] int left, [In] int top, [In] int right, [In] int bottom, [In] int xr1, [In] int yr1, [In] int xr2, [In] int yr2);
BOOL BeginPath([In] HDC hdc);
BOOL CloseFigure([In] HDC hdc);
BOOL EndPath([In] HDC hdc);
BOOL FillPath([In] HDC hdc);
BOOL FlattenPath([In] HDC hdc);
int GetPath([In] HDC hdc, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] POINT* apt, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] byte* aj, [In] int cpt);
HRGN PathToRegion([In] HDC hdc);
BOOL PolyDraw([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] POINT* apt, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] byte* aj, [In] int cpt);
BOOL SelectClipPath([In] HDC hdc, [In] RGN_COMBINE_MODE mode);
int SetArcDirection([In] HDC hdc, [In] ARC_DIRECTION dir);
BOOL SetMiterLimit([In] HDC hdc, [In] float limit, [Out] [Optional] float* old);
BOOL StrokeAndFillPath([In] HDC hdc);
BOOL StrokePath([In] HDC hdc);
BOOL WidenPath([In] HDC hdc);
HPEN ExtCreatePen([In] PEN_STYLE iPenStyle, [In] uint cWidth, [Const] [In] LOGBRUSH* plbrush, [In] uint cStyle, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] uint* pstyle);
BOOL GetMiterLimit([In] HDC hdc, [Out] float* plimit);
int GetArcDirection([In] HDC hdc);
int GetObjectW([In] HGDIOBJ h, [In] int c, [MemorySize(BytesParamIndex = 1)] [Out] [Optional] void* pv);
BOOL MoveToEx([In] HDC hdc, [In] int x, [In] int y, [Out] [Optional] POINT* lppt);
BOOL TextOutA([In] HDC hdc, [In] int x, [In] int y, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] PSTR lpString, [In] int c);
BOOL TextOutW([In] HDC hdc, [In] int x, [In] int y, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] PWSTR lpString, [In] int c);
BOOL ExtTextOutA([In] HDC hdc, [In] int x, [In] int y, [In] ETO_OPTIONS options, [Const] [In] [Optional] RECT* lprect, [Const] [NativeArrayInfo(CountParamIndex = 6)] [In] [Optional] PSTR lpString, [In] uint c, [Const] [NativeArrayInfo(CountParamIndex = 6)] [In] [Optional] int* lpDx);
BOOL ExtTextOutW([In] HDC hdc, [In] int x, [In] int y, [In] ETO_OPTIONS options, [Const] [In] [Optional] RECT* lprect, [Const] [NativeArrayInfo(CountParamIndex = 6)] [In] [Optional] PWSTR lpString, [In] uint c, [Const] [NativeArrayInfo(CountParamIndex = 6)] [In] [Optional] int* lpDx);
BOOL PolyTextOutA([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] POLYTEXTA* ppt, [In] int nstrings);
BOOL PolyTextOutW([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] POLYTEXTW* ppt, [In] int nstrings);
HRGN CreatePolygonRgn([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] POINT* pptl, [In] int cPoint, [In] CREATE_POLYGON_RGN_MODE iMode);
BOOL DPtoLP([In] HDC hdc, [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] POINT* lppt, [In] int c);
BOOL LPtoDP([In] HDC hdc, [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] POINT* lppt, [In] int c);
BOOL Polygon([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] POINT* apt, [In] int cpt);
BOOL Polyline([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] POINT* apt, [In] int cpt);
BOOL PolyBezier([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] POINT* apt, [In] uint cpt);
BOOL PolyBezierTo([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] POINT* apt, [In] uint cpt);
BOOL PolylineTo([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] POINT* apt, [In] uint cpt);
BOOL SetViewportExtEx([In] HDC hdc, [In] int x, [In] int y, [Out] [Optional] SIZE* lpsz);
BOOL SetViewportOrgEx([In] HDC hdc, [In] int x, [In] int y, [Out] [Optional] POINT* lppt);
BOOL SetWindowExtEx([In] HDC hdc, [In] int x, [In] int y, [Out] [Optional] SIZE* lpsz);
BOOL SetWindowOrgEx([In] HDC hdc, [In] int x, [In] int y, [Out] [Optional] POINT* lppt);
BOOL OffsetViewportOrgEx([In] HDC hdc, [In] int x, [In] int y, [Out] [Optional] POINT* lppt);
BOOL OffsetWindowOrgEx([In] HDC hdc, [In] int x, [In] int y, [Out] [Optional] POINT* lppt);
BOOL ScaleViewportExtEx([In] HDC hdc, [In] int xn, [In] int dx, [In] int yn, [In] int yd, [Out] [Optional] SIZE* lpsz);
BOOL ScaleWindowExtEx([In] HDC hdc, [In] int xn, [In] int xd, [In] int yn, [In] int yd, [Out] [Optional] SIZE* lpsz);
BOOL SetBitmapDimensionEx([In] HBITMAP hbm, [In] int w, [In] int h, [Out] [Optional] SIZE* lpsz);
BOOL SetBrushOrgEx([In] HDC hdc, [In] int x, [In] int y, [Out] [Optional] POINT* lppt);
int GetTextFaceA([In] HDC hdc, [In] int c, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PSTR lpName);
int GetTextFaceW([In] HDC hdc, [In] int c, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR lpName);
uint GetKerningPairsA([In] HDC hdc, [In] uint nPairs, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] KERNINGPAIR* lpKernPair);
uint GetKerningPairsW([In] HDC hdc, [In] uint nPairs, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] KERNINGPAIR* lpKernPair);
BOOL GetDCOrgEx([In] HDC hdc, [Out] POINT* lppt);
BOOL FixBrushOrgEx([In] HDC hdc, [In] int x, [In] int y, [In] [Optional] POINT* ptl);
BOOL UnrealizeObject([In] HGDIOBJ h);
BOOL GdiFlush();
uint GdiSetBatchLimit([In] uint dw);
uint GdiGetBatchLimit();
int ChoosePixelFormat([In] HDC hdc, [Const] [In] PIXELFORMATDESCRIPTOR* ppfd);
int DescribePixelFormat([In] HDC hdc, [In] PFD_PIXEL_TYPE iPixelFormat, [In] uint nBytes, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] PIXELFORMATDESCRIPTOR* ppfd);
int GetPixelFormat([In] HDC hdc);
BOOL SetPixelFormat([In] HDC hdc, [In] int format, [Const] [In] PIXELFORMATDESCRIPTOR* ppfd);
uint GetEnhMetaFilePixelFormat([In] HENHMETAFILE hemf, [In] uint cbBuffer, [MemorySize(BytesParamIndex = 1)] [Out] [Optional] PIXELFORMATDESCRIPTOR* ppfd);
BOOL SwapBuffers([In] HDC param0);
HANDLE GdiGetSpoolFileHandle([In] PWSTR pwszPrinterName, [In] [Out] DEVMODEW* pDevmode, [In] PWSTR pwszDocName);
BOOL GdiDeleteSpoolFileHandle([In] HANDLE SpoolFileHandle);
uint GdiGetPageCount([In] HANDLE SpoolFileHandle);
HDC GdiGetDC([In] HANDLE SpoolFileHandle);
HANDLE GdiGetPageHandle([In] HANDLE SpoolFileHandle, [In] uint Page, [In] [Out] uint* pdwPageType);
BOOL GdiStartDocEMF([In] HANDLE SpoolFileHandle, [In] [Out] DOCINFOW* pDocInfo);
BOOL GdiStartPageEMF([In] HANDLE SpoolFileHandle);
BOOL GdiPlayPageEMF([In] HANDLE SpoolFileHandle, [In] HANDLE hemf, [In] [Out] RECT* prectDocument, [In] [Out] RECT* prectBorder, [In] [Out] RECT* prectClip);
BOOL GdiEndPageEMF([In] HANDLE SpoolFileHandle, [In] uint dwOptimization);
BOOL GdiEndDocEMF([In] HANDLE SpoolFileHandle);
BOOL GdiGetDevmodeForPage([In] HANDLE SpoolFileHandle, [In] uint dwPageNumber, [In] [Out] DEVMODEW** pCurrDM, [In] [Out] DEVMODEW** pLastDM);
BOOL GdiResetDCEMF([In] HANDLE SpoolFileHandle, [In] [Out] DEVMODEW* pCurrDM);
int Escape([In] HDC hdc, [In] int iEscape, [In] int cjIn, [Const] [MemorySize(BytesParamIndex = 2)] [In] [Optional] PSTR pvIn, [Out] [Optional] void* pvOut);
int ExtEscape([In] HDC hdc, [In] int iEscape, [In] int cjInput, [Const] [MemorySize(BytesParamIndex = 2)] [In] [Optional] PSTR lpInData, [In] int cjOutput, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] PSTR lpOutData);
int StartDocA([In] HDC hdc, [Const] [In] DOCINFOA* lpdi);
int StartDocW([In] HDC hdc, [Const] [In] DOCINFOW* lpdi);
int EndDoc([In] HDC hdc);
int StartPage([In] HDC hdc);
int EndPage([In] HDC hdc);
int AbortDoc([In] HDC hdc);
int SetAbortProc([In] HDC hdc, [In] ABORTPROC proc);
HENHMETAFILE SetWinMetaFileBits([In] uint nSize, [Const] [MemorySize(BytesParamIndex = 0)] [In] byte* lpMeta16Data, [In] [Optional] HDC hdcRef, [Const] [In] [Optional] METAFILEPICT* lpMFP);
int SetICMMode([In] HDC hdc, [In] ICM_MODE mode);
BOOL CheckColorsInGamut([In] HDC hdc, [NativeArrayInfo(CountParamIndex = 3)] [In] RGBTRIPLE* lpRGBTriple, [MemorySize(BytesParamIndex = 3)] [Out] void* dlpBuffer, [In] uint nCount);
HCOLORSPACE GetColorSpace([In] HDC hdc);
BOOL GetLogColorSpaceA([In] HCOLORSPACE hColorSpace, [MemorySize(BytesParamIndex = 2)] [Out] LOGCOLORSPACEA* lpBuffer, [In] uint nSize);
BOOL GetLogColorSpaceW([In] HCOLORSPACE hColorSpace, [MemorySize(BytesParamIndex = 2)] [Out] LOGCOLORSPACEW* lpBuffer, [In] uint nSize);
HCOLORSPACE CreateColorSpaceA([In] LOGCOLORSPACEA* lplcs);
HCOLORSPACE CreateColorSpaceW([In] LOGCOLORSPACEW* lplcs);
HCOLORSPACE SetColorSpace([In] HDC hdc, [In] HCOLORSPACE hcs);
BOOL DeleteColorSpace([In] HCOLORSPACE hcs);
BOOL GetICMProfileA([In] HDC hdc, [In] [Out] uint* pBufSize, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PSTR pszFilename);
BOOL GetICMProfileW([In] HDC hdc, [In] [Out] uint* pBufSize, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR pszFilename);
BOOL SetICMProfileA([In] HDC hdc, [In] PSTR lpFileName);
BOOL SetICMProfileW([In] HDC hdc, [In] PWSTR lpFileName);
BOOL GetDeviceGammaRamp([In] HDC hdc, [Out] void* lpRamp);
BOOL SetDeviceGammaRamp([In] HDC hdc, [In] void* lpRamp);
BOOL ColorMatchToTarget([In] HDC hdc, [In] HDC hdcTarget, [In] COLOR_MATCH_TO_TARGET_ACTION action);
int EnumICMProfilesA([In] HDC hdc, [In] ICMENUMPROCA proc, [In] [Optional] LPARAM param2);
int EnumICMProfilesW([In] HDC hdc, [In] ICMENUMPROCW proc, [In] [Optional] LPARAM param2);
BOOL UpdateICMRegKeyA([Reserved] [In] uint reserved, [In] PSTR lpszCMID, [In] PSTR lpszFileName, [In] ICM_COMMAND command);
BOOL UpdateICMRegKeyW([Reserved] [In] uint reserved, [In] PWSTR lpszCMID, [In] PWSTR lpszFileName, [In] ICM_COMMAND command);
BOOL ColorCorrectPalette([In] HDC hdc, [In] HPALETTE hPal, [In] uint deFirst, [In] uint num);
