HRESULT PrjStartVirtualizing([Const] [In] PWSTR virtualizationRootPath, [Const] [In] PRJ_CALLBACKS* callbacks, [Const] [In] [Optional] void* instanceContext, [Const] [In] [Optional] PRJ_STARTVIRTUALIZING_OPTIONS* options, [Out] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT* namespaceVirtualizationContext);
void PrjStopVirtualizing([In] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext);
HRESULT PrjClearNegativePathCache([In] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [Out] [Optional] uint* totalEntryNumber);
HRESULT PrjGetVirtualizationInstanceInfo([In] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [Out] PRJ_VIRTUALIZATION_INSTANCE_INFO* virtualizationInstanceInfo);
HRESULT PrjMarkDirectoryAsPlaceholder([Const] [In] PWSTR rootPathName, [Const] [In] [Optional] PWSTR targetPathName, [Const] [In] [Optional] PRJ_PLACEHOLDER_VERSION_INFO* versionInfo, [Const] [In] Guid* virtualizationInstanceID);
HRESULT PrjWritePlaceholderInfo([In] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [Const] [In] PWSTR destinationFileName, [Const] [MemorySize(BytesParamIndex = 3)] [In] PRJ_PLACEHOLDER_INFO* placeholderInfo, [In] uint placeholderInfoSize);
HRESULT PrjWritePlaceholderInfo2([In] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [Const] [In] PWSTR destinationFileName, [Const] [MemorySize(BytesParamIndex = 3)] [In] PRJ_PLACEHOLDER_INFO* placeholderInfo, [In] uint placeholderInfoSize, [Const] [In] [Optional] PRJ_EXTENDED_INFO* ExtendedInfo);
HRESULT PrjUpdateFileIfNeeded([In] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [Const] [In] PWSTR destinationFileName, [Const] [MemorySize(BytesParamIndex = 3)] [In] PRJ_PLACEHOLDER_INFO* placeholderInfo, [In] uint placeholderInfoSize, [In] [Optional] PRJ_UPDATE_TYPES updateFlags, [Out] [Optional] PRJ_UPDATE_FAILURE_CAUSES* failureReason);
HRESULT PrjDeleteFile([In] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [Const] [In] PWSTR destinationFileName, [In] [Optional] PRJ_UPDATE_TYPES updateFlags, [Out] [Optional] PRJ_UPDATE_FAILURE_CAUSES* failureReason);
HRESULT PrjWriteFileData([In] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [Const] [In] Guid* dataStreamId, [MemorySize(BytesParamIndex = 4)] [In] void* buffer, [In] ulong byteOffset, [In] uint length);
HRESULT PrjGetOnDiskFileState([Const] [In] PWSTR destinationFileName, [Out] PRJ_FILE_STATE* fileState);
void* PrjAllocateAlignedBuffer([In] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [In] nuint size);
void PrjFreeAlignedBuffer([In] void* buffer);
HRESULT PrjCompleteCommand([In] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [In] int commandId, [In] HRESULT completionResult, [In] [Optional] PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS* extendedParameters);
HRESULT PrjFillDirEntryBuffer([Const] [In] PWSTR fileName, [In] [Optional] PRJ_FILE_BASIC_INFO* fileBasicInfo, [In] PRJ_DIR_ENTRY_BUFFER_HANDLE dirEntryBufferHandle);
HRESULT PrjFillDirEntryBuffer2([In] PRJ_DIR_ENTRY_BUFFER_HANDLE dirEntryBufferHandle, [Const] [In] PWSTR fileName, [In] [Optional] PRJ_FILE_BASIC_INFO* fileBasicInfo, [In] [Optional] PRJ_EXTENDED_INFO* extendedInfo);
BOOLEAN PrjFileNameMatch([Const] [In] PWSTR fileNameToCheck, [Const] [In] PWSTR pattern);
int PrjFileNameCompare([Const] [In] PWSTR fileName1, [Const] [In] PWSTR fileName2);
BOOLEAN PrjDoesNameContainWildCards([Const] [In] PWSTR fileName);
