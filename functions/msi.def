uint MsiCloseHandle([In] MSIHANDLE hAny);
uint MsiCloseAllHandles();
INSTALLUILEVEL MsiSetInternalUI([In] INSTALLUILEVEL dwUILevel, [In] [Out] [Optional] HWND* phWnd);
INSTALLUI_HANDLERA MsiSetExternalUIA([In] [Optional] INSTALLUI_HANDLERA puiHandler, [In] uint dwMessageFilter, [In] [Optional] void* pvContext);
INSTALLUI_HANDLERW MsiSetExternalUIW([In] [Optional] INSTALLUI_HANDLERW puiHandler, [In] uint dwMessageFilter, [In] [Optional] void* pvContext);
uint MsiSetExternalUIRecord([In] [Optional] PINSTALLUI_HANDLER_RECORD puiHandler, [In] uint dwMessageFilter, [In] [Optional] void* pvContext, [Optional] PINSTALLUI_HANDLER_RECORD ppuiPrevHandler);
uint MsiEnableLogA([In] INSTALLLOGMODE dwLogMode, [Const] [In] [Optional] PSTR szLogFile, [In] uint dwLogAttributes);
uint MsiEnableLogW([In] INSTALLLOGMODE dwLogMode, [Const] [In] [Optional] PWSTR szLogFile, [In] uint dwLogAttributes);
INSTALLSTATE MsiQueryProductStateA([Const] [In] PSTR szProduct);
INSTALLSTATE MsiQueryProductStateW([Const] [In] PWSTR szProduct);
uint MsiGetProductInfoA([Const] [In] PSTR szProduct, [Const] [In] PSTR szAttribute, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR lpValueBuf, [In] [Out] [Optional] uint* pcchValueBuf);
uint MsiGetProductInfoW([Const] [In] PWSTR szProduct, [Const] [In] PWSTR szAttribute, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR lpValueBuf, [In] [Out] [Optional] uint* pcchValueBuf);
uint MsiGetProductInfoExA([Const] [In] PSTR szProductCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [Const] [In] PSTR szProperty, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR szValue, [In] [Out] [Optional] uint* pcchValue);
uint MsiGetProductInfoExW([Const] [In] PWSTR szProductCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [Const] [In] PWSTR szProperty, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR szValue, [In] [Out] [Optional] uint* pcchValue);
uint MsiInstallProductA([Const] [In] PSTR szPackagePath, [Const] [In] [Optional] PSTR szCommandLine);
uint MsiInstallProductW([Const] [In] PWSTR szPackagePath, [Const] [In] [Optional] PWSTR szCommandLine);
uint MsiConfigureProductA([Const] [In] PSTR szProduct, [In] INSTALLLEVEL iInstallLevel, [In] INSTALLSTATE eInstallState);
uint MsiConfigureProductW([Const] [In] PWSTR szProduct, [In] INSTALLLEVEL iInstallLevel, [In] INSTALLSTATE eInstallState);
uint MsiConfigureProductExA([Const] [In] PSTR szProduct, [In] INSTALLLEVEL iInstallLevel, [In] INSTALLSTATE eInstallState, [Const] [In] [Optional] PSTR szCommandLine);
uint MsiConfigureProductExW([Const] [In] PWSTR szProduct, [In] INSTALLLEVEL iInstallLevel, [In] INSTALLSTATE eInstallState, [Const] [In] [Optional] PWSTR szCommandLine);
uint MsiReinstallProductA([Const] [In] PSTR szProduct, [In] REINSTALLMODE szReinstallMode);
uint MsiReinstallProductW([Const] [In] PWSTR szProduct, [In] REINSTALLMODE szReinstallMode);
uint MsiAdvertiseProductExA([Const] [In] PSTR szPackagePath, [Const] [In] [Optional] PSTR szScriptfilePath, [Const] [In] [Optional] PSTR szTransforms, [In] ushort lgidLanguage, [In] uint dwPlatform, [In] uint dwOptions);
uint MsiAdvertiseProductExW([Const] [In] PWSTR szPackagePath, [Const] [In] [Optional] PWSTR szScriptfilePath, [Const] [In] [Optional] PWSTR szTransforms, [In] ushort lgidLanguage, [In] uint dwPlatform, [In] uint dwOptions);
uint MsiAdvertiseProductA([Const] [In] PSTR szPackagePath, [Const] [In] [Optional] PSTR szScriptfilePath, [Const] [In] [Optional] PSTR szTransforms, [In] ushort lgidLanguage);
uint MsiAdvertiseProductW([Const] [In] PWSTR szPackagePath, [Const] [In] [Optional] PWSTR szScriptfilePath, [Const] [In] [Optional] PWSTR szTransforms, [In] ushort lgidLanguage);
uint MsiProcessAdvertiseScriptA([Const] [In] PSTR szScriptFile, [Const] [In] [Optional] PSTR szIconFolder, [In] [Optional] HKEY hRegData, [In] BOOL fShortcuts, [In] BOOL fRemoveItems);
uint MsiProcessAdvertiseScriptW([Const] [In] PWSTR szScriptFile, [Const] [In] [Optional] PWSTR szIconFolder, [In] [Optional] HKEY hRegData, [In] BOOL fShortcuts, [In] BOOL fRemoveItems);
uint MsiAdvertiseScriptA([Const] [In] PSTR szScriptFile, [In] uint dwFlags, [In] [Optional] HKEY* phRegData, [In] BOOL fRemoveItems);
uint MsiAdvertiseScriptW([Const] [In] PWSTR szScriptFile, [In] uint dwFlags, [In] [Optional] HKEY* phRegData, [In] BOOL fRemoveItems);
uint MsiGetProductInfoFromScriptA([Const] [In] PSTR szScriptFile, [Out] [Optional] PSTR lpProductBuf39, [Out] [Optional] ushort* plgidLanguage, [Out] [Optional] uint* pdwVersion, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR lpNameBuf, [In] [Out] [Optional] uint* pcchNameBuf, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] PSTR lpPackageBuf, [In] [Out] [Optional] uint* pcchPackageBuf);
uint MsiGetProductInfoFromScriptW([Const] [In] PWSTR szScriptFile, [Out] [Optional] PWSTR lpProductBuf39, [Out] [Optional] ushort* plgidLanguage, [Out] [Optional] uint* pdwVersion, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR lpNameBuf, [In] [Out] [Optional] uint* pcchNameBuf, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] PWSTR lpPackageBuf, [In] [Out] [Optional] uint* pcchPackageBuf);
uint MsiGetProductCodeA([Const] [In] PSTR szComponent, [Out] PSTR lpBuf39);
uint MsiGetProductCodeW([Const] [In] PWSTR szComponent, [Out] PWSTR lpBuf39);
USERINFOSTATE MsiGetUserInfoA([Const] [In] PSTR szProduct, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpUserNameBuf, [In] [Out] [Optional] uint* pcchUserNameBuf, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR lpOrgNameBuf, [In] [Out] [Optional] uint* pcchOrgNameBuf, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PSTR lpSerialBuf, [In] [Out] [Optional] uint* pcchSerialBuf);
USERINFOSTATE MsiGetUserInfoW([Const] [In] PWSTR szProduct, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpUserNameBuf, [In] [Out] [Optional] uint* pcchUserNameBuf, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR lpOrgNameBuf, [In] [Out] [Optional] uint* pcchOrgNameBuf, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PWSTR lpSerialBuf, [In] [Out] [Optional] uint* pcchSerialBuf);
uint MsiCollectUserInfoA([Const] [In] PSTR szProduct);
uint MsiCollectUserInfoW([Const] [In] PWSTR szProduct);
uint MsiApplyPatchA([Const] [In] PSTR szPatchPackage, [Const] [In] [Optional] PSTR szInstallPackage, [In] INSTALLTYPE eInstallType, [Const] [In] [Optional] PSTR szCommandLine);
uint MsiApplyPatchW([Const] [In] PWSTR szPatchPackage, [Const] [In] [Optional] PWSTR szInstallPackage, [In] INSTALLTYPE eInstallType, [Const] [In] [Optional] PWSTR szCommandLine);
uint MsiGetPatchInfoA([Const] [In] PSTR szPatch, [Const] [In] PSTR szAttribute, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR lpValueBuf, [In] [Out] [Optional] uint* pcchValueBuf);
uint MsiGetPatchInfoW([Const] [In] PWSTR szPatch, [Const] [In] PWSTR szAttribute, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR lpValueBuf, [In] [Out] [Optional] uint* pcchValueBuf);
uint MsiEnumPatchesA([Const] [In] PSTR szProduct, [In] uint iPatchIndex, [Out] PSTR lpPatchBuf, [NativeArrayInfo(CountParamIndex = 4)] [Out] PSTR lpTransformsBuf, [In] [Out] uint* pcchTransformsBuf);
uint MsiEnumPatchesW([Const] [In] PWSTR szProduct, [In] uint iPatchIndex, [Out] PWSTR lpPatchBuf, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR lpTransformsBuf, [In] [Out] uint* pcchTransformsBuf);
uint MsiRemovePatchesA([Const] [In] PSTR szPatchList, [Const] [In] PSTR szProductCode, [In] INSTALLTYPE eUninstallType, [Const] [In] [Optional] PSTR szPropertyList);
uint MsiRemovePatchesW([Const] [In] PWSTR szPatchList, [Const] [In] PWSTR szProductCode, [In] INSTALLTYPE eUninstallType, [Const] [In] [Optional] PWSTR szPropertyList);
uint MsiExtractPatchXMLDataA([Const] [In] PSTR szPatchPath, [Reserved] [In] uint dwReserved, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR szXMLData, [In] [Out] [Optional] uint* pcchXMLData);
uint MsiExtractPatchXMLDataW([Const] [In] PWSTR szPatchPath, [Reserved] [In] uint dwReserved, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR szXMLData, [In] [Out] [Optional] uint* pcchXMLData);
uint MsiGetPatchInfoExA([Const] [In] PSTR szPatchCode, [Const] [In] PSTR szProductCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [Const] [In] PSTR szProperty, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PSTR lpValue, [In] [Out] [Optional] uint* pcchValue);
uint MsiGetPatchInfoExW([Const] [In] PWSTR szPatchCode, [Const] [In] PWSTR szProductCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [Const] [In] PWSTR szProperty, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PWSTR lpValue, [In] [Out] [Optional] uint* pcchValue);
uint MsiApplyMultiplePatchesA([Const] [In] PSTR szPatchPackages, [Const] [In] [Optional] PSTR szProductCode, [Const] [In] [Optional] PSTR szPropertiesList);
uint MsiApplyMultiplePatchesW([Const] [In] PWSTR szPatchPackages, [Const] [In] [Optional] PWSTR szProductCode, [Const] [In] [Optional] PWSTR szPropertiesList);
uint MsiDeterminePatchSequenceA([Const] [In] PSTR szProductCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint cPatchInfo, [NativeArrayInfo(CountParamIndex = 3)] [In] [Out] MSIPATCHSEQUENCEINFOA* pPatchInfo);
uint MsiDeterminePatchSequenceW([Const] [In] PWSTR szProductCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint cPatchInfo, [NativeArrayInfo(CountParamIndex = 3)] [In] [Out] MSIPATCHSEQUENCEINFOW* pPatchInfo);
uint MsiDetermineApplicablePatchesA([Const] [In] PSTR szProductPackagePath, [In] uint cPatchInfo, [NativeArrayInfo(CountParamIndex = 1)] [In] [Out] MSIPATCHSEQUENCEINFOA* pPatchInfo);
uint MsiDetermineApplicablePatchesW([Const] [In] PWSTR szProductPackagePath, [In] uint cPatchInfo, [NativeArrayInfo(CountParamIndex = 1)] [In] [Out] MSIPATCHSEQUENCEINFOW* pPatchInfo);
uint MsiEnumPatchesExA([Const] [In] [Optional] PSTR szProductCode, [Const] [In] [Optional] PSTR szUserSid, [In] uint dwContext, [In] uint dwFilter, [In] uint dwIndex, [Out] [Optional] PSTR szPatchCode, [Out] [Optional] PSTR szTargetProductCode, [Out] [Optional] MSIINSTALLCONTEXT* pdwTargetProductContext, [NativeArrayInfo(CountParamIndex = 9)] [Out] [Optional] PSTR szTargetUserSid, [In] [Out] [Optional] uint* pcchTargetUserSid);
uint MsiEnumPatchesExW([Const] [In] [Optional] PWSTR szProductCode, [Const] [In] [Optional] PWSTR szUserSid, [In] uint dwContext, [In] uint dwFilter, [In] uint dwIndex, [Out] [Optional] PWSTR szPatchCode, [Out] [Optional] PWSTR szTargetProductCode, [Out] [Optional] MSIINSTALLCONTEXT* pdwTargetProductContext, [NativeArrayInfo(CountParamIndex = 9)] [Out] [Optional] PWSTR szTargetUserSid, [In] [Out] [Optional] uint* pcchTargetUserSid);
INSTALLSTATE MsiQueryFeatureStateA([Const] [In] PSTR szProduct, [Const] [In] PSTR szFeature);
INSTALLSTATE MsiQueryFeatureStateW([Const] [In] PWSTR szProduct, [Const] [In] PWSTR szFeature);
uint MsiQueryFeatureStateExA([Const] [In] PSTR szProductCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [Const] [In] PSTR szFeature, [Out] [Optional] INSTALLSTATE* pdwState);
uint MsiQueryFeatureStateExW([Const] [In] PWSTR szProductCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [Const] [In] PWSTR szFeature, [Out] [Optional] INSTALLSTATE* pdwState);
INSTALLSTATE MsiUseFeatureA([Const] [In] PSTR szProduct, [Const] [In] PSTR szFeature);
INSTALLSTATE MsiUseFeatureW([Const] [In] PWSTR szProduct, [Const] [In] PWSTR szFeature);
INSTALLSTATE MsiUseFeatureExA([Const] [In] PSTR szProduct, [Const] [In] PSTR szFeature, [In] uint dwInstallMode, [Reserved] [In] uint dwReserved);
INSTALLSTATE MsiUseFeatureExW([Const] [In] PWSTR szProduct, [Const] [In] PWSTR szFeature, [In] uint dwInstallMode, [Reserved] [In] uint dwReserved);
uint MsiGetFeatureUsageA([Const] [In] PSTR szProduct, [Const] [In] PSTR szFeature, [Out] [Optional] uint* pdwUseCount, [Out] [Optional] ushort* pwDateUsed);
uint MsiGetFeatureUsageW([Const] [In] PWSTR szProduct, [Const] [In] PWSTR szFeature, [Out] [Optional] uint* pdwUseCount, [Out] [Optional] ushort* pwDateUsed);
uint MsiConfigureFeatureA([Const] [In] PSTR szProduct, [Const] [In] PSTR szFeature, [In] INSTALLSTATE eInstallState);
uint MsiConfigureFeatureW([Const] [In] PWSTR szProduct, [Const] [In] PWSTR szFeature, [In] INSTALLSTATE eInstallState);
uint MsiReinstallFeatureA([Const] [In] PSTR szProduct, [Const] [In] PSTR szFeature, [In] REINSTALLMODE dwReinstallMode);
uint MsiReinstallFeatureW([Const] [In] PWSTR szProduct, [Const] [In] PWSTR szFeature, [In] REINSTALLMODE dwReinstallMode);
uint MsiProvideComponentA([Const] [In] PSTR szProduct, [Const] [In] PSTR szFeature, [Const] [In] PSTR szComponent, [In] INSTALLMODE dwInstallMode, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR lpPathBuf, [In] [Out] [Optional] uint* pcchPathBuf);
uint MsiProvideComponentW([Const] [In] PWSTR szProduct, [Const] [In] PWSTR szFeature, [Const] [In] PWSTR szComponent, [In] INSTALLMODE dwInstallMode, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR lpPathBuf, [In] [Out] [Optional] uint* pcchPathBuf);
uint MsiProvideQualifiedComponentA([Const] [In] PSTR szCategory, [Const] [In] PSTR szQualifier, [In] INSTALLMODE dwInstallMode, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR lpPathBuf, [In] [Out] [Optional] uint* pcchPathBuf);
uint MsiProvideQualifiedComponentW([Const] [In] PWSTR szCategory, [Const] [In] PWSTR szQualifier, [In] INSTALLMODE dwInstallMode, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR lpPathBuf, [In] [Out] [Optional] uint* pcchPathBuf);
uint MsiProvideQualifiedComponentExA([Const] [In] PSTR szCategory, [Const] [In] PSTR szQualifier, [In] INSTALLMODE dwInstallMode, [Const] [In] [Optional] PSTR szProduct, [Reserved] [In] uint dwUnused1, [Reserved] [In] uint dwUnused2, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] PSTR lpPathBuf, [In] [Out] [Optional] uint* pcchPathBuf);
uint MsiProvideQualifiedComponentExW([Const] [In] PWSTR szCategory, [Const] [In] PWSTR szQualifier, [In] INSTALLMODE dwInstallMode, [Const] [In] [Optional] PWSTR szProduct, [Reserved] [In] uint dwUnused1, [Reserved] [In] uint dwUnused2, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] PWSTR lpPathBuf, [In] [Out] [Optional] uint* pcchPathBuf);
INSTALLSTATE MsiGetComponentPathA([Const] [In] PSTR szProduct, [Const] [In] PSTR szComponent, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR lpPathBuf, [In] [Out] [Optional] uint* pcchBuf);
INSTALLSTATE MsiGetComponentPathW([Const] [In] PWSTR szProduct, [Const] [In] PWSTR szComponent, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR lpPathBuf, [In] [Out] [Optional] uint* pcchBuf);
INSTALLSTATE MsiGetComponentPathExA([Const] [In] PSTR szProductCode, [Const] [In] PSTR szComponentCode, [Const] [In] [Optional] PSTR szUserSid, [In] [Optional] MSIINSTALLCONTEXT dwContext, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR lpOutPathBuffer, [In] [Out] [Optional] uint* pcchOutPathBuffer);
INSTALLSTATE MsiGetComponentPathExW([Const] [In] PWSTR szProductCode, [Const] [In] PWSTR szComponentCode, [Const] [In] [Optional] PWSTR szUserSid, [In] [Optional] MSIINSTALLCONTEXT dwContext, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR lpOutPathBuffer, [In] [Out] [Optional] uint* pcchOutPathBuffer);
uint MsiProvideAssemblyA([Const] [In] PSTR szAssemblyName, [Const] [In] [Optional] PSTR szAppContext, [In] INSTALLMODE dwInstallMode, [In] MSIASSEMBLYINFO dwAssemblyInfo, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR lpPathBuf, [In] [Out] [Optional] uint* pcchPathBuf);
uint MsiProvideAssemblyW([Const] [In] PWSTR szAssemblyName, [Const] [In] [Optional] PWSTR szAppContext, [In] INSTALLMODE dwInstallMode, [In] MSIASSEMBLYINFO dwAssemblyInfo, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR lpPathBuf, [In] [Out] [Optional] uint* pcchPathBuf);
uint MsiQueryComponentStateA([Const] [In] PSTR szProductCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [Const] [In] PSTR szComponentCode, [Out] [Optional] INSTALLSTATE* pdwState);
uint MsiQueryComponentStateW([Const] [In] PWSTR szProductCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [Const] [In] PWSTR szComponentCode, [Out] [Optional] INSTALLSTATE* pdwState);
uint MsiEnumProductsA([In] uint iProductIndex, [Out] PSTR lpProductBuf);
uint MsiEnumProductsW([In] uint iProductIndex, [Out] PWSTR lpProductBuf);
uint MsiEnumProductsExA([Const] [In] [Optional] PSTR szProductCode, [Const] [In] [Optional] PSTR szUserSid, [In] uint dwContext, [In] uint dwIndex, [Out] [Optional] PSTR szInstalledProductCode, [Out] [Optional] MSIINSTALLCONTEXT* pdwInstalledContext, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] PSTR szSid, [In] [Out] [Optional] uint* pcchSid);
uint MsiEnumProductsExW([Const] [In] [Optional] PWSTR szProductCode, [Const] [In] [Optional] PWSTR szUserSid, [In] uint dwContext, [In] uint dwIndex, [Out] [Optional] PWSTR szInstalledProductCode, [Out] [Optional] MSIINSTALLCONTEXT* pdwInstalledContext, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] PWSTR szSid, [In] [Out] [Optional] uint* pcchSid);
uint MsiEnumRelatedProductsA([Const] [In] PSTR lpUpgradeCode, [Reserved] [In] uint dwReserved, [In] uint iProductIndex, [Out] PSTR lpProductBuf);
uint MsiEnumRelatedProductsW([Const] [In] PWSTR lpUpgradeCode, [Reserved] [In] uint dwReserved, [In] uint iProductIndex, [Out] PWSTR lpProductBuf);
uint MsiEnumFeaturesA([Const] [In] PSTR szProduct, [In] uint iFeatureIndex, [Out] PSTR lpFeatureBuf, [Out] [Optional] PSTR lpParentBuf);
uint MsiEnumFeaturesW([Const] [In] PWSTR szProduct, [In] uint iFeatureIndex, [Out] PWSTR lpFeatureBuf, [Out] [Optional] PWSTR lpParentBuf);
uint MsiEnumComponentsA([In] uint iComponentIndex, [Out] PSTR lpComponentBuf);
uint MsiEnumComponentsW([In] uint iComponentIndex, [Out] PWSTR lpComponentBuf);
uint MsiEnumComponentsExA([Const] [In] [Optional] PSTR szUserSid, [In] uint dwContext, [In] uint dwIndex, [Out] [Optional] PSTR szInstalledComponentCode, [Out] [Optional] MSIINSTALLCONTEXT* pdwInstalledContext, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PSTR szSid, [In] [Out] [Optional] uint* pcchSid);
uint MsiEnumComponentsExW([Const] [In] [Optional] PWSTR szUserSid, [In] uint dwContext, [In] uint dwIndex, [Out] [Optional] PWSTR szInstalledComponentCode, [Out] [Optional] MSIINSTALLCONTEXT* pdwInstalledContext, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PWSTR szSid, [In] [Out] [Optional] uint* pcchSid);
uint MsiEnumClientsA([Const] [In] PSTR szComponent, [In] uint iProductIndex, [Out] PSTR lpProductBuf);
uint MsiEnumClientsW([Const] [In] PWSTR szComponent, [In] uint iProductIndex, [Out] PWSTR lpProductBuf);
uint MsiEnumClientsExA([Const] [In] PSTR szComponent, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwProductIndex, [Out] [Optional] PSTR szProductBuf, [Out] [Optional] MSIINSTALLCONTEXT* pdwInstalledContext, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] PSTR szSid, [In] [Out] [Optional] uint* pcchSid);
uint MsiEnumClientsExW([Const] [In] PWSTR szComponent, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwProductIndex, [Out] [Optional] PWSTR szProductBuf, [Out] [Optional] MSIINSTALLCONTEXT* pdwInstalledContext, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] PWSTR szSid, [In] [Out] [Optional] uint* pcchSid);
uint MsiEnumComponentQualifiersA([Const] [In] PSTR szComponent, [In] uint iIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR lpQualifierBuf, [In] [Out] uint* pcchQualifierBuf, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR lpApplicationDataBuf, [In] [Out] [Optional] uint* pcchApplicationDataBuf);
uint MsiEnumComponentQualifiersW([Const] [In] PWSTR szComponent, [In] uint iIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR lpQualifierBuf, [In] [Out] uint* pcchQualifierBuf, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR lpApplicationDataBuf, [In] [Out] [Optional] uint* pcchApplicationDataBuf);
uint MsiOpenProductA([Const] [In] PSTR szProduct, [Out] MSIHANDLE* hProduct);
uint MsiOpenProductW([Const] [In] PWSTR szProduct, [Out] MSIHANDLE* hProduct);
uint MsiOpenPackageA([Const] [In] PSTR szPackagePath, [Out] MSIHANDLE* hProduct);
uint MsiOpenPackageW([Const] [In] PWSTR szPackagePath, [Out] MSIHANDLE* hProduct);
uint MsiOpenPackageExA([Const] [In] PSTR szPackagePath, [In] uint dwOptions, [Out] MSIHANDLE* hProduct);
uint MsiOpenPackageExW([Const] [In] PWSTR szPackagePath, [In] uint dwOptions, [Out] MSIHANDLE* hProduct);
uint MsiGetPatchFileListA([Const] [In] PSTR szProductCode, [Const] [In] PSTR szPatchPackages, [Out] uint* pcFiles, [Out] [Optional] MSIHANDLE** pphFileRecords);
uint MsiGetPatchFileListW([Const] [In] PWSTR szProductCode, [Const] [In] PWSTR szPatchPackages, [Out] uint* pcFiles, [Out] [Optional] MSIHANDLE** pphFileRecords);
uint MsiGetProductPropertyA([In] MSIHANDLE hProduct, [Const] [In] PSTR szProperty, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR lpValueBuf, [In] [Out] [Optional] uint* pcchValueBuf);
uint MsiGetProductPropertyW([In] MSIHANDLE hProduct, [Const] [In] PWSTR szProperty, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR lpValueBuf, [In] [Out] [Optional] uint* pcchValueBuf);
uint MsiVerifyPackageA([Const] [In] PSTR szPackagePath);
uint MsiVerifyPackageW([Const] [In] PWSTR szPackagePath);
uint MsiGetFeatureInfoA([In] MSIHANDLE hProduct, [Const] [In] PSTR szFeature, [Out] [Optional] uint* lpAttributes, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR lpTitleBuf, [In] [Out] [Optional] uint* pcchTitleBuf, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PSTR lpHelpBuf, [In] [Out] [Optional] uint* pcchHelpBuf);
uint MsiGetFeatureInfoW([In] MSIHANDLE hProduct, [Const] [In] PWSTR szFeature, [Out] [Optional] uint* lpAttributes, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR lpTitleBuf, [In] [Out] [Optional] uint* pcchTitleBuf, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PWSTR lpHelpBuf, [In] [Out] [Optional] uint* pcchHelpBuf);
uint MsiInstallMissingComponentA([Const] [In] PSTR szProduct, [Const] [In] PSTR szComponent, [In] INSTALLSTATE eInstallState);
uint MsiInstallMissingComponentW([Const] [In] PWSTR szProduct, [Const] [In] PWSTR szComponent, [In] INSTALLSTATE eInstallState);
uint MsiInstallMissingFileA([Const] [In] PSTR szProduct, [Const] [In] PSTR szFile);
uint MsiInstallMissingFileW([Const] [In] PWSTR szProduct, [Const] [In] PWSTR szFile);
INSTALLSTATE MsiLocateComponentA([Const] [In] PSTR szComponent, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpPathBuf, [In] [Out] [Optional] uint* pcchBuf);
INSTALLSTATE MsiLocateComponentW([Const] [In] PWSTR szComponent, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpPathBuf, [In] [Out] [Optional] uint* pcchBuf);
uint MsiSourceListClearAllA([Const] [In] PSTR szProduct, [Const] [In] [Optional] PSTR szUserName, [Reserved] [In] uint dwReserved);
uint MsiSourceListClearAllW([Const] [In] PWSTR szProduct, [Const] [In] [Optional] PWSTR szUserName, [Reserved] [In] uint dwReserved);
uint MsiSourceListAddSourceA([Const] [In] PSTR szProduct, [Const] [In] [Optional] PSTR szUserName, [Reserved] [In] uint dwReserved, [Const] [In] PSTR szSource);
uint MsiSourceListAddSourceW([Const] [In] PWSTR szProduct, [Const] [In] [Optional] PWSTR szUserName, [Reserved] [In] uint dwReserved, [Const] [In] PWSTR szSource);
uint MsiSourceListForceResolutionA([Const] [In] PSTR szProduct, [Const] [In] [Optional] PSTR szUserName, [Reserved] [In] uint dwReserved);
uint MsiSourceListForceResolutionW([Const] [In] PWSTR szProduct, [Const] [In] [Optional] PWSTR szUserName, [Reserved] [In] uint dwReserved);
uint MsiSourceListAddSourceExA([Const] [In] PSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [Const] [In] PSTR szSource, [In] uint dwIndex);
uint MsiSourceListAddSourceExW([Const] [In] PWSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [Const] [In] PWSTR szSource, [In] uint dwIndex);
uint MsiSourceListAddMediaDiskA([Const] [In] PSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [In] uint dwDiskId, [Const] [In] [Optional] PSTR szVolumeLabel, [Const] [In] [Optional] PSTR szDiskPrompt);
uint MsiSourceListAddMediaDiskW([Const] [In] PWSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [In] uint dwDiskId, [Const] [In] [Optional] PWSTR szVolumeLabel, [Const] [In] [Optional] PWSTR szDiskPrompt);
uint MsiSourceListClearSourceA([Const] [In] PSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [Const] [In] PSTR szSource);
uint MsiSourceListClearSourceW([Const] [In] PWSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [Const] [In] PWSTR szSource);
uint MsiSourceListClearMediaDiskA([Const] [In] PSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [In] uint dwDiskId);
uint MsiSourceListClearMediaDiskW([Const] [In] PWSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [In] uint dwDiskId);
uint MsiSourceListClearAllExA([Const] [In] PSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions);
uint MsiSourceListClearAllExW([Const] [In] PWSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions);
uint MsiSourceListForceResolutionExA([Const] [In] PSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions);
uint MsiSourceListForceResolutionExW([Const] [In] PWSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions);
uint MsiSourceListSetInfoA([Const] [In] PSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [Const] [In] PSTR szProperty, [Const] [In] PSTR szValue);
uint MsiSourceListSetInfoW([Const] [In] PWSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [Const] [In] PWSTR szProperty, [Const] [In] PWSTR szValue);
uint MsiSourceListGetInfoA([Const] [In] PSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [Const] [In] PSTR szProperty, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PSTR szValue, [In] [Out] [Optional] uint* pcchValue);
uint MsiSourceListGetInfoW([Const] [In] PWSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [Const] [In] PWSTR szProperty, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PWSTR szValue, [In] [Out] [Optional] uint* pcchValue);
uint MsiSourceListEnumSourcesA([Const] [In] PSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PSTR szSource, [In] [Out] [Optional] uint* pcchSource);
uint MsiSourceListEnumSourcesW([Const] [In] PWSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PWSTR szSource, [In] [Out] [Optional] uint* pcchSource);
uint MsiSourceListEnumMediaDisksA([Const] [In] PSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [In] uint dwIndex, [Out] [Optional] uint* pdwDiskId, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] PSTR szVolumeLabel, [In] [Out] [Optional] uint* pcchVolumeLabel, [NativeArrayInfo(CountParamIndex = 9)] [Out] [Optional] PSTR szDiskPrompt, [In] [Out] [Optional] uint* pcchDiskPrompt);
uint MsiSourceListEnumMediaDisksW([Const] [In] PWSTR szProductCodeOrPatchCode, [Const] [In] [Optional] PWSTR szUserSid, [In] MSIINSTALLCONTEXT dwContext, [In] uint dwOptions, [In] uint dwIndex, [Out] [Optional] uint* pdwDiskId, [NativeArrayInfo(CountParamIndex = 7)] [Out] [Optional] PWSTR szVolumeLabel, [In] [Out] [Optional] uint* pcchVolumeLabel, [NativeArrayInfo(CountParamIndex = 9)] [Out] [Optional] PWSTR szDiskPrompt, [In] [Out] [Optional] uint* pcchDiskPrompt);
uint MsiGetFileVersionA([Const] [In] PSTR szFilePath, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpVersionBuf, [In] [Out] [Optional] uint* pcchVersionBuf, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR lpLangBuf, [In] [Out] [Optional] uint* pcchLangBuf);
uint MsiGetFileVersionW([Const] [In] PWSTR szFilePath, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpVersionBuf, [In] [Out] [Optional] uint* pcchVersionBuf, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR lpLangBuf, [In] [Out] [Optional] uint* pcchLangBuf);
uint MsiGetFileHashA([Const] [In] PSTR szFilePath, [In] uint dwOptions, [In] [Out] MSIFILEHASHINFO* pHash);
uint MsiGetFileHashW([Const] [In] PWSTR szFilePath, [In] uint dwOptions, [In] [Out] MSIFILEHASHINFO* pHash);
HRESULT MsiGetFileSignatureInformationA([Const] [In] PSTR szSignedObjectPath, [In] uint dwFlags, [Out] CERT_CONTEXT** ppcCertContext, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pbHashData, [In] [Out] [Optional] uint* pcbHashData);
HRESULT MsiGetFileSignatureInformationW([Const] [In] PWSTR szSignedObjectPath, [In] uint dwFlags, [Out] CERT_CONTEXT** ppcCertContext, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pbHashData, [In] [Out] [Optional] uint* pcbHashData);
uint MsiGetShortcutTargetA([Const] [In] PSTR szShortcutPath, [Out] [Optional] PSTR szProductCode, [Out] [Optional] PSTR szFeatureId, [Out] [Optional] PSTR szComponentCode);
uint MsiGetShortcutTargetW([Const] [In] PWSTR szShortcutPath, [Out] [Optional] PWSTR szProductCode, [Out] [Optional] PWSTR szFeatureId, [Out] [Optional] PWSTR szComponentCode);
uint MsiIsProductElevatedA([Const] [In] PSTR szProduct, [Out] BOOL* pfElevated);
uint MsiIsProductElevatedW([Const] [In] PWSTR szProduct, [Out] BOOL* pfElevated);
uint MsiNotifySidChangeA([Const] [In] PSTR pOldSid, [Const] [In] PSTR pNewSid);
uint MsiNotifySidChangeW([Const] [In] PWSTR pOldSid, [Const] [In] PWSTR pNewSid);
uint MsiBeginTransactionA([Const] [In] PSTR szName, [In] uint dwTransactionAttributes, [Out] MSIHANDLE* phTransactionHandle, [Out] HANDLE* phChangeOfOwnerEvent);
uint MsiBeginTransactionW([Const] [In] PWSTR szName, [In] uint dwTransactionAttributes, [Out] MSIHANDLE* phTransactionHandle, [Out] HANDLE* phChangeOfOwnerEvent);
uint MsiEndTransaction([In] MSITRANSACTIONSTATE dwTransactionState);
uint MsiJoinTransaction([In] MSIHANDLE hTransactionHandle, [In] uint dwTransactionAttributes, [Out] HANDLE* phChangeOfOwnerEvent);
uint MsiDatabaseOpenViewA([In] MSIHANDLE hDatabase, [Const] [In] PSTR szQuery, [In] [Out] MSIHANDLE* phView);
uint MsiDatabaseOpenViewW([In] MSIHANDLE hDatabase, [Const] [In] PWSTR szQuery, [In] [Out] MSIHANDLE* phView);
MSIDBERROR MsiViewGetErrorA([In] MSIHANDLE hView, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR szColumnNameBuffer, [In] [Out] [Optional] uint* pcchBuf);
MSIDBERROR MsiViewGetErrorW([In] MSIHANDLE hView, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR szColumnNameBuffer, [In] [Out] [Optional] uint* pcchBuf);
uint MsiViewExecute([In] MSIHANDLE hView, [In] MSIHANDLE hRecord);
uint MsiViewFetch([In] MSIHANDLE hView, [In] [Out] MSIHANDLE* phRecord);
uint MsiViewModify([In] MSIHANDLE hView, [In] MSIMODIFY eModifyMode, [In] MSIHANDLE hRecord);
uint MsiViewGetColumnInfo([In] MSIHANDLE hView, [In] MSICOLINFO eColumnInfo, [In] [Out] MSIHANDLE* phRecord);
uint MsiViewClose([In] MSIHANDLE hView);
uint MsiDatabaseGetPrimaryKeysA([In] MSIHANDLE hDatabase, [Const] [In] PSTR szTableName, [In] [Out] MSIHANDLE* phRecord);
uint MsiDatabaseGetPrimaryKeysW([In] MSIHANDLE hDatabase, [Const] [In] PWSTR szTableName, [In] [Out] MSIHANDLE* phRecord);
MSICONDITION MsiDatabaseIsTablePersistentA([In] MSIHANDLE hDatabase, [Const] [In] PSTR szTableName);
MSICONDITION MsiDatabaseIsTablePersistentW([In] MSIHANDLE hDatabase, [Const] [In] PWSTR szTableName);
uint MsiGetSummaryInformationA([In] MSIHANDLE hDatabase, [Const] [In] PSTR szDatabasePath, [In] uint uiUpdateCount, [In] [Out] MSIHANDLE* phSummaryInfo);
uint MsiGetSummaryInformationW([In] MSIHANDLE hDatabase, [Const] [In] PWSTR szDatabasePath, [In] uint uiUpdateCount, [In] [Out] MSIHANDLE* phSummaryInfo);
uint MsiSummaryInfoGetPropertyCount([In] MSIHANDLE hSummaryInfo, [In] [Out] uint* puiPropertyCount);
uint MsiSummaryInfoSetPropertyA([In] MSIHANDLE hSummaryInfo, [In] uint uiProperty, [In] uint uiDataType, [In] int iValue, [In] [Out] FILETIME* pftValue, [Const] [In] PSTR szValue);
uint MsiSummaryInfoSetPropertyW([In] MSIHANDLE hSummaryInfo, [In] uint uiProperty, [In] uint uiDataType, [In] int iValue, [In] [Out] FILETIME* pftValue, [Const] [In] PWSTR szValue);
uint MsiSummaryInfoGetPropertyA([In] MSIHANDLE hSummaryInfo, [In] uint uiProperty, [Out] uint* puiDataType, [Out] int* piValue, [Out] [Optional] FILETIME* pftValue, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PSTR szValueBuf, [In] [Out] [Optional] uint* pcchValueBuf);
uint MsiSummaryInfoGetPropertyW([In] MSIHANDLE hSummaryInfo, [In] uint uiProperty, [Out] uint* puiDataType, [Out] int* piValue, [Out] [Optional] FILETIME* pftValue, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PWSTR szValueBuf, [In] [Out] [Optional] uint* pcchValueBuf);
uint MsiSummaryInfoPersist([In] MSIHANDLE hSummaryInfo);
uint MsiOpenDatabaseA([Const] [In] PSTR szDatabasePath, [Const] [In] PSTR szPersist, [In] [Out] MSIHANDLE* phDatabase);
uint MsiOpenDatabaseW([Const] [In] PWSTR szDatabasePath, [Const] [In] PWSTR szPersist, [In] [Out] MSIHANDLE* phDatabase);
uint MsiDatabaseImportA([In] MSIHANDLE hDatabase, [Const] [In] PSTR szFolderPath, [Const] [In] PSTR szFileName);
uint MsiDatabaseImportW([In] MSIHANDLE hDatabase, [Const] [In] PWSTR szFolderPath, [Const] [In] PWSTR szFileName);
uint MsiDatabaseExportA([In] MSIHANDLE hDatabase, [Const] [In] PSTR szTableName, [Const] [In] PSTR szFolderPath, [Const] [In] PSTR szFileName);
uint MsiDatabaseExportW([In] MSIHANDLE hDatabase, [Const] [In] PWSTR szTableName, [Const] [In] PWSTR szFolderPath, [Const] [In] PWSTR szFileName);
uint MsiDatabaseMergeA([In] MSIHANDLE hDatabase, [In] MSIHANDLE hDatabaseMerge, [Const] [In] PSTR szTableName);
uint MsiDatabaseMergeW([In] MSIHANDLE hDatabase, [In] MSIHANDLE hDatabaseMerge, [Const] [In] PWSTR szTableName);
uint MsiDatabaseGenerateTransformA([In] MSIHANDLE hDatabase, [In] MSIHANDLE hDatabaseReference, [Const] [In] PSTR szTransformFile, [In] int iReserved1, [In] int iReserved2);
uint MsiDatabaseGenerateTransformW([In] MSIHANDLE hDatabase, [In] MSIHANDLE hDatabaseReference, [Const] [In] PWSTR szTransformFile, [In] int iReserved1, [In] int iReserved2);
uint MsiDatabaseApplyTransformA([In] MSIHANDLE hDatabase, [Const] [In] PSTR szTransformFile, [In] MSITRANSFORM_ERROR iErrorConditions);
uint MsiDatabaseApplyTransformW([In] MSIHANDLE hDatabase, [Const] [In] PWSTR szTransformFile, [In] MSITRANSFORM_ERROR iErrorConditions);
uint MsiCreateTransformSummaryInfoA([In] MSIHANDLE hDatabase, [In] MSIHANDLE hDatabaseReference, [Const] [In] PSTR szTransformFile, [In] MSITRANSFORM_ERROR iErrorConditions, [In] MSITRANSFORM_VALIDATE iValidation);
uint MsiCreateTransformSummaryInfoW([In] MSIHANDLE hDatabase, [In] MSIHANDLE hDatabaseReference, [Const] [In] PWSTR szTransformFile, [In] MSITRANSFORM_ERROR iErrorConditions, [In] MSITRANSFORM_VALIDATE iValidation);
uint MsiDatabaseCommit([In] MSIHANDLE hDatabase);
MSIDBSTATE MsiGetDatabaseState([In] MSIHANDLE hDatabase);
MSIHANDLE MsiCreateRecord([In] uint cParams);
BOOL MsiRecordIsNull([In] MSIHANDLE hRecord, [In] uint iField);
uint MsiRecordDataSize([In] MSIHANDLE hRecord, [In] uint iField);
uint MsiRecordSetInteger([In] MSIHANDLE hRecord, [In] uint iField, [In] int iValue);
uint MsiRecordSetStringA([In] MSIHANDLE hRecord, [In] uint iField, [Const] [In] PSTR szValue);
uint MsiRecordSetStringW([In] MSIHANDLE hRecord, [In] uint iField, [Const] [In] PWSTR szValue);
int MsiRecordGetInteger([In] MSIHANDLE hRecord, [In] uint iField);
uint MsiRecordGetStringA([In] MSIHANDLE hRecord, [In] uint iField, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR szValueBuf, [In] [Out] [Optional] uint* pcchValueBuf);
uint MsiRecordGetStringW([In] MSIHANDLE hRecord, [In] uint iField, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR szValueBuf, [In] [Out] [Optional] uint* pcchValueBuf);
uint MsiRecordGetFieldCount([In] MSIHANDLE hRecord);
uint MsiRecordSetStreamA([In] MSIHANDLE hRecord, [In] uint iField, [Const] [In] PSTR szFilePath);
uint MsiRecordSetStreamW([In] MSIHANDLE hRecord, [In] uint iField, [Const] [In] PWSTR szFilePath);
uint MsiRecordReadStream([In] MSIHANDLE hRecord, [In] uint iField, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] PSTR szDataBuf, [In] [Out] uint* pcbDataBuf);
uint MsiRecordClearData([In] MSIHANDLE hRecord);
MSIHANDLE MsiGetActiveDatabase([In] MSIHANDLE hInstall);
uint MsiSetPropertyA([In] MSIHANDLE hInstall, [Const] [In] PSTR szName, [Const] [In] PSTR szValue);
uint MsiSetPropertyW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szName, [Const] [In] PWSTR szValue);
uint MsiGetPropertyA([In] MSIHANDLE hInstall, [Const] [In] PSTR szName, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR szValueBuf, [In] [Out] [Optional] uint* pcchValueBuf);
uint MsiGetPropertyW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szName, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR szValueBuf, [In] [Out] [Optional] uint* pcchValueBuf);
ushort MsiGetLanguage([In] MSIHANDLE hInstall);
BOOL MsiGetMode([In] MSIHANDLE hInstall, [In] MSIRUNMODE eRunMode);
uint MsiSetMode([In] MSIHANDLE hInstall, [In] MSIRUNMODE eRunMode, [In] BOOL fState);
uint MsiFormatRecordA([In] MSIHANDLE hInstall, [In] MSIHANDLE hRecord, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR szResultBuf, [In] [Out] [Optional] uint* pcchResultBuf);
uint MsiFormatRecordW([In] MSIHANDLE hInstall, [In] MSIHANDLE hRecord, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR szResultBuf, [In] [Out] [Optional] uint* pcchResultBuf);
uint MsiDoActionA([In] MSIHANDLE hInstall, [Const] [In] PSTR szAction);
uint MsiDoActionW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szAction);
uint MsiSequenceA([In] MSIHANDLE hInstall, [Const] [In] PSTR szTable, [In] int iSequenceMode);
uint MsiSequenceW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szTable, [In] int iSequenceMode);
int MsiProcessMessage([In] MSIHANDLE hInstall, [In] INSTALLMESSAGE eMessageType, [In] MSIHANDLE hRecord);
MSICONDITION MsiEvaluateConditionA([In] MSIHANDLE hInstall, [Const] [In] PSTR szCondition);
MSICONDITION MsiEvaluateConditionW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szCondition);
uint MsiGetFeatureStateA([In] MSIHANDLE hInstall, [Const] [In] PSTR szFeature, [In] [Out] INSTALLSTATE* piInstalled, [In] [Out] INSTALLSTATE* piAction);
uint MsiGetFeatureStateW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szFeature, [In] [Out] INSTALLSTATE* piInstalled, [In] [Out] INSTALLSTATE* piAction);
uint MsiSetFeatureStateA([In] MSIHANDLE hInstall, [Const] [In] PSTR szFeature, [In] INSTALLSTATE iState);
uint MsiSetFeatureStateW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szFeature, [In] INSTALLSTATE iState);
uint MsiSetFeatureAttributesA([In] MSIHANDLE hInstall, [Const] [In] PSTR szFeature, [In] uint dwAttributes);
uint MsiSetFeatureAttributesW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szFeature, [In] uint dwAttributes);
uint MsiGetComponentStateA([In] MSIHANDLE hInstall, [Const] [In] PSTR szComponent, [In] [Out] INSTALLSTATE* piInstalled, [In] [Out] INSTALLSTATE* piAction);
uint MsiGetComponentStateW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szComponent, [In] [Out] INSTALLSTATE* piInstalled, [In] [Out] INSTALLSTATE* piAction);
uint MsiSetComponentStateA([In] MSIHANDLE hInstall, [Const] [In] PSTR szComponent, [In] INSTALLSTATE iState);
uint MsiSetComponentStateW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szComponent, [In] INSTALLSTATE iState);
uint MsiGetFeatureCostA([In] MSIHANDLE hInstall, [Const] [In] PSTR szFeature, [In] MSICOSTTREE iCostTree, [In] INSTALLSTATE iState, [In] [Out] int* piCost);
uint MsiGetFeatureCostW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szFeature, [In] MSICOSTTREE iCostTree, [In] INSTALLSTATE iState, [In] [Out] int* piCost);
uint MsiEnumComponentCostsA([In] MSIHANDLE hInstall, [Const] [In] PSTR szComponent, [In] uint dwIndex, [In] INSTALLSTATE iState, [NativeArrayInfo(CountParamIndex = 5)] [Out] PSTR szDriveBuf, [In] [Out] uint* pcchDriveBuf, [Out] int* piCost, [Out] int* piTempCost);
uint MsiEnumComponentCostsW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szComponent, [In] uint dwIndex, [In] INSTALLSTATE iState, [NativeArrayInfo(CountParamIndex = 5)] [Out] PWSTR szDriveBuf, [In] [Out] uint* pcchDriveBuf, [Out] int* piCost, [Out] int* piTempCost);
uint MsiSetInstallLevel([In] MSIHANDLE hInstall, [In] int iInstallLevel);
uint MsiGetFeatureValidStatesA([In] MSIHANDLE hInstall, [Const] [In] PSTR szFeature, [In] [Out] uint* lpInstallStates);
uint MsiGetFeatureValidStatesW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szFeature, [In] [Out] uint* lpInstallStates);
uint MsiGetSourcePathA([In] MSIHANDLE hInstall, [Const] [In] PSTR szFolder, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR szPathBuf, [In] [Out] [Optional] uint* pcchPathBuf);
uint MsiGetSourcePathW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szFolder, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR szPathBuf, [In] [Out] [Optional] uint* pcchPathBuf);
uint MsiGetTargetPathA([In] MSIHANDLE hInstall, [Const] [In] PSTR szFolder, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR szPathBuf, [In] [Out] [Optional] uint* pcchPathBuf);
uint MsiGetTargetPathW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szFolder, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR szPathBuf, [In] [Out] [Optional] uint* pcchPathBuf);
uint MsiSetTargetPathA([In] MSIHANDLE hInstall, [Const] [In] PSTR szFolder, [Const] [In] PSTR szFolderPath);
uint MsiSetTargetPathW([In] MSIHANDLE hInstall, [Const] [In] PWSTR szFolder, [Const] [In] PWSTR szFolderPath);
uint MsiVerifyDiskSpace([In] MSIHANDLE hInstall);
uint MsiEnableUIPreview([In] MSIHANDLE hDatabase, [In] [Out] MSIHANDLE* phPreview);
uint MsiPreviewDialogA([In] MSIHANDLE hPreview, [Const] [In] PSTR szDialogName);
uint MsiPreviewDialogW([In] MSIHANDLE hPreview, [Const] [In] PWSTR szDialogName);
uint MsiPreviewBillboardA([In] MSIHANDLE hPreview, [Const] [In] PSTR szControlName, [Const] [In] PSTR szBillboard);
uint MsiPreviewBillboardW([In] MSIHANDLE hPreview, [Const] [In] PWSTR szControlName, [Const] [In] PWSTR szBillboard);
MSIHANDLE MsiGetLastErrorRecord();
