HRESULT NCryptOpenStorageProvider([Out] NCRYPT_PROV_HANDLE* phProvider, [Const] [In] [Optional] PWSTR pszProviderName, [In] uint dwFlags);
HRESULT NCryptEnumAlgorithms([In] NCRYPT_PROV_HANDLE hProvider, [In] NCRYPT_OPERATION dwAlgOperations, [Out] uint* pdwAlgCount, [Out] NCryptAlgorithmName** ppAlgList, [In] uint dwFlags);
HRESULT NCryptIsAlgSupported([In] NCRYPT_PROV_HANDLE hProvider, [Const] [In] PWSTR pszAlgId, [In] uint dwFlags);
HRESULT NCryptEnumKeys([In] NCRYPT_PROV_HANDLE hProvider, [Const] [In] [Optional] PWSTR pszScope, [Out] NCryptKeyName** ppKeyName, [In] [Out] void** ppEnumState, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptEnumStorageProviders([Out] uint* pdwProviderCount, [Out] NCryptProviderName** ppProviderList, [In] uint dwFlags);
HRESULT NCryptFreeBuffer([In] [Out] void* pvInput);
HRESULT NCryptOpenKey([In] NCRYPT_PROV_HANDLE hProvider, [Out] NCRYPT_KEY_HANDLE* phKey, [Const] [In] PWSTR pszKeyName, [In] [Optional] CERT_KEY_SPEC dwLegacyKeySpec, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptCreatePersistedKey([In] NCRYPT_PROV_HANDLE hProvider, [Out] NCRYPT_KEY_HANDLE* phKey, [Const] [In] PWSTR pszAlgId, [Const] [In] [Optional] PWSTR pszKeyName, [In] CERT_KEY_SPEC dwLegacyKeySpec, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptGetProperty([In] NCRYPT_HANDLE hObject, [Const] [In] PWSTR pszProperty, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* pbOutput, [In] uint cbOutput, [Out] uint* pcbResult, [In] OBJECT_SECURITY_INFORMATION dwFlags);
HRESULT NCryptSetProperty([In] NCRYPT_HANDLE hObject, [Const] [In] PWSTR pszProperty, [MemorySize(BytesParamIndex = 3)] [In] byte* pbInput, [In] uint cbInput, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptFinalizeKey([In] NCRYPT_KEY_HANDLE hKey, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptEncrypt([In] NCRYPT_KEY_HANDLE hKey, [MemorySize(BytesParamIndex = 2)] [In] [Optional] byte* pbInput, [In] uint cbInput, [In] [Optional] void* pPaddingInfo, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbOutput, [In] uint cbOutput, [Out] uint* pcbResult, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptDecrypt([In] NCRYPT_KEY_HANDLE hKey, [MemorySize(BytesParamIndex = 2)] [In] [Optional] byte* pbInput, [In] uint cbInput, [In] [Optional] void* pPaddingInfo, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbOutput, [In] uint cbOutput, [Out] uint* pcbResult, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptImportKey([In] NCRYPT_PROV_HANDLE hProvider, [In] [Optional] NCRYPT_KEY_HANDLE hImportKey, [Const] [In] PWSTR pszBlobType, [In] [Optional] BCryptBufferDesc* pParameterList, [Out] NCRYPT_KEY_HANDLE* phKey, [MemorySize(BytesParamIndex = 6)] [In] byte* pbData, [In] uint cbData, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptExportKey([In] NCRYPT_KEY_HANDLE hKey, [In] [Optional] NCRYPT_KEY_HANDLE hExportKey, [Const] [In] PWSTR pszBlobType, [In] [Optional] BCryptBufferDesc* pParameterList, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbOutput, [In] uint cbOutput, [Out] uint* pcbResult, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptSignHash([In] NCRYPT_KEY_HANDLE hKey, [In] [Optional] void* pPaddingInfo, [MemorySize(BytesParamIndex = 3)] [In] byte* pbHashValue, [In] uint cbHashValue, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbSignature, [In] uint cbSignature, [Out] uint* pcbResult, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptVerifySignature([In] NCRYPT_KEY_HANDLE hKey, [In] [Optional] void* pPaddingInfo, [MemorySize(BytesParamIndex = 3)] [In] byte* pbHashValue, [In] uint cbHashValue, [MemorySize(BytesParamIndex = 5)] [In] byte* pbSignature, [In] uint cbSignature, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptDeleteKey([In] NCRYPT_KEY_HANDLE hKey, [In] uint dwFlags);
HRESULT NCryptFreeObject([In] NCRYPT_HANDLE hObject);
BOOL NCryptIsKeyHandle([In] NCRYPT_KEY_HANDLE hKey);
HRESULT NCryptTranslateHandle([Out] [Optional] NCRYPT_PROV_HANDLE* phProvider, [Out] NCRYPT_KEY_HANDLE* phKey, [In] nuint hLegacyProv, [In] [Optional] nuint hLegacyKey, [In] [Optional] CERT_KEY_SPEC dwLegacyKeySpec, [In] uint dwFlags);
HRESULT NCryptNotifyChangeKey([In] NCRYPT_PROV_HANDLE hProvider, [In] [Out] HANDLE* phEvent, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptSecretAgreement([In] NCRYPT_KEY_HANDLE hPrivKey, [In] NCRYPT_KEY_HANDLE hPubKey, [Out] NCRYPT_SECRET_HANDLE* phAgreedSecret, [In] NCRYPT_FLAGS dwFlags);
HRESULT NCryptDeriveKey([In] NCRYPT_SECRET_HANDLE hSharedSecret, [Const] [In] PWSTR pwszKDF, [In] [Optional] BCryptBufferDesc* pParameterList, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pbDerivedKey, [In] uint cbDerivedKey, [Out] uint* pcbResult, [In] uint dwFlags);
HRESULT NCryptKeyDerivation([In] NCRYPT_KEY_HANDLE hKey, [In] [Optional] BCryptBufferDesc* pParameterList, [MemorySize(BytesParamIndex = 3)] [Out] byte* pbDerivedKey, [In] uint cbDerivedKey, [Out] uint* pcbResult, [In] uint dwFlags);
HRESULT NCryptCreateClaim([In] [Optional] NCRYPT_KEY_HANDLE hSubjectKey, [In] [Optional] NCRYPT_KEY_HANDLE hAuthorityKey, [In] uint dwClaimType, [In] [Optional] BCryptBufferDesc* pParameterList, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* pbClaimBlob, [In] uint cbClaimBlob, [Out] uint* pcbResult, [In] uint dwFlags);
HRESULT NCryptVerifyClaim([In] NCRYPT_KEY_HANDLE hSubjectKey, [In] [Optional] NCRYPT_KEY_HANDLE hAuthorityKey, [In] uint dwClaimType, [In] [Optional] BCryptBufferDesc* pParameterList, [MemorySize(BytesParamIndex = 5)] [In] byte* pbClaimBlob, [In] uint cbClaimBlob, [Out] BCryptBufferDesc* pOutput, [In] uint dwFlags);
HRESULT NCryptRegisterProtectionDescriptorName([Const] [In] PWSTR pwszName, [Const] [In] [Optional] PWSTR pwszDescriptorString, [In] uint dwFlags);
HRESULT NCryptQueryProtectionDescriptorName([Const] [In] PWSTR pwszName, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR pwszDescriptorString, [In] [Out] nuint* pcDescriptorString, [In] uint dwFlags);
HRESULT NCryptCreateProtectionDescriptor([Const] [In] PWSTR pwszDescriptorString, [In] uint dwFlags, [Out] NCRYPT_DESCRIPTOR_HANDLE* phDescriptor);
HRESULT NCryptCloseProtectionDescriptor([In] NCRYPT_DESCRIPTOR_HANDLE hDescriptor);
HRESULT NCryptGetProtectionDescriptorInfo([In] NCRYPT_DESCRIPTOR_HANDLE hDescriptor, [Const] [In] [Optional] NCRYPT_ALLOC_PARA* pMemPara, [In] uint dwInfoType, [Out] void** ppvInfo);
HRESULT NCryptProtectSecret([In] NCRYPT_DESCRIPTOR_HANDLE hDescriptor, [In] uint dwFlags, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbData, [In] uint cbData, [Const] [In] [Optional] NCRYPT_ALLOC_PARA* pMemPara, [In] [Optional] HWND hWnd, [Out] byte** ppbProtectedBlob, [Out] uint* pcbProtectedBlob);
HRESULT NCryptUnprotectSecret([Out] [Optional] NCRYPT_DESCRIPTOR_HANDLE* phDescriptor, [In] NCRYPT_FLAGS dwFlags, [Const] [MemorySize(BytesParamIndex = 3)] [In] byte* pbProtectedBlob, [In] uint cbProtectedBlob, [Const] [In] [Optional] NCRYPT_ALLOC_PARA* pMemPara, [In] [Optional] HWND hWnd, [Out] byte** ppbData, [Out] uint* pcbData);
HRESULT NCryptStreamOpenToProtect([In] NCRYPT_DESCRIPTOR_HANDLE hDescriptor, [In] uint dwFlags, [In] [Optional] HWND hWnd, [In] NCRYPT_PROTECT_STREAM_INFO* pStreamInfo, [Out] NCRYPT_STREAM_HANDLE* phStream);
HRESULT NCryptStreamOpenToUnprotect([In] NCRYPT_PROTECT_STREAM_INFO* pStreamInfo, [In] uint dwFlags, [In] [Optional] HWND hWnd, [Out] NCRYPT_STREAM_HANDLE* phStream);
HRESULT NCryptStreamOpenToUnprotectEx([In] NCRYPT_PROTECT_STREAM_INFO_EX* pStreamInfo, [In] uint dwFlags, [In] [Optional] HWND hWnd, [Out] NCRYPT_STREAM_HANDLE* phStream);
HRESULT NCryptStreamUpdate([In] NCRYPT_STREAM_HANDLE hStream, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pbData, [In] nuint cbData, [In] BOOL fFinal);
HRESULT NCryptStreamClose([In] NCRYPT_STREAM_HANDLE hStream);
