HRESULT FindCertsByIssuer([MemorySize(BytesParamIndex = 1)] [Out] [Optional] CERT_CHAIN* pCertChains, [In] [Out] uint* pcbCertChains, [Out] uint* pcCertChains, [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* pbEncodedIssuerName, [In] uint cbEncodedIssuerName, [Const] [In] [Optional] PWSTR pwszPurpose, [In] uint dwKeySpec);
HANDLE CryptCATOpen([In] PWSTR pwszFileName, [In] CRYPTCAT_OPEN_FLAGS fdwOpenFlags, [In] nuint hProv, [In] CRYPTCAT_VERSION dwPublicVersion, [In] uint dwEncodingType);
BOOL CryptCATClose([In] HANDLE hCatalog);
CRYPTCATSTORE* CryptCATStoreFromHandle([In] HANDLE hCatalog);
HANDLE CryptCATHandleFromStore([In] [Out] CRYPTCATSTORE* pCatStore);
BOOL CryptCATPersistStore([In] HANDLE hCatalog);
CRYPTCATATTRIBUTE* CryptCATGetCatAttrInfo([In] HANDLE hCatalog, [In] PWSTR pwszReferenceTag);
CRYPTCATATTRIBUTE* CryptCATPutCatAttrInfo([In] HANDLE hCatalog, [In] PWSTR pwszReferenceTag, [In] uint dwAttrTypeAndAction, [In] uint cbData, [In] [Out] byte* pbData);
CRYPTCATATTRIBUTE* CryptCATEnumerateCatAttr([In] HANDLE hCatalog, [In] [Out] CRYPTCATATTRIBUTE* pPrevAttr);
CRYPTCATMEMBER* CryptCATGetMemberInfo([In] HANDLE hCatalog, [In] PWSTR pwszReferenceTag);
CRYPTCATMEMBER* CryptCATAllocSortedMemberInfo([In] HANDLE hCatalog, [In] PWSTR pwszReferenceTag);
void CryptCATFreeSortedMemberInfo([In] HANDLE hCatalog, [In] [Out] CRYPTCATMEMBER* pCatMember);
CRYPTCATATTRIBUTE* CryptCATGetAttrInfo([In] HANDLE hCatalog, [In] [Out] CRYPTCATMEMBER* pCatMember, [In] PWSTR pwszReferenceTag);
CRYPTCATMEMBER* CryptCATPutMemberInfo([In] HANDLE hCatalog, [In] [Optional] PWSTR pwszFileName, [In] PWSTR pwszReferenceTag, [In] [Out] Guid* pgSubjectType, [In] uint dwCertVersion, [In] uint cbSIPIndirectData, [In] [Out] byte* pbSIPIndirectData);
CRYPTCATATTRIBUTE* CryptCATPutAttrInfo([In] HANDLE hCatalog, [In] [Out] CRYPTCATMEMBER* pCatMember, [In] PWSTR pwszReferenceTag, [In] uint dwAttrTypeAndAction, [In] uint cbData, [In] [Out] byte* pbData);
CRYPTCATMEMBER* CryptCATEnumerateMember([In] HANDLE hCatalog, [In] [Out] CRYPTCATMEMBER* pPrevMember);
CRYPTCATATTRIBUTE* CryptCATEnumerateAttr([In] HANDLE hCatalog, [In] [Out] CRYPTCATMEMBER* pCatMember, [In] [Out] CRYPTCATATTRIBUTE* pPrevAttr);
CRYPTCATCDF* CryptCATCDFOpen([In] PWSTR pwszFilePath, [In] [Optional] PFN_CDF_PARSE_ERROR_CALLBACK pfnParseError);
BOOL CryptCATCDFClose([In] [Out] CRYPTCATCDF* pCDF);
CRYPTCATATTRIBUTE* CryptCATCDFEnumCatAttributes([In] [Out] CRYPTCATCDF* pCDF, [In] [Out] CRYPTCATATTRIBUTE* pPrevAttr, [In] PFN_CDF_PARSE_ERROR_CALLBACK pfnParseError);
CRYPTCATMEMBER* CryptCATCDFEnumMembers([In] [Out] CRYPTCATCDF* pCDF, [In] [Out] CRYPTCATMEMBER* pPrevMember, [In] PFN_CDF_PARSE_ERROR_CALLBACK pfnParseError);
CRYPTCATATTRIBUTE* CryptCATCDFEnumAttributes([In] [Out] CRYPTCATCDF* pCDF, [In] [Out] CRYPTCATMEMBER* pMember, [In] [Out] CRYPTCATATTRIBUTE* pPrevAttr, [In] PFN_CDF_PARSE_ERROR_CALLBACK pfnParseError);
BOOL IsCatalogFile([In] HANDLE hFile, [In] [Optional] PWSTR pwszFileName);
BOOL CryptCATAdminAcquireContext([Out] nint* phCatAdmin, [Const] [In] [Optional] Guid* pgSubsystem, [Reserved] [In] uint dwFlags);
BOOL CryptCATAdminAcquireContext2([Out] nint* phCatAdmin, [Const] [In] [Optional] Guid* pgSubsystem, [Const] [In] [Optional] PWSTR pwszHashAlgorithm, [In] [Optional] CERT_STRONG_SIGN_PARA* pStrongHashPolicy, [Reserved] [In] uint dwFlags);
BOOL CryptCATAdminReleaseContext([In] nint hCatAdmin, [In] uint dwFlags);
BOOL CryptCATAdminReleaseCatalogContext([In] nint hCatAdmin, [In] nint hCatInfo, [In] uint dwFlags);
nint CryptCATAdminEnumCatalogFromHash([In] nint hCatAdmin, [MemorySize(BytesParamIndex = 2)] [In] byte* pbHash, [In] uint cbHash, [Reserved] [In] uint dwFlags, [In] [Out] [Optional] nint* phPrevCatInfo);
BOOL CryptCATAdminCalcHashFromFileHandle([In] HANDLE hFile, [In] [Out] uint* pcbHash, [MemorySize(BytesParamIndex = 1)] [Out] [Optional] byte* pbHash, [Reserved] [In] uint dwFlags);
BOOL CryptCATAdminCalcHashFromFileHandle2([In] nint hCatAdmin, [In] HANDLE hFile, [In] [Out] uint* pcbHash, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] byte* pbHash, [Reserved] [In] uint dwFlags);
nint CryptCATAdminAddCatalog([In] nint hCatAdmin, [In] PWSTR pwszCatalogFile, [In] [Optional] PWSTR pwszSelectBaseName, [In] uint dwFlags);
BOOL CryptCATAdminRemoveCatalog([In] nint hCatAdmin, [Const] [In] PWSTR pwszCatalogFile, [In] uint dwFlags);
BOOL CryptCATCatalogInfoFromContext([In] nint hCatInfo, [In] [Out] CATALOG_INFO* psCatInfo, [In] uint dwFlags);
BOOL CryptCATAdminResolveCatalogPath([In] nint hCatAdmin, [In] PWSTR pwszCatalogFile, [In] [Out] CATALOG_INFO* psCatInfo, [In] uint dwFlags);
BOOL CryptCATAdminPauseServiceForBackup([In] uint dwFlags, [In] BOOL fResume);
BOOL CryptSIPGetSignedDataMsg([In] [Out] SIP_SUBJECTINFO* pSubjectInfo, [In] [Out] CERT_QUERY_ENCODING_TYPE* pdwEncodingType, [In] uint dwIndex, [In] [Out] uint* pcbSignedDataMsg, [In] [Out] byte* pbSignedDataMsg);
BOOL CryptSIPPutSignedDataMsg([In] [Out] SIP_SUBJECTINFO* pSubjectInfo, [In] CERT_QUERY_ENCODING_TYPE dwEncodingType, [In] [Out] uint* pdwIndex, [In] uint cbSignedDataMsg, [In] [Out] byte* pbSignedDataMsg);
BOOL CryptSIPCreateIndirectData([In] [Out] SIP_SUBJECTINFO* pSubjectInfo, [In] [Out] uint* pcbIndirectData, [In] [Out] SIP_INDIRECT_DATA* pIndirectData);
BOOL CryptSIPVerifyIndirectData([In] [Out] SIP_SUBJECTINFO* pSubjectInfo, [In] [Out] SIP_INDIRECT_DATA* pIndirectData);
BOOL CryptSIPRemoveSignedDataMsg([In] [Out] SIP_SUBJECTINFO* pSubjectInfo, [In] uint dwIndex);
BOOL CryptSIPGetCaps([In] SIP_SUBJECTINFO* pSubjInfo, [In] [Out] SIP_CAP_SET_V3* pCaps);
BOOL CryptSIPGetSealedDigest([In] SIP_SUBJECTINFO* pSubjectInfo, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] byte* pSig, [In] uint dwSig, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] byte* pbDigest, [In] [Out] uint* pcbDigest);
int WinVerifyTrust([In] HWND hwnd, [In] [Out] Guid* pgActionID, [In] [Out] void* pWVTData);
int WinVerifyTrustEx([In] HWND hwnd, [In] [Out] Guid* pgActionID, [In] [Out] WINTRUST_DATA* pWinTrustData);
void WintrustGetRegPolicyFlags([In] [Out] WINTRUST_POLICY_FLAGS* pdwPolicyFlags);
BOOL WintrustSetRegPolicyFlags([In] WINTRUST_POLICY_FLAGS dwPolicyFlags);
BOOL WintrustAddActionID([In] Guid* pgActionID, [In] uint fdwFlags, [In] CRYPT_REGISTER_ACTIONID* psProvInfo);
BOOL WintrustRemoveActionID([In] Guid* pgActionID);
BOOL WintrustLoadFunctionPointers([In] [Out] Guid* pgActionID, [In] [Out] CRYPT_PROVIDER_FUNCTIONS* pPfns);
BOOL WintrustAddDefaultForUsage([Const] [In] PSTR pszUsageOID, [In] CRYPT_PROVIDER_REGDEFUSAGE* psDefUsage);
BOOL WintrustGetDefaultForUsage([In] WINTRUST_GET_DEFAULT_FOR_USAGE_ACTION dwAction, [Const] [In] PSTR pszUsageOID, [In] [Out] CRYPT_PROVIDER_DEFUSAGE* psUsage);
CRYPT_PROVIDER_SGNR* WTHelperGetProvSignerFromChain([In] [Out] CRYPT_PROVIDER_DATA* pProvData, [In] uint idxSigner, [In] BOOL fCounterSigner, [In] uint idxCounterSigner);
CRYPT_PROVIDER_CERT* WTHelperGetProvCertFromChain([In] [Out] CRYPT_PROVIDER_SGNR* pSgnr, [In] uint idxCert);
CRYPT_PROVIDER_DATA* WTHelperProvDataFromStateData([In] HANDLE hStateData);
CRYPT_PROVIDER_PRIVDATA* WTHelperGetProvPrivateDataFromChain([In] [Out] CRYPT_PROVIDER_DATA* pProvData, [In] [Out] Guid* pgProviderID);
BOOL WTHelperCertIsSelfSigned([In] uint dwEncoding, [In] [Out] CERT_INFO* pCert);
HRESULT WTHelperCertCheckValidSignature([In] [Out] CRYPT_PROVIDER_DATA* pProvData);
BOOL OpenPersonalTrustDBDialogEx([In] [Optional] HWND hwndParent, [In] uint dwFlags, [In] [Out] [Optional] void** pvReserved);
BOOL OpenPersonalTrustDBDialog([In] [Optional] HWND hwndParent);
void WintrustSetDefaultIncludePEPageHashes([In] BOOL fIncludePEPageHashes);
