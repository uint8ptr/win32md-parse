BOOL BeginPanningFeedback([In] HWND hwnd);
BOOL UpdatePanningFeedback([In] HWND hwnd, [In] int lTotalOverpanOffsetX, [In] int lTotalOverpanOffsetY, [In] BOOL fInInertia);
BOOL EndPanningFeedback([In] HWND hwnd, [In] BOOL fAnimateBack);
HRESULT GetThemeAnimationProperty([In] HTHEME hTheme, [In] int iStoryboardId, [In] int iTargetId, [In] TA_PROPERTY eProperty, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] void* pvProperty, [In] uint cbSize, [Out] uint* pcbSizeOut);
HRESULT GetThemeAnimationTransform([In] HTHEME hTheme, [In] int iStoryboardId, [In] int iTargetId, [In] uint dwTransformIndex, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] TA_TRANSFORM* pTransform, [In] uint cbSize, [Out] uint* pcbSizeOut);
HRESULT GetThemeTimingFunction([In] HTHEME hTheme, [In] int iTimingFunctionId, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] TA_TIMINGFUNCTION* pTimingFunction, [In] uint cbSize, [Out] uint* pcbSizeOut);
HTHEME OpenThemeData([In] [Optional] HWND hwnd, [Const] [In] PWSTR pszClassList);
HTHEME OpenThemeDataEx([In] [Optional] HWND hwnd, [Const] [In] PWSTR pszClassList, [In] OPEN_THEME_DATA_FLAGS dwFlags);
HRESULT CloseThemeData([In] HTHEME hTheme);
HRESULT DrawThemeBackground([In] HTHEME hTheme, [In] HDC hdc, [In] int iPartId, [In] int iStateId, [In] RECT* pRect, [In] [Optional] RECT* pClipRect);
HRESULT DrawThemeBackgroundEx([In] HTHEME hTheme, [In] HDC hdc, [In] int iPartId, [In] int iStateId, [In] RECT* pRect, [Const] [In] [Optional] DTBGOPTS* pOptions);
HRESULT DrawThemeText([In] HTHEME hTheme, [In] HDC hdc, [In] int iPartId, [In] int iStateId, [Const] [NativeArrayInfo(CountParamIndex = 5)] [In] PWSTR pszText, [In] int cchText, [In] DRAW_TEXT_FORMAT dwTextFlags, [In] uint dwTextFlags2, [In] RECT* pRect);
HRESULT GetThemeBackgroundContentRect([In] HTHEME hTheme, [In] [Optional] HDC hdc, [In] int iPartId, [In] int iStateId, [In] RECT* pBoundingRect, [Out] RECT* pContentRect);
HRESULT GetThemeBackgroundExtent([In] HTHEME hTheme, [In] [Optional] HDC hdc, [In] int iPartId, [In] int iStateId, [In] RECT* pContentRect, [Out] RECT* pExtentRect);
HRESULT GetThemeBackgroundRegion([In] HTHEME hTheme, [In] [Optional] HDC hdc, [In] int iPartId, [In] int iStateId, [In] RECT* pRect, [Out] HRGN* pRegion);
HRESULT GetThemePartSize([In] HTHEME hTheme, [In] [Optional] HDC hdc, [In] int iPartId, [In] int iStateId, [In] [Optional] RECT* prc, [In] THEMESIZE eSize, [Out] SIZE* psz);
HRESULT GetThemeTextExtent([In] HTHEME hTheme, [In] HDC hdc, [In] int iPartId, [In] int iStateId, [Const] [NativeArrayInfo(CountParamIndex = 5)] [In] PWSTR pszText, [In] int cchCharCount, [In] DRAW_TEXT_FORMAT dwTextFlags, [In] [Optional] RECT* pBoundingRect, [Out] RECT* pExtentRect);
HRESULT GetThemeTextMetrics([In] HTHEME hTheme, [In] HDC hdc, [In] int iPartId, [In] int iStateId, [Out] TEXTMETRICW* ptm);
HRESULT HitTestThemeBackground([In] HTHEME hTheme, [In] [Optional] HDC hdc, [In] int iPartId, [In] int iStateId, [In] HIT_TEST_BACKGROUND_OPTIONS dwOptions, [In] RECT* pRect, [In] [Optional] HRGN hrgn, [In] POINT ptTest, [Out] ushort* pwHitTestCode);
HRESULT DrawThemeEdge([In] HTHEME hTheme, [In] HDC hdc, [In] int iPartId, [In] int iStateId, [In] RECT* pDestRect, [In] DRAWEDGE_FLAGS uEdge, [In] DRAW_EDGE_FLAGS uFlags, [Out] [Optional] RECT* pContentRect);
HRESULT DrawThemeIcon([In] HTHEME hTheme, [In] HDC hdc, [In] int iPartId, [In] int iStateId, [In] RECT* pRect, [In] HIMAGELIST himl, [In] int iImageIndex);
BOOL IsThemePartDefined([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId);
BOOL IsThemeBackgroundPartiallyTransparent([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId);
HRESULT GetThemeColor([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId, [In] THEME_PROPERTY_SYMBOL_ID iPropId, [Out] COLORREF* pColor);
HRESULT GetThemeMetric([In] HTHEME hTheme, [In] [Optional] HDC hdc, [In] int iPartId, [In] int iStateId, [In] THEME_PROPERTY_SYMBOL_ID iPropId, [Out] int* piVal);
HRESULT GetThemeString([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId, [In] int iPropId, [NativeArrayInfo(CountParamIndex = 5)] [Out] PWSTR pszBuff, [In] int cchMaxBuffChars);
HRESULT GetThemeBool([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId, [In] THEME_PROPERTY_SYMBOL_ID iPropId, [Out] BOOL* pfVal);
HRESULT GetThemeInt([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId, [In] THEME_PROPERTY_SYMBOL_ID iPropId, [Out] int* piVal);
HRESULT GetThemeEnumValue([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId, [In] THEME_PROPERTY_SYMBOL_ID iPropId, [Out] int* piVal);
HRESULT GetThemePosition([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId, [In] THEME_PROPERTY_SYMBOL_ID iPropId, [Out] POINT* pPoint);
HRESULT GetThemeFont([In] HTHEME hTheme, [In] [Optional] HDC hdc, [In] int iPartId, [In] int iStateId, [In] int iPropId, [Out] LOGFONTW* pFont);
HRESULT GetThemeRect([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId, [In] int iPropId, [Out] RECT* pRect);
HRESULT GetThemeMargins([In] HTHEME hTheme, [In] [Optional] HDC hdc, [In] int iPartId, [In] int iStateId, [In] THEME_PROPERTY_SYMBOL_ID iPropId, [In] [Optional] RECT* prc, [Out] MARGINS* pMargins);
HRESULT GetThemeIntList([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId, [In] THEME_PROPERTY_SYMBOL_ID iPropId, [Out] INTLIST* pIntList);
HRESULT GetThemePropertyOrigin([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId, [In] int iPropId, [Out] PROPERTYORIGIN* pOrigin);
HRESULT SetWindowTheme([In] HWND hwnd, [Const] [In] [Optional] PWSTR pszSubAppName, [Const] [In] [Optional] PWSTR pszSubIdList);
HRESULT GetThemeFilename([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId, [In] THEME_PROPERTY_SYMBOL_ID iPropId, [NativeArrayInfo(CountParamIndex = 5)] [Out] PWSTR pszThemeFileName, [In] int cchMaxBuffChars);
COLORREF GetThemeSysColor([In] [Optional] HTHEME hTheme, [In] int iColorId);
HBRUSH GetThemeSysColorBrush([In] [Optional] HTHEME hTheme, [In] THEME_PROPERTY_SYMBOL_ID iColorId);
BOOL GetThemeSysBool([In] [Optional] HTHEME hTheme, [In] THEME_PROPERTY_SYMBOL_ID iBoolId);
int GetThemeSysSize([In] [Optional] HTHEME hTheme, [In] int iSizeId);
HRESULT GetThemeSysFont([In] [Optional] HTHEME hTheme, [In] THEME_PROPERTY_SYMBOL_ID iFontId, [Out] LOGFONTW* plf);
HRESULT GetThemeSysString([In] HTHEME hTheme, [In] THEME_PROPERTY_SYMBOL_ID iStringId, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pszStringBuff, [In] int cchMaxStringChars);
HRESULT GetThemeSysInt([In] HTHEME hTheme, [In] THEME_PROPERTY_SYMBOL_ID iIntId, [Out] int* piValue);
BOOL IsThemeActive();
BOOL IsAppThemed();
HTHEME GetWindowTheme([In] HWND hwnd);
HRESULT EnableThemeDialogTexture([In] HWND hwnd, [In] uint dwFlags);
BOOL IsThemeDialogTextureEnabled([In] HWND hwnd);
SET_THEME_APP_PROPERTIES_FLAGS GetThemeAppProperties();
void SetThemeAppProperties([In] SET_THEME_APP_PROPERTIES_FLAGS dwFlags);
HRESULT GetCurrentThemeName([NativeArrayInfo(CountParamIndex = 1)] [Out] PWSTR pszThemeFileName, [In] int cchMaxNameChars, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR pszColorBuff, [In] int cchMaxColorChars, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR pszSizeBuff, [In] int cchMaxSizeChars);
HRESULT GetThemeDocumentationProperty([Const] [In] PWSTR pszThemeName, [Const] [In] PWSTR pszPropertyName, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pszValueBuff, [In] int cchMaxValChars);
HRESULT DrawThemeParentBackground([In] HWND hwnd, [In] HDC hdc, [Const] [In] [Optional] RECT* prc);
HRESULT EnableTheming([In] BOOL fEnable);
HRESULT DrawThemeParentBackgroundEx([In] HWND hwnd, [In] HDC hdc, [In] DRAW_THEME_PARENT_BACKGROUND_FLAGS dwFlags, [Const] [In] [Optional] RECT* prc);
HRESULT SetWindowThemeAttribute([In] HWND hwnd, [In] WINDOWTHEMEATTRIBUTETYPE eAttribute, [MemorySize(BytesParamIndex = 3)] [In] void* pvAttribute, [In] uint cbAttribute);
HRESULT DrawThemeTextEx([In] HTHEME hTheme, [In] HDC hdc, [In] int iPartId, [In] int iStateId, [Const] [NativeArrayInfo(CountParamIndex = 5)] [In] PWSTR pszText, [In] int cchText, [In] DRAW_TEXT_FORMAT dwTextFlags, [In] [Out] RECT* pRect, [Const] [In] [Optional] DTTOPTS* pOptions);
HRESULT GetThemeBitmap([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId, [In] THEME_PROPERTY_SYMBOL_ID iPropId, [In] GET_THEME_BITMAP_FLAGS dwFlags, [Out] HBITMAP* phBitmap);
HRESULT GetThemeStream([In] HTHEME hTheme, [In] int iPartId, [In] int iStateId, [In] int iPropId, [Out] void** ppvStream, [Out] [Optional] uint* pcbStream, [In] [Optional] HINSTANCE hInst);
HRESULT BufferedPaintInit();
HRESULT BufferedPaintUnInit();
nint BeginBufferedPaint([In] HDC hdcTarget, [Const] [In] RECT* prcTarget, [In] BP_BUFFERFORMAT dwFormat, [In] [Optional] BP_PAINTPARAMS* pPaintParams, [Out] HDC* phdc);
HRESULT EndBufferedPaint([In] nint hBufferedPaint, [In] BOOL fUpdateTarget);
HRESULT GetBufferedPaintTargetRect([In] nint hBufferedPaint, [Out] RECT* prc);
HDC GetBufferedPaintTargetDC([In] nint hBufferedPaint);
HDC GetBufferedPaintDC([In] nint hBufferedPaint);
HRESULT GetBufferedPaintBits([In] nint hBufferedPaint, [Out] RGBQUAD** ppbBuffer, [Out] int* pcxRow);
HRESULT BufferedPaintClear([In] nint hBufferedPaint, [Const] [In] [Optional] RECT* prc);
HRESULT BufferedPaintSetAlpha([In] nint hBufferedPaint, [Const] [In] [Optional] RECT* prc, [In] byte alpha);
HRESULT BufferedPaintStopAllAnimations([In] HWND hwnd);
nint BeginBufferedAnimation([In] HWND hwnd, [In] HDC hdcTarget, [Const] [In] RECT* prcTarget, [In] BP_BUFFERFORMAT dwFormat, [In] [Optional] BP_PAINTPARAMS* pPaintParams, [In] BP_ANIMATIONPARAMS* pAnimationParams, [Out] HDC* phdcFrom, [Out] HDC* phdcTo);
HRESULT EndBufferedAnimation([In] nint hbpAnimation, [In] BOOL fUpdateTarget);
BOOL BufferedPaintRenderAnimation([In] HWND hwnd, [In] HDC hdcTarget);
BOOL IsCompositionActive();
HRESULT GetThemeTransitionDuration([In] HTHEME hTheme, [In] int iPartId, [In] int iStateIdFrom, [In] int iStateIdTo, [In] int iPropId, [Out] uint* pdwDuration);
HTHEME OpenThemeDataForDpi([In] [Optional] HWND hwnd, [Const] [In] PWSTR pszClassList, [In] uint dpi);
