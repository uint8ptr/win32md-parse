uint GetNodeClusterState([Const] [In] [Optional] PWSTR lpszNodeName, [Out] uint* pdwClusterState);
_HCLUSTER* OpenCluster([Const] [In] [Optional] PWSTR lpszClusterName);
_HCLUSTER* OpenClusterEx([Const] [In] [Optional] PWSTR lpszClusterName, [In] uint DesiredAccess, [Out] [Optional] uint* GrantedAccess);
BOOL CloseCluster([In] _HCLUSTER* hCluster);
uint SetClusterName([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszNewClusterName);
uint GetClusterInformation([In] _HCLUSTER* hCluster, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpszClusterName, [In] [Out] uint* lpcchClusterName, [Out] [Optional] CLUSTERVERSIONINFO* lpClusterInfo);
uint GetClusterQuorumResource([In] _HCLUSTER* hCluster, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpszResourceName, [In] [Out] uint* lpcchResourceName, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR lpszDeviceName, [In] [Out] uint* lpcchDeviceName, [Out] uint* lpdwMaxQuorumLogSize);
uint SetClusterQuorumResource([In] _HRESOURCE* hResource, [Const] [In] [Optional] PWSTR lpszDeviceName, [In] uint dwMaxQuoLogSize);
uint BackupClusterDatabase([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszPathName);
uint RestoreClusterDatabase([Const] [In] PWSTR lpszPathName, [In] BOOL bForce, [Const] [In] [Optional] PWSTR lpszQuorumDriveLetter);
uint SetClusterNetworkPriorityOrder([In] _HCLUSTER* hCluster, [In] uint NetworkCount, [NativeArrayInfo(CountParamIndex = 1)] [In] _HNETWORK** NetworkList);
uint SetClusterServiceAccountPassword([Const] [In] PWSTR lpszClusterName, [Const] [In] PWSTR lpszNewPassword, [In] uint dwFlags, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] CLUSTER_SET_PASSWORD_STATUS* lpReturnStatusBuffer, [In] [Out] uint* lpcbReturnStatusBufferSize);
uint ClusterControl([In] _HCLUSTER* hCluster, [In] [Optional] _HNODE* hHostNode, [In] uint dwControlCode, [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* lpInBuffer, [In] uint nInBufferSize, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* lpOutBuffer, [In] uint nOutBufferSize, [Out] [Optional] uint* lpBytesReturned);
uint ClusterUpgradeFunctionalLevel([In] _HCLUSTER* hCluster, [In] BOOL perform, [In] [Optional] PCLUSTER_UPGRADE_PROGRESS_CALLBACK pfnProgressCallback, [In] [Optional] void* pvCallbackArg);
_HCHANGE* CreateClusterNotifyPortV2([In] _HCHANGE* hChange, [In] _HCLUSTER* hCluster, [In] NOTIFY_FILTER_AND_TYPE* Filters, [In] uint dwFilterCount, [In] nuint dwNotifyKey);
uint RegisterClusterNotifyV2([In] _HCHANGE* hChange, [In] NOTIFY_FILTER_AND_TYPE Filter, [In] HANDLE hObject, [In] nuint dwNotifyKey);
uint GetNotifyEventHandle([In] _HCHANGE* hChange, [Out] HANDLE* lphTargetEvent);
uint GetClusterNotifyV2([In] _HCHANGE* hChange, [Out] nuint* lpdwNotifyKey, [In] [Out] [Optional] NOTIFY_FILTER_AND_TYPE* pFilterAndType, [MemorySize(BytesParamIndex = 4)] [In] [Out] [Optional] byte* buffer, [In] [Out] [Optional] uint* lpbBufferSize, [NativeArrayInfo(CountParamIndex = 6)] [In] [Out] [Optional] PWSTR lpszObjectId, [In] [Out] [Optional] uint* lpcchObjectId, [NativeArrayInfo(CountParamIndex = 8)] [In] [Out] [Optional] PWSTR lpszParentId, [In] [Out] [Optional] uint* lpcchParentId, [NativeArrayInfo(CountParamIndex = 10)] [In] [Out] [Optional] PWSTR lpszName, [In] [Out] [Optional] uint* lpcchName, [NativeArrayInfo(CountParamIndex = 12)] [In] [Out] [Optional] PWSTR lpszType, [In] [Out] [Optional] uint* lpcchType, [In] [Optional] uint dwMilliseconds);
_HCHANGE* CreateClusterNotifyPort([In] _HCHANGE* hChange, [In] _HCLUSTER* hCluster, [In] uint dwFilter, [In] nuint dwNotifyKey);
uint RegisterClusterNotify([In] _HCHANGE* hChange, [In] uint dwFilterType, [In] HANDLE hObject, [In] nuint dwNotifyKey);
uint GetClusterNotify([In] _HCHANGE* hChange, [Out] nuint* lpdwNotifyKey, [Out] uint* lpdwFilterType, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR lpszName, [In] [Out] uint* lpcchName, [In] uint dwMilliseconds);
BOOL CloseClusterNotifyPort([In] _HCHANGE* hChange);
_HCLUSENUM* ClusterOpenEnum([In] _HCLUSTER* hCluster, [In] uint dwType);
uint ClusterGetEnumCount([In] _HCLUSENUM* hEnum);
uint ClusterEnum([In] _HCLUSENUM* hEnum, [In] uint dwIndex, [Out] uint* lpdwType, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR lpszName, [In] [Out] uint* lpcchName);
uint ClusterCloseEnum([In] _HCLUSENUM* hEnum);
_HCLUSENUMEX* ClusterOpenEnumEx([In] _HCLUSTER* hCluster, [In] uint dwType, [In] [Optional] void* pOptions);
uint ClusterGetEnumCountEx([In] _HCLUSENUMEX* hClusterEnum);
uint ClusterEnumEx([In] _HCLUSENUMEX* hClusterEnum, [In] uint dwIndex, [In] [Out] CLUSTER_ENUM_ITEM* pItem, [In] [Out] uint* cbItem);
uint ClusterCloseEnumEx([In] _HCLUSENUMEX* hClusterEnum);
_HGROUPSET* CreateClusterGroupSet([In] _HCLUSTER* hCluster, [Const] [In] PWSTR groupSetName);
_HGROUPSET* OpenClusterGroupSet([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszGroupSetName);
BOOL CloseClusterGroupSet([In] _HGROUPSET* hGroupSet);
uint DeleteClusterGroupSet([In] _HGROUPSET* hGroupSet);
uint ClusterAddGroupToGroupSet([In] _HGROUPSET* hGroupSet, [In] _HGROUP* hGroup);
uint ClusterAddGroupToGroupSetWithDomains([In] _HGROUPSET* hGroupSet, [In] _HGROUP* hGroup, [In] uint faultDomain, [In] uint updateDomain);
uint ClusterRemoveGroupFromGroupSet([In] _HGROUP* hGroup);
uint ClusterGroupSetControl([In] _HGROUPSET* hGroupSet, [In] [Optional] _HNODE* hHostNode, [In] uint dwControlCode, [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* lpInBuffer, [In] uint cbInBufferSize, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* lpOutBuffer, [In] uint cbOutBufferSize, [Out] [Optional] uint* lpBytesReturned);
uint AddClusterGroupDependency([In] _HGROUP* hDependentGroup, [In] _HGROUP* hProviderGroup);
uint SetGroupDependencyExpression([In] _HGROUP* hGroup, [Const] [In] PWSTR lpszDependencyExpression);
uint RemoveClusterGroupDependency([In] _HGROUP* hGroup, [In] _HGROUP* hDependsOn);
uint AddClusterGroupSetDependency([In] _HGROUPSET* hDependentGroupSet, [In] _HGROUPSET* hProviderGroupSet);
uint SetClusterGroupSetDependencyExpression([In] _HGROUPSET* hGroupSet, [Const] [In] PWSTR lpszDependencyExprssion);
uint RemoveClusterGroupSetDependency([In] _HGROUPSET* hGroupSet, [In] _HGROUPSET* hDependsOn);
uint AddClusterGroupToGroupSetDependency([In] _HGROUP* hDependentGroup, [In] _HGROUPSET* hProviderGroupSet);
uint RemoveClusterGroupToGroupSetDependency([In] _HGROUP* hGroup, [In] _HGROUPSET* hDependsOn);
_HGROUPSETENUM* ClusterGroupSetOpenEnum([In] [Out] _HCLUSTER* hCluster);
uint ClusterGroupSetGetEnumCount([In] [Out] _HGROUPSETENUM* hGroupSetEnum);
uint ClusterGroupSetEnum([In] _HGROUPSETENUM* hGroupSetEnum, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR lpszName, [In] [Out] uint* lpcchName);
uint ClusterGroupSetCloseEnum([In] [Out] _HGROUPSETENUM* hGroupSetEnum);
uint AddCrossClusterGroupSetDependency([In] _HGROUPSET* hDependentGroupSet, [Const] [In] PWSTR lpRemoteClusterName, [Const] [In] PWSTR lpRemoteGroupSetName);
uint RemoveCrossClusterGroupSetDependency([In] _HGROUPSET* hDependentGroupSet, [Const] [In] PWSTR lpRemoteClusterName, [Const] [In] PWSTR lpRemoteGroupSetName);
_HGROUPSET* CreateClusterAvailabilitySet([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpAvailabilitySetName, [In] CLUSTER_AVAILABILITY_SET_CONFIG* pAvailabilitySetConfig);
uint ClusterNodeReplacement([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszNodeNameCurrent, [Const] [In] PWSTR lpszNodeNameNew);
uint ClusterCreateAffinityRule([In] _HCLUSTER* hCluster, [Const] [In] PWSTR ruleName, [In] CLUS_AFFINITY_RULE_TYPE ruleType);
uint ClusterRemoveAffinityRule([In] _HCLUSTER* hCluster, [Const] [In] PWSTR ruleName);
uint ClusterAddGroupToAffinityRule([In] _HCLUSTER* hCluster, [Const] [In] PWSTR ruleName, [In] _HGROUP* hGroup);
uint ClusterRemoveGroupFromAffinityRule([In] _HCLUSTER* hCluster, [Const] [In] PWSTR ruleName, [In] _HGROUP* hGroup);
uint ClusterAffinityRuleControl([In] _HCLUSTER* hCluster, [Const] [In] PWSTR affinityRuleName, [In] [Optional] _HNODE* hHostNode, [In] uint dwControlCode, [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* lpInBuffer, [In] uint cbInBufferSize, [MemorySize(BytesParamIndex = 7)] [Out] [Optional] void* lpOutBuffer, [In] uint cbOutBufferSize, [Out] [Optional] uint* lpBytesReturned);
_HNODE* OpenClusterNode([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszNodeName);
_HNODE* OpenClusterNodeEx([In] _HCLUSTER* hCluster, [Const] [In] [Optional] PWSTR lpszNodeName, [In] uint dwDesiredAccess, [Out] [Optional] uint* lpdwGrantedAccess);
_HNODE* OpenClusterNodeById([In] _HCLUSTER* hCluster, [In] uint nodeId);
BOOL CloseClusterNode([In] _HNODE* hNode);
CLUSTER_NODE_STATE GetClusterNodeState([In] _HNODE* hNode);
uint GetClusterNodeId([In] [Optional] _HNODE* hNode, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpszNodeId, [In] [Out] uint* lpcchName);
_HCLUSTER* GetClusterFromNode([In] _HNODE* hNode);
uint PauseClusterNode([In] _HNODE* hNode);
uint ResumeClusterNode([In] _HNODE* hNode);
uint EvictClusterNode([In] _HNODE* hNode);
_HNETINTERFACEENUM* ClusterNetInterfaceOpenEnum([In] _HCLUSTER* hCluster, [Const] [In] [Optional] PWSTR lpszNodeName, [Const] [In] [Optional] PWSTR lpszNetworkName);
uint ClusterNetInterfaceEnum([In] _HNETINTERFACEENUM* hNetInterfaceEnum, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR lpszName, [In] [Out] uint* lpcchName);
uint ClusterNetInterfaceCloseEnum([In] _HNETINTERFACEENUM* hNetInterfaceEnum);
_HNODEENUM* ClusterNodeOpenEnum([In] _HNODE* hNode, [In] uint dwType);
_HNODEENUMEX* ClusterNodeOpenEnumEx([In] _HNODE* hNode, [In] uint dwType, [In] [Optional] void* pOptions);
uint ClusterNodeGetEnumCountEx([In] _HNODEENUMEX* hNodeEnum);
uint ClusterNodeEnumEx([In] _HNODEENUMEX* hNodeEnum, [In] uint dwIndex, [In] [Out] CLUSTER_ENUM_ITEM* pItem, [In] [Out] uint* cbItem);
uint ClusterNodeCloseEnumEx([In] _HNODEENUMEX* hNodeEnum);
uint ClusterNodeGetEnumCount([In] _HNODEENUM* hNodeEnum);
uint ClusterNodeCloseEnum([In] _HNODEENUM* hNodeEnum);
uint ClusterNodeEnum([In] _HNODEENUM* hNodeEnum, [In] uint dwIndex, [Out] uint* lpdwType, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR lpszName, [In] [Out] uint* lpcchName);
uint EvictClusterNodeEx([In] _HNODE* hNode, [In] uint dwTimeOut, [Out] HRESULT* phrCleanupStatus);
HKEY GetClusterResourceTypeKey([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszTypeName, [In] uint samDesired);
_HGROUP* CreateClusterGroup([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszGroupName);
_HGROUP* OpenClusterGroup([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszGroupName);
_HGROUP* OpenClusterGroupEx([In] _HCLUSTER* hCluster, [Const] [In] [Optional] PWSTR lpszGroupName, [In] uint dwDesiredAccess, [Out] [Optional] uint* lpdwGrantedAccess);
uint PauseClusterNodeEx([In] _HNODE* hNode, [In] BOOL bDrainNode, [In] uint dwPauseFlags, [In] [Optional] _HNODE* hNodeDrainTarget);
uint ResumeClusterNodeEx([In] _HNODE* hNode, [In] CLUSTER_NODE_RESUME_FAILBACK_TYPE eResumeFailbackType, [In] uint dwResumeFlagsReserved);
_HGROUP* CreateClusterGroupEx([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszGroupName, [In] [Optional] CLUSTER_CREATE_GROUP_INFO* pGroupInfo);
_HGROUPENUMEX* ClusterGroupOpenEnumEx([In] _HCLUSTER* hCluster, [Const] [MemorySize(BytesParamIndex = 2)] [In] [Optional] PWSTR lpszProperties, [In] uint cbProperties, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] PWSTR lpszRoProperties, [In] uint cbRoProperties, [In] uint dwFlags);
uint ClusterGroupGetEnumCountEx([In] _HGROUPENUMEX* hGroupEnumEx);
uint ClusterGroupEnumEx([In] _HGROUPENUMEX* hGroupEnumEx, [In] uint dwIndex, [In] [Out] CLUSTER_GROUP_ENUM_ITEM* pItem, [In] [Out] uint* cbItem);
uint ClusterGroupCloseEnumEx([In] _HGROUPENUMEX* hGroupEnumEx);
_HRESENUMEX* ClusterResourceOpenEnumEx([In] _HCLUSTER* hCluster, [Const] [MemorySize(BytesParamIndex = 2)] [In] [Optional] PWSTR lpszProperties, [In] uint cbProperties, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] PWSTR lpszRoProperties, [In] uint cbRoProperties, [In] uint dwFlags);
uint ClusterResourceGetEnumCountEx([In] _HRESENUMEX* hResourceEnumEx);
uint ClusterResourceEnumEx([In] _HRESENUMEX* hResourceEnumEx, [In] uint dwIndex, [In] [Out] CLUSTER_RESOURCE_ENUM_ITEM* pItem, [In] [Out] uint* cbItem);
uint ClusterResourceCloseEnumEx([In] _HRESENUMEX* hResourceEnumEx);
uint OnlineClusterGroupEx([In] _HGROUP* hGroup, [In] [Optional] _HNODE* hDestinationNode, [In] uint dwOnlineFlags, [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* lpInBuffer, [In] uint cbInBufferSize);
uint OfflineClusterGroupEx([In] _HGROUP* hGroup, [In] uint dwOfflineFlags, [MemorySize(BytesParamIndex = 3)] [In] [Optional] byte* lpInBuffer, [In] uint cbInBufferSize);
uint OnlineClusterResourceEx([In] _HRESOURCE* hResource, [In] uint dwOnlineFlags, [MemorySize(BytesParamIndex = 3)] [In] [Optional] byte* lpInBuffer, [In] uint cbInBufferSize);
uint OfflineClusterResourceEx([In] _HRESOURCE* hResource, [In] uint dwOfflineFlags, [MemorySize(BytesParamIndex = 3)] [In] [Optional] byte* lpInBuffer, [In] uint cbInBufferSize);
uint MoveClusterGroupEx([In] _HGROUP* hGroup, [In] [Optional] _HNODE* hDestinationNode, [In] uint dwMoveFlags, [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* lpInBuffer, [In] uint cbInBufferSize);
uint CancelClusterGroupOperation([In] _HGROUP* hGroup, [In] uint dwCancelFlags_RESERVED);
uint RestartClusterResource([In] _HRESOURCE* hResource, [In] uint dwFlags);
BOOL CloseClusterGroup([In] _HGROUP* hGroup);
_HCLUSTER* GetClusterFromGroup([In] _HGROUP* hGroup);
CLUSTER_GROUP_STATE GetClusterGroupState([In] _HGROUP* hGroup, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpszNodeName, [In] [Out] [Optional] uint* lpcchNodeName);
uint SetClusterGroupName([In] _HGROUP* hGroup, [Const] [In] PWSTR lpszGroupName);
uint SetClusterGroupNodeList([In] _HGROUP* hGroup, [In] uint NodeCount, [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] _HNODE** NodeList);
uint OnlineClusterGroup([In] _HGROUP* hGroup, [In] [Optional] _HNODE* hDestinationNode);
uint MoveClusterGroup([In] _HGROUP* hGroup, [In] [Optional] _HNODE* hDestinationNode);
uint OfflineClusterGroup([In] _HGROUP* hGroup);
uint DeleteClusterGroup([In] _HGROUP* hGroup);
uint DestroyClusterGroup([In] _HGROUP* hGroup);
_HGROUPENUM* ClusterGroupOpenEnum([In] _HGROUP* hGroup, [In] uint dwType);
uint ClusterGroupGetEnumCount([In] _HGROUPENUM* hGroupEnum);
uint ClusterGroupEnum([In] _HGROUPENUM* hGroupEnum, [In] uint dwIndex, [Out] uint* lpdwType, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR lpszResourceName, [In] [Out] uint* lpcchName);
uint ClusterGroupCloseEnum([In] _HGROUPENUM* hGroupEnum);
_HRESOURCE* CreateClusterResource([In] _HGROUP* hGroup, [Const] [In] PWSTR lpszResourceName, [Const] [In] PWSTR lpszResourceType, [In] uint dwFlags);
_HRESOURCE* OpenClusterResource([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszResourceName);
_HRESOURCE* OpenClusterResourceEx([In] _HCLUSTER* hCluster, [Const] [In] [Optional] PWSTR lpszResourceName, [In] uint dwDesiredAccess, [Out] [Optional] uint* lpdwGrantedAccess);
BOOL CloseClusterResource([In] _HRESOURCE* hResource);
_HCLUSTER* GetClusterFromResource([In] _HRESOURCE* hResource);
uint DeleteClusterResource([In] _HRESOURCE* hResource);
CLUSTER_RESOURCE_STATE GetClusterResourceState([In] _HRESOURCE* hResource, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpszNodeName, [In] [Out] [Optional] uint* lpcchNodeName, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR lpszGroupName, [In] [Out] [Optional] uint* lpcchGroupName);
uint SetClusterResourceName([In] _HRESOURCE* hResource, [Const] [In] PWSTR lpszResourceName);
uint FailClusterResource([In] _HRESOURCE* hResource);
uint OnlineClusterResource([In] _HRESOURCE* hResource);
uint OfflineClusterResource([In] _HRESOURCE* hResource);
uint ChangeClusterResourceGroup([In] _HRESOURCE* hResource, [In] _HGROUP* hGroup);
uint ChangeClusterResourceGroupEx([In] _HRESOURCE* hResource, [In] _HGROUP* hGroup, [In] ulong Flags);
uint AddClusterResourceNode([In] _HRESOURCE* hResource, [In] _HNODE* hNode);
uint RemoveClusterResourceNode([In] _HRESOURCE* hResource, [In] _HNODE* hNode);
uint AddClusterResourceDependency([In] _HRESOURCE* hResource, [In] _HRESOURCE* hDependsOn);
uint RemoveClusterResourceDependency([In] _HRESOURCE* hResource, [In] _HRESOURCE* hDependsOn);
uint SetClusterResourceDependencyExpression([In] _HRESOURCE* hResource, [Const] [In] PWSTR lpszDependencyExpression);
uint GetClusterResourceDependencyExpression([In] _HRESOURCE* hResource, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpszDependencyExpression, [In] [Out] uint* lpcchDependencyExpression);
uint AddResourceToClusterSharedVolumes([In] _HRESOURCE* hResource);
uint RemoveResourceFromClusterSharedVolumes([In] _HRESOURCE* hResource);
uint IsFileOnClusterSharedVolume([Const] [In] PWSTR lpszPathName, [Out] BOOL* pbFileIsOnSharedVolume);
uint ClusterSharedVolumeSetSnapshotState([In] Guid guidSnapshotSet, [Const] [In] PWSTR lpszVolumeName, [In] CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE state);
BOOL CanResourceBeDependent([In] _HRESOURCE* hResource, [In] _HRESOURCE* hResourceDependent);
uint ClusterResourceControl([In] _HRESOURCE* hResource, [In] [Optional] _HNODE* hHostNode, [In] uint dwControlCode, [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* lpInBuffer, [In] uint cbInBufferSize, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* lpOutBuffer, [In] uint cbOutBufferSize, [Out] [Optional] uint* lpBytesReturned);
uint ClusterResourceControlAsUser([In] _HRESOURCE* hResource, [In] [Optional] _HNODE* hHostNode, [In] uint dwControlCode, [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* lpInBuffer, [In] uint cbInBufferSize, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* lpOutBuffer, [In] uint cbOutBufferSize, [Out] [Optional] uint* lpBytesReturned);
uint ClusterResourceTypeControl([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszResourceTypeName, [In] [Optional] _HNODE* hHostNode, [In] uint dwControlCode, [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* lpInBuffer, [In] uint nInBufferSize, [MemorySize(BytesParamIndex = 7)] [Out] [Optional] void* lpOutBuffer, [In] uint nOutBufferSize, [Out] [Optional] uint* lpBytesReturned);
uint ClusterResourceTypeControlAsUser([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszResourceTypeName, [In] [Optional] _HNODE* hHostNode, [In] uint dwControlCode, [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* lpInBuffer, [In] uint nInBufferSize, [MemorySize(BytesParamIndex = 7)] [Out] [Optional] void* lpOutBuffer, [In] uint nOutBufferSize, [Out] [Optional] uint* lpBytesReturned);
uint ClusterGroupControl([In] _HGROUP* hGroup, [In] [Optional] _HNODE* hHostNode, [In] uint dwControlCode, [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* lpInBuffer, [In] uint nInBufferSize, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* lpOutBuffer, [In] uint nOutBufferSize, [Out] [Optional] uint* lpBytesReturned);
uint ClusterNodeControl([In] _HNODE* hNode, [In] [Optional] _HNODE* hHostNode, [In] uint dwControlCode, [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* lpInBuffer, [In] uint nInBufferSize, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* lpOutBuffer, [In] uint nOutBufferSize, [Out] [Optional] uint* lpBytesReturned);
BOOL GetClusterResourceNetworkName([In] _HRESOURCE* hResource, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpBuffer, [In] [Out] uint* nSize);
_HRESENUM* ClusterResourceOpenEnum([In] _HRESOURCE* hResource, [In] uint dwType);
uint ClusterResourceGetEnumCount([In] _HRESENUM* hResEnum);
uint ClusterResourceEnum([In] _HRESENUM* hResEnum, [In] uint dwIndex, [Out] uint* lpdwType, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR lpszName, [In] [Out] uint* lpcchName);
uint ClusterResourceCloseEnum([In] _HRESENUM* hResEnum);
uint CreateClusterResourceType([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszResourceTypeName, [Const] [In] PWSTR lpszDisplayName, [Const] [In] PWSTR lpszResourceTypeDll, [In] uint dwLooksAlivePollInterval, [In] uint dwIsAlivePollInterval);
uint DeleteClusterResourceType([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszResourceTypeName);
_HRESTYPEENUM* ClusterResourceTypeOpenEnum([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszResourceTypeName, [In] uint dwType);
uint ClusterResourceTypeGetEnumCount([In] _HRESTYPEENUM* hResTypeEnum);
uint ClusterResourceTypeEnum([In] _HRESTYPEENUM* hResTypeEnum, [In] uint dwIndex, [Out] uint* lpdwType, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR lpszName, [In] [Out] uint* lpcchName);
uint ClusterResourceTypeCloseEnum([In] _HRESTYPEENUM* hResTypeEnum);
_HNETWORK* OpenClusterNetwork([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszNetworkName);
_HNETWORK* OpenClusterNetworkEx([In] _HCLUSTER* hCluster, [Const] [In] [Optional] PWSTR lpszNetworkName, [In] uint dwDesiredAccess, [Out] [Optional] uint* lpdwGrantedAccess);
BOOL CloseClusterNetwork([In] _HNETWORK* hNetwork);
_HCLUSTER* GetClusterFromNetwork([In] _HNETWORK* hNetwork);
_HNETWORKENUM* ClusterNetworkOpenEnum([In] _HNETWORK* hNetwork, [In] uint dwType);
uint ClusterNetworkGetEnumCount([In] _HNETWORKENUM* hNetworkEnum);
uint ClusterNetworkEnum([In] _HNETWORKENUM* hNetworkEnum, [In] uint dwIndex, [Out] uint* lpdwType, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR lpszName, [In] [Out] uint* lpcchName);
uint ClusterNetworkCloseEnum([In] _HNETWORKENUM* hNetworkEnum);
CLUSTER_NETWORK_STATE GetClusterNetworkState([In] _HNETWORK* hNetwork);
uint SetClusterNetworkName([In] _HNETWORK* hNetwork, [Const] [In] PWSTR lpszName);
uint GetClusterNetworkId([In] _HNETWORK* hNetwork, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpszNetworkId, [In] [Out] uint* lpcchName);
uint ClusterNetworkControl([In] _HNETWORK* hNetwork, [In] [Optional] _HNODE* hHostNode, [In] uint dwControlCode, [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* lpInBuffer, [In] uint nInBufferSize, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* lpOutBuffer, [In] uint nOutBufferSize, [Out] [Optional] uint* lpBytesReturned);
_HNETINTERFACE* OpenClusterNetInterface([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszInterfaceName);
_HNETINTERFACE* OpenClusterNetInterfaceEx([In] _HCLUSTER* hCluster, [Const] [In] [Optional] PWSTR lpszInterfaceName, [In] uint dwDesiredAccess, [Out] [Optional] uint* lpdwGrantedAccess);
uint GetClusterNetInterface([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszNodeName, [Const] [In] PWSTR lpszNetworkName, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR lpszInterfaceName, [In] [Out] uint* lpcchInterfaceName);
BOOL CloseClusterNetInterface([In] _HNETINTERFACE* hNetInterface);
_HCLUSTER* GetClusterFromNetInterface([In] _HNETINTERFACE* hNetInterface);
CLUSTER_NETINTERFACE_STATE GetClusterNetInterfaceState([In] _HNETINTERFACE* hNetInterface);
uint ClusterNetInterfaceControl([In] _HNETINTERFACE* hNetInterface, [In] [Optional] _HNODE* hHostNode, [In] uint dwControlCode, [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* lpInBuffer, [In] uint nInBufferSize, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* lpOutBuffer, [In] uint nOutBufferSize, [Out] [Optional] uint* lpBytesReturned);
HKEY GetClusterKey([In] _HCLUSTER* hCluster, [In] uint samDesired);
HKEY GetClusterGroupKey([In] _HGROUP* hGroup, [In] uint samDesired);
HKEY GetClusterResourceKey([In] _HRESOURCE* hResource, [In] uint samDesired);
HKEY GetClusterNodeKey([In] _HNODE* hNode, [In] uint samDesired);
HKEY GetClusterNetworkKey([In] _HNETWORK* hNetwork, [In] uint samDesired);
HKEY GetClusterNetInterfaceKey([In] _HNETINTERFACE* hNetInterface, [In] uint samDesired);
int ClusterRegCreateKey([In] HKEY hKey, [Const] [In] PWSTR lpszSubKey, [In] uint dwOptions, [In] uint samDesired, [In] [Optional] SECURITY_ATTRIBUTES* lpSecurityAttributes, [Out] HKEY* phkResult, [Out] [Optional] uint* lpdwDisposition);
int ClusterRegOpenKey([In] HKEY hKey, [Const] [In] PWSTR lpszSubKey, [In] uint samDesired, [Out] HKEY* phkResult);
int ClusterRegDeleteKey([In] HKEY hKey, [Const] [In] PWSTR lpszSubKey);
int ClusterRegCloseKey([In] HKEY hKey);
int ClusterRegEnumKey([In] HKEY hKey, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR lpszName, [In] [Out] uint* lpcchName, [Out] [Optional] FILETIME* lpftLastWriteTime);
uint ClusterRegSetValue([In] HKEY hKey, [Const] [In] PWSTR lpszValueName, [In] uint dwType, [Const] [In] byte* lpData, [In] uint cbData);
uint ClusterRegDeleteValue([In] HKEY hKey, [Const] [In] PWSTR lpszValueName);
int ClusterRegQueryValue([In] HKEY hKey, [Const] [In] PWSTR lpszValueName, [Out] [Optional] uint* lpdwValueType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* lpData, [In] [Out] [Optional] uint* lpcbData);
uint ClusterRegEnumValue([In] HKEY hKey, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR lpszValueName, [In] [Out] uint* lpcchValueName, [Out] [Optional] uint* lpdwType, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* lpData, [In] [Out] [Optional] uint* lpcbData);
int ClusterRegQueryInfoKey([In] HKEY hKey, [In] uint* lpcSubKeys, [In] uint* lpcchMaxSubKeyLen, [In] uint* lpcValues, [In] uint* lpcchMaxValueNameLen, [In] uint* lpcbMaxValueLen, [In] uint* lpcbSecurityDescriptor, [In] FILETIME* lpftLastWriteTime);
int ClusterRegGetKeySecurity([In] HKEY hKey, [In] uint RequestedInformation, [MemorySize(BytesParamIndex = 3)] [Out] PSECURITY_DESCRIPTOR pSecurityDescriptor, [In] [Out] uint* lpcbSecurityDescriptor);
int ClusterRegSetKeySecurity([In] HKEY hKey, [In] uint SecurityInformation, [In] PSECURITY_DESCRIPTOR pSecurityDescriptor);
int ClusterRegSyncDatabase([In] _HCLUSTER* hCluster, [In] uint flags);
int ClusterRegCreateBatch([In] [Optional] HKEY hKey, [Out] _HREGBATCH** pHREGBATCH);
int ClusterRegBatchAddCommand([In] _HREGBATCH* hRegBatch, [In] CLUSTER_REG_COMMAND dwCommand, [Const] [In] [Optional] PWSTR wzName, [In] uint dwOptions, [Const] [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* lpData, [In] uint cbData);
int ClusterRegCloseBatch([In] _HREGBATCH* hRegBatch, [In] BOOL bCommit, [Out] [Optional] int* failedCommandNumber);
int ClusterRegCloseBatchEx([In] _HREGBATCH* hRegBatch, [In] uint flags, [Out] [Optional] int* failedCommandNumber);
int ClusterRegBatchReadCommand([In] _HREGBATCHNOTIFICATION* hBatchNotification, [Out] CLUSTER_BATCH_COMMAND* pBatchCommand);
int ClusterRegBatchCloseNotification([In] _HREGBATCHNOTIFICATION* hBatchNotification);
int ClusterRegCreateBatchNotifyPort([In] HKEY hKey, [Out] _HREGBATCHPORT** phBatchNotifyPort);
int ClusterRegCloseBatchNotifyPort([In] _HREGBATCHPORT* hBatchNotifyPort);
int ClusterRegGetBatchNotification([In] _HREGBATCHPORT* hBatchNotify, [Out] _HREGBATCHNOTIFICATION** phBatchNotification);
int ClusterRegCreateReadBatch([In] HKEY hKey, [Out] _HREGREADBATCH** phRegReadBatch);
int ClusterRegReadBatchAddCommand([In] _HREGREADBATCH* hRegReadBatch, [Const] [In] PWSTR wzSubkeyName, [Const] [In] PWSTR wzValueName);
int ClusterRegCloseReadBatch([In] _HREGREADBATCH* hRegReadBatch, [Out] _HREGREADBATCHREPLY** phRegReadBatchReply);
int ClusterRegCloseReadBatchEx([In] _HREGREADBATCH* hRegReadBatch, [In] uint flags, [Out] _HREGREADBATCHREPLY** phRegReadBatchReply);
int ClusterRegReadBatchReplyNextCommand([In] _HREGREADBATCHREPLY* hRegReadBatchReply, [Out] CLUSTER_READ_BATCH_COMMAND* pBatchCommand);
int ClusterRegCloseReadBatchReply([In] _HREGREADBATCHREPLY* hRegReadBatchReply);
uint ClusterSetAccountAccess([In] _HCLUSTER* hCluster, [Const] [In] PWSTR szAccountSID, [In] uint dwAccess, [In] uint dwControlType);
_HCLUSTER* CreateCluster([In] CREATE_CLUSTER_CONFIG* pConfig, [In] [Optional] PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback, [In] [Optional] void* pvCallbackArg);
uint CreateClusterNameAccount([In] _HCLUSTER* hCluster, [In] CREATE_CLUSTER_NAME_ACCOUNT* pConfig, [In] [Optional] PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback, [In] [Optional] void* pvCallbackArg);
uint RemoveClusterNameAccount([In] _HCLUSTER* hCluster, [In] BOOL bDeleteComputerObjects);
uint DetermineCNOResTypeFromNodelist([In] uint cNodes, [In] PWSTR* ppszNodeNames, [Out] CLUSTER_MGMT_POINT_RESTYPE* pCNOResType);
uint DetermineCNOResTypeFromCluster([In] _HCLUSTER* hCluster, [Out] CLUSTER_MGMT_POINT_RESTYPE* pCNOResType);
uint DetermineClusterCloudTypeFromNodelist([In] uint cNodes, [In] PWSTR* ppszNodeNames, [Out] CLUSTER_CLOUD_TYPE* pCloudType);
uint DetermineClusterCloudTypeFromCluster([In] _HCLUSTER* hCluster, [Out] CLUSTER_CLOUD_TYPE* pCloudType);
uint GetNodeCloudTypeDW([Const] [In] PWSTR ppszNodeName, [Out] uint* NodeCloudType);
uint RegisterClusterResourceTypeNotifyV2([In] _HCHANGE* hChange, [In] _HCLUSTER* hCluster, [In] long Flags, [Const] [In] PWSTR resTypeName, [In] nuint dwNotifyKey);
_HNODE* AddClusterNode([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszNodeName, [In] [Optional] PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback, [In] [Optional] void* pvCallbackArg);
uint AddClusterStorageNode([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszNodeName, [In] [Optional] PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback, [In] [Optional] void* pvCallbackArg, [Const] [In] [Optional] PWSTR lpszClusterStorageNodeDescription, [Const] [In] [Optional] PWSTR lpszClusterStorageNodeLocation);
_HNODE* AddClusterNodeEx([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszNodeName, [In] uint dwFlags, [In] [Optional] PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback, [In] [Optional] void* pvCallbackArg);
uint RemoveClusterStorageNode([In] _HCLUSTER* hCluster, [Const] [In] PWSTR lpszClusterStorageEnclosureName, [In] uint dwTimeout, [In] uint dwFlags);
uint DestroyCluster([In] _HCLUSTER* hCluster, [In] [Optional] PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback, [In] [Optional] void* pvCallbackArg, [In] BOOL fdeleteVirtualComputerObjects);
