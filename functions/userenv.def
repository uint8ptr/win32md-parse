HRESULT CreateAppContainerProfile([Const] [In] PWSTR pszAppContainerName, [Const] [In] PWSTR pszDisplayName, [Const] [In] PWSTR pszDescription, [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] SID_AND_ATTRIBUTES* pCapabilities, [In] uint dwCapabilityCount, [Out] PSID* ppSidAppContainerSid);
HRESULT DeleteAppContainerProfile([Const] [In] PWSTR pszAppContainerName);
HRESULT GetAppContainerRegistryLocation([In] uint desiredAccess, [Out] HKEY* phAppContainerKey);
HRESULT GetAppContainerFolderPath([Const] [In] PWSTR pszAppContainerSid, [Out] PWSTR* ppszPath);
HRESULT DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName([In] PSID psidAppContainerSid, [Const] [In] PWSTR pszRestrictedAppContainerName, [Out] PSID* ppsidRestrictedAppContainerSid);
HRESULT DeriveAppContainerSidFromAppContainerName([Const] [In] PWSTR pszAppContainerName, [Out] PSID* ppsidAppContainerSid);
BOOL CreateEnvironmentBlock([Out] void** lpEnvironment, [In] [Optional] HANDLE hToken, [In] BOOL bInherit);
BOOL DestroyEnvironmentBlock([In] void* lpEnvironment);
BOOL ExpandEnvironmentStringsForUserA([In] [Optional] HANDLE hToken, [Const] [In] PSTR lpSrc, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR lpDest, [In] uint dwSize);
BOOL ExpandEnvironmentStringsForUserW([In] [Optional] HANDLE hToken, [Const] [In] PWSTR lpSrc, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR lpDest, [In] uint dwSize);
BOOL RefreshPolicy([In] BOOL bMachine);
BOOL RefreshPolicyEx([In] BOOL bMachine, [In] uint dwOptions);
HANDLE EnterCriticalPolicySection([In] BOOL bMachine);
BOOL LeaveCriticalPolicySection([In] HANDLE hSection);
BOOL RegisterGPNotification([In] HANDLE hEvent, [In] BOOL bMachine);
BOOL UnregisterGPNotification([In] HANDLE hEvent);
BOOL GetGPOListA([In] [Optional] HANDLE hToken, [Const] [In] [Optional] PSTR lpName, [Const] [In] [Optional] PSTR lpHostName, [Const] [In] [Optional] PSTR lpComputerName, [In] uint dwFlags, [Out] GROUP_POLICY_OBJECTA** pGPOList);
BOOL GetGPOListW([In] [Optional] HANDLE hToken, [Const] [In] [Optional] PWSTR lpName, [Const] [In] [Optional] PWSTR lpHostName, [Const] [In] [Optional] PWSTR lpComputerName, [In] uint dwFlags, [Out] GROUP_POLICY_OBJECTW** pGPOList);
BOOL FreeGPOListA([In] GROUP_POLICY_OBJECTA* pGPOList);
BOOL FreeGPOListW([In] GROUP_POLICY_OBJECTW* pGPOList);
uint GetAppliedGPOListA([In] uint dwFlags, [Const] [In] [Optional] PSTR pMachineName, [In] [Optional] PSID pSidUser, [In] Guid* pGuidExtension, [Out] GROUP_POLICY_OBJECTA** ppGPOList);
uint GetAppliedGPOListW([In] uint dwFlags, [Const] [In] [Optional] PWSTR pMachineName, [In] [Optional] PSID pSidUser, [In] Guid* pGuidExtension, [Out] GROUP_POLICY_OBJECTW** ppGPOList);
uint ProcessGroupPolicyCompleted([In] Guid* extensionId, [In] nuint pAsyncHandle, [In] uint dwStatus);
uint ProcessGroupPolicyCompletedEx([In] Guid* extensionId, [In] nuint pAsyncHandle, [In] uint dwStatus, [In] HRESULT RsopStatus);
HRESULT RsopAccessCheckByType([In] PSECURITY_DESCRIPTOR pSecurityDescriptor, [In] [Optional] PSID pPrincipalSelfSid, [In] void* pRsopToken, [In] uint dwDesiredAccessMask, [NativeArrayInfo(CountParamIndex = 5)] [In] [Optional] OBJECT_TYPE_LIST* pObjectTypeList, [In] uint ObjectTypeListLength, [In] GENERIC_MAPPING* pGenericMapping, [MemorySize(BytesParamIndex = 8)] [In] [Optional] PRIVILEGE_SET* pPrivilegeSet, [In] [Optional] uint* pdwPrivilegeSetLength, [Out] uint* pdwGrantedAccessMask, [Out] int* pbAccessStatus);
HRESULT RsopFileAccessCheck([In] PWSTR pszFileName, [In] void* pRsopToken, [In] uint dwDesiredAccessMask, [Out] uint* pdwGrantedAccessMask, [Out] int* pbAccessStatus);
HRESULT RsopSetPolicySettingStatus([In] uint dwFlags, [In] IWbemServices pServices, [In] IWbemClassObject pSettingInstance, [In] uint nInfo, [NativeArrayInfo(CountParamIndex = 3)] [In] POLICYSETTINGSTATUSINFO* pStatus);
HRESULT RsopResetPolicySettingStatus([In] uint dwFlags, [In] IWbemServices pServices, [In] IWbemClassObject pSettingInstance);
uint GenerateGPNotification([In] BOOL bMachine, [Const] [In] PWSTR lpwszMgmtProduct, [In] uint dwMgmtProductOptions);
BOOL LoadUserProfileA([In] HANDLE hToken, [In] [Out] PROFILEINFOA* lpProfileInfo);
BOOL LoadUserProfileW([In] HANDLE hToken, [In] [Out] PROFILEINFOW* lpProfileInfo);
BOOL UnloadUserProfile([In] HANDLE hToken, [In] HANDLE hProfile);
BOOL GetProfilesDirectoryA([NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PSTR lpProfileDir, [In] [Out] uint* lpcchSize);
BOOL GetProfilesDirectoryW([NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR lpProfileDir, [In] [Out] uint* lpcchSize);
BOOL GetProfileType([Out] uint* dwFlags);
BOOL DeleteProfileA([Const] [In] PSTR lpSidString, [Const] [In] [Optional] PSTR lpProfilePath, [Const] [In] [Optional] PSTR lpComputerName);
BOOL DeleteProfileW([Const] [In] PWSTR lpSidString, [Const] [In] [Optional] PWSTR lpProfilePath, [Const] [In] [Optional] PWSTR lpComputerName);
HRESULT CreateProfile([Const] [In] PWSTR pszUserSid, [Const] [In] PWSTR pszUserName, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pszProfilePath, [In] uint cchProfilePath);
BOOL GetDefaultUserProfileDirectoryA([NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PSTR lpProfileDir, [In] [Out] uint* lpcchSize);
BOOL GetDefaultUserProfileDirectoryW([NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR lpProfileDir, [In] [Out] uint* lpcchSize);
BOOL GetAllUsersProfileDirectoryA([NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PSTR lpProfileDir, [In] [Out] uint* lpcchSize);
BOOL GetAllUsersProfileDirectoryW([NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR lpProfileDir, [In] [Out] uint* lpcchSize);
BOOL GetUserProfileDirectoryA([In] HANDLE hToken, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpProfileDir, [In] [Out] uint* lpcchSize);
BOOL GetUserProfileDirectoryW([In] HANDLE hToken, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpProfileDir, [In] [Out] uint* lpcchSize);
