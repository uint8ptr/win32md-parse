uint RtlNtStatusToDosError([In] NTSTATUS Status);
PSTR RtlIpv4AddressToStringA([Const] [In] IN_ADDR* Addr, [NativeArrayInfo(CountConst = 16)] [Out] PSTR S);
int RtlIpv4AddressToStringExA([Const] [In] IN_ADDR* Address, [In] ushort Port, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR AddressString, [In] [Out] uint* AddressStringLength);
PWSTR RtlIpv4AddressToStringW([Const] [In] IN_ADDR* Addr, [NativeArrayInfo(CountConst = 16)] [Out] PWSTR S);
int RtlIpv4AddressToStringExW([Const] [In] IN_ADDR* Address, [In] ushort Port, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR AddressString, [In] [Out] uint* AddressStringLength);
int RtlIpv4StringToAddressA([Const] [In] PSTR S, [In] BOOLEAN Strict, [Out] PSTR* Terminator, [Out] IN_ADDR* Addr);
int RtlIpv4StringToAddressExA([Const] [In] PSTR AddressString, [In] BOOLEAN Strict, [Out] IN_ADDR* Address, [Out] ushort* Port);
int RtlIpv4StringToAddressW([Const] [In] PWSTR S, [In] BOOLEAN Strict, [Out] PWSTR* Terminator, [Out] IN_ADDR* Addr);
int RtlIpv4StringToAddressExW([Const] [In] PWSTR AddressString, [In] BOOLEAN Strict, [Out] IN_ADDR* Address, [Out] ushort* Port);
PSTR RtlIpv6AddressToStringA([Const] [In] IN6_ADDR* Addr, [NativeArrayInfo(CountConst = 46)] [Out] PSTR S);
int RtlIpv6AddressToStringExA([Const] [In] IN6_ADDR* Address, [In] uint ScopeId, [In] ushort Port, [NativeArrayInfo(CountParamIndex = 4)] [Out] PSTR AddressString, [In] [Out] uint* AddressStringLength);
PWSTR RtlIpv6AddressToStringW([Const] [In] IN6_ADDR* Addr, [NativeArrayInfo(CountConst = 46)] [Out] PWSTR S);
int RtlIpv6AddressToStringExW([Const] [In] IN6_ADDR* Address, [In] uint ScopeId, [In] ushort Port, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR AddressString, [In] [Out] uint* AddressStringLength);
int RtlIpv6StringToAddressA([Const] [In] PSTR S, [Out] PSTR* Terminator, [Out] IN6_ADDR* Addr);
int RtlIpv6StringToAddressExA([Const] [In] PSTR AddressString, [Out] IN6_ADDR* Address, [Out] uint* ScopeId, [Out] ushort* Port);
int RtlIpv6StringToAddressW([Const] [In] PWSTR S, [Out] PWSTR* Terminator, [Out] IN6_ADDR* Addr);
int RtlIpv6StringToAddressExW([Const] [In] PWSTR AddressString, [Out] IN6_ADDR* Address, [Out] uint* ScopeId, [Out] ushort* Port);
PSTR RtlEthernetAddressToStringA([Const] [In] DL_EUI48* Addr, [NativeArrayInfo(CountConst = 18)] [Out] PSTR S);
PWSTR RtlEthernetAddressToStringW([Const] [In] DL_EUI48* Addr, [NativeArrayInfo(CountConst = 18)] [Out] PWSTR S);
int RtlEthernetStringToAddressA([Const] [In] PSTR S, [Out] PSTR* Terminator, [Out] DL_EUI48* Addr);
int RtlEthernetStringToAddressW([Const] [In] PWSTR S, [Out] PWSTR* Terminator, [Out] DL_EUI48* Addr);
BOOLEAN RtlNormalizeSecurityDescriptor([In] [Out] PSECURITY_DESCRIPTOR* SecurityDescriptor, [In] uint SecurityDescriptorLength, [Out] [Optional] PSECURITY_DESCRIPTOR* NewSecurityDescriptor, [Out] [Optional] uint* NewSecurityDescriptorLength, [In] BOOLEAN CheckOnly);
NTSTATUS RtlConvertSidToUnicodeString([In] [Out] UNICODE_STRING* UnicodeString, [In] PSID Sid, [In] BOOLEAN AllocateDestinationString);
NTSTATUS NtCreateFile([In] [Out] HANDLE* FileHandle, [In] uint DesiredAccess, [In] [Out] OBJECT_ATTRIBUTES* ObjectAttributes, [In] [Out] IO_STATUS_BLOCK* IoStatusBlock, [In] [Out] LARGE_INTEGER* AllocationSize, [In] uint FileAttributes, [In] FILE_SHARE_MODE ShareAccess, [In] NT_CREATE_FILE_DISPOSITION CreateDisposition, [In] uint CreateOptions, [In] [Out] void* EaBuffer, [In] uint EaLength);
uint RtlInitializeCorrelationVector([Out] CORRELATION_VECTOR* CorrelationVector, [In] int Version, [Const] [In] [Optional] Guid* Guid);
uint RtlIncrementCorrelationVector([In] [Out] CORRELATION_VECTOR* CorrelationVector);
uint RtlExtendCorrelationVector([In] [Out] CORRELATION_VECTOR* CorrelationVector);
uint RtlValidateCorrelationVector([In] CORRELATION_VECTOR* Vector);
uint RtlAddGrowableFunctionTable([Out] void** DynamicTable, [NativeArrayInfo(CountParamIndex = 3)] [In] IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY* FunctionTable, [In] uint EntryCount, [In] uint MaximumEntryCount, [In] nuint RangeBase, [In] nuint RangeEnd);
uint RtlAddGrowableFunctionTable([Out] void** DynamicTable, [NativeArrayInfo(CountParamIndex = 3)] [In] IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionTable, [In] uint EntryCount, [In] uint MaximumEntryCount, [In] nuint RangeBase, [In] nuint RangeEnd);
void RtlGrowFunctionTable([In] [Out] void* DynamicTable, [In] uint NewEntryCount);
void RtlDeleteGrowableFunctionTable([In] void* DynamicTable);
void RtlInitializeSListHead([Out] SLIST_HEADER* ListHead);
SLIST_ENTRY* RtlFirstEntrySList([Const] [In] SLIST_HEADER* ListHead);
SLIST_ENTRY* RtlInterlockedPopEntrySList([In] [Out] SLIST_HEADER* ListHead);
SLIST_ENTRY* RtlInterlockedPushEntrySList([In] [Out] SLIST_HEADER* ListHead, [In] [Out] SLIST_ENTRY* ListEntry);
SLIST_ENTRY* RtlInterlockedPushListSListEx([In] [Out] SLIST_HEADER* ListHead, [In] [Out] SLIST_ENTRY* List, [In] [Out] SLIST_ENTRY* ListEnd, [In] uint Count);
SLIST_ENTRY* RtlInterlockedFlushSList([In] [Out] SLIST_HEADER* ListHead);
ushort RtlQueryDepthSList([In] SLIST_HEADER* ListHead);
uint RtlCrc32([Const] [MemorySize(BytesParamIndex = 1)] [In] void* Buffer, [In] nuint Size, [In] uint InitialCrc);
ulong RtlCrc64([Const] [MemorySize(BytesParamIndex = 1)] [In] void* Buffer, [In] nuint Size, [In] ulong InitialCrc);
BOOLEAN RtlIsZeroMemory([In] void* Buffer, [In] nuint Length);
uint RtlGetNonVolatileToken([MemorySize(BytesParamIndex = 1)] [In] void* NvBuffer, [In] nuint Size, [Out] void** NvToken);
uint RtlFreeNonVolatileToken([In] void* NvToken);
uint RtlFlushNonVolatileMemory([In] void* NvToken, [MemorySize(BytesParamIndex = 2)] [In] void* NvBuffer, [In] nuint Size, [In] uint Flags);
uint RtlDrainNonVolatileFlush([In] void* NvToken);
uint RtlWriteNonVolatileMemory([In] void* NvToken, [MemorySize(BytesParamIndex = 3)] [Out] void* NvDestination, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* Source, [In] nuint Size, [In] uint Flags);
uint RtlFillNonVolatileMemory([In] void* NvToken, [MemorySize(BytesParamIndex = 2)] [Out] void* NvDestination, [In] nuint Size, [Const] [In] byte Value, [In] uint Flags);
uint RtlFlushNonVolatileMemoryRanges([In] void* NvToken, [NativeArrayInfo(CountParamIndex = 2)] [In] NV_MEMORY_RANGE* NvRanges, [In] nuint NumRanges, [In] uint Flags);
BOOLEAN RtlGetProductInfo([In] uint OSMajorVersion, [In] uint OSMinorVersion, [In] uint SpMajorVersion, [In] uint SpMinorVersion, [Out] uint* ReturnedProductType);
OS_DEPLOYEMENT_STATE_VALUES RtlOsDeploymentState([In] uint Flags);
void RtlGetDeviceFamilyInfoEnum([Out] [Optional] ulong* pullUAPInfo, [Out] [Optional] DEVICEFAMILYINFOENUM* pulDeviceFamily, [Out] [Optional] DEVICEFAMILYDEVICEFORM* pulDeviceForm);
uint RtlConvertDeviceFamilyInfoToString([In] [Out] uint* pulDeviceFamilyBufferSize, [In] [Out] uint* pulDeviceFormBufferSize, [MemorySize(BytesParamIndex = 0)] [Out] PWSTR DeviceFamily, [MemorySize(BytesParamIndex = 1)] [Out] PWSTR DeviceForm);
uint RtlSwitchedVVI([In] OSVERSIONINFOEXW* VersionInfo, [In] uint TypeMask, [In] ulong ConditionMask);
NTSTATUS NtQueryInformationProcess([In] HANDLE ProcessHandle, [In] PROCESSINFOCLASS ProcessInformationClass, [In] [Out] void* ProcessInformation, [In] uint ProcessInformationLength, [In] [Out] uint* ReturnLength);
NTSTATUS NtQueryInformationThread([In] HANDLE ThreadHandle, [In] THREADINFOCLASS ThreadInformationClass, [In] [Out] void* ThreadInformation, [In] uint ThreadInformationLength, [In] [Out] uint* ReturnLength);
NTSTATUS NtSetInformationThread([In] HANDLE ThreadHandle, [In] THREADINFOCLASS ThreadInformationClass, [MemorySize(BytesParamIndex = 3)] [In] void* ThreadInformation, [In] uint ThreadInformationLength);
nuint RtlGetReturnAddressHijackTarget();
uint RtlRaiseCustomSystemEventTrigger([In] CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG* TriggerConfig);
NTSTATUS NtClose([In] HANDLE Handle);
NTSTATUS NtOpenFile([In] [Out] HANDLE* FileHandle, [In] uint DesiredAccess, [In] [Out] OBJECT_ATTRIBUTES* ObjectAttributes, [In] [Out] IO_STATUS_BLOCK* IoStatusBlock, [In] uint ShareAccess, [In] uint OpenOptions);
NTSTATUS NtRenameKey([In] HANDLE KeyHandle, [In] UNICODE_STRING* NewName);
NTSTATUS NtNotifyChangeMultipleKeys([In] HANDLE MasterKeyHandle, [In] [Optional] uint Count, [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] OBJECT_ATTRIBUTES* SubordinateObjects, [In] [Optional] HANDLE Event, [In] [Optional] PIO_APC_ROUTINE ApcRoutine, [In] [Optional] void* ApcContext, [Out] IO_STATUS_BLOCK* IoStatusBlock, [In] uint CompletionFilter, [In] BOOLEAN WatchTree, [MemorySize(BytesParamIndex = 10)] [Out] [Optional] void* Buffer, [In] uint BufferSize, [In] BOOLEAN Asynchronous);
NTSTATUS NtQueryMultipleValueKey([In] HANDLE KeyHandle, [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] KEY_VALUE_ENTRY* ValueEntries, [In] uint EntryCount, [MemorySize(BytesParamIndex = 4)] [Out] void* ValueBuffer, [In] [Out] uint* BufferLength, [Out] [Optional] uint* RequiredBufferLength);
NTSTATUS NtSetInformationKey([In] HANDLE KeyHandle, [In] KEY_SET_INFORMATION_CLASS KeySetInformationClass, [MemorySize(BytesParamIndex = 3)] [In] void* KeySetInformation, [In] uint KeySetInformationLength);
NTSTATUS NtDeviceIoControlFile([In] HANDLE FileHandle, [In] HANDLE Event, [In] PIO_APC_ROUTINE ApcRoutine, [In] [Out] void* ApcContext, [In] [Out] IO_STATUS_BLOCK* IoStatusBlock, [In] uint IoControlCode, [In] [Out] void* InputBuffer, [In] uint InputBufferLength, [In] [Out] void* OutputBuffer, [In] uint OutputBufferLength);
NTSTATUS NtWaitForSingleObject([In] HANDLE Handle, [In] BOOLEAN Alertable, [In] [Out] LARGE_INTEGER* Timeout);
BOOLEAN RtlIsNameLegalDOS8Dot3([In] [Out] UNICODE_STRING* Name, [In] [Out] STRING* OemName, [In] [Out] BOOLEAN* NameContainsSpaces);
NTSTATUS NtQueryObject([In] [Optional] HANDLE Handle, [In] OBJECT_INFORMATION_CLASS ObjectInformationClass, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] void* ObjectInformation, [In] uint ObjectInformationLength, [Out] [Optional] uint* ReturnLength);
NTSTATUS NtQuerySystemInformation([In] SYSTEM_INFORMATION_CLASS SystemInformationClass, [In] [Out] void* SystemInformation, [In] uint SystemInformationLength, [In] [Out] uint* ReturnLength);
NTSTATUS NtQuerySystemTime([In] [Out] LARGE_INTEGER* SystemTime);
NTSTATUS NtQueryTimerResolution([Out] uint* MaximumTime, [Out] uint* MinimumTime, [Out] uint* CurrentTime);
NTSTATUS RtlLocalTimeToSystemTime([In] [Out] LARGE_INTEGER* LocalTime, [In] [Out] LARGE_INTEGER* SystemTime);
BOOLEAN RtlTimeToSecondsSince1970([In] [Out] LARGE_INTEGER* Time, [In] [Out] uint* ElapsedSeconds);
void RtlFreeAnsiString([In] [Out] STRING* AnsiString);
void RtlFreeUnicodeString([In] [Out] UNICODE_STRING* UnicodeString);
void RtlFreeOemString([In] [Out] STRING* OemString);
void RtlInitString([In] [Out] STRING* DestinationString, [In] [Out] sbyte* SourceString);
NTSTATUS RtlInitStringEx([In] [Out] STRING* DestinationString, [In] [Out] sbyte* SourceString);
void RtlInitAnsiString([In] [Out] STRING* DestinationString, [In] [Out] sbyte* SourceString);
NTSTATUS RtlInitAnsiStringEx([In] [Out] STRING* DestinationString, [In] [Out] sbyte* SourceString);
void RtlInitUnicodeString([In] [Out] UNICODE_STRING* DestinationString, [Const] [In] PWSTR SourceString);
NTSTATUS RtlAnsiStringToUnicodeString([In] [Out] UNICODE_STRING* DestinationString, [In] [Out] STRING* SourceString, [In] BOOLEAN AllocateDestinationString);
NTSTATUS RtlUnicodeStringToAnsiString([In] [Out] STRING* DestinationString, [In] [Out] UNICODE_STRING* SourceString, [In] BOOLEAN AllocateDestinationString);
NTSTATUS RtlUnicodeStringToOemString([In] [Out] STRING* DestinationString, [In] [Out] UNICODE_STRING* SourceString, [In] BOOLEAN AllocateDestinationString);
NTSTATUS RtlUnicodeToMultiByteSize([Out] uint* BytesInMultiByteString, [NotNullTerminated] [MemorySize(BytesParamIndex = 2)] [In] PWSTR UnicodeString, [In] uint BytesInUnicodeString);
NTSTATUS RtlCharToInteger([In] [Out] sbyte* String, [In] uint Base, [In] [Out] uint* Value);
uint RtlUniform([In] [Out] uint* Seed);
