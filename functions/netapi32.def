uint DsRoleGetPrimaryDomainInformation([Const] [In] PWSTR lpServer, [In] DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel, [In] [Out] byte** Buffer);
void DsRoleFreeMemory([In] [Out] void* Buffer);
uint DsGetDcNameA([Const] [In] [Optional] PSTR ComputerName, [Const] [In] [Optional] PSTR DomainName, [In] [Optional] Guid* DomainGuid, [Const] [In] [Optional] PSTR SiteName, [In] uint Flags, [Out] DOMAIN_CONTROLLER_INFOA** DomainControllerInfo);
uint DsGetDcNameW([Const] [In] [Optional] PWSTR ComputerName, [Const] [In] [Optional] PWSTR DomainName, [In] [Optional] Guid* DomainGuid, [Const] [In] [Optional] PWSTR SiteName, [In] uint Flags, [Out] DOMAIN_CONTROLLER_INFOW** DomainControllerInfo);
uint DsGetSiteNameA([Const] [In] [Optional] PSTR ComputerName, [Out] PSTR* SiteName);
uint DsGetSiteNameW([Const] [In] [Optional] PWSTR ComputerName, [Out] PWSTR* SiteName);
uint DsValidateSubnetNameW([Const] [In] PWSTR SubnetName);
uint DsValidateSubnetNameA([Const] [In] PSTR SubnetName);
uint DsAddressToSiteNamesW([Const] [In] [Optional] PWSTR ComputerName, [In] uint EntryCount, [NativeArrayInfo(CountParamIndex = 1)] [In] SOCKET_ADDRESS* SocketAddresses, [Out] PWSTR** SiteNames);
uint DsAddressToSiteNamesA([Const] [In] [Optional] PSTR ComputerName, [In] uint EntryCount, [NativeArrayInfo(CountParamIndex = 1)] [In] SOCKET_ADDRESS* SocketAddresses, [Out] PSTR** SiteNames);
uint DsAddressToSiteNamesExW([Const] [In] [Optional] PWSTR ComputerName, [In] uint EntryCount, [NativeArrayInfo(CountParamIndex = 1)] [In] SOCKET_ADDRESS* SocketAddresses, [Out] PWSTR** SiteNames, [Out] PWSTR** SubnetNames);
uint DsAddressToSiteNamesExA([Const] [In] [Optional] PSTR ComputerName, [In] uint EntryCount, [NativeArrayInfo(CountParamIndex = 1)] [In] SOCKET_ADDRESS* SocketAddresses, [Out] PSTR** SiteNames, [Out] PSTR** SubnetNames);
uint DsEnumerateDomainTrustsW([In] [Optional] PWSTR ServerName, [In] uint Flags, [Out] DS_DOMAIN_TRUSTSW** Domains, [Out] uint* DomainCount);
uint DsEnumerateDomainTrustsA([In] [Optional] PSTR ServerName, [In] uint Flags, [Out] DS_DOMAIN_TRUSTSA** Domains, [Out] uint* DomainCount);
uint DsGetForestTrustInformationW([Const] [In] [Optional] PWSTR ServerName, [Const] [In] [Optional] PWSTR TrustedDomainName, [In] uint Flags, [Out] LSA_FOREST_TRUST_INFORMATION** ForestTrustInfo);
uint DsMergeForestTrustInformationW([Const] [In] PWSTR DomainName, [In] LSA_FOREST_TRUST_INFORMATION* NewForestTrustInfo, [In] [Optional] LSA_FOREST_TRUST_INFORMATION* OldForestTrustInfo, [Out] LSA_FOREST_TRUST_INFORMATION** MergedForestTrustInfo);
uint DsGetDcSiteCoverageW([Const] [In] [Optional] PWSTR ServerName, [Out] uint* EntryCount, [Out] PWSTR** SiteNames);
uint DsGetDcSiteCoverageA([Const] [In] [Optional] PSTR ServerName, [Out] uint* EntryCount, [Out] PSTR** SiteNames);
uint DsDeregisterDnsHostRecordsW([In] [Optional] PWSTR ServerName, [In] [Optional] PWSTR DnsDomainName, [In] [Optional] Guid* DomainGuid, [In] [Optional] Guid* DsaGuid, [In] PWSTR DnsHostName);
uint DsDeregisterDnsHostRecordsA([In] [Optional] PSTR ServerName, [In] [Optional] PSTR DnsDomainName, [In] [Optional] Guid* DomainGuid, [In] [Optional] Guid* DsaGuid, [In] PSTR DnsHostName);
uint DsGetDcOpenW([Const] [In] PWSTR DnsName, [In] uint OptionFlags, [Const] [In] [Optional] PWSTR SiteName, [In] [Optional] Guid* DomainGuid, [Const] [In] [Optional] PWSTR DnsForestName, [In] uint DcFlags, [Out] GetDcContextHandle* RetGetDcContext);
uint DsGetDcOpenA([Const] [In] PSTR DnsName, [In] uint OptionFlags, [Const] [In] [Optional] PSTR SiteName, [In] [Optional] Guid* DomainGuid, [Const] [In] [Optional] PSTR DnsForestName, [In] uint DcFlags, [Out] GetDcContextHandle* RetGetDcContext);
uint DsGetDcNextW([In] HANDLE GetDcContextHandle, [Out] [Optional] uint* SockAddressCount, [Out] [Optional] SOCKET_ADDRESS** SockAddresses, [Out] [Optional] PWSTR* DnsHostName);
uint DsGetDcNextA([In] HANDLE GetDcContextHandle, [Out] [Optional] uint* SockAddressCount, [Out] [Optional] SOCKET_ADDRESS** SockAddresses, [Out] [Optional] PSTR* DnsHostName);
void DsGetDcCloseW([In] GetDcContextHandle GetDcContextHandle);
byte Netbios([In] [Out] NCB* pncb);
uint NetUserAdd([Const] [In] [Optional] PWSTR servername, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetUserEnum([Const] [In] [Optional] PWSTR servername, [In] uint level, [In] NET_USER_ENUM_FILTER_FLAGS filter, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] uint* resume_handle);
uint NetUserGetInfo([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR username, [In] uint level, [Out] byte** bufptr);
uint NetUserSetInfo([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR username, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetUserDel([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR username);
uint NetUserGetGroups([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR username, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries);
uint NetUserSetGroups([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR username, [In] uint level, [In] byte* buf, [In] uint num_entries);
uint NetUserGetLocalGroups([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR username, [In] uint level, [In] uint flags, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries);
uint NetUserModalsGet([Const] [In] [Optional] PWSTR servername, [In] uint level, [Out] byte** bufptr);
uint NetUserModalsSet([Const] [In] [Optional] PWSTR servername, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetUserChangePassword([Const] [In] [Optional] PWSTR domainname, [Const] [In] [Optional] PWSTR username, [Const] [In] PWSTR oldpassword, [Const] [In] PWSTR newpassword);
uint NetGroupAdd([Const] [In] [Optional] PWSTR servername, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetGroupAddUser([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR GroupName, [Const] [In] PWSTR username);
uint NetGroupEnum([Const] [In] [Optional] PWSTR servername, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] nuint* resume_handle);
uint NetGroupGetInfo([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname, [In] uint level, [Out] byte** bufptr);
uint NetGroupSetInfo([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetGroupDel([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname);
uint NetGroupDelUser([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR GroupName, [Const] [In] PWSTR Username);
uint NetGroupGetUsers([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] nuint* ResumeHandle);
uint NetGroupSetUsers([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname, [In] uint level, [In] byte* buf, [In] uint totalentries);
uint NetLocalGroupAdd([Const] [In] [Optional] PWSTR servername, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetLocalGroupAddMember([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname, [In] PSID membersid);
uint NetLocalGroupEnum([Const] [In] [Optional] PWSTR servername, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] nuint* resumehandle);
uint NetLocalGroupGetInfo([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname, [In] uint level, [Out] byte** bufptr);
uint NetLocalGroupSetInfo([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetLocalGroupDel([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname);
uint NetLocalGroupDelMember([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname, [In] PSID membersid);
uint NetLocalGroupGetMembers([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR localgroupname, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] nuint* resumehandle);
uint NetLocalGroupSetMembers([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname, [In] uint level, [In] byte* buf, [In] uint totalentries);
uint NetLocalGroupAddMembers([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname, [In] uint level, [In] byte* buf, [In] uint totalentries);
uint NetLocalGroupDelMembers([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR groupname, [In] uint level, [In] byte* buf, [In] uint totalentries);
uint NetQueryDisplayInformation([Const] [In] PWSTR ServerName, [In] uint Level, [In] uint Index, [In] uint EntriesRequested, [In] uint PreferredMaximumLength, [In] [Out] uint* ReturnedEntryCount, [In] [Out] void** SortedBuffer);
uint NetGetDisplayInformationIndex([Const] [In] PWSTR ServerName, [In] uint Level, [Const] [In] PWSTR Prefix, [In] [Out] uint* Index);
uint NetAccessAdd([Const] [In] [Optional] PWSTR servername, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetAccessEnum([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR BasePath, [In] uint Recursive, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] uint* resume_handle);
uint NetAccessGetInfo([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR resource, [In] uint level, [Out] byte** bufptr);
uint NetAccessSetInfo([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR resource, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetAccessDel([Const] [In] PWSTR servername, [Const] [In] PWSTR resource);
uint NetAccessGetUserPerms([Const] [In] PWSTR servername, [Const] [In] PWSTR UGname, [Const] [In] PWSTR resource, [In] [Out] uint* Perms);
uint NetValidatePasswordPolicy([Const] [In] PWSTR ServerName, [In] [Out] void* Qualifier, [In] NET_VALIDATE_PASSWORD_TYPE ValidationType, [In] [Out] void* InputArg, [In] [Out] void** OutputArg);
uint NetValidatePasswordPolicyFree([In] [Out] void** OutputArg);
uint NetGetDCName([Const] [In] [Optional] PWSTR ServerName, [Const] [In] [Optional] PWSTR DomainName, [Out] byte** Buffer);
uint NetGetAnyDCName([Const] [In] [Optional] PWSTR ServerName, [Const] [In] [Optional] PWSTR DomainName, [Out] byte** Buffer);
uint I_NetLogonControl2([Const] [In] [Optional] PWSTR ServerName, [In] uint FunctionCode, [In] uint QueryLevel, [In] byte* Data, [Out] byte** Buffer);
NTSTATUS NetAddServiceAccount([In] [Optional] PWSTR ServerName, [In] PWSTR AccountName, [In] PWSTR Password, [In] uint Flags);
NTSTATUS NetRemoveServiceAccount([In] [Optional] PWSTR ServerName, [In] PWSTR AccountName, [In] uint Flags);
NTSTATUS NetEnumerateServiceAccounts([In] [Optional] PWSTR ServerName, [In] uint Flags, [Out] uint* AccountsCount, [Out] ushort*** Accounts);
NTSTATUS NetIsServiceAccount([In] [Optional] PWSTR ServerName, [In] PWSTR AccountName, [Out] BOOL* IsService);
NTSTATUS NetQueryServiceAccount([In] [Optional] PWSTR ServerName, [In] PWSTR AccountName, [In] uint InfoLevel, [Out] byte** Buffer);
uint NetAlertRaise([Const] [In] PWSTR AlertType, [In] void* Buffer, [In] uint BufferSize);
uint NetAlertRaiseEx([Const] [In] PWSTR AlertType, [In] void* VariableInfo, [In] uint VariableInfoSize, [Const] [In] PWSTR ServiceName);
uint NetMessageNameAdd([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR msgname);
uint NetMessageNameEnum([Const] [In] [Optional] PWSTR servername, [In] uint level, [In] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [Out] uint* resume_handle);
uint NetMessageNameGetInfo([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR msgname, [In] uint level, [In] byte** bufptr);
uint NetMessageNameDel([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR msgname);
uint NetMessageBufferSend([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR msgname, [Const] [In] PWSTR fromname, [In] byte* buf, [In] uint buflen);
uint NetRemoteTOD([Const] [In] [Optional] PWSTR UncServerName, [Out] byte** BufferPtr);
uint NetRemoteComputerSupports([Const] [In] PWSTR UncServerName, [In] NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS OptionsWanted, [In] [Out] uint* OptionsSupported);
uint NetReplGetInfo([Const] [In] PWSTR servername, [In] uint level, [In] [Out] byte** bufptr);
uint NetReplSetInfo([Const] [In] PWSTR servername, [In] uint level, [Const] [In] byte* buf, [In] [Out] uint* parm_err);
uint NetReplExportDirAdd([Const] [In] PWSTR servername, [In] uint level, [Const] [In] byte* buf, [In] [Out] uint* parm_err);
uint NetReplExportDirDel([Const] [In] PWSTR servername, [Const] [In] PWSTR dirname);
uint NetReplExportDirEnum([Const] [In] PWSTR servername, [In] uint level, [In] [Out] byte** bufptr, [In] uint prefmaxlen, [In] [Out] uint* entriesread, [In] [Out] uint* totalentries, [In] [Out] uint* resumehandle);
uint NetReplExportDirGetInfo([Const] [In] PWSTR servername, [Const] [In] PWSTR dirname, [In] uint level, [In] [Out] byte** bufptr);
uint NetReplExportDirSetInfo([Const] [In] PWSTR servername, [Const] [In] PWSTR dirname, [In] uint level, [Const] [In] byte* buf, [In] [Out] uint* parm_err);
uint NetReplExportDirLock([Const] [In] PWSTR servername, [Const] [In] PWSTR dirname);
uint NetReplExportDirUnlock([Const] [In] PWSTR servername, [Const] [In] PWSTR dirname, [In] uint unlockforce);
uint NetReplImportDirAdd([Const] [In] PWSTR servername, [In] uint level, [Const] [In] byte* buf, [In] [Out] uint* parm_err);
uint NetReplImportDirDel([Const] [In] PWSTR servername, [Const] [In] PWSTR dirname);
uint NetReplImportDirEnum([Const] [In] PWSTR servername, [In] uint level, [In] [Out] byte** bufptr, [In] uint prefmaxlen, [In] [Out] uint* entriesread, [In] [Out] uint* totalentries, [In] [Out] uint* resumehandle);
uint NetReplImportDirGetInfo([Const] [In] PWSTR servername, [Const] [In] PWSTR dirname, [In] uint level, [In] [Out] byte** bufptr);
uint NetReplImportDirLock([Const] [In] PWSTR servername, [Const] [In] PWSTR dirname);
uint NetReplImportDirUnlock([Const] [In] PWSTR servername, [Const] [In] PWSTR dirname, [In] uint unlockforce);
uint NetServerEnum([Const] [In] [Optional] PWSTR servername, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] NET_SERVER_TYPE servertype, [Const] [In] [Optional] PWSTR domain, [Out] [Optional] uint* resume_handle);
uint NetServerGetInfo([In] [Optional] PWSTR servername, [In] uint level, [Out] byte** bufptr);
uint NetServerSetInfo([In] [Optional] PWSTR servername, [In] uint level, [In] byte* buf, [Out] [Optional] uint* ParmError);
uint NetServerDiskEnum([In] [Optional] PWSTR servername, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] uint* resume_handle);
uint NetServerComputerNameAdd([In] [Optional] PWSTR ServerName, [In] [Optional] PWSTR EmulatedDomainName, [In] PWSTR EmulatedServerName);
uint NetServerComputerNameDel([In] [Optional] PWSTR ServerName, [In] PWSTR EmulatedServerName);
uint NetServerTransportAdd([In] [Optional] PWSTR servername, [In] uint level, [In] byte* bufptr);
uint NetServerTransportAddEx([In] [Optional] PWSTR servername, [In] uint level, [In] byte* bufptr);
uint NetServerTransportDel([In] [Optional] PWSTR servername, [In] uint level, [In] byte* bufptr);
uint NetServerTransportEnum([In] [Optional] PWSTR servername, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] uint* resume_handle);
uint NetServiceControl([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR service, [In] uint opcode, [In] uint arg, [Out] byte** bufptr);
uint NetServiceEnum([Const] [In] [Optional] PWSTR servername, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] uint* resume_handle);
uint NetServiceGetInfo([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR service, [In] uint level, [Out] byte** bufptr);
uint NetServiceInstall([Const] [In] [Optional] PWSTR servername, [Const] [In] PWSTR service, [In] uint argc, [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR* argv, [Out] byte** bufptr);
uint NetUseAdd([In] [Optional] sbyte* servername, [In] uint LevelFlags, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetUseDel([In] [Optional] PWSTR UncServerName, [In] PWSTR UseName, [In] FORCE_LEVEL_FLAGS ForceLevelFlags);
uint NetUseEnum([In] [Optional] PWSTR UncServerName, [In] uint LevelFlags, [Out] [Optional] byte** BufPtr, [In] uint PreferedMaximumSize, [Out] [Optional] uint* EntriesRead, [Out] uint* TotalEntries, [In] [Out] [Optional] uint* ResumeHandle);
uint NetUseGetInfo([In] [Optional] PWSTR UncServerName, [In] PWSTR UseName, [In] uint LevelFlags, [Out] [Optional] byte** bufptr);
uint NetWkstaGetInfo([In] [Optional] PWSTR servername, [In] uint level, [Out] [Optional] byte** bufptr);
uint NetWkstaSetInfo([In] [Optional] PWSTR servername, [In] uint level, [In] byte* buffer, [Out] [Optional] uint* parm_err);
uint NetWkstaUserGetInfo([In] [Optional] PWSTR reserved, [In] uint level, [Out] byte** bufptr);
uint NetWkstaUserSetInfo([In] [Optional] PWSTR reserved, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetWkstaUserEnum([In] [Optional] PWSTR servername, [In] uint level, [Out] [Optional] byte** bufptr, [In] uint prefmaxlen, [Out] [Optional] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] uint* resumehandle);
uint NetWkstaTransportAdd([In] [Optional] sbyte* servername, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetWkstaTransportDel([In] [Optional] PWSTR servername, [In] [Optional] PWSTR transportname, [In] FORCE_LEVEL_FLAGS ucond);
uint NetWkstaTransportEnum([In] [Optional] sbyte* servername, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] uint* resume_handle);
uint NetApiBufferAllocate([In] uint ByteCount, [Out] void** Buffer);
uint NetApiBufferFree([Optional] void* Buffer);
uint NetApiBufferReallocate([Optional] void* OldBuffer, [In] uint NewByteCount, [Out] void** NewBuffer);
uint NetApiBufferSize([In] void* Buffer, [Out] uint* ByteCount);
uint NetErrorLogClear([Const] [In] [Optional] PWSTR UncServerName, [Const] [In] [Optional] PWSTR BackupFile, [In] [Optional] byte* Reserved);
uint NetErrorLogRead([Const] [In] [Optional] PWSTR UncServerName, [In] [Optional] PWSTR Reserved1, [In] HLOG* ErrorLogHandle, [In] uint Offset, [In] [Optional] uint* Reserved2, [In] uint Reserved3, [In] uint OffsetFlag, [Out] byte** BufPtr, [In] uint PrefMaxSize, [Out] uint* BytesRead, [Out] uint* TotalAvailable);
uint NetErrorLogWrite([In] [Optional] byte* Reserved1, [In] uint Code, [Const] [In] PWSTR Component, [In] byte* Buffer, [In] uint NumBytes, [In] byte* MsgBuf, [In] uint StrCount, [In] [Optional] byte* Reserved2);
uint NetConfigGet([Const] [In] PWSTR server, [Const] [In] PWSTR component, [Const] [In] PWSTR parameter, [In] [Out] byte** bufptr);
uint NetConfigGetAll([Const] [In] PWSTR server, [Const] [In] PWSTR component, [In] [Out] byte** bufptr);
uint NetConfigSet([Const] [In] PWSTR server, [Const] [In] PWSTR reserved1, [Const] [In] PWSTR component, [In] uint level, [In] uint reserved2, [In] [Out] byte* buf, [In] uint reserved3);
uint NetAuditClear([Const] [In] PWSTR server, [Const] [In] PWSTR backupfile, [Const] [In] PWSTR service);
uint NetAuditRead([Const] [In] PWSTR server, [Const] [In] PWSTR service, [In] [Out] HLOG* auditloghandle, [In] uint offset, [In] [Out] uint* reserved1, [In] uint reserved2, [In] uint offsetflag, [In] [Out] byte** bufptr, [In] uint prefmaxlen, [In] [Out] uint* bytesread, [In] [Out] uint* totalavailable);
uint NetAuditWrite([In] uint type, [In] [Out] byte* buf, [In] uint numbytes, [Const] [In] PWSTR service, [In] [Out] byte* reserved);
uint NetJoinDomain([Const] [In] [Optional] PWSTR lpServer, [Const] [In] PWSTR lpDomain, [Const] [In] [Optional] PWSTR lpMachineAccountOU, [Const] [In] [Optional] PWSTR lpAccount, [Const] [In] [Optional] PWSTR lpPassword, [In] NET_JOIN_DOMAIN_JOIN_OPTIONS fJoinOptions);
uint NetUnjoinDomain([Const] [In] [Optional] PWSTR lpServer, [Const] [In] [Optional] PWSTR lpAccount, [Const] [In] [Optional] PWSTR lpPassword, [In] uint fUnjoinOptions);
uint NetRenameMachineInDomain([Const] [In] [Optional] PWSTR lpServer, [Const] [In] [Optional] PWSTR lpNewMachineName, [Const] [In] [Optional] PWSTR lpAccount, [Const] [In] [Optional] PWSTR lpPassword, [In] uint fRenameOptions);
uint NetValidateName([Const] [In] [Optional] PWSTR lpServer, [Const] [In] PWSTR lpName, [Const] [In] [Optional] PWSTR lpAccount, [Const] [In] [Optional] PWSTR lpPassword, [In] NETSETUP_NAME_TYPE NameType);
uint NetGetJoinableOUs([Const] [In] PWSTR lpServer, [Const] [In] PWSTR lpDomain, [Const] [In] [Optional] PWSTR lpAccount, [Const] [In] [Optional] PWSTR lpPassword, [Out] uint* OUCount, [Out] PWSTR** OUs);
uint NetAddAlternateComputerName([Const] [In] [Optional] PWSTR Server, [Const] [In] PWSTR AlternateName, [Const] [In] [Optional] PWSTR DomainAccount, [Const] [In] [Optional] PWSTR DomainAccountPassword, [In] uint Reserved);
uint NetRemoveAlternateComputerName([Const] [In] [Optional] PWSTR Server, [Const] [In] PWSTR AlternateName, [Const] [In] [Optional] PWSTR DomainAccount, [Const] [In] [Optional] PWSTR DomainAccountPassword, [In] uint Reserved);
uint NetSetPrimaryComputerName([Const] [In] [Optional] PWSTR Server, [Const] [In] PWSTR PrimaryName, [Const] [In] [Optional] PWSTR DomainAccount, [Const] [In] [Optional] PWSTR DomainAccountPassword, [In] uint Reserved);
uint NetEnumerateComputerNames([Const] [In] [Optional] PWSTR Server, [In] NET_COMPUTER_NAME_TYPE NameType, [In] uint Reserved, [Out] uint* EntryCount, [Out] PWSTR** ComputerNames);
uint NetProvisionComputerAccount([Const] [In] PWSTR lpDomain, [Const] [In] PWSTR lpMachineName, [Const] [In] [Optional] PWSTR lpMachineAccountOU, [Const] [In] [Optional] PWSTR lpDcName, [In] NETSETUP_PROVISION dwOptions, [Out] [Optional] byte** pProvisionBinData, [Out] [Optional] uint* pdwProvisionBinDataSize, [Out] [Optional] PWSTR* pProvisionTextData);
uint NetRequestOfflineDomainJoin([MemorySize(BytesParamIndex = 1)] [In] byte* pProvisionBinData, [In] uint cbProvisionBinDataSize, [In] NET_REQUEST_PROVISION_OPTIONS dwOptions, [Const] [In] PWSTR lpWindowsPath);
uint NetCreateProvisioningPackage([In] NETSETUP_PROVISIONING_PARAMS* pProvisioningParams, [Out] [Optional] byte** ppPackageBinData, [Out] [Optional] uint* pdwPackageBinDataSize, [Out] [Optional] PWSTR* ppPackageTextData);
uint NetRequestProvisioningPackageInstall([MemorySize(BytesParamIndex = 1)] [In] byte* pPackageBinData, [In] uint dwPackageBinDataSize, [In] NET_REQUEST_PROVISION_OPTIONS dwProvisionOptions, [Const] [In] PWSTR lpWindowsPath, [Reserved] [In] [Out] void* pvReserved);
HRESULT NetGetAadJoinInformation([Const] [In] [Optional] PWSTR pcszTenantId, [Out] [Optional] DSREG_JOIN_INFO** ppJoinInfo);
void NetFreeAadJoinInformation([In] [Optional] DSREG_JOIN_INFO* pJoinInfo);
uint NetGetJoinInformation([Const] [In] [Optional] PWSTR lpServer, [Out] PWSTR* lpNameBuffer, [Out] NETSETUP_JOIN_STATUS* BufferType);
uint NetScheduleJobAdd([Const] [In] PWSTR Servername, [In] [Out] byte* Buffer, [In] [Out] uint* JobId);
uint NetScheduleJobDel([Const] [In] PWSTR Servername, [In] uint MinJobId, [In] uint MaxJobId);
uint NetScheduleJobEnum([Const] [In] PWSTR Servername, [In] [Out] byte** PointerToBuffer, [In] uint PrefferedMaximumLength, [In] [Out] uint* EntriesRead, [In] [Out] uint* TotalEntries, [In] [Out] uint* ResumeHandle);
uint NetScheduleJobGetInfo([Const] [In] PWSTR Servername, [In] uint JobId, [In] [Out] byte** PointerToBuffer);
uint DavAddConnection([In] [Out] HANDLE* ConnectionHandle, [Const] [In] PWSTR RemoteName, [Const] [In] [Optional] PWSTR UserName, [Const] [In] [Optional] PWSTR Password, [MemorySize(BytesParamIndex = 5)] [In] byte* ClientCert, [In] uint CertSize);
uint DavDeleteConnection([In] HANDLE ConnectionHandle);
uint DavGetUNCFromHTTPPath([Const] [In] PWSTR Url, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR UncPath, [In] [Out] uint* lpSize);
uint DavGetHTTPFromUNCPath([Const] [In] PWSTR UncPath, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR Url, [In] [Out] uint* lpSize);
uint DavGetExtendedError([In] HANDLE hFile, [Out] uint* ExtError, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR ExtErrorString, [In] [Out] uint* cChSize);
uint DavFlushFile([In] HANDLE hFile);
uint NetDfsAdd([In] PWSTR DfsEntryPath, [In] PWSTR ServerName, [In] PWSTR ShareName, [In] [Optional] PWSTR Comment, [In] uint Flags);
uint NetDfsAddStdRoot([In] PWSTR ServerName, [In] PWSTR RootShare, [In] [Optional] PWSTR Comment, [In] uint Flags);
uint NetDfsRemoveStdRoot([In] PWSTR ServerName, [In] PWSTR RootShare, [Reserved] [In] uint Flags);
uint NetDfsAddFtRoot([In] PWSTR ServerName, [In] PWSTR RootShare, [In] PWSTR FtDfsName, [In] [Optional] PWSTR Comment, [In] uint Flags);
uint NetDfsRemoveFtRoot([In] PWSTR ServerName, [In] PWSTR RootShare, [In] PWSTR FtDfsName, [Reserved] [In] uint Flags);
uint NetDfsRemoveFtRootForced([In] PWSTR DomainName, [In] PWSTR ServerName, [In] PWSTR RootShare, [In] PWSTR FtDfsName, [Reserved] [In] uint Flags);
uint NetDfsRemove([In] PWSTR DfsEntryPath, [In] [Optional] PWSTR ServerName, [In] [Optional] PWSTR ShareName);
uint NetDfsEnum([In] PWSTR DfsName, [In] uint Level, [In] uint PrefMaxLen, [Out] byte** Buffer, [Out] uint* EntriesRead, [In] [Out] uint* ResumeHandle);
uint NetDfsGetInfo([In] PWSTR DfsEntryPath, [In] [Optional] PWSTR ServerName, [In] [Optional] PWSTR ShareName, [In] uint Level, [Out] byte** Buffer);
uint NetDfsSetInfo([In] PWSTR DfsEntryPath, [In] [Optional] PWSTR ServerName, [In] [Optional] PWSTR ShareName, [In] uint Level, [In] byte* Buffer);
uint NetDfsGetClientInfo([In] PWSTR DfsEntryPath, [In] [Optional] PWSTR ServerName, [In] [Optional] PWSTR ShareName, [In] uint Level, [Out] byte** Buffer);
uint NetDfsSetClientInfo([In] PWSTR DfsEntryPath, [In] [Optional] PWSTR ServerName, [In] [Optional] PWSTR ShareName, [In] uint Level, [In] byte* Buffer);
uint NetDfsMove([In] PWSTR OldDfsEntryPath, [In] PWSTR NewDfsEntryPath, [In] uint Flags);
uint NetDfsAddRootTarget([In] PWSTR pDfsPath, [In] [Optional] PWSTR pTargetPath, [In] uint MajorVersion, [In] [Optional] PWSTR pComment, [In] uint Flags);
uint NetDfsRemoveRootTarget([In] PWSTR pDfsPath, [In] [Optional] PWSTR pTargetPath, [In] uint Flags);
uint NetDfsGetSecurity([In] PWSTR DfsEntryPath, [In] uint SecurityInformation, [Out] PSECURITY_DESCRIPTOR* ppSecurityDescriptor, [Out] uint* lpcbSecurityDescriptor);
uint NetDfsSetSecurity([In] PWSTR DfsEntryPath, [In] uint SecurityInformation, [In] PSECURITY_DESCRIPTOR pSecurityDescriptor);
uint NetDfsGetStdContainerSecurity([In] PWSTR MachineName, [In] uint SecurityInformation, [Out] PSECURITY_DESCRIPTOR* ppSecurityDescriptor, [Out] uint* lpcbSecurityDescriptor);
uint NetDfsSetStdContainerSecurity([In] PWSTR MachineName, [In] uint SecurityInformation, [In] PSECURITY_DESCRIPTOR pSecurityDescriptor);
uint NetDfsGetFtContainerSecurity([In] PWSTR DomainName, [In] uint SecurityInformation, [Out] PSECURITY_DESCRIPTOR* ppSecurityDescriptor, [Out] uint* lpcbSecurityDescriptor);
uint NetDfsSetFtContainerSecurity([In] PWSTR DomainName, [In] uint SecurityInformation, [In] PSECURITY_DESCRIPTOR pSecurityDescriptor);
uint NetDfsGetSupportedNamespaceVersion([In] DFS_NAMESPACE_VERSION_ORIGIN Origin, [In] [Optional] PWSTR pName, [Out] DFS_SUPPORTED_NAMESPACE_VERSION_INFO** ppVersionInfo);
uint NetShareAdd([In] [Optional] PWSTR servername, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetShareEnum([In] [Optional] PWSTR servername, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] uint* resume_handle);
uint NetShareEnumSticky([In] [Optional] PWSTR servername, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] uint* resume_handle);
uint NetShareGetInfo([In] [Optional] PWSTR servername, [In] PWSTR netname, [In] uint level, [Out] byte** bufptr);
uint NetShareSetInfo([In] [Optional] PWSTR servername, [In] PWSTR netname, [In] uint level, [In] byte* buf, [Out] [Optional] uint* parm_err);
uint NetShareDel([In] [Optional] PWSTR servername, [In] PWSTR netname, [Reserved] [In] uint reserved);
uint NetShareDelSticky([In] [Optional] PWSTR servername, [In] PWSTR netname, [Reserved] [In] uint reserved);
uint NetShareCheck([In] [Optional] PWSTR servername, [In] PWSTR device, [Out] uint* type);
uint NetShareDelEx([In] [Optional] PWSTR servername, [In] uint level, [In] byte* buf);
uint NetServerAliasAdd([In] [Optional] PWSTR servername, [In] uint level, [In] byte* buf);
uint NetServerAliasDel([In] [Optional] PWSTR servername, [In] uint level, [In] byte* buf);
uint NetServerAliasEnum([In] [Optional] PWSTR servername, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] uint* resumehandle);
uint NetSessionEnum([In] [Optional] PWSTR servername, [In] [Optional] PWSTR UncClientName, [In] [Optional] PWSTR username, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] uint* resume_handle);
uint NetSessionDel([In] [Optional] PWSTR servername, [In] [Optional] PWSTR UncClientName, [In] [Optional] PWSTR username);
uint NetSessionGetInfo([In] [Optional] PWSTR servername, [In] PWSTR UncClientName, [In] PWSTR username, [In] uint level, [Out] byte** bufptr);
uint NetConnectionEnum([In] [Optional] PWSTR servername, [In] PWSTR qualifier, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] uint* resume_handle);
uint NetFileClose([In] [Optional] PWSTR servername, [In] uint fileid);
uint NetFileEnum([In] [Optional] PWSTR servername, [In] [Optional] PWSTR basepath, [In] [Optional] PWSTR username, [In] uint level, [Out] byte** bufptr, [In] uint prefmaxlen, [Out] uint* entriesread, [Out] uint* totalentries, [In] [Out] [Optional] nuint* resume_handle);
uint NetFileGetInfo([In] [Optional] PWSTR servername, [In] uint fileid, [In] uint level, [Out] byte** bufptr);
uint NetStatisticsGet([In] sbyte* ServerName, [In] sbyte* Service, [In] uint Level, [In] uint Options, [Out] byte** Buffer);
