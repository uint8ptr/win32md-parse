CONFIGRET CM_Add_Empty_Log_Conf([Out] nuint* plcLogConf, [In] uint dnDevInst, [In] PRIORITY Priority, [In] uint ulFlags);
CONFIGRET CM_Add_Empty_Log_Conf_Ex([Out] nuint* plcLogConf, [In] uint dnDevInst, [In] PRIORITY Priority, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Add_IDA([In] uint dnDevInst, [In] PSTR pszID, [In] uint ulFlags);
CONFIGRET CM_Add_IDW([In] uint dnDevInst, [In] PWSTR pszID, [In] uint ulFlags);
CONFIGRET CM_Add_ID_ExA([In] uint dnDevInst, [In] PSTR pszID, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Add_ID_ExW([In] uint dnDevInst, [In] PWSTR pszID, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Add_Range([In] ulong ullStartValue, [In] ulong ullEndValue, [In] nuint rlh, [In] uint ulFlags);
CONFIGRET CM_Add_Res_Des([Out] [Optional] nuint* prdResDes, [In] nuint lcLogConf, [In] uint ResourceID, [MemorySize(BytesParamIndex = 4)] [In] void* ResourceData, [In] uint ResourceLen, [In] uint ulFlags);
CONFIGRET CM_Add_Res_Des_Ex([Out] [Optional] nuint* prdResDes, [In] nuint lcLogConf, [In] uint ResourceID, [MemorySize(BytesParamIndex = 4)] [In] void* ResourceData, [In] uint ResourceLen, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Connect_MachineA([Const] [In] [Optional] PSTR UNCServerName, [Out] nint* phMachine);
CONFIGRET CM_Connect_MachineW([Const] [In] [Optional] PWSTR UNCServerName, [Out] nint* phMachine);
CONFIGRET CM_Create_DevNodeA([Out] uint* pdnDevInst, [In] PSTR pDeviceID, [In] uint dnParent, [In] uint ulFlags);
CONFIGRET CM_Create_DevNodeW([Out] uint* pdnDevInst, [In] PWSTR pDeviceID, [In] uint dnParent, [In] uint ulFlags);
CONFIGRET CM_Create_DevNode_ExA([Out] uint* pdnDevInst, [In] PSTR pDeviceID, [In] uint dnParent, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Create_DevNode_ExW([Out] uint* pdnDevInst, [In] PWSTR pDeviceID, [In] uint dnParent, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Create_Range_List([Out] nuint* prlh, [In] uint ulFlags);
CONFIGRET CM_Delete_Class_Key([In] Guid* ClassGuid, [In] uint ulFlags);
CONFIGRET CM_Delete_Class_Key_Ex([In] Guid* ClassGuid, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Delete_DevNode_Key([In] uint dnDevNode, [In] uint ulHardwareProfile, [In] uint ulFlags);
CONFIGRET CM_Delete_DevNode_Key_Ex([In] uint dnDevNode, [In] uint ulHardwareProfile, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Delete_Range([In] ulong ullStartValue, [In] ulong ullEndValue, [In] nuint rlh, [In] uint ulFlags);
CONFIGRET CM_Detect_Resource_Conflict([In] uint dnDevInst, [In] uint ResourceID, [MemorySize(BytesParamIndex = 3)] [In] void* ResourceData, [In] uint ResourceLen, [Out] BOOL* pbConflictDetected, [In] uint ulFlags);
CONFIGRET CM_Detect_Resource_Conflict_Ex([In] uint dnDevInst, [In] uint ResourceID, [MemorySize(BytesParamIndex = 3)] [In] void* ResourceData, [In] uint ResourceLen, [Out] BOOL* pbConflictDetected, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Disable_DevNode([In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Disable_DevNode_Ex([In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Disconnect_Machine([In] [Optional] nint hMachine);
CONFIGRET CM_Dup_Range_List([In] nuint rlhOld, [In] nuint rlhNew, [In] uint ulFlags);
CONFIGRET CM_Enable_DevNode([In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Enable_DevNode_Ex([In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Enumerate_Classes([In] uint ulClassIndex, [Out] Guid* ClassGuid, [In] uint ulFlags);
CONFIGRET CM_Enumerate_Classes_Ex([In] uint ulClassIndex, [Out] Guid* ClassGuid, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Enumerate_EnumeratorsA([In] uint ulEnumIndex, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Enumerate_EnumeratorsW([In] uint ulEnumIndex, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Enumerate_Enumerators_ExA([In] uint ulEnumIndex, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Enumerate_Enumerators_ExW([In] uint ulEnumIndex, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Find_Range([Out] ulong* pullStart, [In] ulong ullStart, [In] uint ulLength, [In] ulong ullAlignment, [In] ulong ullEnd, [In] nuint rlh, [In] uint ulFlags);
CONFIGRET CM_First_Range([In] nuint rlh, [Out] ulong* pullStart, [Out] ulong* pullEnd, [Out] nuint* preElement, [In] uint ulFlags);
CONFIGRET CM_Free_Log_Conf([In] nuint lcLogConfToBeFreed, [In] uint ulFlags);
CONFIGRET CM_Free_Log_Conf_Ex([In] nuint lcLogConfToBeFreed, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Free_Log_Conf_Handle([In] nuint lcLogConf);
CONFIGRET CM_Free_Range_List([In] nuint rlh, [In] uint ulFlags);
CONFIGRET CM_Free_Res_Des([Out] [Optional] nuint* prdResDes, [In] nuint rdResDes, [In] uint ulFlags);
CONFIGRET CM_Free_Res_Des_Ex([Out] [Optional] nuint* prdResDes, [In] nuint rdResDes, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Free_Res_Des_Handle([In] nuint rdResDes);
CONFIGRET CM_Get_Child([Out] uint* pdnDevInst, [In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Get_Child_Ex([Out] uint* pdnDevInst, [In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Class_NameA([In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Get_Class_NameW([In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Get_Class_Name_ExA([In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Class_Name_ExW([In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Class_Key_NameA([In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR pszKeyName, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Get_Class_Key_NameW([In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR pszKeyName, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Get_Class_Key_Name_ExA([In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR pszKeyName, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Class_Key_Name_ExW([In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR pszKeyName, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Depth([Out] uint* pulDepth, [In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Get_Depth_Ex([Out] uint* pulDepth, [In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_IDA([In] uint dnDevInst, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR Buffer, [In] uint BufferLen, [In] uint ulFlags);
CONFIGRET CM_Get_Device_IDW([In] uint dnDevInst, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR Buffer, [In] uint BufferLen, [In] uint ulFlags);
CONFIGRET CM_Get_Device_ID_ExA([In] uint dnDevInst, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR Buffer, [In] uint BufferLen, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_ID_ExW([In] uint dnDevInst, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR Buffer, [In] uint BufferLen, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_ID_ListA([Const] [In] [Optional] PSTR pszFilter, [NotNullTerminated] [NullNullTerminated] [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR Buffer, [In] uint BufferLen, [In] uint ulFlags);
CONFIGRET CM_Get_Device_ID_ListW([Const] [In] [Optional] PWSTR pszFilter, [NotNullTerminated] [NullNullTerminated] [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR Buffer, [In] uint BufferLen, [In] uint ulFlags);
CONFIGRET CM_Get_Device_ID_List_ExA([Const] [In] [Optional] PSTR pszFilter, [NotNullTerminated] [NullNullTerminated] [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR Buffer, [In] uint BufferLen, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_ID_List_ExW([Const] [In] [Optional] PWSTR pszFilter, [NotNullTerminated] [NullNullTerminated] [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR Buffer, [In] uint BufferLen, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_ID_List_SizeA([Out] uint* pulLen, [Const] [In] [Optional] PSTR pszFilter, [In] uint ulFlags);
CONFIGRET CM_Get_Device_ID_List_SizeW([Out] uint* pulLen, [Const] [In] [Optional] PWSTR pszFilter, [In] uint ulFlags);
CONFIGRET CM_Get_Device_ID_List_Size_ExA([Out] uint* pulLen, [Const] [In] [Optional] PSTR pszFilter, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_ID_List_Size_ExW([Out] uint* pulLen, [Const] [In] [Optional] PWSTR pszFilter, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_ID_Size([Out] uint* pulLen, [In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Get_Device_ID_Size_Ex([Out] uint* pulLen, [In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_DevNode_PropertyW([In] uint dnDevInst, [Const] [In] DEVPROPKEY* PropertyKey, [Out] uint* PropertyType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* PropertyBuffer, [In] [Out] uint* PropertyBufferSize, [In] uint ulFlags);
CONFIGRET CM_Get_DevNode_Property_ExW([In] uint dnDevInst, [Const] [In] DEVPROPKEY* PropertyKey, [Out] uint* PropertyType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* PropertyBuffer, [In] [Out] uint* PropertyBufferSize, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_DevNode_Property_Keys([In] uint dnDevInst, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] DEVPROPKEY* PropertyKeyArray, [In] [Out] uint* PropertyKeyCount, [In] uint ulFlags);
CONFIGRET CM_Get_DevNode_Property_Keys_Ex([In] uint dnDevInst, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] DEVPROPKEY* PropertyKeyArray, [In] [Out] uint* PropertyKeyCount, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_DevNode_Registry_PropertyA([In] uint dnDevInst, [In] uint ulProperty, [Out] [Optional] uint* pulRegDataType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Get_DevNode_Registry_PropertyW([In] uint dnDevInst, [In] uint ulProperty, [Out] [Optional] uint* pulRegDataType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Get_DevNode_Registry_Property_ExA([In] uint dnDevInst, [In] uint ulProperty, [Out] [Optional] uint* pulRegDataType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_DevNode_Registry_Property_ExW([In] uint dnDevInst, [In] uint ulProperty, [Out] [Optional] uint* pulRegDataType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_DevNode_Custom_PropertyA([In] uint dnDevInst, [Const] [In] PSTR pszCustomPropertyName, [Out] [Optional] uint* pulRegDataType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Get_DevNode_Custom_PropertyW([In] uint dnDevInst, [Const] [In] PWSTR pszCustomPropertyName, [Out] [Optional] uint* pulRegDataType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Get_DevNode_Custom_Property_ExA([In] uint dnDevInst, [Const] [In] PSTR pszCustomPropertyName, [Out] [Optional] uint* pulRegDataType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_DevNode_Custom_Property_ExW([In] uint dnDevInst, [Const] [In] PWSTR pszCustomPropertyName, [Out] [Optional] uint* pulRegDataType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_DevNode_Status([Out] uint* pulStatus, [Out] uint* pulProblemNumber, [In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Get_DevNode_Status_Ex([Out] uint* pulStatus, [Out] uint* pulProblemNumber, [In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_First_Log_Conf([Out] [Optional] nuint* plcLogConf, [In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Get_First_Log_Conf_Ex([Out] [Optional] nuint* plcLogConf, [In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Global_State([Out] uint* pulState, [In] uint ulFlags);
CONFIGRET CM_Get_Global_State_Ex([Out] uint* pulState, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Hardware_Profile_InfoA([In] uint ulIndex, [Out] HWProfileInfo_sA* pHWProfileInfo, [In] uint ulFlags);
CONFIGRET CM_Get_Hardware_Profile_Info_ExA([In] uint ulIndex, [Out] HWProfileInfo_sA* pHWProfileInfo, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Hardware_Profile_InfoW([In] uint ulIndex, [Out] HWPROFILEINFO_W* pHWProfileInfo, [In] uint ulFlags);
CONFIGRET CM_Get_Hardware_Profile_Info_ExW([In] uint ulIndex, [Out] HWPROFILEINFO_W* pHWProfileInfo, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_HW_Prof_FlagsA([In] PSTR pDeviceID, [In] uint ulHardwareProfile, [Out] uint* pulValue, [In] uint ulFlags);
CONFIGRET CM_Get_HW_Prof_FlagsW([In] PWSTR pDeviceID, [In] uint ulHardwareProfile, [Out] uint* pulValue, [In] uint ulFlags);
CONFIGRET CM_Get_HW_Prof_Flags_ExA([In] PSTR pDeviceID, [In] uint ulHardwareProfile, [Out] uint* pulValue, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_HW_Prof_Flags_ExW([In] PWSTR pDeviceID, [In] uint ulHardwareProfile, [Out] uint* pulValue, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_Interface_AliasA([Const] [In] PSTR pszDeviceInterface, [In] Guid* AliasInterfaceGuid, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR pszAliasDeviceInterface, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Get_Device_Interface_AliasW([Const] [In] PWSTR pszDeviceInterface, [In] Guid* AliasInterfaceGuid, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pszAliasDeviceInterface, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Get_Device_Interface_Alias_ExA([Const] [In] PSTR pszDeviceInterface, [In] Guid* AliasInterfaceGuid, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR pszAliasDeviceInterface, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_Interface_Alias_ExW([Const] [In] PWSTR pszDeviceInterface, [In] Guid* AliasInterfaceGuid, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pszAliasDeviceInterface, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_Interface_ListA([In] Guid* InterfaceClassGuid, [In] [Optional] PSTR pDeviceID, [NotNullTerminated] [NullNullTerminated] [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR Buffer, [In] uint BufferLen, [In] uint ulFlags);
CONFIGRET CM_Get_Device_Interface_ListW([In] Guid* InterfaceClassGuid, [In] [Optional] PWSTR pDeviceID, [NotNullTerminated] [NullNullTerminated] [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR Buffer, [In] uint BufferLen, [In] uint ulFlags);
CONFIGRET CM_Get_Device_Interface_List_ExA([In] Guid* InterfaceClassGuid, [In] [Optional] PSTR pDeviceID, [NotNullTerminated] [NullNullTerminated] [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR Buffer, [In] uint BufferLen, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_Interface_List_ExW([In] Guid* InterfaceClassGuid, [In] [Optional] PWSTR pDeviceID, [NotNullTerminated] [NullNullTerminated] [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR Buffer, [In] uint BufferLen, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_Interface_List_SizeA([Out] uint* pulLen, [In] Guid* InterfaceClassGuid, [In] [Optional] PSTR pDeviceID, [In] uint ulFlags);
CONFIGRET CM_Get_Device_Interface_List_SizeW([Out] uint* pulLen, [In] Guid* InterfaceClassGuid, [In] [Optional] PWSTR pDeviceID, [In] uint ulFlags);
CONFIGRET CM_Get_Device_Interface_List_Size_ExA([Out] uint* pulLen, [In] Guid* InterfaceClassGuid, [In] [Optional] PSTR pDeviceID, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_Interface_List_Size_ExW([Out] uint* pulLen, [In] Guid* InterfaceClassGuid, [In] [Optional] PWSTR pDeviceID, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_Interface_PropertyW([Const] [In] PWSTR pszDeviceInterface, [Const] [In] DEVPROPKEY* PropertyKey, [Out] uint* PropertyType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* PropertyBuffer, [In] [Out] uint* PropertyBufferSize, [In] uint ulFlags);
CONFIGRET CM_Get_Device_Interface_Property_ExW([Const] [In] PWSTR pszDeviceInterface, [Const] [In] DEVPROPKEY* PropertyKey, [Out] uint* PropertyType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* PropertyBuffer, [In] [Out] uint* PropertyBufferSize, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Device_Interface_Property_KeysW([Const] [In] PWSTR pszDeviceInterface, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] DEVPROPKEY* PropertyKeyArray, [In] [Out] uint* PropertyKeyCount, [In] uint ulFlags);
CONFIGRET CM_Get_Device_Interface_Property_Keys_ExW([Const] [In] PWSTR pszDeviceInterface, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] DEVPROPKEY* PropertyKeyArray, [In] [Out] uint* PropertyKeyCount, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Log_Conf_Priority([In] nuint lcLogConf, [Out] uint* pPriority, [In] uint ulFlags);
CONFIGRET CM_Get_Log_Conf_Priority_Ex([In] nuint lcLogConf, [Out] uint* pPriority, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Next_Log_Conf([Out] [Optional] nuint* plcLogConf, [In] nuint lcLogConf, [In] uint ulFlags);
CONFIGRET CM_Get_Next_Log_Conf_Ex([Out] [Optional] nuint* plcLogConf, [In] nuint lcLogConf, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Parent([Out] uint* pdnDevInst, [In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Get_Parent_Ex([Out] uint* pdnDevInst, [In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Res_Des_Data([In] nuint rdResDes, [MemorySize(BytesParamIndex = 2)] [Out] void* Buffer, [In] uint BufferLen, [In] uint ulFlags);
CONFIGRET CM_Get_Res_Des_Data_Ex([In] nuint rdResDes, [MemorySize(BytesParamIndex = 2)] [Out] void* Buffer, [In] uint BufferLen, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Res_Des_Data_Size([Out] uint* pulSize, [In] nuint rdResDes, [In] uint ulFlags);
CONFIGRET CM_Get_Res_Des_Data_Size_Ex([Out] uint* pulSize, [In] nuint rdResDes, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Sibling([Out] uint* pdnDevInst, [In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Get_Sibling_Ex([Out] uint* pdnDevInst, [In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
ushort CM_Get_Version();
ushort CM_Get_Version_Ex([In] [Optional] nint hMachine);
BOOL CM_Is_Version_Available([In] ushort wVersion);
BOOL CM_Is_Version_Available_Ex([In] ushort wVersion, [In] [Optional] nint hMachine);
CONFIGRET CM_Intersect_Range_List([In] nuint rlhOld1, [In] nuint rlhOld2, [In] nuint rlhNew, [In] uint ulFlags);
CONFIGRET CM_Invert_Range_List([In] nuint rlhOld, [In] nuint rlhNew, [In] ulong ullMaxValue, [In] uint ulFlags);
CONFIGRET CM_Locate_DevNodeA([Out] uint* pdnDevInst, [In] [Optional] PSTR pDeviceID, [In] uint ulFlags);
CONFIGRET CM_Locate_DevNodeW([Out] uint* pdnDevInst, [In] [Optional] PWSTR pDeviceID, [In] uint ulFlags);
CONFIGRET CM_Locate_DevNode_ExA([Out] uint* pdnDevInst, [In] [Optional] PSTR pDeviceID, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Locate_DevNode_ExW([Out] uint* pdnDevInst, [In] [Optional] PWSTR pDeviceID, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Merge_Range_List([In] nuint rlhOld1, [In] nuint rlhOld2, [In] nuint rlhNew, [In] uint ulFlags);
CONFIGRET CM_Modify_Res_Des([Out] nuint* prdResDes, [In] nuint rdResDes, [In] uint ResourceID, [MemorySize(BytesParamIndex = 4)] [In] void* ResourceData, [In] uint ResourceLen, [In] uint ulFlags);
CONFIGRET CM_Modify_Res_Des_Ex([Out] nuint* prdResDes, [In] nuint rdResDes, [In] uint ResourceID, [MemorySize(BytesParamIndex = 4)] [In] void* ResourceData, [In] uint ResourceLen, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Move_DevNode([In] uint dnFromDevInst, [In] uint dnToDevInst, [In] uint ulFlags);
CONFIGRET CM_Move_DevNode_Ex([In] uint dnFromDevInst, [In] uint dnToDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Next_Range([In] [Out] nuint* preElement, [Out] ulong* pullStart, [Out] ulong* pullEnd, [In] uint ulFlags);
CONFIGRET CM_Get_Next_Res_Des([Out] nuint* prdResDes, [In] nuint rdResDes, [In] uint ForResource, [Out] [Optional] uint* pResourceID, [In] uint ulFlags);
CONFIGRET CM_Get_Next_Res_Des_Ex([Out] nuint* prdResDes, [In] nuint rdResDes, [In] uint ForResource, [Out] [Optional] uint* pResourceID, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Open_Class_KeyA([In] [Optional] Guid* ClassGuid, [Const] [In] [Optional] PSTR pszClassName, [In] uint samDesired, [In] uint Disposition, [Out] HKEY* phkClass, [In] uint ulFlags);
CONFIGRET CM_Open_Class_KeyW([In] [Optional] Guid* ClassGuid, [Const] [In] [Optional] PWSTR pszClassName, [In] uint samDesired, [In] uint Disposition, [Out] HKEY* phkClass, [In] uint ulFlags);
CONFIGRET CM_Open_Class_Key_ExA([In] [Optional] Guid* ClassGuid, [Const] [In] [Optional] PSTR pszClassName, [In] uint samDesired, [In] uint Disposition, [Out] HKEY* phkClass, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Open_Class_Key_ExW([In] [Optional] Guid* ClassGuid, [Const] [In] [Optional] PWSTR pszClassName, [In] uint samDesired, [In] uint Disposition, [Out] HKEY* phkClass, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Open_DevNode_Key([In] uint dnDevNode, [In] uint samDesired, [In] uint ulHardwareProfile, [In] uint Disposition, [Out] HKEY* phkDevice, [In] uint ulFlags);
CONFIGRET CM_Open_DevNode_Key_Ex([In] uint dnDevNode, [In] uint samDesired, [In] uint ulHardwareProfile, [In] uint Disposition, [Out] HKEY* phkDevice, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Open_Device_Interface_KeyA([Const] [In] PSTR pszDeviceInterface, [In] uint samDesired, [In] uint Disposition, [Out] HKEY* phkDeviceInterface, [In] uint ulFlags);
CONFIGRET CM_Open_Device_Interface_KeyW([Const] [In] PWSTR pszDeviceInterface, [In] uint samDesired, [In] uint Disposition, [Out] HKEY* phkDeviceInterface, [In] uint ulFlags);
CONFIGRET CM_Open_Device_Interface_Key_ExA([Const] [In] PSTR pszDeviceInterface, [In] uint samDesired, [In] uint Disposition, [Out] HKEY* phkDeviceInterface, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Open_Device_Interface_Key_ExW([Const] [In] PWSTR pszDeviceInterface, [In] uint samDesired, [In] uint Disposition, [Out] HKEY* phkDeviceInterface, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Delete_Device_Interface_KeyA([Const] [In] PSTR pszDeviceInterface, [In] uint ulFlags);
CONFIGRET CM_Delete_Device_Interface_KeyW([Const] [In] PWSTR pszDeviceInterface, [In] uint ulFlags);
CONFIGRET CM_Delete_Device_Interface_Key_ExA([Const] [In] PSTR pszDeviceInterface, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Delete_Device_Interface_Key_ExW([Const] [In] PWSTR pszDeviceInterface, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Query_Arbitrator_Free_Data([MemorySize(BytesParamIndex = 1)] [Out] void* pData, [In] uint DataLen, [In] uint dnDevInst, [In] uint ResourceID, [In] uint ulFlags);
CONFIGRET CM_Query_Arbitrator_Free_Data_Ex([MemorySize(BytesParamIndex = 1)] [Out] void* pData, [In] uint DataLen, [In] uint dnDevInst, [In] uint ResourceID, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Query_Arbitrator_Free_Size([Out] uint* pulSize, [In] uint dnDevInst, [In] uint ResourceID, [In] uint ulFlags);
CONFIGRET CM_Query_Arbitrator_Free_Size_Ex([Out] uint* pulSize, [In] uint dnDevInst, [In] uint ResourceID, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Query_Remove_SubTree([In] uint dnAncestor, [In] uint ulFlags);
CONFIGRET CM_Query_Remove_SubTree_Ex([In] uint dnAncestor, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Query_And_Remove_SubTreeA([In] uint dnAncestor, [Out] [Optional] PNP_VETO_TYPE* pVetoType, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR pszVetoName, [In] uint ulNameLength, [In] uint ulFlags);
CONFIGRET CM_Query_And_Remove_SubTreeW([In] uint dnAncestor, [Out] [Optional] PNP_VETO_TYPE* pVetoType, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR pszVetoName, [In] uint ulNameLength, [In] uint ulFlags);
CONFIGRET CM_Query_And_Remove_SubTree_ExA([In] uint dnAncestor, [Out] [Optional] PNP_VETO_TYPE* pVetoType, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR pszVetoName, [In] uint ulNameLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Query_And_Remove_SubTree_ExW([In] uint dnAncestor, [Out] [Optional] PNP_VETO_TYPE* pVetoType, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR pszVetoName, [In] uint ulNameLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Request_Device_EjectA([In] uint dnDevInst, [Out] [Optional] PNP_VETO_TYPE* pVetoType, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR pszVetoName, [In] uint ulNameLength, [In] uint ulFlags);
CONFIGRET CM_Request_Device_Eject_ExA([In] uint dnDevInst, [Out] [Optional] PNP_VETO_TYPE* pVetoType, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR pszVetoName, [In] uint ulNameLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Request_Device_EjectW([In] uint dnDevInst, [Out] [Optional] PNP_VETO_TYPE* pVetoType, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR pszVetoName, [In] uint ulNameLength, [In] uint ulFlags);
CONFIGRET CM_Request_Device_Eject_ExW([In] uint dnDevInst, [Out] [Optional] PNP_VETO_TYPE* pVetoType, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR pszVetoName, [In] uint ulNameLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Reenumerate_DevNode([In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Reenumerate_DevNode_Ex([In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Register_Device_InterfaceA([In] uint dnDevInst, [In] Guid* InterfaceClassGuid, [Const] [In] [Optional] PSTR pszReference, [NativeArrayInfo(CountParamIndex = 4)] [Out] PSTR pszDeviceInterface, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Register_Device_InterfaceW([In] uint dnDevInst, [In] Guid* InterfaceClassGuid, [Const] [In] [Optional] PWSTR pszReference, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR pszDeviceInterface, [In] [Out] uint* pulLength, [In] uint ulFlags);
CONFIGRET CM_Register_Device_Interface_ExA([In] uint dnDevInst, [In] Guid* InterfaceClassGuid, [Const] [In] [Optional] PSTR pszReference, [NativeArrayInfo(CountParamIndex = 4)] [Out] PSTR pszDeviceInterface, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Register_Device_Interface_ExW([In] uint dnDevInst, [In] Guid* InterfaceClassGuid, [Const] [In] [Optional] PWSTR pszReference, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR pszDeviceInterface, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Set_DevNode_Problem_Ex([In] uint dnDevInst, [In] uint ulProblem, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Set_DevNode_Problem([In] uint dnDevInst, [In] uint ulProblem, [In] uint ulFlags);
CONFIGRET CM_Unregister_Device_InterfaceA([Const] [In] PSTR pszDeviceInterface, [In] uint ulFlags);
CONFIGRET CM_Unregister_Device_InterfaceW([Const] [In] PWSTR pszDeviceInterface, [In] uint ulFlags);
CONFIGRET CM_Unregister_Device_Interface_ExA([Const] [In] PSTR pszDeviceInterface, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Unregister_Device_Interface_ExW([Const] [In] PWSTR pszDeviceInterface, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Register_Device_Driver([In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Register_Device_Driver_Ex([In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Remove_SubTree([In] uint dnAncestor, [In] uint ulFlags);
CONFIGRET CM_Remove_SubTree_Ex([In] uint dnAncestor, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Set_DevNode_PropertyW([In] uint dnDevInst, [Const] [In] DEVPROPKEY* PropertyKey, [In] uint PropertyType, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [In] uint ulFlags);
CONFIGRET CM_Set_DevNode_Property_ExW([In] uint dnDevInst, [Const] [In] DEVPROPKEY* PropertyKey, [In] uint PropertyType, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Set_DevNode_Registry_PropertyA([In] uint dnDevInst, [In] uint ulProperty, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* Buffer, [In] uint ulLength, [In] uint ulFlags);
CONFIGRET CM_Set_DevNode_Registry_PropertyW([In] uint dnDevInst, [In] uint ulProperty, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* Buffer, [In] uint ulLength, [In] uint ulFlags);
CONFIGRET CM_Set_DevNode_Registry_Property_ExA([In] uint dnDevInst, [In] uint ulProperty, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* Buffer, [In] uint ulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Set_DevNode_Registry_Property_ExW([In] uint dnDevInst, [In] uint ulProperty, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* Buffer, [In] uint ulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Set_Device_Interface_PropertyW([Const] [In] PWSTR pszDeviceInterface, [Const] [In] DEVPROPKEY* PropertyKey, [In] uint PropertyType, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [In] uint ulFlags);
CONFIGRET CM_Set_Device_Interface_Property_ExW([Const] [In] PWSTR pszDeviceInterface, [Const] [In] DEVPROPKEY* PropertyKey, [In] uint PropertyType, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Is_Dock_Station_Present([Out] BOOL* pbPresent);
CONFIGRET CM_Is_Dock_Station_Present_Ex([Out] BOOL* pbPresent, [In] [Optional] nint hMachine);
CONFIGRET CM_Request_Eject_PC();
CONFIGRET CM_Request_Eject_PC_Ex([In] [Optional] nint hMachine);
CONFIGRET CM_Set_HW_Prof_FlagsA([In] PSTR pDeviceID, [In] uint ulConfig, [In] uint ulValue, [In] uint ulFlags);
CONFIGRET CM_Set_HW_Prof_FlagsW([In] PWSTR pDeviceID, [In] uint ulConfig, [In] uint ulValue, [In] uint ulFlags);
CONFIGRET CM_Set_HW_Prof_Flags_ExA([In] PSTR pDeviceID, [In] uint ulConfig, [In] uint ulValue, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Set_HW_Prof_Flags_ExW([In] PWSTR pDeviceID, [In] uint ulConfig, [In] uint ulValue, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Setup_DevNode([In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Setup_DevNode_Ex([In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Test_Range_Available([In] ulong ullStartValue, [In] ulong ullEndValue, [In] nuint rlh, [In] uint ulFlags);
CONFIGRET CM_Uninstall_DevNode([In] uint dnDevInst, [In] uint ulFlags);
CONFIGRET CM_Uninstall_DevNode_Ex([In] uint dnDevInst, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Run_Detection([In] uint ulFlags);
CONFIGRET CM_Run_Detection_Ex([In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Set_HW_Prof([In] uint ulHardwareProfile, [In] uint ulFlags);
CONFIGRET CM_Set_HW_Prof_Ex([In] uint ulHardwareProfile, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Query_Resource_Conflict_List([Out] nuint* pclConflictList, [In] uint dnDevInst, [In] uint ResourceID, [MemorySize(BytesParamIndex = 4)] [In] void* ResourceData, [In] uint ResourceLen, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Free_Resource_Conflict_Handle([In] nuint clConflictList);
CONFIGRET CM_Get_Resource_Conflict_Count([In] nuint clConflictList, [Out] uint* pulCount);
CONFIGRET CM_Get_Resource_Conflict_DetailsA([In] nuint clConflictList, [In] uint ulIndex, [In] [Out] CONFLICT_DETAILS_A* pConflictDetails);
CONFIGRET CM_Get_Resource_Conflict_DetailsW([In] nuint clConflictList, [In] uint ulIndex, [In] [Out] CONFLICT_DETAILS_W* pConflictDetails);
CONFIGRET CM_Get_Class_PropertyW([Const] [In] Guid* ClassGUID, [Const] [In] DEVPROPKEY* PropertyKey, [Out] uint* PropertyType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* PropertyBuffer, [In] [Out] uint* PropertyBufferSize, [In] uint ulFlags);
CONFIGRET CM_Get_Class_Property_ExW([Const] [In] Guid* ClassGUID, [Const] [In] DEVPROPKEY* PropertyKey, [Out] uint* PropertyType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* PropertyBuffer, [In] [Out] uint* PropertyBufferSize, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Class_Property_Keys([Const] [In] Guid* ClassGUID, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] DEVPROPKEY* PropertyKeyArray, [In] [Out] uint* PropertyKeyCount, [In] uint ulFlags);
CONFIGRET CM_Get_Class_Property_Keys_Ex([Const] [In] Guid* ClassGUID, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] DEVPROPKEY* PropertyKeyArray, [In] [Out] uint* PropertyKeyCount, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Set_Class_PropertyW([Const] [In] Guid* ClassGUID, [Const] [In] DEVPROPKEY* PropertyKey, [In] uint PropertyType, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [In] uint ulFlags);
CONFIGRET CM_Set_Class_Property_ExW([Const] [In] Guid* ClassGUID, [Const] [In] DEVPROPKEY* PropertyKey, [In] uint PropertyType, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Class_Registry_PropertyA([In] Guid* ClassGuid, [In] uint ulProperty, [Out] [Optional] uint* pulRegDataType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Get_Class_Registry_PropertyW([In] Guid* ClassGuid, [In] uint ulProperty, [Out] [Optional] uint* pulRegDataType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* Buffer, [In] [Out] uint* pulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Set_Class_Registry_PropertyA([In] Guid* ClassGuid, [In] uint ulProperty, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* Buffer, [In] uint ulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
CONFIGRET CM_Set_Class_Registry_PropertyW([In] Guid* ClassGuid, [In] uint ulProperty, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* Buffer, [In] uint ulLength, [In] uint ulFlags, [In] [Optional] nint hMachine);
uint CMP_WaitNoPendingInstallEvents([In] uint dwTimeout);
CONFIGRET CM_Register_Notification([In] CM_NOTIFY_FILTER* pFilter, [In] [Optional] void* pContext, [In] PCM_NOTIFY_CALLBACK pCallback, [Out] nint* pNotifyContext);
CONFIGRET CM_Unregister_Notification([In] HCMNOTIFICATION NotifyContext);
uint CM_MapCrToWin32Err([In] CONFIGRET CmReturnCode, [In] uint DefaultErr);
HRESULT SwDeviceCreate([Const] [In] PWSTR pszEnumeratorName, [Const] [In] PWSTR pszParentDeviceInstance, [Const] [In] SW_DEVICE_CREATE_INFO* pCreateInfo, [In] uint cPropertyCount, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] DEVPROPERTY* pProperties, [In] SW_DEVICE_CREATE_CALLBACK pCallback, [In] [Optional] void* pContext, [Out] nint* phSwDevice);
void SwDeviceClose([In] HSWDEVICE hSwDevice);
HRESULT SwDeviceSetLifetime([In] HSWDEVICE hSwDevice, [In] SW_DEVICE_LIFETIME Lifetime);
HRESULT SwDeviceGetLifetime([In] HSWDEVICE hSwDevice, [Out] SW_DEVICE_LIFETIME* pLifetime);
HRESULT SwDevicePropertySet([In] HSWDEVICE hSwDevice, [In] uint cPropertyCount, [Const] [NativeArrayInfo(CountParamIndex = 1)] [In] DEVPROPERTY* pProperties);
HRESULT SwDeviceInterfaceRegister([In] HSWDEVICE hSwDevice, [Const] [In] Guid* pInterfaceClassGuid, [Const] [In] [Optional] PWSTR pszReferenceString, [In] uint cPropertyCount, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] DEVPROPERTY* pProperties, [In] BOOL fEnabled, [Out] [Optional] PWSTR* ppszDeviceInterfaceId);
void SwMemFree([In] void* pMem);
HRESULT SwDeviceInterfaceSetState([In] HSWDEVICE hSwDevice, [Const] [In] PWSTR pszDeviceInterfaceId, [In] BOOL fEnabled);
HRESULT SwDeviceInterfacePropertySet([In] HSWDEVICE hSwDevice, [Const] [In] PWSTR pszDeviceInterfaceId, [In] uint cPropertyCount, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] DEVPROPERTY* pProperties);
