uint joyConfigChanged([In] uint dwFlags);
uint timeGetSystemTime([MemorySize(BytesParamIndex = 1)] [Out] MMTIME* pmmt, [In] uint cbmmt);
uint timeGetTime();
uint timeGetDevCaps([MemorySize(BytesParamIndex = 1)] [Out] TIMECAPS* ptc, [In] uint cbtc);
uint timeBeginPeriod([In] uint uPeriod);
uint timeEndPeriod([In] uint uPeriod);
uint timeSetEvent([In] uint uDelay, [In] uint uResolution, [In] LPTIMECALLBACK fptc, [In] nuint dwUser, [In] uint fuEvent);
uint timeKillEvent([In] uint uTimerID);
BOOL sndPlaySoundA([Const] [In] [Optional] PSTR pszSound, [In] uint fuSound);
BOOL sndPlaySoundW([Const] [In] [Optional] PWSTR pszSound, [In] uint fuSound);
BOOL PlaySoundA([Const] [In] [Optional] PSTR pszSound, [In] [Optional] HINSTANCE hmod, [In] SND_FLAGS fdwSound);
BOOL PlaySoundW([Const] [In] [Optional] PWSTR pszSound, [In] [Optional] HINSTANCE hmod, [In] SND_FLAGS fdwSound);
uint waveOutGetNumDevs();
uint waveOutGetDevCapsA([In] nuint uDeviceID, [Out] WAVEOUTCAPSA* pwoc, [In] uint cbwoc);
uint waveOutGetDevCapsW([In] nuint uDeviceID, [Out] WAVEOUTCAPSW* pwoc, [In] uint cbwoc);
uint waveOutGetVolume([In] [Optional] HWAVEOUT hwo, [Out] uint* pdwVolume);
uint waveOutSetVolume([In] [Optional] HWAVEOUT hwo, [In] uint dwVolume);
uint waveOutGetErrorTextA([In] uint mmrError, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszText, [In] uint cchText);
uint waveOutGetErrorTextW([In] uint mmrError, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszText, [In] uint cchText);
uint waveOutOpen([Out] [Optional] HWAVEOUT* phwo, [In] uint uDeviceID, [In] WAVEFORMATEX* pwfx, [In] [Optional] nuint dwCallback, [In] [Optional] nuint dwInstance, [In] MIDI_WAVE_OPEN_TYPE fdwOpen);
uint waveOutClose([In] HWAVEOUT hwo);
uint waveOutPrepareHeader([In] HWAVEOUT hwo, [MemorySize(BytesParamIndex = 2)] [In] [Out] WAVEHDR* pwh, [In] uint cbwh);
uint waveOutUnprepareHeader([In] HWAVEOUT hwo, [MemorySize(BytesParamIndex = 2)] [In] [Out] WAVEHDR* pwh, [In] uint cbwh);
uint waveOutWrite([In] HWAVEOUT hwo, [MemorySize(BytesParamIndex = 2)] [In] [Out] WAVEHDR* pwh, [In] uint cbwh);
uint waveOutPause([In] HWAVEOUT hwo);
uint waveOutRestart([In] HWAVEOUT hwo);
uint waveOutReset([In] HWAVEOUT hwo);
uint waveOutBreakLoop([In] HWAVEOUT hwo);
uint waveOutGetPosition([In] HWAVEOUT hwo, [MemorySize(BytesParamIndex = 2)] [In] [Out] MMTIME* pmmt, [In] uint cbmmt);
uint waveOutGetPitch([In] HWAVEOUT hwo, [Out] uint* pdwPitch);
uint waveOutSetPitch([In] HWAVEOUT hwo, [In] uint dwPitch);
uint waveOutGetPlaybackRate([In] HWAVEOUT hwo, [Out] uint* pdwRate);
uint waveOutSetPlaybackRate([In] HWAVEOUT hwo, [In] uint dwRate);
uint waveOutGetID([In] HWAVEOUT hwo, [Out] uint* puDeviceID);
uint waveOutMessage([In] [Optional] HWAVEOUT hwo, [In] uint uMsg, [In] nuint dw1, [In] nuint dw2);
uint waveInGetNumDevs();
uint waveInGetDevCapsA([In] nuint uDeviceID, [MemorySize(BytesParamIndex = 2)] [Out] WAVEINCAPSA* pwic, [In] uint cbwic);
uint waveInGetDevCapsW([In] nuint uDeviceID, [MemorySize(BytesParamIndex = 2)] [Out] WAVEINCAPSW* pwic, [In] uint cbwic);
uint waveInGetErrorTextA([In] uint mmrError, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszText, [In] uint cchText);
uint waveInGetErrorTextW([In] uint mmrError, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszText, [In] uint cchText);
uint waveInOpen([Out] [Optional] HWAVEIN* phwi, [In] uint uDeviceID, [In] WAVEFORMATEX* pwfx, [In] [Optional] nuint dwCallback, [In] [Optional] nuint dwInstance, [In] MIDI_WAVE_OPEN_TYPE fdwOpen);
uint waveInClose([In] HWAVEIN hwi);
uint waveInPrepareHeader([In] HWAVEIN hwi, [MemorySize(BytesParamIndex = 2)] [In] [Out] WAVEHDR* pwh, [In] uint cbwh);
uint waveInUnprepareHeader([In] HWAVEIN hwi, [MemorySize(BytesParamIndex = 2)] [In] [Out] WAVEHDR* pwh, [In] uint cbwh);
uint waveInAddBuffer([In] HWAVEIN hwi, [MemorySize(BytesParamIndex = 2)] [In] [Out] WAVEHDR* pwh, [In] uint cbwh);
uint waveInStart([In] HWAVEIN hwi);
uint waveInStop([In] HWAVEIN hwi);
uint waveInReset([In] HWAVEIN hwi);
uint waveInGetPosition([In] HWAVEIN hwi, [MemorySize(BytesParamIndex = 2)] [In] [Out] MMTIME* pmmt, [In] uint cbmmt);
uint waveInGetID([In] HWAVEIN hwi, [In] uint* puDeviceID);
uint waveInMessage([In] [Optional] HWAVEIN hwi, [In] uint uMsg, [In] [Optional] nuint dw1, [In] [Optional] nuint dw2);
uint midiOutGetNumDevs();
uint midiStreamOpen([Out] HMIDISTRM* phms, [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] uint* puDeviceID, [In] uint cMidi, [In] [Optional] nuint dwCallback, [In] [Optional] nuint dwInstance, [In] uint fdwOpen);
uint midiStreamClose([In] HMIDISTRM hms);
uint midiStreamProperty([In] HMIDISTRM hms, [In] [Out] byte* lppropdata, [In] uint dwProperty);
uint midiStreamPosition([In] HMIDISTRM hms, [MemorySize(BytesParamIndex = 2)] [Out] MMTIME* lpmmt, [In] uint cbmmt);
uint midiStreamOut([In] HMIDISTRM hms, [MemorySize(BytesParamIndex = 2)] [Out] MIDIHDR* pmh, [In] uint cbmh);
uint midiStreamPause([In] HMIDISTRM hms);
uint midiStreamRestart([In] HMIDISTRM hms);
uint midiStreamStop([In] HMIDISTRM hms);
uint midiConnect([In] HMIDI hmi, [In] HMIDIOUT hmo, [In] [Optional] void* pReserved);
uint midiDisconnect([In] HMIDI hmi, [In] HMIDIOUT hmo, [In] [Optional] void* pReserved);
uint midiOutGetDevCapsA([In] nuint uDeviceID, [MemorySize(BytesParamIndex = 2)] [Out] MIDIOUTCAPSA* pmoc, [In] uint cbmoc);
uint midiOutGetDevCapsW([In] nuint uDeviceID, [MemorySize(BytesParamIndex = 2)] [Out] MIDIOUTCAPSW* pmoc, [In] uint cbmoc);
uint midiOutGetVolume([In] [Optional] HMIDIOUT hmo, [Out] uint* pdwVolume);
uint midiOutSetVolume([In] [Optional] HMIDIOUT hmo, [In] uint dwVolume);
uint midiOutGetErrorTextA([In] uint mmrError, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszText, [In] uint cchText);
uint midiOutGetErrorTextW([In] uint mmrError, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszText, [In] uint cchText);
uint midiOutOpen([Out] HMIDIOUT* phmo, [In] uint uDeviceID, [In] [Optional] nuint dwCallback, [In] [Optional] nuint dwInstance, [In] MIDI_WAVE_OPEN_TYPE fdwOpen);
uint midiOutClose([In] HMIDIOUT hmo);
uint midiOutPrepareHeader([In] HMIDIOUT hmo, [MemorySize(BytesParamIndex = 2)] [In] [Out] MIDIHDR* pmh, [In] uint cbmh);
uint midiOutUnprepareHeader([In] HMIDIOUT hmo, [MemorySize(BytesParamIndex = 2)] [In] [Out] MIDIHDR* pmh, [In] uint cbmh);
uint midiOutShortMsg([In] HMIDIOUT hmo, [In] uint dwMsg);
uint midiOutLongMsg([In] HMIDIOUT hmo, [MemorySize(BytesParamIndex = 2)] [In] MIDIHDR* pmh, [In] uint cbmh);
uint midiOutReset([In] HMIDIOUT hmo);
uint midiOutCachePatches([In] HMIDIOUT hmo, [In] uint uBank, [NativeArrayInfo(CountConst = 128)] [In] ushort* pwpa, [In] uint fuCache);
uint midiOutCacheDrumPatches([In] HMIDIOUT hmo, [In] uint uPatch, [NativeArrayInfo(CountConst = 128)] [In] ushort* pwkya, [In] uint fuCache);
uint midiOutGetID([In] HMIDIOUT hmo, [Out] uint* puDeviceID);
uint midiOutMessage([In] [Optional] HMIDIOUT hmo, [In] uint uMsg, [In] [Optional] nuint dw1, [In] [Optional] nuint dw2);
uint midiInGetNumDevs();
uint midiInGetDevCapsA([In] nuint uDeviceID, [MemorySize(BytesParamIndex = 2)] [Out] MIDIINCAPSA* pmic, [In] uint cbmic);
uint midiInGetDevCapsW([In] nuint uDeviceID, [MemorySize(BytesParamIndex = 2)] [Out] MIDIINCAPSW* pmic, [In] uint cbmic);
uint midiInGetErrorTextA([In] uint mmrError, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszText, [In] uint cchText);
uint midiInGetErrorTextW([In] uint mmrError, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszText, [In] uint cchText);
uint midiInOpen([Out] HMIDIIN* phmi, [In] uint uDeviceID, [In] [Optional] nuint dwCallback, [In] [Optional] nuint dwInstance, [In] MIDI_WAVE_OPEN_TYPE fdwOpen);
uint midiInClose([In] HMIDIIN hmi);
uint midiInPrepareHeader([In] HMIDIIN hmi, [MemorySize(BytesParamIndex = 2)] [In] [Out] MIDIHDR* pmh, [In] uint cbmh);
uint midiInUnprepareHeader([In] HMIDIIN hmi, [MemorySize(BytesParamIndex = 2)] [In] [Out] MIDIHDR* pmh, [In] uint cbmh);
uint midiInAddBuffer([In] HMIDIIN hmi, [MemorySize(BytesParamIndex = 2)] [Out] MIDIHDR* pmh, [In] uint cbmh);
uint midiInStart([In] HMIDIIN hmi);
uint midiInStop([In] HMIDIIN hmi);
uint midiInReset([In] HMIDIIN hmi);
uint midiInGetID([In] HMIDIIN hmi, [Out] uint* puDeviceID);
uint midiInMessage([In] [Optional] HMIDIIN hmi, [In] uint uMsg, [In] [Optional] nuint dw1, [In] [Optional] nuint dw2);
uint auxGetNumDevs();
uint auxGetDevCapsA([In] nuint uDeviceID, [MemorySize(BytesParamIndex = 2)] [Out] AUXCAPSA* pac, [In] uint cbac);
uint auxGetDevCapsW([In] nuint uDeviceID, [MemorySize(BytesParamIndex = 2)] [Out] AUXCAPSW* pac, [In] uint cbac);
uint auxSetVolume([In] uint uDeviceID, [In] uint dwVolume);
uint auxGetVolume([In] uint uDeviceID, [Out] uint* pdwVolume);
uint auxOutMessage([In] uint uDeviceID, [In] uint uMsg, [In] [Optional] nuint dw1, [In] [Optional] nuint dw2);
uint mixerGetNumDevs();
uint mixerGetDevCapsA([In] nuint uMxId, [MemorySize(BytesParamIndex = 2)] [Out] MIXERCAPSA* pmxcaps, [In] uint cbmxcaps);
uint mixerGetDevCapsW([In] nuint uMxId, [MemorySize(BytesParamIndex = 2)] [Out] MIXERCAPSW* pmxcaps, [In] uint cbmxcaps);
uint mixerOpen([Out] [Optional] nint* phmx, [In] uint uMxId, [In] [Optional] nuint dwCallback, [In] [Optional] nuint dwInstance, [In] uint fdwOpen);
uint mixerClose([In] HMIXER hmx);
uint mixerMessage([In] [Optional] HMIXER hmx, [In] uint uMsg, [In] [Optional] nuint dwParam1, [In] [Optional] nuint dwParam2);
uint mixerGetLineInfoA([In] [Optional] HMIXEROBJ hmxobj, [In] [Out] MIXERLINEA* pmxl, [In] uint fdwInfo);
uint mixerGetLineInfoW([In] [Optional] HMIXEROBJ hmxobj, [In] [Out] MIXERLINEW* pmxl, [In] uint fdwInfo);
uint mixerGetID([In] [Optional] HMIXEROBJ hmxobj, [Out] uint* puMxId, [In] uint fdwId);
uint mixerGetLineControlsA([In] [Optional] HMIXEROBJ hmxobj, [In] [Out] MIXERLINECONTROLSA* pmxlc, [In] uint fdwControls);
uint mixerGetLineControlsW([In] [Optional] HMIXEROBJ hmxobj, [In] [Out] MIXERLINECONTROLSW* pmxlc, [In] uint fdwControls);
uint mixerGetControlDetailsA([In] [Optional] HMIXEROBJ hmxobj, [In] [Out] MIXERCONTROLDETAILS* pmxcd, [In] uint fdwDetails);
uint mixerGetControlDetailsW([In] [Optional] HMIXEROBJ hmxobj, [In] [Out] MIXERCONTROLDETAILS* pmxcd, [In] uint fdwDetails);
uint mixerSetControlDetails([In] [Optional] HMIXEROBJ hmxobj, [In] MIXERCONTROLDETAILS* pmxcd, [In] uint fdwDetails);
uint mciSendCommandA([In] uint mciId, [In] uint uMsg, [In] [Optional] nuint dwParam1, [In] [Optional] nuint dwParam2);
uint mciSendCommandW([In] uint mciId, [In] uint uMsg, [In] [Optional] nuint dwParam1, [In] [Optional] nuint dwParam2);
uint mciSendStringA([Const] [In] PSTR lpstrCommand, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR lpstrReturnString, [In] uint uReturnLength, [In] [Optional] HWND hwndCallback);
uint mciSendStringW([Const] [In] PWSTR lpstrCommand, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR lpstrReturnString, [In] uint uReturnLength, [In] [Optional] HWND hwndCallback);
uint mciGetDeviceIDA([Const] [In] PSTR pszDevice);
uint mciGetDeviceIDW([Const] [In] PWSTR pszDevice);
uint mciGetDeviceIDFromElementIDA([In] uint dwElementID, [Const] [In] PSTR lpstrType);
uint mciGetDeviceIDFromElementIDW([In] uint dwElementID, [Const] [In] PWSTR lpstrType);
BOOL mciGetErrorStringA([In] uint mcierr, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszText, [In] uint cchText);
BOOL mciGetErrorStringW([In] uint mcierr, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszText, [In] uint cchText);
BOOL mciSetYieldProc([In] uint mciId, [In] [Optional] YIELDPROC fpYieldProc, [In] uint dwYieldData);
HTASK mciGetCreatorTask([In] uint mciId);
YIELDPROC mciGetYieldProc([In] uint mciId, [In] uint* pdwYieldData);
nuint mciGetDriverData([In] uint wDeviceID);
uint mciLoadCommandResource([In] HANDLE hInstance, [Const] [In] PWSTR lpResName, [In] uint wType);
BOOL mciSetDriverData([In] uint wDeviceID, [In] nuint dwData);
uint mciDriverYield([In] uint wDeviceID);
BOOL mciDriverNotify([In] HANDLE hwndCallback, [In] uint wDeviceID, [In] uint uStatus);
BOOL mciFreeCommandResource([In] uint wTable);
LRESULT CloseDriver([In] HDRVR hDriver, [In] LPARAM lParam1, [In] LPARAM lParam2);
HDRVR OpenDriver([Const] [In] PWSTR szDriverName, [Const] [In] PWSTR szSectionName, [In] LPARAM lParam2);
LRESULT SendDriverMessage([In] HDRVR hDriver, [In] uint message, [In] LPARAM lParam1, [In] LPARAM lParam2);
HINSTANCE DrvGetModuleHandle([In] HDRVR hDriver);
HINSTANCE GetDriverModuleHandle([In] HDRVR hDriver);
LRESULT DefDriverProc([In] nuint dwDriverIdentifier, [In] HDRVR hdrvr, [In] uint uMsg, [In] LPARAM lParam1, [In] LPARAM lParam2);
BOOL DriverCallback([In] nuint dwCallback, [In] uint dwFlags, [In] HDRVR hDevice, [In] uint dwMsg, [In] nuint dwUser, [In] nuint dwParam1, [In] nuint dwParam2);
uint mmDrvInstall([In] HDRVR hDriver, [Const] [In] PWSTR wszDrvEntry, [In] DRIVERMSGPROC drvMessage, [In] uint wFlags);
uint mmioStringToFOURCCA([Const] [In] PSTR sz, [In] uint uFlags);
uint mmioStringToFOURCCW([Const] [In] PWSTR sz, [In] uint uFlags);
LPMMIOPROC mmioInstallIOProcA([In] uint fccIOProc, [In] [Optional] LPMMIOPROC pIOProc, [In] uint dwFlags);
LPMMIOPROC mmioInstallIOProcW([In] uint fccIOProc, [In] [Optional] LPMMIOPROC pIOProc, [In] uint dwFlags);
HMMIO mmioOpenA([NativeArrayInfo(CountConst = 128)] [In] [Out] [Optional] PSTR pszFileName, [In] [Out] [Optional] MMIOINFO* pmmioinfo, [In] uint fdwOpen);
HMMIO mmioOpenW([NativeArrayInfo(CountConst = 128)] [In] [Out] [Optional] PWSTR pszFileName, [In] [Out] [Optional] MMIOINFO* pmmioinfo, [In] uint fdwOpen);
uint mmioRenameA([Const] [In] PSTR pszFileName, [Const] [In] PSTR pszNewFileName, [In] [Optional] MMIOINFO* pmmioinfo, [In] uint fdwRename);
uint mmioRenameW([Const] [In] PWSTR pszFileName, [Const] [In] PWSTR pszNewFileName, [In] [Optional] MMIOINFO* pmmioinfo, [In] uint fdwRename);
uint mmioClose([In] HMMIO hmmio, [In] uint fuClose);
int mmioRead([In] HMMIO hmmio, [MemorySize(BytesParamIndex = 2)] [Out] sbyte* pch, [In] int cch);
int mmioWrite([In] HMMIO hmmio, [Const] [MemorySize(BytesParamIndex = 2)] [In] PSTR pch, [In] int cch);
int mmioSeek([In] HMMIO hmmio, [In] int lOffset, [In] int iOrigin);
uint mmioGetInfo([In] HMMIO hmmio, [Out] MMIOINFO* pmmioinfo, [In] uint fuInfo);
uint mmioSetInfo([In] HMMIO hmmio, [In] MMIOINFO* pmmioinfo, [In] uint fuInfo);
uint mmioSetBuffer([In] HMMIO hmmio, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR pchBuffer, [In] int cchBuffer, [In] uint fuBuffer);
uint mmioFlush([In] HMMIO hmmio, [In] uint fuFlush);
uint mmioAdvance([In] HMMIO hmmio, [In] [Optional] MMIOINFO* pmmioinfo, [In] uint fuAdvance);
LRESULT mmioSendMessage([In] HMMIO hmmio, [In] uint uMsg, [In] [Optional] LPARAM lParam1, [In] [Optional] LPARAM lParam2);
uint mmioDescend([In] HMMIO hmmio, [In] [Out] MMCKINFO* pmmcki, [Const] [In] [Optional] MMCKINFO* pmmckiParent, [In] uint fuDescend);
uint mmioAscend([In] HMMIO hmmio, [In] MMCKINFO* pmmcki, [In] uint fuAscend);
uint mmioCreateChunk([In] HMMIO hmmio, [In] MMCKINFO* pmmcki, [In] uint fuCreate);
uint joyGetPosEx([In] uint uJoyID, [Out] JOYINFOEX* pji);
uint joyGetNumDevs();
uint joyGetDevCapsA([In] nuint uJoyID, [MemorySize(BytesParamIndex = 2)] [Out] JOYCAPSA* pjc, [In] uint cbjc);
uint joyGetDevCapsW([In] nuint uJoyID, [MemorySize(BytesParamIndex = 2)] [Out] JOYCAPSW* pjc, [In] uint cbjc);
uint joyGetPos([In] uint uJoyID, [Out] JOYINFO* pji);
uint joyGetThreshold([In] uint uJoyID, [Out] uint* puThreshold);
uint joyReleaseCapture([In] uint uJoyID);
uint joySetCapture([In] HWND hwnd, [In] uint uJoyID, [In] uint uPeriod, [In] BOOL fChanged);
uint joySetThreshold([In] uint uJoyID, [In] uint uThreshold);
uint mmTaskCreate([In] LPTASKCALLBACK lpfn, [In] [Out] HANDLE* lph, [In] nuint dwInst);
void mmTaskBlock([In] uint h);
BOOL mmTaskSignal([In] uint h);
void mmTaskYield();
uint mmGetCurrentTask();
