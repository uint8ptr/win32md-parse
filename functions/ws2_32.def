int WSCEnumProtocols32([In] [Optional] int* lpiProtocols, [MemorySize(BytesParamIndex = 2)] [Out] WSAPROTOCOL_INFOW* lpProtocolBuffer, [In] [Out] uint* lpdwBufferLength, [Out] int* lpErrno);
int WSCDeinstallProvider32([In] Guid* lpProviderId, [Out] int* lpErrno);
int WSCInstallProvider64_32([In] Guid* lpProviderId, [Const] [In] PWSTR lpszProviderDllPath, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] WSAPROTOCOL_INFOW* lpProtocolInfoList, [In] uint dwNumberOfEntries, [Out] int* lpErrno);
int WSCGetProviderPath32([In] Guid* lpProviderId, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpszProviderDllPath, [In] [Out] int* lpProviderDllPathLen, [Out] int* lpErrno);
int WSCUpdateProvider32([In] Guid* lpProviderId, [Const] [In] PWSTR lpszProviderDllPath, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] WSAPROTOCOL_INFOW* lpProtocolInfoList, [In] uint dwNumberOfEntries, [Out] int* lpErrno);
int WSCSetProviderInfo32([In] Guid* lpProviderId, [In] WSC_PROVIDER_INFO_TYPE InfoType, [MemorySize(BytesParamIndex = 3)] [In] byte* Info, [In] nuint InfoSize, [In] uint Flags, [Out] int* lpErrno);
int WSCGetProviderInfo32([In] Guid* lpProviderId, [In] WSC_PROVIDER_INFO_TYPE InfoType, [MemorySize(BytesParamIndex = 3)] [Out] byte* Info, [In] [Out] nuint* InfoSize, [In] uint Flags, [Out] int* lpErrno);
int WSCEnumNameSpaceProviders32([In] [Out] uint* lpdwBufferLength, [MemorySize(BytesParamIndex = 0)] [Out] WSANAMESPACE_INFOW* lpnspBuffer);
int WSCEnumNameSpaceProvidersEx32([In] [Out] uint* lpdwBufferLength, [MemorySize(BytesParamIndex = 0)] [Out] WSANAMESPACE_INFOEXW* lpnspBuffer);
int WSCInstallNameSpace32([In] PWSTR lpszIdentifier, [In] PWSTR lpszPathName, [In] uint dwNameSpace, [In] uint dwVersion, [In] Guid* lpProviderId);
int WSCInstallNameSpaceEx32([In] PWSTR lpszIdentifier, [In] PWSTR lpszPathName, [In] uint dwNameSpace, [In] uint dwVersion, [In] Guid* lpProviderId, [In] BLOB* lpProviderSpecific);
int WSCUnInstallNameSpace32([In] Guid* lpProviderId);
int WSCEnableNSProvider32([In] Guid* lpProviderId, [In] BOOL fEnable);
int WSCInstallProviderAndChains64_32([In] Guid* lpProviderId, [Const] [In] PWSTR lpszProviderDllPath, [Const] [In] PWSTR lpszProviderDllPath32, [Const] [In] PWSTR lpszLspName, [In] uint dwServiceFlags, [NativeArrayInfo(CountParamIndex = 6)] [In] [Out] WSAPROTOCOL_INFOW* lpProtocolInfoList, [In] uint dwNumberOfEntries, [Out] [Optional] uint* lpdwCatalogEntryId, [Out] int* lpErrno);
int WSCWriteProviderOrder32([In] [Out] uint* lpwdCatalogEntryId, [In] uint dwNumberOfEntries);
int WSCWriteNameSpaceOrder32([In] [Out] Guid* lpProviderId, [In] uint dwNumberOfEntries);
int __WSAFDIsSet([In] SOCKET fd, [In] [Out] FD_SET* param1);
SOCKET accept([In] SOCKET s, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] SOCKADDR* addr, [In] [Out] [Optional] int* addrlen);
int bind([In] SOCKET s, [Const] [MemorySize(BytesParamIndex = 2)] [In] SOCKADDR* name, [In] int namelen);
int closesocket([In] SOCKET s);
int connect([In] SOCKET s, [Const] [MemorySize(BytesParamIndex = 2)] [In] SOCKADDR* name, [In] int namelen);
int ioctlsocket([In] SOCKET s, [In] int cmd, [In] [Out] uint* argp);
int getpeername([In] SOCKET s, [MemorySize(BytesParamIndex = 2)] [Out] SOCKADDR* name, [In] [Out] int* namelen);
int getsockname([In] SOCKET s, [MemorySize(BytesParamIndex = 2)] [Out] SOCKADDR* name, [In] [Out] int* namelen);
int getsockopt([In] SOCKET s, [In] int level, [In] int optname, [MemorySize(BytesParamIndex = 4)] [Out] PSTR optval, [In] [Out] int* optlen);
uint htonl([In] uint hostlong);
ushort htons([In] ushort hostshort);
uint inet_addr([Const] [In] PSTR cp);
PSTR inet_ntoa([In] IN_ADDR in);
int listen([In] SOCKET s, [In] int backlog);
uint ntohl([In] uint netlong);
ushort ntohs([In] ushort netshort);
int recv([In] SOCKET s, [MemorySize(BytesParamIndex = 2)] [Out] PSTR buf, [In] int len, [In] SEND_RECV_FLAGS flags);
int recvfrom([In] SOCKET s, [MemorySize(BytesParamIndex = 2)] [Out] PSTR buf, [In] int len, [In] int flags, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] SOCKADDR* from, [In] [Out] [Optional] int* fromlen);
int select([In] int nfds, [In] [Out] [Optional] FD_SET* readfds, [In] [Out] [Optional] FD_SET* writefds, [In] [Out] [Optional] FD_SET* exceptfds, [Const] [In] [Optional] TIMEVAL* timeout);
int send([In] SOCKET s, [Const] [MemorySize(BytesParamIndex = 2)] [In] PSTR buf, [In] int len, [In] SEND_RECV_FLAGS flags);
int sendto([In] SOCKET s, [Const] [MemorySize(BytesParamIndex = 2)] [In] PSTR buf, [In] int len, [In] int flags, [Const] [MemorySize(BytesParamIndex = 5)] [In] SOCKADDR* to, [In] int tolen);
int setsockopt([In] SOCKET s, [In] int level, [In] int optname, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] PSTR optval, [In] int optlen);
int shutdown([In] SOCKET s, [In] int how);
SOCKET socket([In] int af, [In] int type, [In] int protocol);
HOSTENT* gethostbyaddr([Const] [MemorySize(BytesParamIndex = 1)] [In] PSTR addr, [In] int len, [In] int type);
HOSTENT* gethostbyname([Const] [In] PSTR name);
int gethostname([MemorySize(BytesParamIndex = 1)] [Out] PSTR name, [In] int namelen);
int GetHostNameW([NativeArrayInfo(CountParamIndex = 1)] [Out] PWSTR name, [In] int namelen);
SERVENT* getservbyport([In] int port, [Const] [In] [Optional] PSTR proto);
SERVENT* getservbyname([Const] [In] PSTR name, [Const] [In] [Optional] PSTR proto);
PROTOENT* getprotobynumber([In] int number);
PROTOENT* getprotobyname([Const] [In] PSTR name);
int WSAStartup([In] ushort wVersionRequested, [Out] WSADATA* lpWSAData);
int WSACleanup();
void WSASetLastError([In] int iError);
WSA_ERROR WSAGetLastError();
BOOL WSAIsBlocking();
int WSAUnhookBlockingHook();
FARPROC WSASetBlockingHook([In] FARPROC lpBlockFunc);
int WSACancelBlockingCall();
HANDLE WSAAsyncGetServByName([In] HWND hWnd, [In] uint wMsg, [Const] [In] PSTR name, [Const] [In] PSTR proto, [MemorySize(BytesParamIndex = 5)] [Out] PSTR buf, [In] int buflen);
HANDLE WSAAsyncGetServByPort([In] HWND hWnd, [In] uint wMsg, [In] int port, [Const] [In] PSTR proto, [MemorySize(BytesParamIndex = 5)] [Out] PSTR buf, [In] int buflen);
HANDLE WSAAsyncGetProtoByName([In] HWND hWnd, [In] uint wMsg, [Const] [In] PSTR name, [MemorySize(BytesParamIndex = 4)] [Out] PSTR buf, [In] int buflen);
HANDLE WSAAsyncGetProtoByNumber([In] HWND hWnd, [In] uint wMsg, [In] int number, [MemorySize(BytesParamIndex = 4)] [Out] PSTR buf, [In] int buflen);
HANDLE WSAAsyncGetHostByName([In] HWND hWnd, [In] uint wMsg, [Const] [In] PSTR name, [MemorySize(BytesParamIndex = 4)] [Out] PSTR buf, [In] int buflen);
HANDLE WSAAsyncGetHostByAddr([In] HWND hWnd, [In] uint wMsg, [Const] [MemorySize(BytesParamIndex = 3)] [In] PSTR addr, [In] int len, [In] int type, [MemorySize(BytesParamIndex = 6)] [Out] PSTR buf, [In] int buflen);
int WSACancelAsyncRequest([In] HANDLE hAsyncTaskHandle);
int WSAAsyncSelect([In] SOCKET s, [In] HWND hWnd, [In] uint wMsg, [In] int lEvent);
SOCKET WSAAccept([In] SOCKET s, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] SOCKADDR* addr, [In] [Out] [Optional] int* addrlen, [In] [Optional] LPCONDITIONPROC lpfnCondition, [In] [Optional] nuint dwCallbackData);
BOOL WSACloseEvent([In] HANDLE hEvent);
int WSAConnect([In] SOCKET s, [Const] [MemorySize(BytesParamIndex = 2)] [In] SOCKADDR* name, [In] int namelen, [In] [Optional] WSABUF* lpCallerData, [Out] [Optional] WSABUF* lpCalleeData, [In] [Optional] QOS* lpSQOS, [In] [Optional] QOS* lpGQOS);
BOOL WSAConnectByNameW([In] SOCKET s, [In] PWSTR nodename, [In] PWSTR servicename, [In] [Out] [Optional] uint* LocalAddressLength, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] SOCKADDR* LocalAddress, [In] [Out] [Optional] uint* RemoteAddressLength, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] SOCKADDR* RemoteAddress, [Const] [In] [Optional] TIMEVAL* timeout, [Reserved] [In] [Out] OVERLAPPED* Reserved);
BOOL WSAConnectByNameA([In] SOCKET s, [Const] [In] PSTR nodename, [Const] [In] PSTR servicename, [In] [Out] [Optional] uint* LocalAddressLength, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] SOCKADDR* LocalAddress, [In] [Out] [Optional] uint* RemoteAddressLength, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] SOCKADDR* RemoteAddress, [Const] [In] [Optional] TIMEVAL* timeout, [Reserved] [In] [Out] OVERLAPPED* Reserved);
BOOL WSAConnectByList([In] SOCKET s, [In] SOCKET_ADDRESS_LIST* SocketAddress, [In] [Out] [Optional] uint* LocalAddressLength, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] SOCKADDR* LocalAddress, [In] [Out] [Optional] uint* RemoteAddressLength, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] SOCKADDR* RemoteAddress, [Const] [In] [Optional] TIMEVAL* timeout, [Reserved] [In] [Out] OVERLAPPED* Reserved);
HANDLE WSACreateEvent();
int WSADuplicateSocketA([In] SOCKET s, [In] uint dwProcessId, [Out] WSAPROTOCOL_INFOA* lpProtocolInfo);
int WSADuplicateSocketW([In] SOCKET s, [In] uint dwProcessId, [Out] WSAPROTOCOL_INFOW* lpProtocolInfo);
int WSAEnumNetworkEvents([In] SOCKET s, [In] HANDLE hEventObject, [Out] WSANETWORKEVENTS* lpNetworkEvents);
int WSAEnumProtocolsA([In] [Optional] int* lpiProtocols, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] WSAPROTOCOL_INFOA* lpProtocolBuffer, [In] [Out] uint* lpdwBufferLength);
int WSAEnumProtocolsW([In] [Optional] int* lpiProtocols, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] WSAPROTOCOL_INFOW* lpProtocolBuffer, [In] [Out] uint* lpdwBufferLength);
int WSAEventSelect([In] SOCKET s, [In] [Optional] HANDLE hEventObject, [In] int lNetworkEvents);
BOOL WSAGetOverlappedResult([In] SOCKET s, [In] OVERLAPPED* lpOverlapped, [Out] uint* lpcbTransfer, [In] BOOL fWait, [Out] uint* lpdwFlags);
BOOL WSAGetQOSByName([In] SOCKET s, [In] WSABUF* lpQOSName, [Out] QOS* lpQOS);
int WSAHtonl([In] SOCKET s, [In] uint hostlong, [Out] uint* lpnetlong);
int WSAHtons([In] SOCKET s, [In] ushort hostshort, [Out] ushort* lpnetshort);
int WSAIoctl([In] SOCKET s, [In] uint dwIoControlCode, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* lpvInBuffer, [In] uint cbInBuffer, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] void* lpvOutBuffer, [In] uint cbOutBuffer, [Out] uint* lpcbBytesReturned, [In] [Out] [Optional] OVERLAPPED* lpOverlapped, [In] [Optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
SOCKET WSAJoinLeaf([In] SOCKET s, [Const] [MemorySize(BytesParamIndex = 2)] [In] SOCKADDR* name, [In] int namelen, [In] [Optional] WSABUF* lpCallerData, [Out] [Optional] WSABUF* lpCalleeData, [In] [Optional] QOS* lpSQOS, [In] [Optional] QOS* lpGQOS, [In] uint dwFlags);
int WSANtohl([In] SOCKET s, [In] uint netlong, [Out] uint* lphostlong);
int WSANtohs([In] SOCKET s, [In] ushort netshort, [Out] ushort* lphostshort);
int WSARecv([In] SOCKET s, [NativeArrayInfo(CountParamIndex = 2)] [In] WSABUF* lpBuffers, [In] uint dwBufferCount, [Out] [Optional] uint* lpNumberOfBytesRecvd, [In] [Out] uint* lpFlags, [In] [Out] [Optional] OVERLAPPED* lpOverlapped, [In] [Optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
int WSARecvDisconnect([In] SOCKET s, [In] [Optional] WSABUF* lpInboundDisconnectData);
int WSARecvFrom([In] SOCKET s, [NativeArrayInfo(CountParamIndex = 2)] [In] WSABUF* lpBuffers, [In] uint dwBufferCount, [Out] [Optional] uint* lpNumberOfBytesRecvd, [In] [Out] uint* lpFlags, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] SOCKADDR* lpFrom, [In] [Out] [Optional] int* lpFromlen, [In] [Out] [Optional] OVERLAPPED* lpOverlapped, [In] [Optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
BOOL WSAResetEvent([In] HANDLE hEvent);
int WSASend([In] SOCKET s, [NativeArrayInfo(CountParamIndex = 2)] [In] WSABUF* lpBuffers, [In] uint dwBufferCount, [Out] [Optional] uint* lpNumberOfBytesSent, [In] uint dwFlags, [In] [Out] [Optional] OVERLAPPED* lpOverlapped, [In] [Optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
int WSASendMsg([In] SOCKET Handle, [In] WSAMSG* lpMsg, [In] uint dwFlags, [Out] [Optional] uint* lpNumberOfBytesSent, [In] [Out] [Optional] OVERLAPPED* lpOverlapped, [In] [Optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
int WSASendDisconnect([In] SOCKET s, [In] [Optional] WSABUF* lpOutboundDisconnectData);
int WSASendTo([In] SOCKET s, [NativeArrayInfo(CountParamIndex = 2)] [In] WSABUF* lpBuffers, [In] uint dwBufferCount, [Out] [Optional] uint* lpNumberOfBytesSent, [In] uint dwFlags, [Const] [MemorySize(BytesParamIndex = 6)] [In] [Optional] SOCKADDR* lpTo, [In] int iTolen, [In] [Out] [Optional] OVERLAPPED* lpOverlapped, [In] [Optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
BOOL WSASetEvent([In] HANDLE hEvent);
SOCKET WSASocketA([In] int af, [In] int type, [In] int protocol, [In] [Optional] WSAPROTOCOL_INFOA* lpProtocolInfo, [In] uint g, [In] uint dwFlags);
SOCKET WSASocketW([In] int af, [In] int type, [In] int protocol, [In] [Optional] WSAPROTOCOL_INFOW* lpProtocolInfo, [In] uint g, [In] uint dwFlags);
uint WSAWaitForMultipleEvents([In] uint cEvents, [Const] [NativeArrayInfo(CountParamIndex = 0)] [In] HANDLE* lphEvents, [In] BOOL fWaitAll, [In] uint dwTimeout, [In] BOOL fAlertable);
int WSAAddressToStringA([MemorySize(BytesParamIndex = 1)] [In] SOCKADDR* lpsaAddress, [In] uint dwAddressLength, [In] [Optional] WSAPROTOCOL_INFOA* lpProtocolInfo, [NativeArrayInfo(CountParamIndex = 4)] [Out] PSTR lpszAddressString, [In] [Out] uint* lpdwAddressStringLength);
int WSAAddressToStringW([MemorySize(BytesParamIndex = 1)] [In] SOCKADDR* lpsaAddress, [In] uint dwAddressLength, [In] [Optional] WSAPROTOCOL_INFOW* lpProtocolInfo, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR lpszAddressString, [In] [Out] uint* lpdwAddressStringLength);
int WSAStringToAddressA([In] PSTR AddressString, [In] int AddressFamily, [In] [Optional] WSAPROTOCOL_INFOA* lpProtocolInfo, [MemorySize(BytesParamIndex = 4)] [Out] SOCKADDR* lpAddress, [In] [Out] int* lpAddressLength);
int WSAStringToAddressW([In] PWSTR AddressString, [In] int AddressFamily, [In] [Optional] WSAPROTOCOL_INFOW* lpProtocolInfo, [MemorySize(BytesParamIndex = 4)] [Out] SOCKADDR* lpAddress, [In] [Out] int* lpAddressLength);
int WSALookupServiceBeginA([In] WSAQUERYSETA* lpqsRestrictions, [In] uint dwControlFlags, [Out] HANDLE* lphLookup);
int WSALookupServiceBeginW([In] WSAQUERYSETW* lpqsRestrictions, [In] uint dwControlFlags, [Out] HANDLE* lphLookup);
int WSALookupServiceNextA([In] HANDLE hLookup, [In] uint dwControlFlags, [In] [Out] uint* lpdwBufferLength, [MemorySize(BytesParamIndex = 2)] [Out] WSAQUERYSETA* lpqsResults);
int WSALookupServiceNextW([In] HANDLE hLookup, [In] uint dwControlFlags, [In] [Out] uint* lpdwBufferLength, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] WSAQUERYSETW* lpqsResults);
int WSANSPIoctl([In] HANDLE hLookup, [In] uint dwControlCode, [MemorySize(BytesParamIndex = 3)] [In] [Optional] void* lpvInBuffer, [In] uint cbInBuffer, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] void* lpvOutBuffer, [In] uint cbOutBuffer, [Out] uint* lpcbBytesReturned, [In] [Optional] WSACOMPLETION* lpCompletion);
int WSALookupServiceEnd([In] HANDLE hLookup);
int WSAInstallServiceClassA([In] WSASERVICECLASSINFOA* lpServiceClassInfo);
int WSAInstallServiceClassW([In] WSASERVICECLASSINFOW* lpServiceClassInfo);
int WSARemoveServiceClass([In] Guid* lpServiceClassId);
int WSAGetServiceClassInfoA([In] Guid* lpProviderId, [In] Guid* lpServiceClassId, [In] [Out] uint* lpdwBufSize, [MemorySize(BytesParamIndex = 2)] [Out] WSASERVICECLASSINFOA* lpServiceClassInfo);
int WSAGetServiceClassInfoW([In] Guid* lpProviderId, [In] Guid* lpServiceClassId, [In] [Out] uint* lpdwBufSize, [MemorySize(BytesParamIndex = 2)] [Out] WSASERVICECLASSINFOW* lpServiceClassInfo);
int WSAEnumNameSpaceProvidersA([In] [Out] uint* lpdwBufferLength, [MemorySize(BytesParamIndex = 0)] [Out] WSANAMESPACE_INFOA* lpnspBuffer);
int WSAEnumNameSpaceProvidersW([In] [Out] uint* lpdwBufferLength, [MemorySize(BytesParamIndex = 0)] [Out] WSANAMESPACE_INFOW* lpnspBuffer);
int WSAEnumNameSpaceProvidersExA([In] [Out] uint* lpdwBufferLength, [MemorySize(BytesParamIndex = 0)] [Out] WSANAMESPACE_INFOEXA* lpnspBuffer);
int WSAEnumNameSpaceProvidersExW([In] [Out] uint* lpdwBufferLength, [MemorySize(BytesParamIndex = 0)] [Out] WSANAMESPACE_INFOEXW* lpnspBuffer);
int WSAGetServiceClassNameByClassIdA([In] Guid* lpServiceClassId, [MemorySize(BytesParamIndex = 2)] [Out] PSTR lpszServiceClassName, [In] [Out] uint* lpdwBufferLength);
int WSAGetServiceClassNameByClassIdW([In] Guid* lpServiceClassId, [MemorySize(BytesParamIndex = 2)] [Out] PWSTR lpszServiceClassName, [In] [Out] uint* lpdwBufferLength);
int WSASetServiceA([In] WSAQUERYSETA* lpqsRegInfo, [In] WSAESETSERVICEOP essoperation, [In] uint dwControlFlags);
int WSASetServiceW([In] WSAQUERYSETW* lpqsRegInfo, [In] WSAESETSERVICEOP essoperation, [In] uint dwControlFlags);
int WSAProviderConfigChange([In] [Out] HANDLE* lpNotificationHandle, [In] [Out] [Optional] OVERLAPPED* lpOverlapped, [In] [Optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
int WSAPoll([In] [Out] WSAPOLLFD* fdArray, [In] uint fds, [In] int timeout);
uint ProcessSocketNotifications([In] HANDLE completionPort, [In] uint registrationCount, [NativeArrayInfo(CountParamIndex = 1)] [In] [Out] [Optional] SOCK_NOTIFY_REGISTRATION* registrationInfos, [In] uint timeoutMs, [In] uint completionCount, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] OVERLAPPED_ENTRY* completionPortEntries, [Out] [Optional] uint* receivedEntryCount);
int WSCEnumProtocols([In] [Optional] int* lpiProtocols, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] WSAPROTOCOL_INFOW* lpProtocolBuffer, [In] [Out] uint* lpdwBufferLength, [Out] int* lpErrno);
int WSCDeinstallProvider([In] Guid* lpProviderId, [Out] int* lpErrno);
int WSCInstallProvider([In] Guid* lpProviderId, [Const] [In] PWSTR lpszProviderDllPath, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] WSAPROTOCOL_INFOW* lpProtocolInfoList, [In] uint dwNumberOfEntries, [Out] int* lpErrno);
int WSCGetProviderPath([In] Guid* lpProviderId, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpszProviderDllPath, [In] [Out] int* lpProviderDllPathLen, [Out] int* lpErrno);
int WSCUpdateProvider([In] Guid* lpProviderId, [Const] [In] PWSTR lpszProviderDllPath, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] WSAPROTOCOL_INFOW* lpProtocolInfoList, [In] uint dwNumberOfEntries, [Out] int* lpErrno);
int WSCSetProviderInfo([In] Guid* lpProviderId, [In] WSC_PROVIDER_INFO_TYPE InfoType, [MemorySize(BytesParamIndex = 3)] [In] byte* Info, [In] nuint InfoSize, [In] uint Flags, [Out] int* lpErrno);
int WSCGetProviderInfo([In] Guid* lpProviderId, [In] WSC_PROVIDER_INFO_TYPE InfoType, [MemorySize(BytesParamIndex = 3)] [Out] byte* Info, [In] [Out] nuint* InfoSize, [In] uint Flags, [Out] int* lpErrno);
int WSCSetApplicationCategory([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PWSTR Path, [In] uint PathLength, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] PWSTR Extra, [In] uint ExtraLength, [In] uint PermittedLspCategories, [Out] [Optional] uint* pPrevPermLspCat, [Out] int* lpErrno);
int WSCGetApplicationCategory([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PWSTR Path, [In] uint PathLength, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] PWSTR Extra, [In] uint ExtraLength, [Out] uint* pPermittedLspCategories, [Out] int* lpErrno);
int WPUCompleteOverlappedRequest([In] SOCKET s, [In] [Out] OVERLAPPED* lpOverlapped, [In] uint dwError, [In] uint cbTransferred, [Out] int* lpErrno);
int WSCInstallNameSpace([In] PWSTR lpszIdentifier, [In] PWSTR lpszPathName, [In] uint dwNameSpace, [In] uint dwVersion, [In] Guid* lpProviderId);
int WSCUnInstallNameSpace([In] Guid* lpProviderId);
int WSCInstallNameSpaceEx([In] PWSTR lpszIdentifier, [In] PWSTR lpszPathName, [In] uint dwNameSpace, [In] uint dwVersion, [In] Guid* lpProviderId, [In] BLOB* lpProviderSpecific);
int WSCEnableNSProvider([In] Guid* lpProviderId, [In] BOOL fEnable);
int WSAAdvertiseProvider([Const] [In] Guid* puuidProviderId, [Const] [In] NSPV2_ROUTINE* pNSPv2Routine);
int WSAUnadvertiseProvider([Const] [In] Guid* puuidProviderId);
int WSAProviderCompleteAsyncCall([In] HANDLE hAsyncCall, [In] int iRetCode);
int getaddrinfo([Const] [In] [Optional] PSTR pNodeName, [Const] [In] [Optional] PSTR pServiceName, [Const] [In] [Optional] ADDRINFOA* pHints, [Out] ADDRINFOA** ppResult);
int GetAddrInfoW([Const] [In] [Optional] PWSTR pNodeName, [Const] [In] [Optional] PWSTR pServiceName, [Const] [In] [Optional] ADDRINFOW* pHints, [Out] ADDRINFOW** ppResult);
int GetAddrInfoExA([Const] [In] [Optional] PSTR pName, [Const] [In] [Optional] PSTR pServiceName, [In] uint dwNameSpace, [In] [Optional] Guid* lpNspId, [Const] [In] [Optional] ADDRINFOEXA* hints, [Out] ADDRINFOEXA** ppResult, [In] [Optional] TIMEVAL* timeout, [In] [Optional] OVERLAPPED* lpOverlapped, [In] [Optional] LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, [Out] [Optional] HANDLE* lpNameHandle);
int GetAddrInfoExW([Const] [In] [Optional] PWSTR pName, [Const] [In] [Optional] PWSTR pServiceName, [In] uint dwNameSpace, [In] [Optional] Guid* lpNspId, [Const] [In] [Optional] ADDRINFOEXW* hints, [Out] ADDRINFOEXW** ppResult, [In] [Optional] TIMEVAL* timeout, [In] [Optional] OVERLAPPED* lpOverlapped, [In] [Optional] LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, [Out] [Optional] HANDLE* lpHandle);
int GetAddrInfoExCancel([In] HANDLE* lpHandle);
int GetAddrInfoExOverlappedResult([In] OVERLAPPED* lpOverlapped);
int SetAddrInfoExA([Const] [In] PSTR pName, [Const] [In] [Optional] PSTR pServiceName, [In] [Optional] SOCKET_ADDRESS* pAddresses, [In] uint dwAddressCount, [In] [Optional] BLOB* lpBlob, [In] uint dwFlags, [In] uint dwNameSpace, [In] [Optional] Guid* lpNspId, [In] [Optional] TIMEVAL* timeout, [In] [Optional] OVERLAPPED* lpOverlapped, [In] [Optional] LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, [Out] [Optional] HANDLE* lpNameHandle);
int SetAddrInfoExW([Const] [In] PWSTR pName, [Const] [In] [Optional] PWSTR pServiceName, [In] [Optional] SOCKET_ADDRESS* pAddresses, [In] uint dwAddressCount, [In] [Optional] BLOB* lpBlob, [In] uint dwFlags, [In] uint dwNameSpace, [In] [Optional] Guid* lpNspId, [In] [Optional] TIMEVAL* timeout, [In] [Optional] OVERLAPPED* lpOverlapped, [In] [Optional] LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, [Out] [Optional] HANDLE* lpNameHandle);
void freeaddrinfo([In] [Optional] ADDRINFOA* pAddrInfo);
void FreeAddrInfoW([In] [Optional] ADDRINFOW* pAddrInfo);
void FreeAddrInfoEx([In] [Optional] ADDRINFOEXA* pAddrInfoEx);
void FreeAddrInfoExW([In] [Optional] ADDRINFOEXW* pAddrInfoEx);
int getnameinfo([Const] [MemorySize(BytesParamIndex = 1)] [In] SOCKADDR* pSockaddr, [In] int SockaddrLength, [NotNullTerminated] [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR pNodeBuffer, [In] uint NodeBufferSize, [NotNullTerminated] [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR pServiceBuffer, [In] uint ServiceBufferSize, [In] int Flags);
int GetNameInfoW([Const] [MemorySize(BytesParamIndex = 1)] [In] SOCKADDR* pSockaddr, [In] int SockaddrLength, [NotNullTerminated] [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR pNodeBuffer, [In] uint NodeBufferSize, [NotNullTerminated] [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR pServiceBuffer, [In] uint ServiceBufferSize, [In] int Flags);
int inet_pton([In] int Family, [Const] [In] PSTR pszAddrString, [Out] void* pAddrBuf);
int InetPtonW([In] int Family, [Const] [In] PWSTR pszAddrString, [Out] void* pAddrBuf);
PSTR inet_ntop([In] int Family, [Const] [In] void* pAddr, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR pStringBuf, [In] nuint StringBufSize);
PWSTR InetNtopW([In] int Family, [Const] [In] void* pAddr, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pStringBuf, [In] nuint StringBufSize);
int WSCWriteProviderOrder([In] [Out] uint* lpwdCatalogEntryId, [In] uint dwNumberOfEntries);
int WSCWriteNameSpaceOrder([In] [Out] Guid* lpProviderId, [In] uint dwNumberOfEntries);
