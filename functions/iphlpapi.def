NTSTATUS GetIfEntry2([In] [Out] MIB_IF_ROW2* Row);
NTSTATUS GetIfEntry2Ex([In] MIB_IF_ENTRY_LEVEL Level, [In] [Out] MIB_IF_ROW2* Row);
NTSTATUS GetIfTable2([Out] MIB_IF_TABLE2** Table);
NTSTATUS GetIfTable2Ex([In] MIB_IF_TABLE_LEVEL Level, [Out] MIB_IF_TABLE2** Table);
NTSTATUS GetIfStackTable([Out] MIB_IFSTACK_TABLE** Table);
NTSTATUS GetInvertedIfStackTable([Out] MIB_INVERTEDIFSTACK_TABLE** Table);
NTSTATUS GetIpInterfaceEntry([In] [Out] MIB_IPINTERFACE_ROW* Row);
NTSTATUS GetIpInterfaceTable([In] ushort Family, [Out] MIB_IPINTERFACE_TABLE** Table);
void InitializeIpInterfaceEntry([In] [Out] MIB_IPINTERFACE_ROW* Row);
NTSTATUS NotifyIpInterfaceChange([In] ushort Family, [In] PIPINTERFACE_CHANGE_CALLBACK Callback, [In] [Optional] void* CallerContext, [In] BOOLEAN InitialNotification, [In] [Out] HANDLE* NotificationHandle);
NTSTATUS SetIpInterfaceEntry([In] [Out] MIB_IPINTERFACE_ROW* Row);
NTSTATUS GetIpNetworkConnectionBandwidthEstimates([In] uint InterfaceIndex, [In] ushort AddressFamily, [Out] MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES* BandwidthEstimates);
NTSTATUS CreateUnicastIpAddressEntry([Const] [In] MIB_UNICASTIPADDRESS_ROW* Row);
NTSTATUS DeleteUnicastIpAddressEntry([Const] [In] MIB_UNICASTIPADDRESS_ROW* Row);
NTSTATUS GetUnicastIpAddressEntry([In] [Out] MIB_UNICASTIPADDRESS_ROW* Row);
NTSTATUS GetUnicastIpAddressTable([In] ushort Family, [Out] MIB_UNICASTIPADDRESS_TABLE** Table);
void InitializeUnicastIpAddressEntry([Out] MIB_UNICASTIPADDRESS_ROW* Row);
NTSTATUS NotifyUnicastIpAddressChange([In] ushort Family, [In] PUNICAST_IPADDRESS_CHANGE_CALLBACK Callback, [In] [Optional] void* CallerContext, [In] BOOLEAN InitialNotification, [In] [Out] HANDLE* NotificationHandle);
NTSTATUS NotifyStableUnicastIpAddressTable([In] ushort Family, [Out] MIB_UNICASTIPADDRESS_TABLE** Table, [In] PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK CallerCallback, [In] void* CallerContext, [In] [Out] HANDLE* NotificationHandle);
NTSTATUS SetUnicastIpAddressEntry([Const] [In] MIB_UNICASTIPADDRESS_ROW* Row);
NTSTATUS CreateAnycastIpAddressEntry([Const] [In] MIB_ANYCASTIPADDRESS_ROW* Row);
NTSTATUS DeleteAnycastIpAddressEntry([Const] [In] MIB_ANYCASTIPADDRESS_ROW* Row);
NTSTATUS GetAnycastIpAddressEntry([In] [Out] MIB_ANYCASTIPADDRESS_ROW* Row);
NTSTATUS GetAnycastIpAddressTable([In] ushort Family, [Out] MIB_ANYCASTIPADDRESS_TABLE** Table);
NTSTATUS GetMulticastIpAddressEntry([In] [Out] MIB_MULTICASTIPADDRESS_ROW* Row);
NTSTATUS GetMulticastIpAddressTable([In] ushort Family, [Out] MIB_MULTICASTIPADDRESS_TABLE** Table);
NTSTATUS CreateIpForwardEntry2([Const] [In] MIB_IPFORWARD_ROW2* Row);
NTSTATUS DeleteIpForwardEntry2([Const] [In] MIB_IPFORWARD_ROW2* Row);
NTSTATUS GetBestRoute2([In] [Optional] NET_LUID_LH* InterfaceLuid, [In] uint InterfaceIndex, [Const] [In] [Optional] SOCKADDR_INET* SourceAddress, [Const] [In] SOCKADDR_INET* DestinationAddress, [In] uint AddressSortOptions, [Out] MIB_IPFORWARD_ROW2* BestRoute, [Out] SOCKADDR_INET* BestSourceAddress);
NTSTATUS GetIpForwardEntry2([In] [Out] MIB_IPFORWARD_ROW2* Row);
NTSTATUS GetIpForwardTable2([In] ushort Family, [Out] MIB_IPFORWARD_TABLE2** Table);
void InitializeIpForwardEntry([Out] MIB_IPFORWARD_ROW2* Row);
NTSTATUS NotifyRouteChange2([In] ushort AddressFamily, [In] PIPFORWARD_CHANGE_CALLBACK Callback, [In] void* CallerContext, [In] BOOLEAN InitialNotification, [In] [Out] HANDLE* NotificationHandle);
NTSTATUS SetIpForwardEntry2([Const] [In] MIB_IPFORWARD_ROW2* Route);
NTSTATUS FlushIpPathTable([In] ushort Family);
NTSTATUS GetIpPathEntry([In] [Out] MIB_IPPATH_ROW* Row);
NTSTATUS GetIpPathTable([In] ushort Family, [Out] MIB_IPPATH_TABLE** Table);
NTSTATUS CreateIpNetEntry2([Const] [In] MIB_IPNET_ROW2* Row);
NTSTATUS DeleteIpNetEntry2([Const] [In] MIB_IPNET_ROW2* Row);
NTSTATUS FlushIpNetTable2([In] ushort Family, [In] uint InterfaceIndex);
NTSTATUS GetIpNetEntry2([In] [Out] MIB_IPNET_ROW2* Row);
NTSTATUS GetIpNetTable2([In] ushort Family, [Out] MIB_IPNET_TABLE2** Table);
NTSTATUS ResolveIpNetEntry2([In] [Out] MIB_IPNET_ROW2* Row, [Const] [In] [Optional] SOCKADDR_INET* SourceAddress);
NTSTATUS SetIpNetEntry2([In] MIB_IPNET_ROW2* Row);
NTSTATUS NotifyTeredoPortChange([In] PTEREDO_PORT_CHANGE_CALLBACK Callback, [In] void* CallerContext, [In] BOOLEAN InitialNotification, [In] [Out] HANDLE* NotificationHandle);
NTSTATUS GetTeredoPort([Out] ushort* Port);
NTSTATUS CancelMibChangeNotify2([In] HANDLE NotificationHandle);
void FreeMibTable([In] void* Memory);
NTSTATUS CreateSortedAddressPairs([Const] [In] [Optional] SOCKADDR_IN6* SourceAddressList, [In] uint SourceAddressCount, [Const] [In] SOCKADDR_IN6* DestinationAddressList, [In] uint DestinationAddressCount, [In] uint AddressSortOptions, [Out] SOCKADDR_IN6_PAIR** SortedAddressPairList, [Out] uint* SortedAddressPairCount);
NTSTATUS ConvertCompartmentGuidToId([Const] [In] Guid* CompartmentGuid, [Out] uint* CompartmentId);
NTSTATUS ConvertCompartmentIdToGuid([In] uint CompartmentId, [Out] Guid* CompartmentGuid);
NTSTATUS ConvertInterfaceNameToLuidA([Const] [In] PSTR InterfaceName, [Out] NET_LUID_LH* InterfaceLuid);
NTSTATUS ConvertInterfaceNameToLuidW([Const] [In] PWSTR InterfaceName, [Out] NET_LUID_LH* InterfaceLuid);
NTSTATUS ConvertInterfaceLuidToNameA([Const] [In] NET_LUID_LH* InterfaceLuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR InterfaceName, [In] nuint Length);
NTSTATUS ConvertInterfaceLuidToNameW([Const] [In] NET_LUID_LH* InterfaceLuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR InterfaceName, [In] nuint Length);
NTSTATUS ConvertInterfaceLuidToIndex([Const] [In] NET_LUID_LH* InterfaceLuid, [Out] uint* InterfaceIndex);
NTSTATUS ConvertInterfaceIndexToLuid([In] uint InterfaceIndex, [Out] NET_LUID_LH* InterfaceLuid);
NTSTATUS ConvertInterfaceLuidToAlias([Const] [In] NET_LUID_LH* InterfaceLuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR InterfaceAlias, [In] nuint Length);
NTSTATUS ConvertInterfaceAliasToLuid([Const] [In] PWSTR InterfaceAlias, [Out] NET_LUID_LH* InterfaceLuid);
NTSTATUS ConvertInterfaceLuidToGuid([Const] [In] NET_LUID_LH* InterfaceLuid, [Out] Guid* InterfaceGuid);
NTSTATUS ConvertInterfaceGuidToLuid([Const] [In] Guid* InterfaceGuid, [Out] NET_LUID_LH* InterfaceLuid);
uint if_nametoindex([Const] [In] PSTR InterfaceName);
PSTR if_indextoname([In] uint InterfaceIndex, [NotNullTerminated] [NativeArrayInfo(CountConst = 256)] [Out] PSTR InterfaceName);
uint GetCurrentThreadCompartmentId();
NTSTATUS SetCurrentThreadCompartmentId([In] uint CompartmentId);
void GetCurrentThreadCompartmentScope([Out] uint* CompartmentScope, [Out] uint* CompartmentId);
NTSTATUS SetCurrentThreadCompartmentScope([In] uint CompartmentScope);
uint GetJobCompartmentId([In] HANDLE JobHandle);
NTSTATUS SetJobCompartmentId([In] HANDLE JobHandle, [In] uint CompartmentId);
uint GetSessionCompartmentId([In] uint SessionId);
NTSTATUS SetSessionCompartmentId([In] uint SessionId, [In] uint CompartmentId);
uint GetDefaultCompartmentId();
NTSTATUS GetNetworkInformation([Const] [In] Guid* NetworkGuid, [Out] uint* CompartmentId, [Out] uint* SiteId, [NotNullTerminated] [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR NetworkName, [In] uint Length);
NTSTATUS SetNetworkInformation([Const] [In] Guid* NetworkGuid, [In] uint CompartmentId, [Const] [In] PWSTR NetworkName);
NTSTATUS ConvertLengthToIpv4Mask([In] uint MaskLength, [Out] uint* Mask);
NTSTATUS ConvertIpv4MaskToLength([In] uint Mask, [Out] byte* MaskLength);
NTSTATUS GetDnsSettings([In] [Out] DNS_SETTINGS* Settings);
void FreeDnsSettings([In] [Out] DNS_SETTINGS* Settings);
NTSTATUS SetDnsSettings([Const] [In] DNS_SETTINGS* Settings);
NTSTATUS GetInterfaceDnsSettings([In] Guid Interface, [In] [Out] DNS_INTERFACE_SETTINGS* Settings);
void FreeInterfaceDnsSettings([In] [Out] DNS_INTERFACE_SETTINGS* Settings);
NTSTATUS SetInterfaceDnsSettings([In] Guid Interface, [Const] [In] DNS_INTERFACE_SETTINGS* Settings);
NTSTATUS GetNetworkConnectivityHint([Out] NL_NETWORK_CONNECTIVITY_HINT* ConnectivityHint);
NTSTATUS GetNetworkConnectivityHintForInterface([In] uint InterfaceIndex, [Out] NL_NETWORK_CONNECTIVITY_HINT* ConnectivityHint);
NTSTATUS NotifyNetworkConnectivityHintChange([In] PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK Callback, [In] [Optional] void* CallerContext, [In] BOOLEAN InitialNotification, [Out] HANDLE* NotificationHandle);
IcmpHandle IcmpCreateFile();
IcmpHandle Icmp6CreateFile();
BOOL IcmpCloseHandle([In] IcmpHandle IcmpHandle);
uint IcmpSendEcho([In] IcmpHandle IcmpHandle, [In] uint DestinationAddress, [MemorySize(BytesParamIndex = 3)] [In] void* RequestData, [In] ushort RequestSize, [In] [Optional] IP_OPTION_INFORMATION* RequestOptions, [MemorySize(BytesParamIndex = 6)] [Out] void* ReplyBuffer, [In] uint ReplySize, [In] uint Timeout);
uint IcmpSendEcho2([In] IcmpHandle IcmpHandle, [In] [Optional] HANDLE Event, [In] [Optional] PIO_APC_ROUTINE ApcRoutine, [In] [Optional] void* ApcContext, [In] uint DestinationAddress, [MemorySize(BytesParamIndex = 6)] [In] void* RequestData, [In] ushort RequestSize, [In] [Optional] IP_OPTION_INFORMATION* RequestOptions, [MemorySize(BytesParamIndex = 9)] [Out] void* ReplyBuffer, [In] uint ReplySize, [In] uint Timeout);
uint IcmpSendEcho2Ex([In] IcmpHandle IcmpHandle, [In] [Optional] HANDLE Event, [In] [Optional] PIO_APC_ROUTINE ApcRoutine, [In] [Optional] void* ApcContext, [In] uint SourceAddress, [In] uint DestinationAddress, [MemorySize(BytesParamIndex = 7)] [In] void* RequestData, [In] ushort RequestSize, [In] [Optional] IP_OPTION_INFORMATION* RequestOptions, [MemorySize(BytesParamIndex = 10)] [Out] void* ReplyBuffer, [In] uint ReplySize, [In] uint Timeout);
uint Icmp6SendEcho2([In] IcmpHandle IcmpHandle, [In] [Optional] HANDLE Event, [In] [Optional] PIO_APC_ROUTINE ApcRoutine, [In] [Optional] void* ApcContext, [In] SOCKADDR_IN6* SourceAddress, [In] SOCKADDR_IN6* DestinationAddress, [MemorySize(BytesParamIndex = 7)] [In] void* RequestData, [In] ushort RequestSize, [In] [Optional] IP_OPTION_INFORMATION* RequestOptions, [MemorySize(BytesParamIndex = 10)] [Out] void* ReplyBuffer, [In] uint ReplySize, [In] uint Timeout);
uint IcmpParseReplies([MemorySize(BytesParamIndex = 1)] [Out] void* ReplyBuffer, [In] uint ReplySize);
uint Icmp6ParseReplies([MemorySize(BytesParamIndex = 1)] [Out] void* ReplyBuffer, [In] uint ReplySize);
uint GetNumberOfInterfaces([Out] uint* pdwNumIf);
uint GetIfEntry([In] [Out] MIB_IFROW* pIfRow);
uint GetIfTable([MemorySize(BytesParamIndex = 1)] [Out] [Optional] MIB_IFTABLE* pIfTable, [In] [Out] uint* pdwSize, [In] BOOL bOrder);
uint GetIpAddrTable([MemorySize(BytesParamIndex = 1)] [Out] [Optional] MIB_IPADDRTABLE* pIpAddrTable, [In] [Out] uint* pdwSize, [In] BOOL bOrder);
uint GetIpNetTable([MemorySize(BytesParamIndex = 1)] [Out] [Optional] MIB_IPNETTABLE* IpNetTable, [In] [Out] uint* SizePointer, [In] BOOL Order);
uint GetIpForwardTable([MemorySize(BytesParamIndex = 1)] [Out] [Optional] MIB_IPFORWARDTABLE* pIpForwardTable, [In] [Out] uint* pdwSize, [In] BOOL bOrder);
uint GetTcpTable([MemorySize(BytesParamIndex = 1)] [Out] [Optional] MIB_TCPTABLE* TcpTable, [In] [Out] uint* SizePointer, [In] BOOL Order);
uint GetExtendedTcpTable([MemorySize(BytesParamIndex = 1)] [Out] [Optional] void* pTcpTable, [In] [Out] uint* pdwSize, [In] BOOL bOrder, [In] uint ulAf, [In] TCP_TABLE_CLASS TableClass, [In] uint Reserved);
uint GetOwnerModuleFromTcpEntry([In] MIB_TCPROW_OWNER_MODULE* pTcpEntry, [In] TCPIP_OWNER_MODULE_INFO_CLASS Class, [MemorySize(BytesParamIndex = 3)] [Out] void* pBuffer, [In] [Out] uint* pdwSize);
uint GetUdpTable([MemorySize(BytesParamIndex = 1)] [Out] [Optional] MIB_UDPTABLE* UdpTable, [In] [Out] uint* SizePointer, [In] BOOL Order);
uint GetExtendedUdpTable([MemorySize(BytesParamIndex = 1)] [Out] [Optional] void* pUdpTable, [In] [Out] uint* pdwSize, [In] BOOL bOrder, [In] uint ulAf, [In] UDP_TABLE_CLASS TableClass, [In] uint Reserved);
uint GetOwnerModuleFromUdpEntry([In] MIB_UDPROW_OWNER_MODULE* pUdpEntry, [In] TCPIP_OWNER_MODULE_INFO_CLASS Class, [MemorySize(BytesParamIndex = 3)] [Out] void* pBuffer, [In] [Out] uint* pdwSize);
uint GetTcpTable2([MemorySize(BytesParamIndex = 1)] [Out] [Optional] MIB_TCPTABLE2* TcpTable, [In] [Out] uint* SizePointer, [In] BOOL Order);
uint GetTcp6Table([MemorySize(BytesParamIndex = 1)] [Out] MIB_TCP6TABLE* TcpTable, [In] [Out] uint* SizePointer, [In] BOOL Order);
uint GetTcp6Table2([MemorySize(BytesParamIndex = 1)] [Out] MIB_TCP6TABLE2* TcpTable, [In] [Out] uint* SizePointer, [In] BOOL Order);
uint GetPerTcpConnectionEStats([In] MIB_TCPROW_LH* Row, [In] TCP_ESTATS_TYPE EstatsType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* Rw, [In] uint RwVersion, [In] uint RwSize, [MemorySize(BytesParamIndex = 7)] [Out] [Optional] byte* Ros, [In] uint RosVersion, [In] uint RosSize, [MemorySize(BytesParamIndex = 10)] [Out] [Optional] byte* Rod, [In] uint RodVersion, [In] uint RodSize);
uint SetPerTcpConnectionEStats([In] MIB_TCPROW_LH* Row, [In] TCP_ESTATS_TYPE EstatsType, [MemorySize(BytesParamIndex = 4)] [In] byte* Rw, [In] uint RwVersion, [In] uint RwSize, [In] uint Offset);
uint GetPerTcp6ConnectionEStats([In] MIB_TCP6ROW* Row, [In] TCP_ESTATS_TYPE EstatsType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* Rw, [In] uint RwVersion, [In] uint RwSize, [MemorySize(BytesParamIndex = 7)] [Out] [Optional] byte* Ros, [In] uint RosVersion, [In] uint RosSize, [MemorySize(BytesParamIndex = 10)] [Out] [Optional] byte* Rod, [In] uint RodVersion, [In] uint RodSize);
uint SetPerTcp6ConnectionEStats([In] MIB_TCP6ROW* Row, [In] TCP_ESTATS_TYPE EstatsType, [MemorySize(BytesParamIndex = 4)] [In] byte* Rw, [In] uint RwVersion, [In] uint RwSize, [In] uint Offset);
uint GetOwnerModuleFromTcp6Entry([In] MIB_TCP6ROW_OWNER_MODULE* pTcpEntry, [In] TCPIP_OWNER_MODULE_INFO_CLASS Class, [MemorySize(BytesParamIndex = 3)] [Out] void* pBuffer, [In] [Out] uint* pdwSize);
uint GetUdp6Table([MemorySize(BytesParamIndex = 1)] [Out] [Optional] MIB_UDP6TABLE* Udp6Table, [In] [Out] uint* SizePointer, [In] BOOL Order);
uint GetOwnerModuleFromUdp6Entry([In] MIB_UDP6ROW_OWNER_MODULE* pUdpEntry, [In] TCPIP_OWNER_MODULE_INFO_CLASS Class, [MemorySize(BytesParamIndex = 3)] [Out] void* pBuffer, [In] [Out] uint* pdwSize);
uint GetOwnerModuleFromPidAndInfo([In] uint ulPid, [In] ulong* pInfo, [In] TCPIP_OWNER_MODULE_INFO_CLASS Class, [MemorySize(BytesParamIndex = 4)] [Out] void* pBuffer, [In] [Out] uint* pdwSize);
uint GetIpStatistics([Out] MIB_IPSTATS_LH* Statistics);
uint GetIcmpStatistics([Out] MIB_ICMP* Statistics);
uint GetTcpStatistics([Out] MIB_TCPSTATS_LH* Statistics);
uint GetUdpStatistics([Out] MIB_UDPSTATS* Stats);
uint SetIpStatisticsEx([In] MIB_IPSTATS_LH* Statistics, [In] uint Family);
uint GetIpStatisticsEx([Out] MIB_IPSTATS_LH* Statistics, [In] ADDRESS_FAMILY Family);
uint GetIcmpStatisticsEx([Out] MIB_ICMP_EX_XPSP1* Statistics, [In] uint Family);
uint GetTcpStatisticsEx([Out] MIB_TCPSTATS_LH* Statistics, [In] ADDRESS_FAMILY Family);
uint GetUdpStatisticsEx([Out] MIB_UDPSTATS* Statistics, [In] ADDRESS_FAMILY Family);
uint GetTcpStatisticsEx2([Out] MIB_TCPSTATS2* Statistics, [In] ADDRESS_FAMILY Family);
uint GetUdpStatisticsEx2([Out] MIB_UDPSTATS2* Statistics, [In] ADDRESS_FAMILY Family);
uint SetIfEntry([In] MIB_IFROW* pIfRow);
uint CreateIpForwardEntry([In] MIB_IPFORWARDROW* pRoute);
uint SetIpForwardEntry([In] MIB_IPFORWARDROW* pRoute);
uint DeleteIpForwardEntry([In] MIB_IPFORWARDROW* pRoute);
uint SetIpStatistics([In] MIB_IPSTATS_LH* pIpStats);
uint SetIpTTL([In] uint nTTL);
uint CreateIpNetEntry([In] MIB_IPNETROW_LH* pArpEntry);
uint SetIpNetEntry([In] MIB_IPNETROW_LH* pArpEntry);
uint DeleteIpNetEntry([In] MIB_IPNETROW_LH* pArpEntry);
uint FlushIpNetTable([In] uint dwIfIndex);
uint CreateProxyArpEntry([In] uint dwAddress, [In] uint dwMask, [In] uint dwIfIndex);
uint DeleteProxyArpEntry([In] uint dwAddress, [In] uint dwMask, [In] uint dwIfIndex);
uint SetTcpEntry([In] MIB_TCPROW_LH* pTcpRow);
uint GetInterfaceInfo([MemorySize(BytesParamIndex = 1)] [Out] [Optional] IP_INTERFACE_INFO* pIfTable, [In] [Out] uint* dwOutBufLen);
uint GetUniDirectionalAdapterInfo([MemorySize(BytesParamIndex = 1)] [Out] [Optional] IP_UNIDIRECTIONAL_ADAPTER_ADDRESS* pIPIfInfo, [In] [Out] uint* dwOutBufLen);
uint NhpAllocateAndGetInterfaceInfoFromStack([Out] IP_INTERFACE_NAME_INFO_W2KSP1** ppTable, [Out] uint* pdwCount, [In] BOOL bOrder, [In] HANDLE hHeap, [In] uint dwFlags);
uint GetBestInterface([In] uint dwDestAddr, [Out] uint* pdwBestIfIndex);
uint GetBestInterfaceEx([In] SOCKADDR* pDestAddr, [Out] uint* pdwBestIfIndex);
uint GetBestRoute([In] uint dwDestAddr, [In] [Optional] uint dwSourceAddr, [Out] MIB_IPFORWARDROW* pBestRoute);
uint NotifyAddrChange([Out] HANDLE* Handle, [In] OVERLAPPED* overlapped);
uint NotifyRouteChange([Out] HANDLE* Handle, [In] OVERLAPPED* overlapped);
BOOL CancelIPChangeNotify([In] OVERLAPPED* notifyOverlapped);
uint GetAdapterIndex([In] PWSTR AdapterName, [In] [Out] uint* IfIndex);
uint AddIPAddress([In] uint Address, [In] uint IpMask, [In] uint IfIndex, [Out] uint* NTEContext, [Out] uint* NTEInstance);
uint DeleteIPAddress([In] uint NTEContext);
WIN32_ERROR GetNetworkParams([MemorySize(BytesParamIndex = 1)] [Out] [Optional] FIXED_INFO_W2KSP1* pFixedInfo, [In] [Out] uint* pOutBufLen);
uint GetAdaptersInfo([MemorySize(BytesParamIndex = 1)] [Out] [Optional] IP_ADAPTER_INFO* AdapterInfo, [In] [Out] uint* SizePointer);
IP_ADAPTER_ORDER_MAP* GetAdapterOrderMap();
uint GetAdaptersAddresses([In] ADDRESS_FAMILY Family, [In] GET_ADAPTERS_ADDRESSES_FLAGS Flags, [Reserved] [In] [Out] void* Reserved, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] IP_ADAPTER_ADDRESSES_LH* AdapterAddresses, [In] [Out] uint* SizePointer);
uint GetPerAdapterInfo([In] uint IfIndex, [MemorySize(BytesParamIndex = 2)] [Out] [Optional] IP_PER_ADAPTER_INFO_W2KSP1* pPerAdapterInfo, [In] [Out] uint* pOutBufLen);
uint GetInterfaceActiveTimestampCapabilities([Const] [In] NET_LUID_LH* InterfaceLuid, [Out] INTERFACE_TIMESTAMP_CAPABILITIES* TimestampCapabilites);
uint GetInterfaceSupportedTimestampCapabilities([Const] [In] NET_LUID_LH* InterfaceLuid, [Out] INTERFACE_TIMESTAMP_CAPABILITIES* TimestampCapabilites);
uint CaptureInterfaceHardwareCrossTimestamp([Const] [In] NET_LUID_LH* InterfaceLuid, [In] [Out] INTERFACE_HARDWARE_CROSSTIMESTAMP* CrossTimestamp);
uint RegisterInterfaceTimestampConfigChange([In] PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK Callback, [In] [Optional] void* CallerContext, [Out] HIFTIMESTAMPCHANGE* NotificationHandle);
void UnregisterInterfaceTimestampConfigChange([In] HIFTIMESTAMPCHANGE NotificationHandle);
uint IpReleaseAddress([In] IP_ADAPTER_INDEX_MAP* AdapterInfo);
uint IpRenewAddress([In] IP_ADAPTER_INDEX_MAP* AdapterInfo);
uint SendARP([In] uint DestIP, [In] uint SrcIP, [MemorySize(BytesParamIndex = 3)] [Out] void* pMacAddr, [In] [Out] uint* PhyAddrLen);
BOOL GetRTTAndHopCount([In] uint DestIpAddress, [Out] uint* HopCount, [In] uint MaxHops, [Out] uint* RTT);
uint GetFriendlyIfIndex([In] uint IfIndex);
uint EnableRouter([Out] HANDLE* pHandle, [Out] OVERLAPPED* pOverlapped);
uint UnenableRouter([In] OVERLAPPED* pOverlapped, [Out] [Optional] uint* lpdwEnableCount);
uint DisableMediaSense([Out] HANDLE* pHandle, [In] OVERLAPPED* pOverLapped);
uint RestoreMediaSense([In] OVERLAPPED* pOverlapped, [Out] [Optional] uint* lpdwEnableCount);
uint GetIpErrorString([In] uint ErrorCode, [Out] [Optional] PWSTR Buffer, [In] [Out] uint* Size);
uint ResolveNeighbor([In] SOCKADDR* NetworkAddress, [MemorySize(BytesParamIndex = 2)] [Out] void* PhysicalAddress, [In] [Out] uint* PhysicalAddressLength);
uint CreatePersistentTcpPortReservation([In] ushort StartPort, [In] ushort NumberOfPorts, [Out] ulong* Token);
uint CreatePersistentUdpPortReservation([In] ushort StartPort, [In] ushort NumberOfPorts, [Out] ulong* Token);
uint DeletePersistentTcpPortReservation([In] ushort StartPort, [In] ushort NumberOfPorts);
uint DeletePersistentUdpPortReservation([In] ushort StartPort, [In] ushort NumberOfPorts);
uint LookupPersistentTcpPortReservation([In] ushort StartPort, [In] ushort NumberOfPorts, [Out] ulong* Token);
uint LookupPersistentUdpPortReservation([In] ushort StartPort, [In] ushort NumberOfPorts, [Out] ulong* Token);
uint PfCreateInterface([In] uint dwName, [In] PFFORWARD_ACTION inAction, [In] PFFORWARD_ACTION outAction, [In] BOOL bUseLog, [In] BOOL bMustBeUnique, [In] [Out] void** ppInterface);
uint PfDeleteInterface([In] [Out] void* pInterface);
uint PfAddFiltersToInterface([In] [Out] void* ih, [In] uint cInFilters, [In] [Out] PF_FILTER_DESCRIPTOR* pfiltIn, [In] uint cOutFilters, [In] [Out] PF_FILTER_DESCRIPTOR* pfiltOut, [In] [Out] void** pfHandle);
uint PfRemoveFiltersFromInterface([In] [Out] void* ih, [In] uint cInFilters, [In] [Out] PF_FILTER_DESCRIPTOR* pfiltIn, [In] uint cOutFilters, [In] [Out] PF_FILTER_DESCRIPTOR* pfiltOut);
uint PfRemoveFilterHandles([In] [Out] void* pInterface, [In] uint cFilters, [In] [Out] void** pvHandles);
uint PfUnBindInterface([In] [Out] void* pInterface);
uint PfBindInterfaceToIndex([In] [Out] void* pInterface, [In] uint dwIndex, [In] PFADDRESSTYPE pfatLinkType, [In] [Out] byte* LinkIPAddress);
uint PfBindInterfaceToIPAddress([In] [Out] void* pInterface, [In] PFADDRESSTYPE pfatType, [In] [Out] byte* IPAddress);
uint PfRebindFilters([In] [Out] void* pInterface, [In] [Out] PF_LATEBIND_INFO* pLateBindInfo);
uint PfAddGlobalFilterToInterface([In] [Out] void* pInterface, [In] GLOBAL_FILTER gfFilter);
uint PfRemoveGlobalFilterFromInterface([In] [Out] void* pInterface, [In] GLOBAL_FILTER gfFilter);
uint PfMakeLog([In] HANDLE hEvent);
uint PfSetLogBuffer([In] [Out] byte* pbBuffer, [In] uint dwSize, [In] uint dwThreshold, [In] uint dwEntries, [In] [Out] uint* pdwLoggedEntries, [In] [Out] uint* pdwLostEntries, [In] [Out] uint* pdwSizeUsed);
uint PfDeleteLog();
uint PfGetInterfaceStatistics([In] [Out] void* pInterface, [In] [Out] PF_INTERFACE_STATS* ppfStats, [In] [Out] uint* pdwBufferSize, [In] BOOL fResetCounters);
uint PfTestPacket([In] [Out] void* pInInterface, [In] [Out] void* pOutInterface, [In] uint cBytes, [In] [Out] byte* pbPacket, [In] [Out] PFFORWARD_ACTION* ppAction);
