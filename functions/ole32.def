HRESULT CoRegisterMessageFilter([In] [Optional] IMessageFilter lpMessageFilter, [Out] [Optional] IMessageFilter* lplpMessageFilter);
uint OleBuildVersion();
HRESULT OleInitialize([In] void* pvReserved);
void OleUninitialize();
HRESULT OleQueryLinkFromData([In] IDataObject pSrcDataObject);
HRESULT OleQueryCreateFromData([In] IDataObject pSrcDataObject);
HRESULT OleCreate([Const] [In] Guid* rclsid, [Const] [In] Guid* riid, [In] OLERENDER renderopt, [In] FORMATETC* pFormatEtc, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleCreateEx([Const] [In] Guid* rclsid, [Const] [In] Guid* riid, [In] OLECREATE dwFlags, [In] OLERENDER renderopt, [In] uint cFormats, [In] uint* rgAdvf, [In] FORMATETC* rgFormatEtc, [In] IAdviseSink lpAdviseSink, [Out] uint* rgdwConnection, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleCreateFromData([In] IDataObject pSrcDataObj, [Const] [In] Guid* riid, [In] OLERENDER renderopt, [In] FORMATETC* pFormatEtc, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleCreateFromDataEx([In] IDataObject pSrcDataObj, [Const] [In] Guid* riid, [In] OLECREATE dwFlags, [In] OLERENDER renderopt, [In] uint cFormats, [In] uint* rgAdvf, [In] FORMATETC* rgFormatEtc, [In] IAdviseSink lpAdviseSink, [Out] uint* rgdwConnection, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleCreateLinkFromData([In] IDataObject pSrcDataObj, [Const] [In] Guid* riid, [In] OLERENDER renderopt, [In] FORMATETC* pFormatEtc, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleCreateLinkFromDataEx([In] IDataObject pSrcDataObj, [Const] [In] Guid* riid, [In] OLECREATE dwFlags, [In] OLERENDER renderopt, [In] uint cFormats, [In] uint* rgAdvf, [In] FORMATETC* rgFormatEtc, [In] IAdviseSink lpAdviseSink, [In] [Out] uint* rgdwConnection, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleCreateStaticFromData([In] IDataObject pSrcDataObj, [Const] [In] Guid* iid, [In] OLERENDER renderopt, [In] FORMATETC* pFormatEtc, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleCreateLink([In] IMoniker pmkLinkSrc, [Const] [In] Guid* riid, [In] OLERENDER renderopt, [In] FORMATETC* lpFormatEtc, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleCreateLinkEx([In] IMoniker pmkLinkSrc, [Const] [In] Guid* riid, [In] OLECREATE dwFlags, [In] OLERENDER renderopt, [In] uint cFormats, [In] uint* rgAdvf, [In] FORMATETC* rgFormatEtc, [In] IAdviseSink lpAdviseSink, [Out] uint* rgdwConnection, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleCreateLinkToFile([Const] [In] PWSTR lpszFileName, [Const] [In] Guid* riid, [In] OLERENDER renderopt, [In] FORMATETC* lpFormatEtc, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleCreateLinkToFileEx([Const] [In] PWSTR lpszFileName, [Const] [In] Guid* riid, [In] OLECREATE dwFlags, [In] OLERENDER renderopt, [In] uint cFormats, [In] uint* rgAdvf, [In] FORMATETC* rgFormatEtc, [In] IAdviseSink lpAdviseSink, [Out] uint* rgdwConnection, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleCreateFromFile([Const] [In] Guid* rclsid, [Const] [In] PWSTR lpszFileName, [Const] [In] Guid* riid, [In] OLERENDER renderopt, [In] FORMATETC* lpFormatEtc, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleCreateFromFileEx([Const] [In] Guid* rclsid, [Const] [In] PWSTR lpszFileName, [Const] [In] Guid* riid, [In] OLECREATE dwFlags, [In] OLERENDER renderopt, [In] uint cFormats, [In] uint* rgAdvf, [In] FORMATETC* rgFormatEtc, [In] IAdviseSink lpAdviseSink, [Out] uint* rgdwConnection, [In] IOleClientSite pClientSite, [In] IStorage pStg, [Out] void** ppvObj);
HRESULT OleLoad([In] IStorage pStg, [Const] [In] Guid* riid, [In] IOleClientSite pClientSite, [Out] void** ppvObj);
HRESULT OleSave([In] IPersistStorage pPS, [In] IStorage pStg, [In] BOOL fSameAsLoad);
HRESULT OleLoadFromStream([In] IStream pStm, [Const] [In] Guid* iidInterface, [Out] void** ppvObj);
HRESULT OleSaveToStream([In] IPersistStream pPStm, [In] IStream pStm);
HRESULT OleSetContainedObject([In] IUnknown pUnknown, [In] BOOL fContained);
HRESULT OleNoteObjectVisible([In] IUnknown pUnknown, [In] BOOL fVisible);
HRESULT RegisterDragDrop([In] HWND hwnd, [In] IDropTarget pDropTarget);
HRESULT RevokeDragDrop([In] HWND hwnd);
HRESULT DoDragDrop([In] IDataObject pDataObj, [In] IDropSource pDropSource, [In] DROPEFFECT dwOKEffects, [Out] DROPEFFECT* pdwEffect);
HRESULT OleSetClipboard([In] IDataObject pDataObj);
HRESULT OleGetClipboard([Out] IDataObject* ppDataObj);
HRESULT OleGetClipboardWithEnterpriseInfo([Out] IDataObject* dataObject, [Out] PWSTR* dataEnterpriseId, [Out] PWSTR* sourceDescription, [Out] PWSTR* targetDescription, [Out] PWSTR* dataDescription);
HRESULT OleFlushClipboard();
HRESULT OleIsCurrentClipboard([In] IDataObject pDataObj);
nint OleCreateMenuDescriptor([In] HMENU hmenuCombined, [In] OLEMENUGROUPWIDTHS* lpMenuWidths);
HRESULT OleSetMenuDescriptor([In] nint holemenu, [In] HWND hwndFrame, [In] HWND hwndActiveObject, [In] IOleInPlaceFrame lpFrame, [In] IOleInPlaceActiveObject lpActiveObj);
HRESULT OleDestroyMenuDescriptor([In] nint holemenu);
HRESULT OleTranslateAccelerator([In] IOleInPlaceFrame lpFrame, [In] OLEINPLACEFRAMEINFO* lpFrameInfo, [In] MSG* lpmsg);
HANDLE OleDuplicateData([In] HANDLE hSrc, [In] CLIPBOARD_FORMAT cfFormat, [In] GLOBAL_ALLOC_FLAGS uiFlags);
HRESULT OleDraw([In] IUnknown pUnknown, [In] uint dwAspect, [In] HDC hdcDraw, [In] RECT* lprcBounds);
HRESULT OleRun([In] IUnknown pUnknown);
BOOL OleIsRunning([In] IOleObject pObject);
HRESULT OleLockRunning([In] IUnknown pUnknown, [In] BOOL fLock, [In] BOOL fLastUnlockCloses);
void ReleaseStgMedium([In] [Out] STGMEDIUM* param0);
HRESULT CreateOleAdviseHolder([Out] IOleAdviseHolder* ppOAHolder);
HRESULT OleCreateDefaultHandler([Const] [In] Guid* clsid, [In] IUnknown pUnkOuter, [Const] [In] Guid* riid, [Out] void** lplpObj);
HRESULT OleCreateEmbeddingHelper([Const] [In] Guid* clsid, [In] IUnknown pUnkOuter, [In] EMBDHLP_FLAGS flags, [In] IClassFactory pCF, [Const] [In] Guid* riid, [Out] void** lplpObj);
BOOL IsAccelerator([In] HACCEL hAccel, [In] int cAccelEntries, [In] MSG* lpMsg, [Out] ushort* lpwCmd);
nint OleGetIconOfFile([In] PWSTR lpszPath, [In] BOOL fUseFileAsLabel);
nint OleGetIconOfClass([Const] [In] Guid* rclsid, [In] [Optional] PWSTR lpszLabel, [In] BOOL fUseTypeAsLabel);
nint OleMetafilePictFromIconAndLabel([In] HICON hIcon, [In] PWSTR lpszLabel, [In] PWSTR lpszSourceFile, [In] uint iIconIndex);
HRESULT OleRegGetUserType([Const] [In] Guid* clsid, [In] USERCLASSTYPE dwFormOfType, [Out] PWSTR* pszUserType);
HRESULT OleRegGetMiscStatus([Const] [In] Guid* clsid, [In] uint dwAspect, [Out] uint* pdwStatus);
HRESULT OleRegEnumFormatEtc([Const] [In] Guid* clsid, [In] uint dwDirection, [Out] IEnumFORMATETC* ppenum);
HRESULT OleRegEnumVerbs([Const] [In] Guid* clsid, [Out] IEnumOLEVERB* ppenum);
HRESULT OleDoAutoConvert([In] IStorage pStg, [Out] Guid* pClsidNew);
HRESULT OleGetAutoConvert([Const] [In] Guid* clsidOld, [Out] Guid* pClsidNew);
HRESULT OleSetAutoConvert([Const] [In] Guid* clsidOld, [Const] [In] Guid* clsidNew);
uint HRGN_UserSize([In] uint* param0, [In] uint param1, [In] HRGN* param2);
byte* HRGN_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] HRGN* param2);
byte* HRGN_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] HRGN* param2);
void HRGN_UserFree([In] uint* param0, [In] HRGN* param1);
uint CoBuildVersion();
HRESULT CoInitialize([In] [Optional] void* pvReserved);
HRESULT CoRegisterMallocSpy([In] IMallocSpy pMallocSpy);
HRESULT CoRevokeMallocSpy();
HRESULT CoRegisterInitializeSpy([In] IInitializeSpy pSpy, [Out] ULARGE_INTEGER* puliCookie);
HRESULT CoRevokeInitializeSpy([In] ULARGE_INTEGER uliCookie);
HRESULT CoGetSystemSecurityPermissions([In] COMSD comSDType, [In] [Out] PSECURITY_DESCRIPTOR* ppSD);
HINSTANCE CoLoadLibrary([In] PWSTR lpszLibName, [In] BOOL bAutoFree);
void CoFreeLibrary([In] HINSTANCE hInst);
void CoFreeAllLibraries();
HRESULT CoAllowSetForegroundWindow([In] IUnknown pUnk, [In] [Optional] void* lpvReserved);
HRESULT DcomChannelSetHResult([In] [Optional] void* pvReserved, [In] [Optional] uint* pulReserved, [In] HRESULT appsHR);
BOOL CoIsOle1Class([Const] [In] Guid* rclsid);
HRESULT CLSIDFromProgIDEx([Const] [In] PWSTR lpszProgID, [Out] Guid* lpclsid);
BOOL CoFileTimeToDosDateTime([In] FILETIME* lpFileTime, [Out] ushort* lpDosDate, [Out] ushort* lpDosTime);
BOOL CoDosDateTimeToFileTime([In] ushort nDosDate, [In] ushort nDosTime, [Out] FILETIME* lpFileTime);
HRESULT CoFileTimeNow([Out] FILETIME* lpFileTime);
HRESULT CoRegisterChannelHook([Const] [In] Guid* ExtensionUuid, [In] IChannelHook pChannelHook);
HRESULT CoTreatAsClass([Const] [In] Guid* clsidOld, [Const] [In] Guid* clsidNew);
HRESULT CreateDataAdviseHolder([Out] IDataAdviseHolder* ppDAHolder);
HRESULT CreateDataCache([In] [Optional] IUnknown pUnkOuter, [Const] [In] Guid* rclsid, [Const] [In] Guid* iid, [Out] void** ppv);
HRESULT CoInstall([In] IBindCtx pbc, [In] uint dwFlags, [In] uCLSSPEC* pClassSpec, [In] QUERYCONTEXT* pQuery, [In] PWSTR pszCodeBase);
HRESULT BindMoniker([In] IMoniker pmk, [In] uint grfOpt, [Const] [In] Guid* iidResult, [Out] void** ppvResult);
HRESULT CoGetObject([Const] [In] PWSTR pszName, [In] [Optional] BIND_OPTS* pBindOptions, [Const] [In] Guid* riid, [Out] void** ppv);
HRESULT MkParseDisplayName([In] IBindCtx pbc, [Const] [In] PWSTR szUserName, [Out] uint* pchEaten, [Out] IMoniker* ppmk);
HRESULT MonikerRelativePathTo([In] IMoniker pmkSrc, [In] IMoniker pmkDest, [Out] IMoniker* ppmkRelPath, [In] BOOL dwReserved);
HRESULT MonikerCommonPrefixWith([In] IMoniker pmkThis, [In] IMoniker pmkOther, [Out] IMoniker* ppmkCommon);
HRESULT CreateBindCtx([In] uint reserved, [Out] IBindCtx* ppbc);
HRESULT CreateGenericComposite([In] [Optional] IMoniker pmkFirst, [In] [Optional] IMoniker pmkRest, [Out] IMoniker* ppmkComposite);
HRESULT GetClassFile([Const] [In] PWSTR szFilename, [Out] Guid* pclsid);
HRESULT CreateClassMoniker([Const] [In] Guid* rclsid, [Out] IMoniker* ppmk);
HRESULT CreateFileMoniker([Const] [In] PWSTR lpszPathName, [Out] IMoniker* ppmk);
HRESULT CreateItemMoniker([Const] [In] PWSTR lpszDelim, [Const] [In] PWSTR lpszItem, [Out] IMoniker* ppmk);
HRESULT CreateAntiMoniker([Out] IMoniker* ppmk);
HRESULT CreatePointerMoniker([In] [Optional] IUnknown punk, [Out] IMoniker* ppmk);
HRESULT CreateObjrefMoniker([In] [Optional] IUnknown punk, [Out] IMoniker* ppmk);
HRESULT GetRunningObjectTable([In] uint reserved, [Out] IRunningObjectTable* pprot);
HRESULT CreateStdProgressIndicator([In] HWND hwndParent, [Const] [In] PWSTR pszTitle, [In] IBindStatusCallback pIbscCaller, [Out] IBindStatusCallback* ppIbsc);
HRESULT CoGetMalloc([In] uint dwMemContext, [Out] IMalloc* ppMalloc);
void CoUninitialize();
uint CoGetCurrentProcess();
HRESULT CoInitializeEx([In] [Optional] void* pvReserved, [In] COINIT dwCoInit);
HRESULT CoGetCallerTID([Out] uint* lpdwTID);
HRESULT CoGetCurrentLogicalThreadId([Out] Guid* pguid);
HRESULT CoGetContextToken([Out] nuint* pToken);
HRESULT CoGetApartmentType([Out] APTTYPE* pAptType, [Out] APTTYPEQUALIFIER* pAptQualifier);
HRESULT CoIncrementMTAUsage([Out] CO_MTA_USAGE_COOKIE* pCookie);
HRESULT CoDecrementMTAUsage([In] CO_MTA_USAGE_COOKIE Cookie);
HRESULT CoAllowUnmarshalerCLSID([Const] [In] Guid* clsid);
HRESULT CoGetObjectContext([Const] [In] Guid* riid, [Out] void** ppv);
HRESULT CoGetClassObject([Const] [In] Guid* rclsid, [In] CLSCTX dwClsContext, [In] [Optional] void* pvReserved, [Const] [In] Guid* riid, [Out] void** ppv);
HRESULT CoRegisterClassObject([Const] [In] Guid* rclsid, [In] IUnknown pUnk, [In] CLSCTX dwClsContext, [In] REGCLS flags, [Out] uint* lpdwRegister);
HRESULT CoRevokeClassObject([In] uint dwRegister);
HRESULT CoResumeClassObjects();
HRESULT CoSuspendClassObjects();
uint CoAddRefServerProcess();
uint CoReleaseServerProcess();
HRESULT CoGetPSClsid([Const] [In] Guid* riid, [Out] Guid* pClsid);
HRESULT CoRegisterPSClsid([Const] [In] Guid* riid, [Const] [In] Guid* rclsid);
HRESULT CoRegisterSurrogate([In] ISurrogate pSurrogate);
HRESULT CoDisconnectObject([In] IUnknown pUnk, [In] uint dwReserved);
HRESULT CoLockObjectExternal([In] IUnknown pUnk, [In] BOOL fLock, [In] BOOL fLastUnlockReleases);
BOOL CoIsHandlerConnected([In] IUnknown pUnk);
HRESULT CoCreateFreeThreadedMarshaler([In] [Optional] IUnknown punkOuter, [Out] IUnknown* ppunkMarshal);
void CoFreeUnusedLibraries();
void CoFreeUnusedLibrariesEx([In] uint dwUnloadDelay, [In] uint dwReserved);
HRESULT CoDisconnectContext([In] uint dwTimeout);
HRESULT CoInitializeSecurity([In] [Optional] PSECURITY_DESCRIPTOR pSecDesc, [In] int cAuthSvc, [In] [Optional] SOLE_AUTHENTICATION_SERVICE* asAuthSvc, [In] [Optional] void* pReserved1, [In] RPC_C_AUTHN_LEVEL dwAuthnLevel, [In] RPC_C_IMP_LEVEL dwImpLevel, [In] [Optional] void* pAuthList, [In] EOLE_AUTHENTICATION_CAPABILITIES dwCapabilities, [In] [Optional] void* pReserved3);
HRESULT CoGetCallContext([Const] [In] Guid* riid, [Out] void** ppInterface);
HRESULT CoQueryProxyBlanket([In] IUnknown pProxy, [Out] [Optional] uint* pwAuthnSvc, [Out] [Optional] uint* pAuthzSvc, [Out] [Optional] PWSTR* pServerPrincName, [Out] [Optional] uint* pAuthnLevel, [Out] [Optional] uint* pImpLevel, [Out] [Optional] void** pAuthInfo, [Out] [Optional] uint* pCapabilites);
HRESULT CoSetProxyBlanket([In] IUnknown pProxy, [In] uint dwAuthnSvc, [In] uint dwAuthzSvc, [In] [Optional] PWSTR pServerPrincName, [In] RPC_C_AUTHN_LEVEL dwAuthnLevel, [In] RPC_C_IMP_LEVEL dwImpLevel, [In] [Optional] void* pAuthInfo, [In] EOLE_AUTHENTICATION_CAPABILITIES dwCapabilities);
HRESULT CoCopyProxy([In] IUnknown pProxy, [Out] IUnknown* ppCopy);
HRESULT CoQueryClientBlanket([Out] [Optional] uint* pAuthnSvc, [Out] [Optional] uint* pAuthzSvc, [Out] [Optional] PWSTR* pServerPrincName, [Out] [Optional] uint* pAuthnLevel, [Out] [Optional] uint* pImpLevel, [Out] [Optional] void** pPrivs, [In] [Out] [Optional] uint* pCapabilities);
HRESULT CoImpersonateClient();
HRESULT CoRevertToSelf();
HRESULT CoQueryAuthenticationServices([Out] uint* pcAuthSvc, [Out] SOLE_AUTHENTICATION_SERVICE** asAuthSvc);
HRESULT CoSwitchCallContext([In] [Optional] IUnknown pNewObject, [Out] IUnknown* ppOldObject);
HRESULT CoCreateInstance([Const] [In] Guid* rclsid, [In] [Optional] IUnknown pUnkOuter, [In] CLSCTX dwClsContext, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT CoCreateInstanceEx([Const] [In] Guid* Clsid, [In] [Optional] IUnknown punkOuter, [In] CLSCTX dwClsCtx, [In] [Optional] COSERVERINFO* pServerInfo, [In] uint dwCount, [NativeArrayInfo(CountParamIndex = 4)] [In] [Out] MULTI_QI* pResults);
HRESULT CoCreateInstanceFromApp([Const] [In] Guid* Clsid, [In] [Optional] IUnknown punkOuter, [In] CLSCTX dwClsCtx, [In] [Optional] void* reserved, [In] uint dwCount, [NativeArrayInfo(CountParamIndex = 4)] [In] [Out] MULTI_QI* pResults);
HRESULT CoRegisterActivationFilter([In] IActivationFilter pActivationFilter);
HRESULT CoGetCancelObject([In] uint dwThreadId, [Const] [In] Guid* iid, [Out] void** ppUnk);
HRESULT CoSetCancelObject([In] [Optional] IUnknown pUnk);
HRESULT CoCancelCall([In] uint dwThreadId, [In] uint ulTimeout);
HRESULT CoTestCancel();
HRESULT CoEnableCallCancellation([In] [Optional] void* pReserved);
HRESULT CoDisableCallCancellation([In] [Optional] void* pReserved);
HRESULT StringFromCLSID([Const] [In] Guid* rclsid, [Out] PWSTR* lplpsz);
HRESULT CLSIDFromString([Const] [In] PWSTR lpsz, [Out] Guid* pclsid);
HRESULT StringFromIID([Const] [In] Guid* rclsid, [Out] PWSTR* lplpsz);
HRESULT IIDFromString([Const] [In] PWSTR lpsz, [Out] Guid* lpiid);
HRESULT ProgIDFromCLSID([Const] [In] Guid* clsid, [Out] PWSTR* lplpszProgID);
HRESULT CLSIDFromProgID([Const] [In] PWSTR lpszProgID, [Out] Guid* lpclsid);
int StringFromGUID2([Const] [In] Guid* rguid, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR lpsz, [In] int cchMax);
HRESULT CoCreateGuid([Out] Guid* pguid);
HRESULT CoWaitForMultipleHandles([In] uint dwFlags, [In] uint dwTimeout, [In] uint cHandles, [NativeArrayInfo(CountParamIndex = 2)] [In] HANDLE* pHandles, [Out] uint* lpdwindex);
HRESULT CoWaitForMultipleObjects([In] uint dwFlags, [In] uint dwTimeout, [In] uint cHandles, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] HANDLE* pHandles, [Out] uint* lpdwindex);
HRESULT CoGetTreatAsClass([Const] [In] Guid* clsidOld, [Out] Guid* pClsidNew);
HRESULT CoInvalidateRemoteMachineBindings([In] PWSTR pszMachineName);
void* CoTaskMemAlloc([In] nuint cb);
void* CoTaskMemRealloc([Optional] void* pv, [In] nuint cb);
void CoTaskMemFree([Optional] void* pv);
HRESULT CoRegisterDeviceCatalog([Const] [In] PWSTR deviceInstanceId, [Out] CO_DEVICE_CATALOG_COOKIE* cookie);
HRESULT CoRevokeDeviceCatalog([In] CO_DEVICE_CATALOG_COOKIE cookie);
HRESULT CoGetInstanceFromFile([In] [Optional] COSERVERINFO* pServerInfo, [In] [Optional] Guid* pClsid, [In] [Optional] IUnknown punkOuter, [In] CLSCTX dwClsCtx, [In] uint grfMode, [In] PWSTR pwszName, [In] uint dwCount, [NativeArrayInfo(CountParamIndex = 6)] [In] [Out] MULTI_QI* pResults);
HRESULT CoGetInstanceFromIStorage([In] [Optional] COSERVERINFO* pServerInfo, [In] [Optional] Guid* pClsid, [In] [Optional] IUnknown punkOuter, [In] CLSCTX dwClsCtx, [In] IStorage pstg, [In] uint dwCount, [NativeArrayInfo(CountParamIndex = 5)] [In] [Out] MULTI_QI* pResults);
HRESULT StgOpenAsyncDocfileOnIFillLockBytes([In] IFillLockBytes pflb, [In] uint grfMode, [In] uint asyncFlags, [Out] IStorage* ppstgOpen);
HRESULT StgGetIFillLockBytesOnILockBytes([In] ILockBytes pilb, [Out] IFillLockBytes* ppflb);
HRESULT StgGetIFillLockBytesOnFile([Const] [In] PWSTR pwcsName, [Out] IFillLockBytes* ppflb);
HRESULT CreateStreamOnHGlobal([In] nint hGlobal, [In] BOOL fDeleteOnRelease, [Out] IStream* ppstm);
HRESULT GetHGlobalFromStream([In] IStream pstm, [Out] nint* phglobal);
HRESULT CoGetInterfaceAndReleaseStream([In] IStream pStm, [Const] [In] Guid* iid, [ComOutPtr] [Out] void** ppv);
HRESULT PropVariantCopy([Out] PROPVARIANT* pvarDest, [Const] [In] PROPVARIANT* pvarSrc);
HRESULT PropVariantClear([In] [Out] PROPVARIANT* pvar);
HRESULT FreePropVariantArray([In] uint cVariants, [NativeArrayInfo(CountParamIndex = 0)] [In] [Out] PROPVARIANT* rgvars);
HRESULT StgCreateDocfile([Const] [In] [Optional] PWSTR pwcsName, [In] STGM grfMode, [Reserved] [In] uint reserved, [Out] IStorage* ppstgOpen);
HRESULT StgCreateDocfileOnILockBytes([In] ILockBytes plkbyt, [In] STGM grfMode, [In] uint reserved, [Out] IStorage* ppstgOpen);
HRESULT StgOpenStorage([Const] [In] [Optional] PWSTR pwcsName, [In] [Optional] IStorage pstgPriority, [In] STGM grfMode, [In] [Optional] ushort** snbExclude, [In] uint reserved, [Out] IStorage* ppstgOpen);
HRESULT StgOpenStorageOnILockBytes([In] ILockBytes plkbyt, [In] [Optional] IStorage pstgPriority, [In] STGM grfMode, [In] [Optional] ushort** snbExclude, [Reserved] [In] uint reserved, [Out] IStorage* ppstgOpen);
HRESULT StgIsStorageFile([Const] [In] PWSTR pwcsName);
HRESULT StgIsStorageILockBytes([In] ILockBytes plkbyt);
HRESULT StgSetTimes([Const] [In] PWSTR lpszName, [Const] [In] [Optional] FILETIME* pctime, [Const] [In] [Optional] FILETIME* patime, [Const] [In] [Optional] FILETIME* pmtime);
HRESULT StgCreateStorageEx([Const] [In] [Optional] PWSTR pwcsName, [In] STGM grfMode, [In] STGFMT stgfmt, [In] uint grfAttrs, [In] [Out] [Optional] STGOPTIONS* pStgOptions, [In] [Optional] PSECURITY_DESCRIPTOR pSecurityDescriptor, [Const] [In] Guid* riid, [Out] void** ppObjectOpen);
HRESULT StgOpenStorageEx([Const] [In] PWSTR pwcsName, [In] STGM grfMode, [In] STGFMT stgfmt, [In] uint grfAttrs, [In] [Out] [Optional] STGOPTIONS* pStgOptions, [In] [Optional] PSECURITY_DESCRIPTOR pSecurityDescriptor, [Const] [In] Guid* riid, [Out] void** ppObjectOpen);
HRESULT StgCreatePropStg([In] IUnknown pUnk, [Const] [In] Guid* fmtid, [Const] [In] Guid* pclsid, [In] uint grfFlags, [Reserved] [In] uint dwReserved, [Out] IPropertyStorage* ppPropStg);
HRESULT StgOpenPropStg([In] IUnknown pUnk, [Const] [In] Guid* fmtid, [In] uint grfFlags, [Reserved] [In] uint dwReserved, [Out] IPropertyStorage* ppPropStg);
HRESULT StgCreatePropSetStg([In] IStorage pStorage, [Reserved] [In] uint dwReserved, [Out] IPropertySetStorage* ppPropSetStg);
HRESULT FmtIdToPropStgName([Const] [In] Guid* pfmtid, [Out] PWSTR oszName);
HRESULT PropStgNameToFmtId([Const] [In] PWSTR oszName, [Out] Guid* pfmtid);
HRESULT ReadClassStg([In] IStorage pStg, [Out] Guid* pclsid);
HRESULT WriteClassStg([In] IStorage pStg, [Const] [In] Guid* rclsid);
HRESULT ReadClassStm([In] IStream pStm, [Out] Guid* pclsid);
HRESULT WriteClassStm([In] IStream pStm, [Const] [In] Guid* rclsid);
HRESULT GetHGlobalFromILockBytes([In] ILockBytes plkbyt, [Out] nint* phglobal);
HRESULT CreateILockBytesOnHGlobal([In] [Optional] nint hGlobal, [In] BOOL fDeleteOnRelease, [Out] ILockBytes* pplkbyt);
HRESULT GetConvertStg([In] IStorage pStg);
SERIALIZEDPROPERTYVALUE* StgConvertVariantToProperty([Const] [In] PROPVARIANT* pvar, [In] ushort CodePage, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] SERIALIZEDPROPERTYVALUE* pprop, [In] [Out] uint* pcb, [In] uint pid, [Reserved] [In] BOOLEAN fReserved, [In] [Out] [Optional] uint* pcIndirect);
BOOLEAN StgConvertPropertyToVariant([Const] [In] SERIALIZEDPROPERTYVALUE* pprop, [In] ushort CodePage, [Out] PROPVARIANT* pvar, [In] PMemoryAllocator* pma);
uint StgPropertyLengthAsVariant([Const] [MemorySize(BytesParamIndex = 1)] [In] SERIALIZEDPROPERTYVALUE* pProp, [In] uint cbProp, [In] ushort CodePage, [Reserved] [In] byte bReserved);
HRESULT WriteFmtUserTypeStg([In] IStorage pstg, [In] ushort cf, [In] PWSTR lpszUserType);
HRESULT ReadFmtUserTypeStg([In] IStorage pstg, [Out] ushort* pcf, [Out] [Optional] PWSTR* lplpszUserType);
HRESULT OleConvertOLESTREAMToIStorage([In] OLESTREAM* lpolestream, [In] IStorage pstg, [Const] [In] DVTARGETDEVICE* ptd);
HRESULT OleConvertIStorageToOLESTREAM([In] IStorage pstg, [Out] OLESTREAM* lpolestream);
HRESULT SetConvertStg([In] IStorage pStg, [In] BOOL fConvert);
HRESULT OleConvertIStorageToOLESTREAMEx([In] IStorage pstg, [In] ushort cfFormat, [In] int lWidth, [In] int lHeight, [In] uint dwSize, [In] STGMEDIUM* pmedium, [Out] OLESTREAM* polestm);
HRESULT OleConvertOLESTREAMToIStorageEx([In] OLESTREAM* polestm, [In] IStorage pstg, [Out] ushort* pcfFormat, [Out] int* plwWidth, [Out] int* plHeight, [Out] uint* pdwSize, [Out] STGMEDIUM* pmedium);
HRESULT CoGetInterceptor([Const] [In] Guid* iidIntercepted, [In] IUnknown punkOuter, [Const] [In] Guid* iid, [Out] void** ppv);
HRESULT CoGetInterceptorFromTypeInfo([Const] [In] Guid* iidIntercepted, [In] IUnknown punkOuter, [In] ITypeInfo typeInfo, [Const] [In] Guid* iid, [Out] void** ppv);
uint HWND_UserSize([In] uint* param0, [In] uint param1, [In] HWND* param2);
byte* HWND_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] HWND* param2);
byte* HWND_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] HWND* param2);
void HWND_UserFree([In] uint* param0, [In] HWND* param1);
uint HWND_UserSize64([In] uint* param0, [In] uint param1, [In] HWND* param2);
byte* HWND_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] HWND* param2);
byte* HWND_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] HWND* param2);
void HWND_UserFree64([In] uint* param0, [In] HWND* param1);
uint CLIPFORMAT_UserSize([In] uint* param0, [In] uint param1, [In] ushort* param2);
byte* CLIPFORMAT_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] ushort* param2);
byte* CLIPFORMAT_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] ushort* param2);
void CLIPFORMAT_UserFree([In] uint* param0, [In] ushort* param1);
uint HBITMAP_UserSize([In] uint* param0, [In] uint param1, [In] HBITMAP* param2);
byte* HBITMAP_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] HBITMAP* param2);
byte* HBITMAP_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] HBITMAP* param2);
void HBITMAP_UserFree([In] uint* param0, [In] HBITMAP* param1);
uint HDC_UserSize([In] uint* param0, [In] uint param1, [In] HDC* param2);
byte* HDC_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] HDC* param2);
byte* HDC_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] HDC* param2);
void HDC_UserFree([In] uint* param0, [In] HDC* param1);
uint HICON_UserSize([In] uint* param0, [In] uint param1, [In] HICON* param2);
byte* HICON_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] HICON* param2);
byte* HICON_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] HICON* param2);
void HICON_UserFree([In] uint* param0, [In] HICON* param1);
uint SNB_UserSize([In] uint* param0, [In] uint param1, [In] ushort*** param2);
byte* SNB_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] ushort*** param2);
byte* SNB_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] ushort*** param2);
void SNB_UserFree([In] uint* param0, [In] ushort*** param1);
uint STGMEDIUM_UserSize([In] uint* param0, [In] uint param1, [In] STGMEDIUM* param2);
byte* STGMEDIUM_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] STGMEDIUM* param2);
byte* STGMEDIUM_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] STGMEDIUM* param2);
void STGMEDIUM_UserFree([In] uint* param0, [In] STGMEDIUM* param1);
uint CLIPFORMAT_UserSize64([In] uint* param0, [In] uint param1, [In] ushort* param2);
byte* CLIPFORMAT_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] ushort* param2);
byte* CLIPFORMAT_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] ushort* param2);
void CLIPFORMAT_UserFree64([In] uint* param0, [In] ushort* param1);
uint HBITMAP_UserSize64([In] uint* param0, [In] uint param1, [In] HBITMAP* param2);
byte* HBITMAP_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] HBITMAP* param2);
byte* HBITMAP_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] HBITMAP* param2);
void HBITMAP_UserFree64([In] uint* param0, [In] HBITMAP* param1);
uint HDC_UserSize64([In] uint* param0, [In] uint param1, [In] HDC* param2);
byte* HDC_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] HDC* param2);
byte* HDC_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] HDC* param2);
void HDC_UserFree64([In] uint* param0, [In] HDC* param1);
uint HICON_UserSize64([In] uint* param0, [In] uint param1, [In] HICON* param2);
byte* HICON_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] HICON* param2);
byte* HICON_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] HICON* param2);
void HICON_UserFree64([In] uint* param0, [In] HICON* param1);
uint SNB_UserSize64([In] uint* param0, [In] uint param1, [In] ushort*** param2);
byte* SNB_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] ushort*** param2);
byte* SNB_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] ushort*** param2);
void SNB_UserFree64([In] uint* param0, [In] ushort*** param1);
uint STGMEDIUM_UserSize64([In] uint* param0, [In] uint param1, [In] STGMEDIUM* param2);
byte* STGMEDIUM_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] STGMEDIUM* param2);
byte* STGMEDIUM_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] STGMEDIUM* param2);
void STGMEDIUM_UserFree64([In] uint* param0, [In] STGMEDIUM* param1);
HRESULT CoGetMarshalSizeMax([Out] uint* pulSize, [Const] [In] Guid* riid, [In] IUnknown pUnk, [In] uint dwDestContext, [In] [Optional] void* pvDestContext, [In] uint mshlflags);
HRESULT CoMarshalInterface([In] IStream pStm, [Const] [In] Guid* riid, [In] IUnknown pUnk, [In] uint dwDestContext, [In] [Optional] void* pvDestContext, [In] uint mshlflags);
HRESULT CoUnmarshalInterface([In] IStream pStm, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT CoMarshalHresult([In] IStream pstm, [In] HRESULT hresult);
HRESULT CoUnmarshalHresult([In] IStream pstm, [Out] HRESULT* phresult);
HRESULT CoReleaseMarshalData([In] IStream pStm);
HRESULT CoGetStandardMarshal([Const] [In] Guid* riid, [In] IUnknown pUnk, [In] uint dwDestContext, [In] [Optional] void* pvDestContext, [In] uint mshlflags, [Out] IMarshal* ppMarshal);
HRESULT CoGetStdMarshalEx([In] IUnknown pUnkOuter, [In] uint smexflags, [Out] IUnknown* ppUnkInner);
HRESULT CoMarshalInterThreadInterfaceInStream([Const] [In] Guid* riid, [In] IUnknown pUnk, [Out] IStream* ppStm);
uint HACCEL_UserSize([In] uint* param0, [In] uint param1, [In] HACCEL* param2);
byte* HACCEL_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] HACCEL* param2);
byte* HACCEL_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] HACCEL* param2);
void HACCEL_UserFree([In] uint* param0, [In] HACCEL* param1);
uint HGLOBAL_UserSize([In] uint* param0, [In] uint param1, [In] nint* param2);
byte* HGLOBAL_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] nint* param2);
byte* HGLOBAL_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] nint* param2);
void HGLOBAL_UserFree([In] uint* param0, [In] nint* param1);
uint HMENU_UserSize([In] uint* param0, [In] uint param1, [In] HMENU* param2);
byte* HMENU_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] HMENU* param2);
byte* HMENU_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] HMENU* param2);
void HMENU_UserFree([In] uint* param0, [In] HMENU* param1);
uint HACCEL_UserSize64([In] uint* param0, [In] uint param1, [In] HACCEL* param2);
byte* HACCEL_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] HACCEL* param2);
byte* HACCEL_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] HACCEL* param2);
void HACCEL_UserFree64([In] uint* param0, [In] HACCEL* param1);
uint HGLOBAL_UserSize64([In] uint* param0, [In] uint param1, [In] nint* param2);
byte* HGLOBAL_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] nint* param2);
byte* HGLOBAL_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] nint* param2);
void HGLOBAL_UserFree64([In] uint* param0, [In] nint* param1);
uint HMENU_UserSize64([In] uint* param0, [In] uint param1, [In] HMENU* param2);
byte* HMENU_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] HMENU* param2);
byte* HMENU_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] HMENU* param2);
void HMENU_UserFree64([In] uint* param0, [In] HMENU* param1);
uint HPALETTE_UserSize([In] uint* param0, [In] uint param1, [In] HPALETTE* param2);
byte* HPALETTE_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] HPALETTE* param2);
byte* HPALETTE_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] HPALETTE* param2);
void HPALETTE_UserFree([In] uint* param0, [In] HPALETTE* param1);
uint HPALETTE_UserSize64([In] uint* param0, [In] uint param1, [In] HPALETTE* param2);
byte* HPALETTE_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] HPALETTE* param2);
byte* HPALETTE_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] HPALETTE* param2);
void HPALETTE_UserFree64([In] uint* param0, [In] HPALETTE* param1);
HRESULT CoGetDefaultContext([In] APTTYPE aptType, [Const] [In] Guid* riid, [Out] void** ppv);
HRESULT CoDecodeProxy([In] uint dwClientPid, [In] ulong ui64ProxyAddress, [Out] ServerInformation* pServerInformation);
HRESULT RoGetAgileReference([In] AgileReferenceOptions options, [Const] [In] Guid* riid, [In] IUnknown pUnk, [ComOutPtr] [Out] IAgileReference* ppAgileReference);
uint HMONITOR_UserSize([In] uint* param0, [In] uint param1, [In] HMONITOR* param2);
byte* HMONITOR_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] HMONITOR* param2);
byte* HMONITOR_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] HMONITOR* param2);
void HMONITOR_UserFree([In] uint* param0, [In] HMONITOR* param1);
uint HMONITOR_UserSize64([In] uint* param0, [In] uint param1, [In] HMONITOR* param2);
byte* HMONITOR_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] HMONITOR* param2);
byte* HMONITOR_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] HMONITOR* param2);
void HMONITOR_UserFree64([In] uint* param0, [In] HMONITOR* param1);
