nint BluetoothFindFirstRadio([Const] [In] BLUETOOTH_FIND_RADIO_PARAMS* pbtfrp, [Out] HANDLE* phRadio);
BOOL BluetoothFindNextRadio([In] nint hFind, [Out] HANDLE* phRadio);
BOOL BluetoothFindRadioClose([In] nint hFind);
uint BluetoothGetRadioInfo([In] HANDLE hRadio, [In] [Out] BLUETOOTH_RADIO_INFO* pRadioInfo);
nint BluetoothFindFirstDevice([Const] [In] BLUETOOTH_DEVICE_SEARCH_PARAMS* pbtsp, [In] [Out] BLUETOOTH_DEVICE_INFO* pbtdi);
BOOL BluetoothFindNextDevice([In] nint hFind, [In] [Out] BLUETOOTH_DEVICE_INFO* pbtdi);
BOOL BluetoothFindDeviceClose([In] nint hFind);
uint BluetoothGetDeviceInfo([In] [Optional] HANDLE hRadio, [In] [Out] BLUETOOTH_DEVICE_INFO* pbtdi);
uint BluetoothUpdateDeviceRecord([Const] [In] BLUETOOTH_DEVICE_INFO* pbtdi);
uint BluetoothRemoveDevice([Const] [In] BLUETOOTH_ADDRESS* pAddress);
uint BluetoothSetServiceState([In] [Optional] HANDLE hRadio, [Const] [In] BLUETOOTH_DEVICE_INFO* pbtdi, [Const] [In] Guid* pGuidService, [In] uint dwServiceFlags);
uint BluetoothEnumerateInstalledServices([In] [Optional] HANDLE hRadio, [Const] [In] BLUETOOTH_DEVICE_INFO* pbtdi, [In] [Out] uint* pcServiceInout, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] Guid* pGuidServices);
BOOL BluetoothEnableDiscovery([In] [Optional] HANDLE hRadio, [In] BOOL fEnabled);
BOOL BluetoothIsDiscoverable([In] [Optional] HANDLE hRadio);
BOOL BluetoothEnableIncomingConnections([In] [Optional] HANDLE hRadio, [In] BOOL fEnabled);
BOOL BluetoothIsConnectable([In] [Optional] HANDLE hRadio);
uint BluetoothRegisterForAuthentication([Const] [In] [Optional] BLUETOOTH_DEVICE_INFO* pbtdi, [Out] nint* phRegHandle, [In] [Optional] PFN_AUTHENTICATION_CALLBACK pfnCallback, [In] [Optional] void* pvParam);
uint BluetoothRegisterForAuthenticationEx([Const] [In] [Optional] BLUETOOTH_DEVICE_INFO* pbtdiIn, [Out] nint* phRegHandleOut, [In] [Optional] PFN_AUTHENTICATION_CALLBACK_EX pfnCallbackIn, [In] [Optional] void* pvParam);
BOOL BluetoothUnregisterAuthentication([In] nint hRegHandle);
uint BluetoothSendAuthenticationResponse([In] [Optional] HANDLE hRadio, [Const] [In] BLUETOOTH_DEVICE_INFO* pbtdi, [Const] [In] PWSTR pszPasskey);
uint BluetoothSendAuthenticationResponseEx([In] [Optional] HANDLE hRadioIn, [In] BLUETOOTH_AUTHENTICATE_RESPONSE* pauthResponse);
uint BluetoothSdpGetElementData([MemorySize(BytesParamIndex = 1)] [In] byte* pSdpStream, [In] uint cbSdpStreamLength, [Out] SDP_ELEMENT_DATA* pData);
uint BluetoothSdpGetContainerElementData([MemorySize(BytesParamIndex = 1)] [In] byte* pContainerStream, [In] uint cbContainerLength, [In] [Out] nint* pElement, [Out] SDP_ELEMENT_DATA* pData);
uint BluetoothSdpGetAttributeValue([MemorySize(BytesParamIndex = 1)] [In] byte* pRecordStream, [In] uint cbRecordLength, [In] ushort usAttributeId, [Out] SDP_ELEMENT_DATA* pAttributeData);
uint BluetoothSdpGetString([MemorySize(BytesParamIndex = 1)] [In] byte* pRecordStream, [In] uint cbRecordLength, [Const] [In] [Optional] SDP_STRING_TYPE_DATA* pStringData, [In] ushort usStringOffset, [NativeArrayInfo(CountParamIndex = 5)] [Out] PWSTR pszString, [In] [Out] uint* pcchStringLength);
BOOL BluetoothSdpEnumAttributes([MemorySize(BytesParamIndex = 1)] [In] byte* pSDPStream, [In] uint cbStreamSize, [In] PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK pfnCallback, [In] void* pvParam);
uint BluetoothSetLocalServiceInfo([In] [Optional] HANDLE hRadioIn, [Const] [In] Guid* pClassGuid, [In] uint ulInstance, [Const] [In] BLUETOOTH_LOCAL_SERVICE_INFO* pServiceInfoIn);
BOOL BluetoothIsVersionAvailable([In] byte MajorVersion, [In] byte MinorVersion);
HRESULT BluetoothGATTGetServices([In] HANDLE hDevice, [In] ushort ServicesBufferCount, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] BTH_LE_GATT_SERVICE* ServicesBuffer, [Out] ushort* ServicesBufferActual, [In] uint Flags);
HRESULT BluetoothGATTGetIncludedServices([In] HANDLE hDevice, [In] [Optional] BTH_LE_GATT_SERVICE* ParentService, [In] ushort IncludedServicesBufferCount, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] BTH_LE_GATT_SERVICE* IncludedServicesBuffer, [Out] ushort* IncludedServicesBufferActual, [In] uint Flags);
HRESULT BluetoothGATTGetCharacteristics([In] HANDLE hDevice, [In] [Optional] BTH_LE_GATT_SERVICE* Service, [In] ushort CharacteristicsBufferCount, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] BTH_LE_GATT_CHARACTERISTIC* CharacteristicsBuffer, [Out] ushort* CharacteristicsBufferActual, [In] uint Flags);
HRESULT BluetoothGATTGetDescriptors([In] HANDLE hDevice, [In] BTH_LE_GATT_CHARACTERISTIC* Characteristic, [In] ushort DescriptorsBufferCount, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] BTH_LE_GATT_DESCRIPTOR* DescriptorsBuffer, [Out] ushort* DescriptorsBufferActual, [In] uint Flags);
HRESULT BluetoothGATTGetCharacteristicValue([In] HANDLE hDevice, [In] BTH_LE_GATT_CHARACTERISTIC* Characteristic, [In] uint CharacteristicValueDataSize, [Out] [Optional] BTH_LE_GATT_CHARACTERISTIC_VALUE* CharacteristicValue, [Out] [Optional] ushort* CharacteristicValueSizeRequired, [In] uint Flags);
HRESULT BluetoothGATTGetDescriptorValue([In] HANDLE hDevice, [In] BTH_LE_GATT_DESCRIPTOR* Descriptor, [In] uint DescriptorValueDataSize, [Out] [Optional] BTH_LE_GATT_DESCRIPTOR_VALUE* DescriptorValue, [Out] [Optional] ushort* DescriptorValueSizeRequired, [In] uint Flags);
HRESULT BluetoothGATTBeginReliableWrite([In] HANDLE hDevice, [Out] ulong* ReliableWriteContext, [In] uint Flags);
HRESULT BluetoothGATTSetCharacteristicValue([In] HANDLE hDevice, [In] BTH_LE_GATT_CHARACTERISTIC* Characteristic, [In] BTH_LE_GATT_CHARACTERISTIC_VALUE* CharacteristicValue, [In] [Optional] ulong ReliableWriteContext, [In] uint Flags);
HRESULT BluetoothGATTEndReliableWrite([In] HANDLE hDevice, [In] ulong ReliableWriteContext, [In] uint Flags);
HRESULT BluetoothGATTAbortReliableWrite([In] HANDLE hDevice, [In] ulong ReliableWriteContext, [In] uint Flags);
HRESULT BluetoothGATTSetDescriptorValue([In] HANDLE hDevice, [In] BTH_LE_GATT_DESCRIPTOR* Descriptor, [In] BTH_LE_GATT_DESCRIPTOR_VALUE* DescriptorValue, [In] uint Flags);
HRESULT BluetoothGATTRegisterEvent([In] HANDLE hService, [In] BTH_LE_GATT_EVENT_TYPE EventType, [In] void* EventParameterIn, [In] PFNBLUETOOTH_GATT_EVENT_CALLBACK Callback, [In] [Optional] void* CallbackContext, [Out] nint* pEventHandle, [In] uint Flags);
HRESULT BluetoothGATTUnregisterEvent([In] nint EventHandle, [In] uint Flags);
