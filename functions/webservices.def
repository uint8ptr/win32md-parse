HRESULT WsStartReaderCanonicalization([In] WS_XML_READER* reader, [In] WS_WRITE_CALLBACK writeCallback, [In] [Optional] void* writeCallbackState, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] WS_XML_CANONICALIZATION_PROPERTY* properties, [In] uint propertyCount, [In] [Optional] WS_ERROR* error);
HRESULT WsEndReaderCanonicalization([In] WS_XML_READER* reader, [In] [Optional] WS_ERROR* error);
HRESULT WsStartWriterCanonicalization([In] WS_XML_WRITER* writer, [In] WS_WRITE_CALLBACK writeCallback, [In] [Optional] void* writeCallbackState, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] WS_XML_CANONICALIZATION_PROPERTY* properties, [In] uint propertyCount, [In] [Optional] WS_ERROR* error);
HRESULT WsEndWriterCanonicalization([In] WS_XML_WRITER* writer, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateXmlBuffer([In] WS_HEAP* heap, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] WS_XML_BUFFER_PROPERTY* properties, [In] uint propertyCount, [Out] WS_XML_BUFFER** buffer, [In] [Optional] WS_ERROR* error);
HRESULT WsRemoveNode([Const] [In] WS_XML_NODE_POSITION* nodePosition, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateReader([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] WS_XML_READER_PROPERTY* properties, [In] uint propertyCount, [Out] WS_XML_READER** reader, [In] [Optional] WS_ERROR* error);
HRESULT WsSetInput([In] WS_XML_READER* reader, [Const] [In] [Optional] WS_XML_READER_ENCODING* encoding, [Const] [In] [Optional] WS_XML_READER_INPUT* input, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] WS_XML_READER_PROPERTY* properties, [In] uint propertyCount, [In] [Optional] WS_ERROR* error);
HRESULT WsSetInputToBuffer([In] WS_XML_READER* reader, [In] WS_XML_BUFFER* buffer, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] WS_XML_READER_PROPERTY* properties, [In] uint propertyCount, [In] [Optional] WS_ERROR* error);
void WsFreeReader([In] WS_XML_READER* reader);
HRESULT WsGetReaderProperty([In] WS_XML_READER* reader, [In] WS_XML_READER_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsGetReaderNode([In] WS_XML_READER* xmlReader, [Const] [Out] WS_XML_NODE** node, [In] [Optional] WS_ERROR* error);
HRESULT WsFillReader([In] WS_XML_READER* reader, [In] uint minSize, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsReadStartElement([In] WS_XML_READER* reader, [In] [Optional] WS_ERROR* error);
HRESULT WsReadToStartElement([In] WS_XML_READER* reader, [Const] [In] [Optional] WS_XML_STRING* localName, [Const] [In] [Optional] WS_XML_STRING* ns, [Out] [Optional] BOOL* found, [In] [Optional] WS_ERROR* error);
HRESULT WsReadStartAttribute([In] WS_XML_READER* reader, [In] uint attributeIndex, [In] [Optional] WS_ERROR* error);
HRESULT WsReadEndAttribute([In] WS_XML_READER* reader, [In] [Optional] WS_ERROR* error);
HRESULT WsReadNode([In] WS_XML_READER* reader, [In] [Optional] WS_ERROR* error);
HRESULT WsSkipNode([In] WS_XML_READER* reader, [In] [Optional] WS_ERROR* error);
HRESULT WsReadEndElement([In] WS_XML_READER* reader, [In] [Optional] WS_ERROR* error);
HRESULT WsFindAttribute([In] WS_XML_READER* reader, [Const] [In] WS_XML_STRING* localName, [Const] [In] WS_XML_STRING* ns, [In] BOOL required, [Out] uint* attributeIndex, [In] [Optional] WS_ERROR* error);
HRESULT WsReadValue([In] WS_XML_READER* reader, [In] WS_VALUE_TYPE valueType, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsReadChars([In] WS_XML_READER* reader, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR chars, [In] uint maxCharCount, [Out] uint* actualCharCount, [In] [Optional] WS_ERROR* error);
HRESULT WsReadCharsUtf8([In] WS_XML_READER* reader, [NativeArrayInfo(CountParamIndex = 2)] [Out] byte* bytes, [In] uint maxByteCount, [Out] uint* actualByteCount, [In] [Optional] WS_ERROR* error);
HRESULT WsReadBytes([In] WS_XML_READER* reader, [MemorySize(BytesParamIndex = 2)] [Out] void* bytes, [In] uint maxByteCount, [Out] uint* actualByteCount, [In] [Optional] WS_ERROR* error);
HRESULT WsReadArray([In] WS_XML_READER* reader, [Const] [In] WS_XML_STRING* localName, [Const] [In] WS_XML_STRING* ns, [In] WS_VALUE_TYPE valueType, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] void* array, [In] uint arraySize, [In] uint itemOffset, [In] uint itemCount, [Out] uint* actualItemCount, [In] [Optional] WS_ERROR* error);
HRESULT WsGetReaderPosition([In] WS_XML_READER* reader, [Out] WS_XML_NODE_POSITION* nodePosition, [In] [Optional] WS_ERROR* error);
HRESULT WsSetReaderPosition([In] WS_XML_READER* reader, [Const] [In] WS_XML_NODE_POSITION* nodePosition, [In] [Optional] WS_ERROR* error);
HRESULT WsMoveReader([In] WS_XML_READER* reader, [In] WS_MOVE_TO moveTo, [Out] [Optional] BOOL* found, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateWriter([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] WS_XML_WRITER_PROPERTY* properties, [In] uint propertyCount, [Out] WS_XML_WRITER** writer, [In] [Optional] WS_ERROR* error);
void WsFreeWriter([In] WS_XML_WRITER* writer);
HRESULT WsSetOutput([In] WS_XML_WRITER* writer, [Const] [In] [Optional] WS_XML_WRITER_ENCODING* encoding, [Const] [In] [Optional] WS_XML_WRITER_OUTPUT* output, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] WS_XML_WRITER_PROPERTY* properties, [In] uint propertyCount, [In] [Optional] WS_ERROR* error);
HRESULT WsSetOutputToBuffer([In] WS_XML_WRITER* writer, [In] WS_XML_BUFFER* buffer, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] WS_XML_WRITER_PROPERTY* properties, [In] uint propertyCount, [In] [Optional] WS_ERROR* error);
HRESULT WsGetWriterProperty([In] WS_XML_WRITER* writer, [In] WS_XML_WRITER_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsFlushWriter([In] WS_XML_WRITER* writer, [In] uint minSize, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteStartElement([In] WS_XML_WRITER* writer, [Const] [In] [Optional] WS_XML_STRING* prefix, [Const] [In] WS_XML_STRING* localName, [Const] [In] WS_XML_STRING* ns, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteEndStartElement([In] WS_XML_WRITER* writer, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteXmlnsAttribute([In] WS_XML_WRITER* writer, [Const] [In] [Optional] WS_XML_STRING* prefix, [Const] [In] WS_XML_STRING* ns, [In] BOOL singleQuote, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteStartAttribute([In] WS_XML_WRITER* writer, [Const] [In] [Optional] WS_XML_STRING* prefix, [Const] [In] WS_XML_STRING* localName, [Const] [In] WS_XML_STRING* ns, [In] BOOL singleQuote, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteEndAttribute([In] WS_XML_WRITER* writer, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteValue([In] WS_XML_WRITER* writer, [In] WS_VALUE_TYPE valueType, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteXmlBuffer([In] WS_XML_WRITER* writer, [In] WS_XML_BUFFER* xmlBuffer, [In] [Optional] WS_ERROR* error);
HRESULT WsReadXmlBuffer([In] WS_XML_READER* reader, [In] WS_HEAP* heap, [Out] WS_XML_BUFFER** xmlBuffer, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteXmlBufferToBytes([In] WS_XML_WRITER* writer, [In] WS_XML_BUFFER* xmlBuffer, [Const] [In] [Optional] WS_XML_WRITER_ENCODING* encoding, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] WS_XML_WRITER_PROPERTY* properties, [In] uint propertyCount, [In] WS_HEAP* heap, [Out] void** bytes, [Out] uint* byteCount, [In] [Optional] WS_ERROR* error);
HRESULT WsReadXmlBufferFromBytes([In] WS_XML_READER* reader, [Const] [In] [Optional] WS_XML_READER_ENCODING* encoding, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] WS_XML_READER_PROPERTY* properties, [In] uint propertyCount, [Const] [MemorySize(BytesParamIndex = 5)] [In] void* bytes, [In] uint byteCount, [In] WS_HEAP* heap, [Out] WS_XML_BUFFER** xmlBuffer, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteArray([In] WS_XML_WRITER* writer, [Const] [In] WS_XML_STRING* localName, [Const] [In] WS_XML_STRING* ns, [In] WS_VALUE_TYPE valueType, [Const] [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* array, [In] uint arraySize, [In] uint itemOffset, [In] uint itemCount, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteQualifiedName([In] WS_XML_WRITER* writer, [Const] [In] [Optional] WS_XML_STRING* prefix, [Const] [In] WS_XML_STRING* localName, [Const] [In] [Optional] WS_XML_STRING* ns, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteChars([In] WS_XML_WRITER* writer, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR chars, [In] uint charCount, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteCharsUtf8([In] WS_XML_WRITER* writer, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] byte* bytes, [In] uint byteCount, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteBytes([In] WS_XML_WRITER* writer, [Const] [MemorySize(BytesParamIndex = 2)] [In] void* bytes, [In] uint byteCount, [In] [Optional] WS_ERROR* error);
HRESULT WsPushBytes([In] WS_XML_WRITER* writer, [In] WS_PUSH_BYTES_CALLBACK callback, [In] [Optional] void* callbackState, [In] [Optional] WS_ERROR* error);
HRESULT WsPullBytes([In] WS_XML_WRITER* writer, [In] WS_PULL_BYTES_CALLBACK callback, [In] [Optional] void* callbackState, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteEndElement([In] WS_XML_WRITER* writer, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteText([In] WS_XML_WRITER* writer, [Const] [In] WS_XML_TEXT* text, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteStartCData([In] WS_XML_WRITER* writer, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteEndCData([In] WS_XML_WRITER* writer, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteNode([In] WS_XML_WRITER* writer, [Const] [In] WS_XML_NODE* node, [In] [Optional] WS_ERROR* error);
HRESULT WsGetPrefixFromNamespace([In] WS_XML_WRITER* writer, [Const] [In] WS_XML_STRING* ns, [In] BOOL required, [Const] [Out] WS_XML_STRING** prefix, [In] [Optional] WS_ERROR* error);
HRESULT WsGetWriterPosition([In] WS_XML_WRITER* writer, [Out] WS_XML_NODE_POSITION* nodePosition, [In] [Optional] WS_ERROR* error);
HRESULT WsSetWriterPosition([In] WS_XML_WRITER* writer, [Const] [In] WS_XML_NODE_POSITION* nodePosition, [In] [Optional] WS_ERROR* error);
HRESULT WsMoveWriter([In] WS_XML_WRITER* writer, [In] WS_MOVE_TO moveTo, [Out] [Optional] BOOL* found, [In] [Optional] WS_ERROR* error);
HRESULT WsTrimXmlWhitespace([NativeArrayInfo(CountParamIndex = 1)] [In] PWSTR chars, [In] uint charCount, [Out] ushort** trimmedChars, [Out] uint* trimmedCount, [In] [Optional] WS_ERROR* error);
HRESULT WsVerifyXmlNCName([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PWSTR ncNameChars, [In] uint ncNameCharCount, [In] [Optional] WS_ERROR* error);
HRESULT WsXmlStringEquals([Const] [In] WS_XML_STRING* string1, [Const] [In] WS_XML_STRING* string2, [In] [Optional] WS_ERROR* error);
HRESULT WsGetNamespaceFromPrefix([In] WS_XML_READER* reader, [Const] [In] WS_XML_STRING* prefix, [In] BOOL required, [Const] [Out] WS_XML_STRING** ns, [In] [Optional] WS_ERROR* error);
HRESULT WsReadQualifiedName([In] WS_XML_READER* reader, [In] WS_HEAP* heap, [Out] [Optional] WS_XML_STRING* prefix, [Out] WS_XML_STRING* localName, [Out] [Optional] WS_XML_STRING* ns, [In] [Optional] WS_ERROR* error);
HRESULT WsGetXmlAttribute([In] WS_XML_READER* reader, [Const] [In] WS_XML_STRING* localName, [In] WS_HEAP* heap, [Out] [Optional] ushort** valueChars, [Out] uint* valueCharCount, [In] [Optional] WS_ERROR* error);
HRESULT WsCopyNode([In] WS_XML_WRITER* writer, [In] WS_XML_READER* reader, [In] [Optional] WS_ERROR* error);
HRESULT WsAsyncExecute([In] WS_ASYNC_STATE* asyncState, [In] WS_ASYNC_FUNCTION operation, [In] WS_CALLBACK_MODEL callbackModel, [In] [Optional] void* callbackState, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateChannel([In] WS_CHANNEL_TYPE channelType, [In] WS_CHANNEL_BINDING channelBinding, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] WS_CHANNEL_PROPERTY* properties, [In] uint propertyCount, [Const] [In] [Optional] WS_SECURITY_DESCRIPTION* securityDescription, [Out] WS_CHANNEL** channel, [In] [Optional] WS_ERROR* error);
HRESULT WsOpenChannel([In] WS_CHANNEL* channel, [Const] [In] WS_ENDPOINT_ADDRESS* endpointAddress, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsSendMessage([In] WS_CHANNEL* channel, [In] WS_MESSAGE* message, [Const] [In] WS_MESSAGE_DESCRIPTION* messageDescription, [In] WS_WRITE_OPTION writeOption, [Const] [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* bodyValue, [In] uint bodyValueSize, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsReceiveMessage([In] WS_CHANNEL* channel, [In] WS_MESSAGE* message, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] WS_MESSAGE_DESCRIPTION** messageDescriptions, [In] uint messageDescriptionCount, [In] WS_RECEIVE_OPTION receiveOption, [In] WS_READ_OPTION readBodyOption, [In] [Optional] WS_HEAP* heap, [MemorySize(BytesParamIndex = 8)] [Out] void* value, [In] uint valueSize, [Out] [Optional] uint* index, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsRequestReply([In] WS_CHANNEL* channel, [In] WS_MESSAGE* requestMessage, [Const] [In] WS_MESSAGE_DESCRIPTION* requestMessageDescription, [In] WS_WRITE_OPTION writeOption, [Const] [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* requestBodyValue, [In] uint requestBodyValueSize, [In] WS_MESSAGE* replyMessage, [Const] [In] WS_MESSAGE_DESCRIPTION* replyMessageDescription, [In] WS_READ_OPTION readOption, [In] [Optional] WS_HEAP* heap, [MemorySize(BytesParamIndex = 11)] [Out] [Optional] void* value, [In] uint valueSize, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsSendReplyMessage([In] WS_CHANNEL* channel, [In] WS_MESSAGE* replyMessage, [Const] [In] WS_MESSAGE_DESCRIPTION* replyMessageDescription, [In] WS_WRITE_OPTION writeOption, [Const] [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* replyBodyValue, [In] uint replyBodyValueSize, [In] WS_MESSAGE* requestMessage, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsSendFaultMessageForError([In] WS_CHANNEL* channel, [In] WS_MESSAGE* replyMessage, [In] WS_ERROR* faultError, [In] HRESULT faultErrorCode, [In] WS_FAULT_DISCLOSURE faultDisclosure, [In] WS_MESSAGE* requestMessage, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsGetChannelProperty([In] WS_CHANNEL* channel, [In] WS_CHANNEL_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsSetChannelProperty([In] WS_CHANNEL* channel, [In] WS_CHANNEL_PROPERTY_ID id, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteMessageStart([In] WS_CHANNEL* channel, [In] WS_MESSAGE* message, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteMessageEnd([In] WS_CHANNEL* channel, [In] WS_MESSAGE* message, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsReadMessageStart([In] WS_CHANNEL* channel, [In] WS_MESSAGE* message, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsReadMessageEnd([In] WS_CHANNEL* channel, [In] WS_MESSAGE* message, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsCloseChannel([In] WS_CHANNEL* channel, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsAbortChannel([In] WS_CHANNEL* channel, [In] [Optional] WS_ERROR* error);
void WsFreeChannel([In] WS_CHANNEL* channel);
HRESULT WsResetChannel([In] WS_CHANNEL* channel, [In] [Optional] WS_ERROR* error);
HRESULT WsAbandonMessage([In] WS_CHANNEL* channel, [In] WS_MESSAGE* message, [In] [Optional] WS_ERROR* error);
HRESULT WsShutdownSessionChannel([In] WS_CHANNEL* channel, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsGetOperationContextProperty([Const] [In] WS_OPERATION_CONTEXT* context, [Const] [In] WS_OPERATION_CONTEXT_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsGetDictionary([In] WS_ENCODING encoding, [Out] [Optional] WS_XML_DICTIONARY** dictionary, [In] [Optional] WS_ERROR* error);
HRESULT WsReadEndpointAddressExtension([In] WS_XML_READER* reader, [In] WS_ENDPOINT_ADDRESS* endpointAddress, [In] WS_ENDPOINT_ADDRESS_EXTENSION_TYPE extensionType, [In] WS_READ_OPTION readOption, [In] WS_HEAP* heap, [MemorySize(BytesParamIndex = 6)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateError([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] WS_ERROR_PROPERTY* properties, [In] uint propertyCount, [Out] WS_ERROR** error);
HRESULT WsAddErrorString([In] WS_ERROR* error, [Const] [In] WS_STRING* string);
HRESULT WsGetErrorString([In] WS_ERROR* error, [In] uint index, [Out] WS_STRING* string);
HRESULT WsCopyError([In] WS_ERROR* source, [In] WS_ERROR* destination);
HRESULT WsGetErrorProperty([In] WS_ERROR* error, [In] WS_ERROR_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* buffer, [In] uint bufferSize);
HRESULT WsSetErrorProperty([In] WS_ERROR* error, [In] WS_ERROR_PROPERTY_ID id, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* value, [In] uint valueSize);
HRESULT WsResetError([In] WS_ERROR* error);
void WsFreeError([In] WS_ERROR* error);
HRESULT WsGetFaultErrorProperty([In] WS_ERROR* error, [In] WS_FAULT_ERROR_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* buffer, [In] uint bufferSize);
HRESULT WsSetFaultErrorProperty([In] WS_ERROR* error, [In] WS_FAULT_ERROR_PROPERTY_ID id, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* value, [In] uint valueSize);
HRESULT WsCreateFaultFromError([In] WS_ERROR* error, [In] HRESULT faultErrorCode, [In] WS_FAULT_DISCLOSURE faultDisclosure, [In] WS_HEAP* heap, [Out] WS_FAULT* fault);
HRESULT WsSetFaultErrorDetail([In] WS_ERROR* error, [Const] [In] WS_FAULT_DETAIL_DESCRIPTION* faultDetailDescription, [In] WS_WRITE_OPTION writeOption, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* value, [In] uint valueSize);
HRESULT WsGetFaultErrorDetail([In] WS_ERROR* error, [Const] [In] WS_FAULT_DETAIL_DESCRIPTION* faultDetailDescription, [In] WS_READ_OPTION readOption, [In] [Optional] WS_HEAP* heap, [MemorySize(BytesParamIndex = 5)] [Out] void* value, [In] uint valueSize);
HRESULT WsCreateHeap([In] nuint maxSize, [In] nuint trimSize, [Const] [In] [Optional] WS_HEAP_PROPERTY* properties, [In] uint propertyCount, [Out] WS_HEAP** heap, [In] [Optional] WS_ERROR* error);
HRESULT WsAlloc([In] WS_HEAP* heap, [In] nuint size, [Out] void** ptr, [In] [Optional] WS_ERROR* error);
HRESULT WsGetHeapProperty([In] WS_HEAP* heap, [In] WS_HEAP_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsResetHeap([In] WS_HEAP* heap, [In] [Optional] WS_ERROR* error);
void WsFreeHeap([In] WS_HEAP* heap);
HRESULT WsCreateListener([In] WS_CHANNEL_TYPE channelType, [In] WS_CHANNEL_BINDING channelBinding, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] WS_LISTENER_PROPERTY* properties, [In] uint propertyCount, [Const] [In] [Optional] WS_SECURITY_DESCRIPTION* securityDescription, [Out] WS_LISTENER** listener, [In] [Optional] WS_ERROR* error);
HRESULT WsOpenListener([In] WS_LISTENER* listener, [Const] [In] WS_STRING* url, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsAcceptChannel([In] WS_LISTENER* listener, [In] WS_CHANNEL* channel, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsCloseListener([In] WS_LISTENER* listener, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsAbortListener([In] WS_LISTENER* listener, [In] [Optional] WS_ERROR* error);
HRESULT WsResetListener([In] WS_LISTENER* listener, [In] [Optional] WS_ERROR* error);
void WsFreeListener([In] WS_LISTENER* listener);
HRESULT WsGetListenerProperty([In] WS_LISTENER* listener, [In] WS_LISTENER_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsSetListenerProperty([In] WS_LISTENER* listener, [In] WS_LISTENER_PROPERTY_ID id, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateChannelForListener([In] WS_LISTENER* listener, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] WS_CHANNEL_PROPERTY* properties, [In] uint propertyCount, [Out] WS_CHANNEL** channel, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateMessage([In] WS_ENVELOPE_VERSION envelopeVersion, [In] WS_ADDRESSING_VERSION addressingVersion, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] WS_MESSAGE_PROPERTY* properties, [In] uint propertyCount, [Out] WS_MESSAGE** message, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateMessageForChannel([In] WS_CHANNEL* channel, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] WS_MESSAGE_PROPERTY* properties, [In] uint propertyCount, [Out] WS_MESSAGE** message, [In] [Optional] WS_ERROR* error);
HRESULT WsInitializeMessage([In] WS_MESSAGE* message, [In] WS_MESSAGE_INITIALIZATION initialization, [In] [Optional] WS_MESSAGE* sourceMessage, [In] [Optional] WS_ERROR* error);
HRESULT WsResetMessage([In] WS_MESSAGE* message, [In] [Optional] WS_ERROR* error);
void WsFreeMessage([In] WS_MESSAGE* message);
HRESULT WsGetHeaderAttributes([In] WS_MESSAGE* message, [In] WS_XML_READER* reader, [Out] uint* headerAttributes, [In] [Optional] WS_ERROR* error);
HRESULT WsGetHeader([In] WS_MESSAGE* message, [In] WS_HEADER_TYPE headerType, [In] WS_TYPE valueType, [In] WS_READ_OPTION readOption, [In] [Optional] WS_HEAP* heap, [MemorySize(BytesParamIndex = 6)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsGetCustomHeader([In] WS_MESSAGE* message, [Const] [In] WS_ELEMENT_DESCRIPTION* customHeaderDescription, [In] WS_REPEATING_HEADER_OPTION repeatingOption, [In] uint headerIndex, [In] WS_READ_OPTION readOption, [In] [Optional] WS_HEAP* heap, [MemorySize(BytesParamIndex = 7)] [Out] void* value, [In] uint valueSize, [Out] [Optional] uint* headerAttributes, [In] [Optional] WS_ERROR* error);
HRESULT WsRemoveHeader([In] WS_MESSAGE* message, [In] WS_HEADER_TYPE headerType, [In] [Optional] WS_ERROR* error);
HRESULT WsSetHeader([In] WS_MESSAGE* message, [In] WS_HEADER_TYPE headerType, [In] WS_TYPE valueType, [In] WS_WRITE_OPTION writeOption, [Const] [MemorySize(BytesParamIndex = 5)] [In] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsRemoveCustomHeader([In] WS_MESSAGE* message, [Const] [In] WS_XML_STRING* headerName, [Const] [In] WS_XML_STRING* headerNs, [In] [Optional] WS_ERROR* error);
HRESULT WsAddCustomHeader([In] WS_MESSAGE* message, [Const] [In] WS_ELEMENT_DESCRIPTION* headerDescription, [In] WS_WRITE_OPTION writeOption, [Const] [MemorySize(BytesParamIndex = 4)] [In] void* value, [In] uint valueSize, [In] uint headerAttributes, [In] [Optional] WS_ERROR* error);
HRESULT WsAddMappedHeader([In] WS_MESSAGE* message, [Const] [In] WS_XML_STRING* headerName, [In] WS_TYPE valueType, [In] WS_WRITE_OPTION writeOption, [Const] [MemorySize(BytesParamIndex = 5)] [In] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsRemoveMappedHeader([In] WS_MESSAGE* message, [Const] [In] WS_XML_STRING* headerName, [In] [Optional] WS_ERROR* error);
HRESULT WsGetMappedHeader([In] WS_MESSAGE* message, [Const] [In] WS_XML_STRING* headerName, [In] WS_REPEATING_HEADER_OPTION repeatingOption, [In] uint headerIndex, [In] WS_TYPE valueType, [In] WS_READ_OPTION readOption, [In] [Optional] WS_HEAP* heap, [MemorySize(BytesParamIndex = 8)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteBody([In] WS_MESSAGE* message, [Const] [In] WS_ELEMENT_DESCRIPTION* bodyDescription, [In] WS_WRITE_OPTION writeOption, [Const] [MemorySize(BytesParamIndex = 4)] [In] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsReadBody([In] WS_MESSAGE* message, [Const] [In] WS_ELEMENT_DESCRIPTION* bodyDescription, [In] WS_READ_OPTION readOption, [In] [Optional] WS_HEAP* heap, [MemorySize(BytesParamIndex = 5)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteEnvelopeStart([In] WS_MESSAGE* message, [In] WS_XML_WRITER* writer, [In] [Optional] WS_MESSAGE_DONE_CALLBACK doneCallback, [In] [Optional] void* doneCallbackState, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteEnvelopeEnd([In] WS_MESSAGE* message, [In] [Optional] WS_ERROR* error);
HRESULT WsReadEnvelopeStart([In] WS_MESSAGE* message, [In] WS_XML_READER* reader, [In] [Optional] WS_MESSAGE_DONE_CALLBACK doneCallback, [In] [Optional] void* doneCallbackState, [In] [Optional] WS_ERROR* error);
HRESULT WsReadEnvelopeEnd([In] WS_MESSAGE* message, [In] [Optional] WS_ERROR* error);
HRESULT WsGetMessageProperty([In] WS_MESSAGE* message, [In] WS_MESSAGE_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsSetMessageProperty([In] WS_MESSAGE* message, [In] WS_MESSAGE_PROPERTY_ID id, [Const] [MemorySize(BytesParamIndex = 3)] [In] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsAddressMessage([In] WS_MESSAGE* message, [Const] [In] [Optional] WS_ENDPOINT_ADDRESS* address, [In] [Optional] WS_ERROR* error);
HRESULT WsCheckMustUnderstandHeaders([In] WS_MESSAGE* message, [In] [Optional] WS_ERROR* error);
HRESULT WsMarkHeaderAsUnderstood([In] WS_MESSAGE* message, [Const] [In] WS_XML_NODE_POSITION* headerPosition, [In] [Optional] WS_ERROR* error);
HRESULT WsFillBody([In] WS_MESSAGE* message, [In] uint minSize, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsFlushBody([In] WS_MESSAGE* message, [In] uint minSize, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsRequestSecurityToken([In] WS_CHANNEL* channel, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] WS_REQUEST_SECURITY_TOKEN_PROPERTY* properties, [In] uint propertyCount, [Out] WS_SECURITY_TOKEN** token, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsGetSecurityTokenProperty([In] WS_SECURITY_TOKEN* securityToken, [In] WS_SECURITY_TOKEN_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_HEAP* heap, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateXmlSecurityToken([In] [Optional] WS_XML_BUFFER* tokenXml, [In] [Optional] WS_SECURITY_KEY_HANDLE* tokenKey, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] WS_XML_SECURITY_TOKEN_PROPERTY* properties, [In] uint propertyCount, [Out] WS_SECURITY_TOKEN** token, [In] [Optional] WS_ERROR* error);
void WsFreeSecurityToken([In] WS_SECURITY_TOKEN* token);
HRESULT WsRevokeSecurityContext([In] WS_SECURITY_CONTEXT* securityContext, [In] [Optional] WS_ERROR* error);
HRESULT WsGetSecurityContextProperty([In] WS_SECURITY_CONTEXT* securityContext, [In] WS_SECURITY_CONTEXT_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsReadElement([In] WS_XML_READER* reader, [Const] [In] WS_ELEMENT_DESCRIPTION* elementDescription, [In] WS_READ_OPTION readOption, [In] [Optional] WS_HEAP* heap, [MemorySize(BytesParamIndex = 5)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsReadAttribute([In] WS_XML_READER* reader, [Const] [In] WS_ATTRIBUTE_DESCRIPTION* attributeDescription, [In] WS_READ_OPTION readOption, [In] [Optional] WS_HEAP* heap, [MemorySize(BytesParamIndex = 5)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsReadType([In] WS_XML_READER* reader, [In] WS_TYPE_MAPPING typeMapping, [In] WS_TYPE type, [Const] [In] [Optional] void* typeDescription, [In] WS_READ_OPTION readOption, [In] [Optional] WS_HEAP* heap, [MemorySize(BytesParamIndex = 7)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteElement([In] WS_XML_WRITER* writer, [Const] [In] WS_ELEMENT_DESCRIPTION* elementDescription, [In] WS_WRITE_OPTION writeOption, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteAttribute([In] WS_XML_WRITER* writer, [Const] [In] WS_ATTRIBUTE_DESCRIPTION* attributeDescription, [In] WS_WRITE_OPTION writeOption, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsWriteType([In] WS_XML_WRITER* writer, [In] WS_TYPE_MAPPING typeMapping, [In] WS_TYPE type, [Const] [In] [Optional] void* typeDescription, [In] WS_WRITE_OPTION writeOption, [Const] [MemorySize(BytesParamIndex = 6)] [In] [Optional] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsRegisterOperationForCancel([Const] [In] WS_OPERATION_CONTEXT* context, [In] WS_OPERATION_CANCEL_CALLBACK cancelCallback, [In] [Optional] WS_OPERATION_FREE_STATE_CALLBACK freestateCallback, [In] [Optional] void* userState, [In] [Optional] WS_ERROR* error);
HRESULT WsGetServiceHostProperty([In] WS_SERVICE_HOST* serviceHost, [Const] [In] WS_SERVICE_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateServiceHost([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] WS_SERVICE_ENDPOINT** endpoints, [Const] [In] ushort endpointCount, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] WS_SERVICE_PROPERTY* serviceProperties, [In] uint servicePropertyCount, [Out] WS_SERVICE_HOST** serviceHost, [In] [Optional] WS_ERROR* error);
HRESULT WsOpenServiceHost([In] WS_SERVICE_HOST* serviceHost, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsCloseServiceHost([In] WS_SERVICE_HOST* serviceHost, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsAbortServiceHost([In] WS_SERVICE_HOST* serviceHost, [In] [Optional] WS_ERROR* error);
void WsFreeServiceHost([In] WS_SERVICE_HOST* serviceHost);
HRESULT WsResetServiceHost([In] WS_SERVICE_HOST* serviceHost, [In] [Optional] WS_ERROR* error);
HRESULT WsGetServiceProxyProperty([In] WS_SERVICE_PROXY* serviceProxy, [Const] [In] WS_PROXY_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateServiceProxy([Const] [In] WS_CHANNEL_TYPE channelType, [Const] [In] WS_CHANNEL_BINDING channelBinding, [Const] [In] [Optional] WS_SECURITY_DESCRIPTION* securityDescription, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] WS_PROXY_PROPERTY* properties, [Const] [In] uint propertyCount, [Const] [NativeArrayInfo(CountParamIndex = 6)] [In] [Optional] WS_CHANNEL_PROPERTY* channelProperties, [Const] [In] uint channelPropertyCount, [Out] WS_SERVICE_PROXY** serviceProxy, [In] [Optional] WS_ERROR* error);
HRESULT WsOpenServiceProxy([In] WS_SERVICE_PROXY* serviceProxy, [Const] [In] WS_ENDPOINT_ADDRESS* address, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsCloseServiceProxy([In] WS_SERVICE_PROXY* serviceProxy, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsAbortServiceProxy([In] WS_SERVICE_PROXY* serviceProxy, [In] [Optional] WS_ERROR* error);
void WsFreeServiceProxy([In] WS_SERVICE_PROXY* serviceProxy);
HRESULT WsResetServiceProxy([In] WS_SERVICE_PROXY* serviceProxy, [In] [Optional] WS_ERROR* error);
HRESULT WsAbandonCall([In] WS_SERVICE_PROXY* serviceProxy, [In] uint callId, [In] [Optional] WS_ERROR* error);
HRESULT WsCall([In] WS_SERVICE_PROXY* serviceProxy, [Const] [In] WS_OPERATION_DESCRIPTION* operation, [Const] [In] [Optional] void** arguments, [In] WS_HEAP* heap, [Const] [NativeArrayInfo(CountParamIndex = 5)] [In] [Optional] WS_CALL_PROPERTY* callProperties, [Const] [In] uint callPropertyCount, [Const] [In] [Optional] WS_ASYNC_CONTEXT* asyncContext, [In] [Optional] WS_ERROR* error);
HRESULT WsDecodeUrl([Const] [In] WS_STRING* url, [In] uint flags, [In] WS_HEAP* heap, [Out] WS_URL** outUrl, [In] [Optional] WS_ERROR* error);
HRESULT WsEncodeUrl([Const] [In] WS_URL* url, [In] uint flags, [In] WS_HEAP* heap, [Out] WS_STRING* outUrl, [In] [Optional] WS_ERROR* error);
HRESULT WsCombineUrl([Const] [In] WS_STRING* baseUrl, [Const] [In] WS_STRING* referenceUrl, [In] uint flags, [In] WS_HEAP* heap, [Out] WS_STRING* resultUrl, [In] [Optional] WS_ERROR* error);
HRESULT WsDateTimeToFileTime([Const] [In] WS_DATETIME* dateTime, [Out] FILETIME* fileTime, [In] [Optional] WS_ERROR* error);
HRESULT WsFileTimeToDateTime([Const] [In] FILETIME* fileTime, [Out] WS_DATETIME* dateTime, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateMetadata([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] WS_METADATA_PROPERTY* properties, [In] uint propertyCount, [Out] WS_METADATA** metadata, [In] [Optional] WS_ERROR* error);
HRESULT WsReadMetadata([In] WS_METADATA* metadata, [In] WS_XML_READER* reader, [Const] [In] WS_STRING* url, [In] [Optional] WS_ERROR* error);
void WsFreeMetadata([In] WS_METADATA* metadata);
HRESULT WsResetMetadata([In] WS_METADATA* metadata, [In] [Optional] WS_ERROR* error);
HRESULT WsGetMetadataProperty([In] WS_METADATA* metadata, [In] WS_METADATA_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsGetMissingMetadataDocumentAddress([In] WS_METADATA* metadata, [Out] [Optional] WS_ENDPOINT_ADDRESS** address, [In] [Optional] WS_ERROR* error);
HRESULT WsGetMetadataEndpoints([In] WS_METADATA* metadata, [Out] WS_METADATA_ENDPOINTS* endpoints, [In] [Optional] WS_ERROR* error);
HRESULT WsMatchPolicyAlternative([In] WS_POLICY* policy, [In] uint alternativeIndex, [In] WS_POLICY_CONSTRAINTS* policyConstraints, [In] BOOL matchRequired, [In] WS_HEAP* heap, [In] [Optional] WS_ERROR* error);
HRESULT WsGetPolicyProperty([In] WS_POLICY* policy, [In] WS_POLICY_PROPERTY_ID id, [MemorySize(BytesParamIndex = 3)] [Out] void* value, [In] uint valueSize, [In] [Optional] WS_ERROR* error);
HRESULT WsGetPolicyAlternativeCount([In] WS_POLICY* policy, [Out] uint* count, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateServiceProxyFromTemplate([In] WS_CHANNEL_TYPE channelType, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] WS_PROXY_PROPERTY* properties, [Const] [In] uint propertyCount, [In] WS_BINDING_TEMPLATE_TYPE templateType, [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* templateValue, [In] uint templateSize, [Const] [In] void* templateDescription, [In] uint templateDescriptionSize, [Out] WS_SERVICE_PROXY** serviceProxy, [In] [Optional] WS_ERROR* error);
HRESULT WsCreateServiceEndpointFromTemplate([In] WS_CHANNEL_TYPE channelType, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] WS_SERVICE_ENDPOINT_PROPERTY* properties, [In] uint propertyCount, [Const] [In] [Optional] WS_STRING* addressUrl, [Const] [In] WS_SERVICE_CONTRACT* contract, [In] [Optional] WS_SERVICE_SECURITY_CALLBACK authorizationCallback, [In] WS_HEAP* heap, [In] WS_BINDING_TEMPLATE_TYPE templateType, [MemorySize(BytesParamIndex = 9)] [In] [Optional] void* templateValue, [In] uint templateSize, [Const] [In] void* templateDescription, [In] uint templateDescriptionSize, [Out] WS_SERVICE_ENDPOINT** serviceEndpoint, [In] [Optional] WS_ERROR* error);
