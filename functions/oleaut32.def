BSTR SysAllocString([Const] [In] [Optional] PWSTR psz);
int SysReAllocString([In] [Out] BSTR* pbstr, [Const] [In] [Optional] PWSTR psz);
BSTR SysAllocStringLen([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] PWSTR strIn, [In] uint ui);
int SysReAllocStringLen([In] [Out] BSTR* pbstr, [Const] [In] [Optional] PWSTR psz, [In] uint len);
HRESULT SysAddRefString([In] BSTR bstrString);
void SysReleaseString([In] BSTR bstrString);
void SysFreeString([In] [Optional] BSTR bstrString);
uint SysStringLen([In] [Optional] BSTR pbstr);
uint SysStringByteLen([In] [Optional] BSTR bstr);
BSTR SysAllocStringByteLen([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] [Optional] PSTR psz, [In] uint len);
int DosDateTimeToVariantTime([In] ushort wDosDate, [In] ushort wDosTime, [Out] double* pvtime);
int VariantTimeToDosDateTime([In] double vtime, [Out] ushort* pwDosDate, [Out] ushort* pwDosTime);
int SystemTimeToVariantTime([In] SYSTEMTIME* lpSystemTime, [Out] double* pvtime);
int VariantTimeToSystemTime([In] double vtime, [Out] SYSTEMTIME* lpSystemTime);
HRESULT SafeArrayAllocDescriptor([In] uint cDims, [Out] SAFEARRAY** ppsaOut);
HRESULT SafeArrayAllocDescriptorEx([In] VARENUM vt, [In] uint cDims, [Out] SAFEARRAY** ppsaOut);
HRESULT SafeArrayAllocData([In] SAFEARRAY* psa);
SAFEARRAY* SafeArrayCreate([In] VARENUM vt, [In] uint cDims, [In] SAFEARRAYBOUND* rgsabound);
SAFEARRAY* SafeArrayCreateEx([In] VARENUM vt, [In] uint cDims, [In] SAFEARRAYBOUND* rgsabound, [In] void* pvExtra);
HRESULT SafeArrayCopyData([In] SAFEARRAY* psaSource, [In] SAFEARRAY* psaTarget);
void SafeArrayReleaseDescriptor([In] SAFEARRAY* psa);
HRESULT SafeArrayDestroyDescriptor([In] SAFEARRAY* psa);
void SafeArrayReleaseData([In] void* pData);
HRESULT SafeArrayDestroyData([In] SAFEARRAY* psa);
HRESULT SafeArrayAddRef([In] SAFEARRAY* psa, [Out] void** ppDataToRelease);
HRESULT SafeArrayDestroy([In] SAFEARRAY* psa);
HRESULT SafeArrayRedim([In] [Out] SAFEARRAY* psa, [In] SAFEARRAYBOUND* psaboundNew);
uint SafeArrayGetDim([In] SAFEARRAY* psa);
uint SafeArrayGetElemsize([In] SAFEARRAY* psa);
HRESULT SafeArrayGetUBound([In] SAFEARRAY* psa, [In] uint nDim, [Out] int* plUbound);
HRESULT SafeArrayGetLBound([In] SAFEARRAY* psa, [In] uint nDim, [Out] int* plLbound);
HRESULT SafeArrayLock([In] SAFEARRAY* psa);
HRESULT SafeArrayUnlock([In] SAFEARRAY* psa);
HRESULT SafeArrayAccessData([In] SAFEARRAY* psa, [Out] void** ppvData);
HRESULT SafeArrayUnaccessData([In] SAFEARRAY* psa);
HRESULT SafeArrayGetElement([In] SAFEARRAY* psa, [In] int* rgIndices, [Out] void* pv);
HRESULT SafeArrayPutElement([In] SAFEARRAY* psa, [In] int* rgIndices, [In] void* pv);
HRESULT SafeArrayCopy([In] SAFEARRAY* psa, [Out] SAFEARRAY** ppsaOut);
HRESULT SafeArrayPtrOfIndex([In] SAFEARRAY* psa, [In] int* rgIndices, [Out] void** ppvData);
HRESULT SafeArraySetRecordInfo([In] SAFEARRAY* psa, [In] IRecordInfo prinfo);
HRESULT SafeArrayGetRecordInfo([In] SAFEARRAY* psa, [Out] IRecordInfo* prinfo);
HRESULT SafeArraySetIID([In] SAFEARRAY* psa, [Const] [In] Guid* guid);
HRESULT SafeArrayGetIID([In] SAFEARRAY* psa, [Out] Guid* pguid);
HRESULT SafeArrayGetVartype([In] SAFEARRAY* psa, [Out] VARENUM* pvt);
SAFEARRAY* SafeArrayCreateVector([In] VARENUM vt, [In] int lLbound, [In] uint cElements);
SAFEARRAY* SafeArrayCreateVectorEx([In] VARENUM vt, [In] int lLbound, [In] uint cElements, [In] void* pvExtra);
void VariantInit([Out] VARIANT* pvarg);
HRESULT VariantClear([In] [Out] VARIANT* pvarg);
HRESULT VariantCopy([In] [Out] VARIANT* pvargDest, [Const] [In] VARIANT* pvargSrc);
HRESULT VariantCopyInd([In] [Out] VARIANT* pvarDest, [Const] [In] VARIANT* pvargSrc);
HRESULT VariantChangeType([In] [Out] VARIANT* pvargDest, [Const] [In] VARIANT* pvarSrc, [In] ushort wFlags, [In] VARENUM vt);
HRESULT VariantChangeTypeEx([In] [Out] VARIANT* pvargDest, [Const] [In] VARIANT* pvarSrc, [In] uint lcid, [In] ushort wFlags, [In] VARENUM vt);
HRESULT VectorFromBstr([In] BSTR bstr, [Out] SAFEARRAY** ppsa);
HRESULT BstrFromVector([In] SAFEARRAY* psa, [Out] BSTR* pbstr);
HRESULT VarUI1FromI2([In] short sIn, [Out] byte* pbOut);
HRESULT VarUI1FromI4([In] int lIn, [Out] byte* pbOut);
HRESULT VarUI1FromI8([In] long i64In, [Out] byte* pbOut);
HRESULT VarUI1FromR4([In] float fltIn, [Out] byte* pbOut);
HRESULT VarUI1FromR8([In] double dblIn, [Out] byte* pbOut);
HRESULT VarUI1FromCy([In] CY cyIn, [Out] byte* pbOut);
HRESULT VarUI1FromDate([In] double dateIn, [Out] byte* pbOut);
HRESULT VarUI1FromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] byte* pbOut);
HRESULT VarUI1FromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] byte* pbOut);
HRESULT VarUI1FromBool([In] VARIANT_BOOL boolIn, [Out] byte* pbOut);
HRESULT VarUI1FromI1([In] CHAR cIn, [Out] byte* pbOut);
HRESULT VarUI1FromUI2([In] ushort uiIn, [Out] byte* pbOut);
HRESULT VarUI1FromUI4([In] uint ulIn, [Out] byte* pbOut);
HRESULT VarUI1FromUI8([In] ulong ui64In, [Out] byte* pbOut);
HRESULT VarUI1FromDec([Const] [In] DECIMAL* pdecIn, [Out] byte* pbOut);
HRESULT VarI2FromUI1([In] byte bIn, [Out] short* psOut);
HRESULT VarI2FromI4([In] int lIn, [Out] short* psOut);
HRESULT VarI2FromI8([In] long i64In, [Out] short* psOut);
HRESULT VarI2FromR4([In] float fltIn, [Out] short* psOut);
HRESULT VarI2FromR8([In] double dblIn, [Out] short* psOut);
HRESULT VarI2FromCy([In] CY cyIn, [In] [Out] short* psOut);
HRESULT VarI2FromDate([In] double dateIn, [Out] short* psOut);
HRESULT VarI2FromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] short* psOut);
HRESULT VarI2FromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] short* psOut);
HRESULT VarI2FromBool([In] VARIANT_BOOL boolIn, [Out] short* psOut);
HRESULT VarI2FromI1([In] CHAR cIn, [Out] short* psOut);
HRESULT VarI2FromUI2([In] ushort uiIn, [Out] short* psOut);
HRESULT VarI2FromUI4([In] uint ulIn, [Out] short* psOut);
HRESULT VarI2FromUI8([In] ulong ui64In, [Out] short* psOut);
HRESULT VarI2FromDec([Const] [In] DECIMAL* pdecIn, [Out] short* psOut);
HRESULT VarI4FromUI1([In] byte bIn, [Out] int* plOut);
HRESULT VarI4FromI2([In] short sIn, [Out] int* plOut);
HRESULT VarI4FromI8([In] long i64In, [Out] int* plOut);
HRESULT VarI4FromR4([In] float fltIn, [Out] int* plOut);
HRESULT VarI4FromR8([In] double dblIn, [Out] int* plOut);
HRESULT VarI4FromCy([In] CY cyIn, [Out] int* plOut);
HRESULT VarI4FromDate([In] double dateIn, [Out] int* plOut);
HRESULT VarI4FromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] int* plOut);
HRESULT VarI4FromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] int* plOut);
HRESULT VarI4FromBool([In] VARIANT_BOOL boolIn, [Out] int* plOut);
HRESULT VarI4FromI1([In] CHAR cIn, [Out] int* plOut);
HRESULT VarI4FromUI2([In] ushort uiIn, [Out] int* plOut);
HRESULT VarI4FromUI4([In] uint ulIn, [Out] int* plOut);
HRESULT VarI4FromUI8([In] ulong ui64In, [Out] int* plOut);
HRESULT VarI4FromDec([Const] [In] DECIMAL* pdecIn, [Out] int* plOut);
HRESULT VarI8FromUI1([In] byte bIn, [Out] long* pi64Out);
HRESULT VarI8FromI2([In] short sIn, [Out] long* pi64Out);
HRESULT VarI8FromR4([In] float fltIn, [Out] long* pi64Out);
HRESULT VarI8FromR8([In] double dblIn, [Out] long* pi64Out);
HRESULT VarI8FromCy([In] CY cyIn, [Out] long* pi64Out);
HRESULT VarI8FromDate([In] double dateIn, [Out] long* pi64Out);
HRESULT VarI8FromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] long* pi64Out);
HRESULT VarI8FromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] long* pi64Out);
HRESULT VarI8FromBool([In] VARIANT_BOOL boolIn, [Out] long* pi64Out);
HRESULT VarI8FromI1([In] CHAR cIn, [Out] long* pi64Out);
HRESULT VarI8FromUI2([In] ushort uiIn, [Out] long* pi64Out);
HRESULT VarI8FromUI4([In] uint ulIn, [Out] long* pi64Out);
HRESULT VarI8FromUI8([In] ulong ui64In, [Out] long* pi64Out);
HRESULT VarI8FromDec([Const] [In] DECIMAL* pdecIn, [Out] long* pi64Out);
HRESULT VarR4FromUI1([In] byte bIn, [Out] float* pfltOut);
HRESULT VarR4FromI2([In] short sIn, [Out] float* pfltOut);
HRESULT VarR4FromI4([In] int lIn, [Out] float* pfltOut);
HRESULT VarR4FromI8([In] long i64In, [Out] float* pfltOut);
HRESULT VarR4FromR8([In] double dblIn, [Out] float* pfltOut);
HRESULT VarR4FromCy([In] CY cyIn, [In] [Out] float* pfltOut);
HRESULT VarR4FromDate([In] double dateIn, [Out] float* pfltOut);
HRESULT VarR4FromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] float* pfltOut);
HRESULT VarR4FromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] float* pfltOut);
HRESULT VarR4FromBool([In] VARIANT_BOOL boolIn, [Out] float* pfltOut);
HRESULT VarR4FromI1([In] CHAR cIn, [Out] float* pfltOut);
HRESULT VarR4FromUI2([In] ushort uiIn, [Out] float* pfltOut);
HRESULT VarR4FromUI4([In] uint ulIn, [Out] float* pfltOut);
HRESULT VarR4FromUI8([In] ulong ui64In, [Out] float* pfltOut);
HRESULT VarR4FromDec([Const] [In] DECIMAL* pdecIn, [Out] float* pfltOut);
HRESULT VarR8FromUI1([In] byte bIn, [Out] double* pdblOut);
HRESULT VarR8FromI2([In] short sIn, [Out] double* pdblOut);
HRESULT VarR8FromI4([In] int lIn, [Out] double* pdblOut);
HRESULT VarR8FromI8([In] long i64In, [Out] double* pdblOut);
HRESULT VarR8FromR4([In] float fltIn, [Out] double* pdblOut);
HRESULT VarR8FromCy([In] CY cyIn, [In] [Out] double* pdblOut);
HRESULT VarR8FromDate([In] double dateIn, [Out] double* pdblOut);
HRESULT VarR8FromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] double* pdblOut);
HRESULT VarR8FromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] double* pdblOut);
HRESULT VarR8FromBool([In] VARIANT_BOOL boolIn, [Out] double* pdblOut);
HRESULT VarR8FromI1([In] CHAR cIn, [In] [Out] double* pdblOut);
HRESULT VarR8FromUI2([In] ushort uiIn, [Out] double* pdblOut);
HRESULT VarR8FromUI4([In] uint ulIn, [Out] double* pdblOut);
HRESULT VarR8FromUI8([In] ulong ui64In, [Out] double* pdblOut);
HRESULT VarR8FromDec([Const] [In] DECIMAL* pdecIn, [Out] double* pdblOut);
HRESULT VarDateFromUI1([In] byte bIn, [Out] double* pdateOut);
HRESULT VarDateFromI2([In] short sIn, [Out] double* pdateOut);
HRESULT VarDateFromI4([In] int lIn, [Out] double* pdateOut);
HRESULT VarDateFromI8([In] long i64In, [Out] double* pdateOut);
HRESULT VarDateFromR4([In] float fltIn, [Out] double* pdateOut);
HRESULT VarDateFromR8([In] double dblIn, [Out] double* pdateOut);
HRESULT VarDateFromCy([In] CY cyIn, [Out] double* pdateOut);
HRESULT VarDateFromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] double* pdateOut);
HRESULT VarDateFromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] double* pdateOut);
HRESULT VarDateFromBool([In] VARIANT_BOOL boolIn, [Out] double* pdateOut);
HRESULT VarDateFromI1([In] CHAR cIn, [Out] double* pdateOut);
HRESULT VarDateFromUI2([In] ushort uiIn, [Out] double* pdateOut);
HRESULT VarDateFromUI4([In] uint ulIn, [Out] double* pdateOut);
HRESULT VarDateFromUI8([In] ulong ui64In, [Out] double* pdateOut);
HRESULT VarDateFromDec([Const] [In] DECIMAL* pdecIn, [Out] double* pdateOut);
HRESULT VarCyFromUI1([In] byte bIn, [Out] CY* pcyOut);
HRESULT VarCyFromI2([In] short sIn, [Out] CY* pcyOut);
HRESULT VarCyFromI4([In] int lIn, [Out] CY* pcyOut);
HRESULT VarCyFromI8([In] long i64In, [Out] CY* pcyOut);
HRESULT VarCyFromR4([In] float fltIn, [Out] CY* pcyOut);
HRESULT VarCyFromR8([In] double dblIn, [Out] CY* pcyOut);
HRESULT VarCyFromDate([In] double dateIn, [Out] CY* pcyOut);
HRESULT VarCyFromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] CY* pcyOut);
HRESULT VarCyFromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] CY* pcyOut);
HRESULT VarCyFromBool([In] VARIANT_BOOL boolIn, [Out] CY* pcyOut);
HRESULT VarCyFromI1([In] CHAR cIn, [Out] CY* pcyOut);
HRESULT VarCyFromUI2([In] ushort uiIn, [Out] CY* pcyOut);
HRESULT VarCyFromUI4([In] uint ulIn, [Out] CY* pcyOut);
HRESULT VarCyFromUI8([In] ulong ui64In, [Out] CY* pcyOut);
HRESULT VarCyFromDec([Const] [In] DECIMAL* pdecIn, [Out] CY* pcyOut);
HRESULT VarBstrFromUI1([In] byte bVal, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromI2([In] short iVal, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromI4([In] int lIn, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromI8([In] long i64In, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromR4([In] float fltIn, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromR8([In] double dblIn, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromCy([In] CY cyIn, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromDate([In] double dateIn, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromDisp([In] IDispatch pdispIn, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromBool([In] VARIANT_BOOL boolIn, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromI1([In] CHAR cIn, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromUI2([In] ushort uiIn, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromUI4([In] uint ulIn, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromUI8([In] ulong ui64In, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBstrFromDec([Const] [In] DECIMAL* pdecIn, [In] uint lcid, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarBoolFromUI1([In] byte bIn, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromI2([In] short sIn, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromI4([In] int lIn, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromI8([In] long i64In, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromR4([In] float fltIn, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromR8([In] double dblIn, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromDate([In] double dateIn, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromCy([In] CY cyIn, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromI1([In] CHAR cIn, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromUI2([In] ushort uiIn, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromUI4([In] uint ulIn, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromUI8([In] ulong i64In, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromDec([Const] [In] DECIMAL* pdecIn, [Out] VARIANT_BOOL* pboolOut);
HRESULT VarI1FromUI1([In] byte bIn, [Out] PSTR pcOut);
HRESULT VarI1FromI2([In] short uiIn, [Out] PSTR pcOut);
HRESULT VarI1FromI4([In] int lIn, [Out] PSTR pcOut);
HRESULT VarI1FromI8([In] long i64In, [Out] PSTR pcOut);
HRESULT VarI1FromR4([In] float fltIn, [Out] PSTR pcOut);
HRESULT VarI1FromR8([In] double dblIn, [Out] PSTR pcOut);
HRESULT VarI1FromDate([In] double dateIn, [Out] PSTR pcOut);
HRESULT VarI1FromCy([In] CY cyIn, [Out] PSTR pcOut);
HRESULT VarI1FromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] PSTR pcOut);
HRESULT VarI1FromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] PSTR pcOut);
HRESULT VarI1FromBool([In] VARIANT_BOOL boolIn, [Out] PSTR pcOut);
HRESULT VarI1FromUI2([In] ushort uiIn, [Out] PSTR pcOut);
HRESULT VarI1FromUI4([In] uint ulIn, [Out] PSTR pcOut);
HRESULT VarI1FromUI8([In] ulong i64In, [Out] PSTR pcOut);
HRESULT VarI1FromDec([Const] [In] DECIMAL* pdecIn, [Out] PSTR pcOut);
HRESULT VarUI2FromUI1([In] byte bIn, [Out] ushort* puiOut);
HRESULT VarUI2FromI2([In] short uiIn, [Out] ushort* puiOut);
HRESULT VarUI2FromI4([In] int lIn, [Out] ushort* puiOut);
HRESULT VarUI2FromI8([In] long i64In, [Out] ushort* puiOut);
HRESULT VarUI2FromR4([In] float fltIn, [Out] ushort* puiOut);
HRESULT VarUI2FromR8([In] double dblIn, [In] [Out] ushort* puiOut);
HRESULT VarUI2FromDate([In] double dateIn, [Out] ushort* puiOut);
HRESULT VarUI2FromCy([In] CY cyIn, [Out] ushort* puiOut);
HRESULT VarUI2FromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] ushort* puiOut);
HRESULT VarUI2FromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] ushort* puiOut);
HRESULT VarUI2FromBool([In] VARIANT_BOOL boolIn, [Out] ushort* puiOut);
HRESULT VarUI2FromI1([In] CHAR cIn, [Out] ushort* puiOut);
HRESULT VarUI2FromUI4([In] uint ulIn, [Out] ushort* puiOut);
HRESULT VarUI2FromUI8([In] ulong i64In, [Out] ushort* puiOut);
HRESULT VarUI2FromDec([Const] [In] DECIMAL* pdecIn, [Out] ushort* puiOut);
HRESULT VarUI4FromUI1([In] byte bIn, [Out] uint* pulOut);
HRESULT VarUI4FromI2([In] short uiIn, [Out] uint* pulOut);
HRESULT VarUI4FromI4([In] int lIn, [Out] uint* pulOut);
HRESULT VarUI4FromI8([In] long i64In, [Out] uint* plOut);
HRESULT VarUI4FromR4([In] float fltIn, [Out] uint* pulOut);
HRESULT VarUI4FromR8([In] double dblIn, [Out] uint* pulOut);
HRESULT VarUI4FromDate([In] double dateIn, [Out] uint* pulOut);
HRESULT VarUI4FromCy([In] CY cyIn, [Out] uint* pulOut);
HRESULT VarUI4FromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] uint* pulOut);
HRESULT VarUI4FromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] uint* pulOut);
HRESULT VarUI4FromBool([In] VARIANT_BOOL boolIn, [Out] uint* pulOut);
HRESULT VarUI4FromI1([In] CHAR cIn, [Out] uint* pulOut);
HRESULT VarUI4FromUI2([In] ushort uiIn, [Out] uint* pulOut);
HRESULT VarUI4FromUI8([In] ulong ui64In, [Out] uint* plOut);
HRESULT VarUI4FromDec([Const] [In] DECIMAL* pdecIn, [Out] uint* pulOut);
HRESULT VarUI8FromUI1([In] byte bIn, [Out] ulong* pi64Out);
HRESULT VarUI8FromI2([In] short sIn, [Out] ulong* pi64Out);
HRESULT VarUI8FromI8([In] long ui64In, [Out] ulong* pi64Out);
HRESULT VarUI8FromR4([In] float fltIn, [Out] ulong* pi64Out);
HRESULT VarUI8FromR8([In] double dblIn, [Out] ulong* pi64Out);
HRESULT VarUI8FromCy([In] CY cyIn, [Out] ulong* pi64Out);
HRESULT VarUI8FromDate([In] double dateIn, [Out] ulong* pi64Out);
HRESULT VarUI8FromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] ulong* pi64Out);
HRESULT VarUI8FromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] ulong* pi64Out);
HRESULT VarUI8FromBool([In] VARIANT_BOOL boolIn, [Out] ulong* pi64Out);
HRESULT VarUI8FromI1([In] CHAR cIn, [Out] ulong* pi64Out);
HRESULT VarUI8FromUI2([In] ushort uiIn, [Out] ulong* pi64Out);
HRESULT VarUI8FromUI4([In] uint ulIn, [Out] ulong* pi64Out);
HRESULT VarUI8FromDec([Const] [In] DECIMAL* pdecIn, [Out] ulong* pi64Out);
HRESULT VarDecFromUI1([In] byte bIn, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromI2([In] short uiIn, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromI4([In] int lIn, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromI8([In] long i64In, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromR4([In] float fltIn, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromR8([In] double dblIn, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromDate([In] double dateIn, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromCy([In] CY cyIn, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromDisp([In] IDispatch pdispIn, [In] uint lcid, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromBool([In] VARIANT_BOOL boolIn, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromI1([In] CHAR cIn, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromUI2([In] ushort uiIn, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromUI4([In] uint ulIn, [Out] DECIMAL* pdecOut);
HRESULT VarDecFromUI8([In] ulong ui64In, [Out] DECIMAL* pdecOut);
HRESULT VarParseNumFromStr([Const] [In] PWSTR strIn, [In] uint lcid, [In] uint dwFlags, [In] [Out] NUMPARSE* pnumprs, [Out] byte* rgbDig);
HRESULT VarNumFromParseNum([In] NUMPARSE* pnumprs, [In] byte* rgbDig, [In] uint dwVtBits, [Out] VARIANT* pvar);
HRESULT VarAdd([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarAnd([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarCat([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarDiv([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarEqv([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarIdiv([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarImp([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarMod([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarMul([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarOr([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarPow([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarSub([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarXor([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [Out] VARIANT* pvarResult);
HRESULT VarAbs([In] VARIANT* pvarIn, [Out] VARIANT* pvarResult);
HRESULT VarFix([In] VARIANT* pvarIn, [Out] VARIANT* pvarResult);
HRESULT VarInt([In] VARIANT* pvarIn, [Out] VARIANT* pvarResult);
HRESULT VarNeg([In] VARIANT* pvarIn, [Out] VARIANT* pvarResult);
HRESULT VarNot([In] VARIANT* pvarIn, [Out] VARIANT* pvarResult);
HRESULT VarRound([In] VARIANT* pvarIn, [In] int cDecimals, [Out] VARIANT* pvarResult);
VARCMP VarCmp([In] VARIANT* pvarLeft, [In] VARIANT* pvarRight, [In] uint lcid, [In] uint dwFlags);
HRESULT VarDecAdd([In] DECIMAL* pdecLeft, [In] DECIMAL* pdecRight, [Out] DECIMAL* pdecResult);
HRESULT VarDecDiv([In] DECIMAL* pdecLeft, [In] DECIMAL* pdecRight, [Out] DECIMAL* pdecResult);
HRESULT VarDecMul([In] DECIMAL* pdecLeft, [In] DECIMAL* pdecRight, [Out] DECIMAL* pdecResult);
HRESULT VarDecSub([In] DECIMAL* pdecLeft, [In] DECIMAL* pdecRight, [Out] DECIMAL* pdecResult);
HRESULT VarDecAbs([In] DECIMAL* pdecIn, [Out] DECIMAL* pdecResult);
HRESULT VarDecFix([In] DECIMAL* pdecIn, [Out] DECIMAL* pdecResult);
HRESULT VarDecInt([In] DECIMAL* pdecIn, [Out] DECIMAL* pdecResult);
HRESULT VarDecNeg([In] DECIMAL* pdecIn, [Out] DECIMAL* pdecResult);
HRESULT VarDecRound([In] DECIMAL* pdecIn, [In] int cDecimals, [Out] DECIMAL* pdecResult);
VARCMP VarDecCmp([In] DECIMAL* pdecLeft, [In] DECIMAL* pdecRight);
VARCMP VarDecCmpR8([In] DECIMAL* pdecLeft, [In] double dblRight);
HRESULT VarCyAdd([In] CY cyLeft, [In] CY cyRight, [Out] CY* pcyResult);
HRESULT VarCyMul([In] CY cyLeft, [In] CY cyRight, [Out] CY* pcyResult);
HRESULT VarCyMulI4([In] CY cyLeft, [In] int lRight, [Out] CY* pcyResult);
HRESULT VarCyMulI8([In] CY cyLeft, [In] long lRight, [Out] CY* pcyResult);
HRESULT VarCySub([In] CY cyLeft, [In] CY cyRight, [Out] CY* pcyResult);
HRESULT VarCyAbs([In] CY cyIn, [Out] CY* pcyResult);
HRESULT VarCyFix([In] CY cyIn, [Out] CY* pcyResult);
HRESULT VarCyInt([In] CY cyIn, [Out] CY* pcyResult);
HRESULT VarCyNeg([In] CY cyIn, [Out] CY* pcyResult);
HRESULT VarCyRound([In] CY cyIn, [In] int cDecimals, [Out] CY* pcyResult);
VARCMP VarCyCmp([In] CY cyLeft, [In] CY cyRight);
VARCMP VarCyCmpR8([In] CY cyLeft, [In] double dblRight);
HRESULT VarBstrCat([In] BSTR bstrLeft, [In] BSTR bstrRight, [Out] ushort** pbstrResult);
HRESULT VarBstrCmp([In] BSTR bstrLeft, [In] BSTR bstrRight, [In] uint lcid, [In] uint dwFlags);
HRESULT VarR8Pow([In] double dblLeft, [In] double dblRight, [Out] double* pdblResult);
VARCMP VarR4CmpR8([In] float fltLeft, [In] double dblRight);
HRESULT VarR8Round([In] double dblIn, [In] int cDecimals, [Out] double* pdblResult);
HRESULT VarDateFromUdate([In] UDATE* pudateIn, [In] uint dwFlags, [Out] double* pdateOut);
HRESULT VarDateFromUdateEx([In] UDATE* pudateIn, [In] uint lcid, [In] uint dwFlags, [Out] double* pdateOut);
HRESULT VarUdateFromDate([In] double dateIn, [In] uint dwFlags, [Out] UDATE* pudateOut);
HRESULT GetAltMonthNames([In] uint lcid, [Out] [Optional] PWSTR** prgp);
HRESULT VarFormat([In] VARIANT* pvarIn, [In] [Optional] PWSTR pstrFormat, [In] VARFORMAT_FIRST_DAY iFirstDay, [In] VARFORMAT_FIRST_WEEK iFirstWeek, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarFormatDateTime([In] VARIANT* pvarIn, [In] VARFORMAT_NAMED_FORMAT iNamedFormat, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarFormatNumber([In] VARIANT* pvarIn, [In] int iNumDig, [In] VARFORMAT_LEADING_DIGIT iIncLead, [In] VARFORMAT_PARENTHESES iUseParens, [In] VARFORMAT_GROUP iGroup, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarFormatPercent([In] VARIANT* pvarIn, [In] int iNumDig, [In] VARFORMAT_LEADING_DIGIT iIncLead, [In] VARFORMAT_PARENTHESES iUseParens, [In] VARFORMAT_GROUP iGroup, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarFormatCurrency([In] VARIANT* pvarIn, [In] int iNumDig, [In] int iIncLead, [In] int iUseParens, [In] int iGroup, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarWeekdayName([In] int iWeekday, [In] int fAbbrev, [In] int iFirstDay, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarMonthName([In] int iMonth, [In] int fAbbrev, [In] uint dwFlags, [Out] BSTR* pbstrOut);
HRESULT VarFormatFromTokens([In] VARIANT* pvarIn, [In] [Optional] PWSTR pstrFormat, [In] byte* pbTokCur, [In] uint dwFlags, [Out] BSTR* pbstrOut, [In] uint lcid);
HRESULT VarTokenizeFormatString([In] [Optional] PWSTR pstrFormat, [NativeArrayInfo(CountParamIndex = 2)] [In] [Out] byte* rgbTok, [In] int cbTok, [In] VARFORMAT_FIRST_DAY iFirstDay, [In] VARFORMAT_FIRST_WEEK iFirstWeek, [In] uint lcid, [In] [Optional] int* pcbActual);
uint LHashValOfNameSysA([In] SYSKIND syskind, [In] uint lcid, [Const] [In] PSTR szName);
uint LHashValOfNameSys([In] SYSKIND syskind, [In] uint lcid, [Const] [In] PWSTR szName);
HRESULT LoadTypeLib([Const] [In] PWSTR szFile, [Out] ITypeLib* pptlib);
HRESULT LoadTypeLibEx([Const] [In] PWSTR szFile, [In] REGKIND regkind, [Out] ITypeLib* pptlib);
HRESULT LoadRegTypeLib([Const] [In] Guid* rguid, [In] ushort wVerMajor, [In] ushort wVerMinor, [In] uint lcid, [Out] ITypeLib* pptlib);
HRESULT QueryPathOfRegTypeLib([Const] [In] Guid* guid, [In] ushort wMaj, [In] ushort wMin, [In] uint lcid, [Out] ushort** lpbstrPathName);
HRESULT RegisterTypeLib([In] ITypeLib ptlib, [Const] [In] PWSTR szFullPath, [Const] [In] [Optional] PWSTR szHelpDir);
HRESULT UnRegisterTypeLib([Const] [In] Guid* libID, [In] ushort wVerMajor, [In] ushort wVerMinor, [In] uint lcid, [In] SYSKIND syskind);
HRESULT RegisterTypeLibForUser([In] ITypeLib ptlib, [In] PWSTR szFullPath, [In] [Optional] PWSTR szHelpDir);
HRESULT UnRegisterTypeLibForUser([Const] [In] Guid* libID, [In] ushort wMajorVerNum, [In] ushort wMinorVerNum, [In] uint lcid, [In] SYSKIND syskind);
HRESULT CreateTypeLib([In] SYSKIND syskind, [Const] [In] PWSTR szFile, [Out] ICreateTypeLib* ppctlib);
HRESULT CreateTypeLib2([In] SYSKIND syskind, [Const] [In] PWSTR szFile, [Out] ICreateTypeLib2* ppctlib);
HRESULT DispGetParam([In] DISPPARAMS* pdispparams, [In] uint position, [In] VARENUM vtTarg, [Out] VARIANT* pvarResult, [Out] [Optional] uint* puArgErr);
HRESULT DispGetIDsOfNames([In] ITypeInfo ptinfo, [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR* rgszNames, [In] uint cNames, [NativeArrayInfo(CountParamIndex = 2)] [Out] int* rgdispid);
HRESULT DispInvoke([In] [Out] void* _this, [In] ITypeInfo ptinfo, [In] int dispidMember, [In] ushort wFlags, [In] [Out] DISPPARAMS* pparams, [In] [Out] VARIANT* pvarResult, [In] [Out] EXCEPINFO* pexcepinfo, [In] [Out] uint* puArgErr);
HRESULT CreateDispTypeInfo([In] [Out] INTERFACEDATA* pidata, [In] uint lcid, [Out] ITypeInfo* pptinfo);
HRESULT CreateStdDispatch([In] IUnknown punkOuter, [In] [Out] void* pvThis, [In] ITypeInfo ptinfo, [Out] IUnknown* ppunkStdDisp);
HRESULT DispCallFunc([In] [Optional] void* pvInstance, [In] nuint oVft, [In] CALLCONV cc, [In] VARENUM vtReturn, [In] uint cActuals, [NativeArrayInfo(CountParamIndex = 4)] [In] ushort* prgvt, [NativeArrayInfo(CountParamIndex = 4)] [In] VARIANT** prgpvarg, [Out] VARIANT* pvargResult);
HRESULT RegisterActiveObject([In] IUnknown punk, [Const] [In] Guid* rclsid, [In] ACTIVEOBJECT_FLAGS dwFlags, [In] [Out] uint* pdwRegister);
HRESULT RevokeActiveObject([In] uint dwRegister, [In] [Out] void* pvReserved);
HRESULT GetActiveObject([Const] [In] Guid* rclsid, [In] [Out] void* pvReserved, [Out] IUnknown* ppunk);
HRESULT CreateErrorInfo([Out] ICreateErrorInfo* pperrinfo);
HRESULT GetRecordInfoFromTypeInfo([In] ITypeInfo pTypeInfo, [Out] IRecordInfo* ppRecInfo);
HRESULT GetRecordInfoFromGuids([Const] [In] Guid* rGuidTypeLib, [In] uint uVerMajor, [In] uint uVerMinor, [In] uint lcid, [Const] [In] Guid* rGuidTypeInfo, [Out] IRecordInfo* ppRecInfo);
uint OaBuildVersion();
void ClearCustData([In] [Out] CUSTDATA* pCustData);
void OaEnablePerUserTLibRegistration();
HRESULT OleCreatePropertyFrame([In] HWND hwndOwner, [In] uint x, [In] uint y, [Const] [In] PWSTR lpszCaption, [In] uint cObjects, [In] IUnknown* ppUnk, [In] uint cPages, [In] Guid* pPageClsID, [In] uint lcid, [In] uint dwReserved, [In] void* pvReserved);
HRESULT OleCreatePropertyFrameIndirect([In] OCPFIPARAMS* lpParams);
HRESULT OleTranslateColor([In] uint clr, [In] HPALETTE hpal, [Out] COLORREF* lpcolorref);
HRESULT OleCreateFontIndirect([In] FONTDESC* lpFontDesc, [Const] [In] Guid* riid, [Out] void** lplpvObj);
HRESULT OleCreatePictureIndirect([In] PICTDESC* lpPictDesc, [Const] [In] Guid* riid, [In] BOOL fOwn, [Out] void** lplpvObj);
HRESULT OleLoadPicture([In] IStream lpstream, [In] int lSize, [In] BOOL fRunmode, [Const] [In] Guid* riid, [Out] void** lplpvObj);
HRESULT OleLoadPictureEx([In] IStream lpstream, [In] int lSize, [In] BOOL fRunmode, [Const] [In] Guid* riid, [In] uint xSizeDesired, [In] uint ySizeDesired, [In] LOAD_PICTURE_FLAGS dwFlags, [Out] void** lplpvObj);
HRESULT OleLoadPicturePath([In] PWSTR szURLorPath, [In] IUnknown punkCaller, [In] uint dwReserved, [In] uint clrReserved, [Const] [In] Guid* riid, [Out] void** ppvRet);
HRESULT OleLoadPictureFile([In] VARIANT varFileName, [Out] IDispatch* lplpdispPicture);
HRESULT OleLoadPictureFileEx([In] VARIANT varFileName, [In] uint xSizeDesired, [In] uint ySizeDesired, [In] LOAD_PICTURE_FLAGS dwFlags, [Out] IDispatch* lplpdispPicture);
HRESULT OleSavePictureFile([In] IDispatch lpdispPicture, [In] BSTR bstrFileName);
HCURSOR OleIconToCursor([In] HINSTANCE hinstExe, [In] HICON hIcon);
HRESULT SetErrorInfo([In] uint dwReserved, [In] [Optional] IErrorInfo perrinfo);
HRESULT GetErrorInfo([In] uint dwReserved, [Out] IErrorInfo* pperrinfo);
uint BSTR_UserSize([In] uint* param0, [In] uint param1, [In] BSTR* param2);
byte* BSTR_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] BSTR* param2);
byte* BSTR_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] BSTR* param2);
void BSTR_UserFree([In] uint* param0, [In] BSTR* param1);
uint VARIANT_UserSize([In] uint* param0, [In] uint param1, [In] VARIANT* param2);
byte* VARIANT_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] VARIANT* param2);
byte* VARIANT_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] VARIANT* param2);
void VARIANT_UserFree([In] uint* param0, [In] VARIANT* param1);
uint BSTR_UserSize64([In] uint* param0, [In] uint param1, [In] BSTR* param2);
byte* BSTR_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] BSTR* param2);
byte* BSTR_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] BSTR* param2);
void BSTR_UserFree64([In] uint* param0, [In] BSTR* param1);
uint VARIANT_UserSize64([In] uint* param0, [In] uint param1, [In] VARIANT* param2);
byte* VARIANT_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] VARIANT* param2);
byte* VARIANT_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] VARIANT* param2);
void VARIANT_UserFree64([In] uint* param0, [In] VARIANT* param1);
uint LPSAFEARRAY_UserSize([In] uint* param0, [In] uint param1, [In] SAFEARRAY** param2);
byte* LPSAFEARRAY_UserMarshal([In] uint* param0, [In] [Out] byte* param1, [In] SAFEARRAY** param2);
byte* LPSAFEARRAY_UserUnmarshal([In] uint* param0, [In] byte* param1, [Out] SAFEARRAY** param2);
void LPSAFEARRAY_UserFree([In] uint* param0, [In] SAFEARRAY** param1);
uint LPSAFEARRAY_UserSize64([In] uint* param0, [In] uint param1, [In] SAFEARRAY** param2);
byte* LPSAFEARRAY_UserMarshal64([In] uint* param0, [In] [Out] byte* param1, [In] SAFEARRAY** param2);
byte* LPSAFEARRAY_UserUnmarshal64([In] uint* param0, [In] byte* param1, [Out] SAFEARRAY** param2);
void LPSAFEARRAY_UserFree64([In] uint* param0, [In] SAFEARRAY** param1);
