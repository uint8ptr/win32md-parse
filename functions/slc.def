HRESULT SLOpen([Out] void** phSLC);
HRESULT SLClose([In] void* hSLC);
HRESULT SLInstallProofOfPurchase([In] void* hSLC, [Const] [In] PWSTR pwszPKeyAlgorithm, [Const] [In] PWSTR pwszPKeyString, [In] uint cbPKeySpecificData, [MemorySize(BytesParamIndex = 3)] [In] [Optional] byte* pbPKeySpecificData, [Out] Guid* pPkeyId);
HRESULT SLUninstallProofOfPurchase([In] void* hSLC, [Const] [In] Guid* pPKeyId);
HRESULT SLInstallLicense([In] void* hSLC, [In] uint cbLicenseBlob, [Const] [MemorySize(BytesParamIndex = 1)] [In] byte* pbLicenseBlob, [Out] Guid* pLicenseFileId);
HRESULT SLUninstallLicense([In] void* hSLC, [Const] [In] Guid* pLicenseFileId);
HRESULT SLConsumeRight([In] void* hSLC, [Const] [In] Guid* pAppId, [Const] [In] [Optional] Guid* pProductSkuId, [Const] [In] [Optional] PWSTR pwszRightName, [Reserved] [In] [Out] void* pvReserved);
HRESULT SLGetProductSkuInformation([In] void* hSLC, [Const] [In] Guid* pProductSkuId, [Const] [In] PWSTR pwszValueName, [Out] [Optional] SLDATATYPE* peDataType, [Out] uint* pcbValue, [Out] byte** ppbValue);
HRESULT SLGetPKeyInformation([In] void* hSLC, [Const] [In] Guid* pPKeyId, [Const] [In] PWSTR pwszValueName, [Out] [Optional] SLDATATYPE* peDataType, [Out] uint* pcbValue, [Out] byte** ppbValue);
HRESULT SLGetLicenseInformation([In] void* hSLC, [Const] [In] Guid* pSLLicenseId, [Const] [In] PWSTR pwszValueName, [Out] [Optional] SLDATATYPE* peDataType, [Out] uint* pcbValue, [Out] byte** ppbValue);
HRESULT SLGetLicensingStatusInformation([In] void* hSLC, [Const] [In] [Optional] Guid* pAppID, [Const] [In] [Optional] Guid* pProductSkuId, [Const] [In] [Optional] PWSTR pwszRightName, [Out] uint* pnStatusCount, [Out] SL_LICENSING_STATUS** ppLicensingStatus);
HRESULT SLGetPolicyInformation([In] void* hSLC, [Const] [In] PWSTR pwszValueName, [Out] [Optional] SLDATATYPE* peDataType, [Out] uint* pcbValue, [Out] byte** ppbValue);
HRESULT SLGetPolicyInformationDWORD([In] void* hSLC, [Const] [In] PWSTR pwszValueName, [Out] uint* pdwValue);
HRESULT SLGetServiceInformation([In] void* hSLC, [Const] [In] PWSTR pwszValueName, [Out] [Optional] SLDATATYPE* peDataType, [Out] uint* pcbValue, [Out] byte** ppbValue);
HRESULT SLGetApplicationInformation([In] void* hSLC, [Const] [In] Guid* pApplicationId, [Const] [In] PWSTR pwszValueName, [Out] [Optional] SLDATATYPE* peDataType, [Out] uint* pcbValue, [Out] byte** ppbValue);
HRESULT SLGenerateOfflineInstallationId([In] void* hSLC, [Const] [In] Guid* pProductSkuId, [Out] PWSTR* ppwszInstallationId);
HRESULT SLGenerateOfflineInstallationIdEx([In] void* hSLC, [Const] [In] [Optional] Guid* pProductSkuId, [Const] [In] [Optional] SL_ACTIVATION_INFO_HEADER* pActivationInfo, [Out] PWSTR* ppwszInstallationId);
HRESULT SLDepositOfflineConfirmationId([In] void* hSLC, [Const] [In] Guid* pProductSkuId, [Const] [In] PWSTR pwszInstallationId, [Const] [In] PWSTR pwszConfirmationId);
HRESULT SLDepositOfflineConfirmationIdEx([In] void* hSLC, [Const] [In] [Optional] Guid* pProductSkuId, [Const] [In] [Optional] SL_ACTIVATION_INFO_HEADER* pActivationInfo, [Const] [In] PWSTR pwszInstallationId, [Const] [In] PWSTR pwszConfirmationId);
HRESULT SLGetPKeyId([In] void* hSLC, [Const] [In] PWSTR pwszPKeyAlgorithm, [Const] [In] PWSTR pwszPKeyString, [In] uint cbPKeySpecificData, [Const] [MemorySize(BytesParamIndex = 3)] [In] [Optional] byte* pbPKeySpecificData, [Out] Guid* pPKeyId);
HRESULT SLGetInstalledProductKeyIds([In] void* hSLC, [Const] [In] Guid* pProductSkuId, [Out] uint* pnProductKeyIds, [Out] Guid** ppProductKeyIds);
HRESULT SLSetCurrentProductKey([In] void* hSLC, [Const] [In] Guid* pProductSkuId, [Const] [In] Guid* pProductKeyId);
HRESULT SLGetSLIDList([In] void* hSLC, [In] SLIDTYPE eQueryIdType, [Const] [In] [Optional] Guid* pQueryId, [In] SLIDTYPE eReturnIdType, [Out] uint* pnReturnIds, [Out] Guid** ppReturnIds);
HRESULT SLGetLicenseFileId([In] void* hSLC, [In] uint cbLicenseBlob, [Const] [MemorySize(BytesParamIndex = 1)] [In] byte* pbLicenseBlob, [Out] Guid* pLicenseFileId);
HRESULT SLGetLicense([In] void* hSLC, [Const] [In] Guid* pLicenseFileId, [Out] uint* pcbLicenseFile, [Out] byte** ppbLicenseFile);
HRESULT SLFireEvent([In] void* hSLC, [Const] [In] PWSTR pwszEventId, [Const] [In] Guid* pApplicationId);
HRESULT SLRegisterEvent([In] [Optional] void* hSLC, [Const] [In] PWSTR pwszEventId, [Const] [In] Guid* pApplicationId, [In] HANDLE hEvent);
HRESULT SLUnregisterEvent([In] [Optional] void* hSLC, [Const] [In] PWSTR pwszEventId, [Const] [In] Guid* pApplicationId, [In] HANDLE hEvent);
HRESULT SLGetWindowsInformation([Const] [In] PWSTR pwszValueName, [Out] [Optional] SLDATATYPE* peDataType, [Out] uint* pcbValue, [Out] byte** ppbValue);
HRESULT SLGetWindowsInformationDWORD([Const] [In] PWSTR pwszValueName, [Out] uint* pdwValue);
HRESULT SLSetGenuineInformation([Const] [In] Guid* pQueryId, [Const] [In] PWSTR pwszValueName, [In] SLDATATYPE eDataType, [In] [Optional] uint cbValue, [Const] [MemorySize(BytesParamIndex = 3)] [In] [Optional] byte* pbValue);
HRESULT SLGetGenuineInformation([Const] [In] Guid* pQueryId, [Const] [In] PWSTR pwszValueName, [Out] [Optional] SLDATATYPE* peDataType, [Out] uint* pcbValue, [Out] byte** ppbValue);
