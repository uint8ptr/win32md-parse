HRESULT MFSerializeAttributesToStream([In] IMFAttributes pAttr, [In] uint dwOptions, [In] IStream pStm);
HRESULT MFDeserializeAttributesFromStream([In] IMFAttributes pAttr, [In] uint dwOptions, [In] IStream pStm);
HRESULT MFCreateTransformActivate([Out] IMFActivate* ppActivate);
HRESULT MFCreateSourceResolver([Out] IMFSourceResolver* ppISourceResolver);
HRESULT CreatePropertyStore([Out] IPropertyStore* ppStore);
HRESULT MFGetSupportedSchemes([Out] PROPVARIANT* pPropVarSchemeArray);
HRESULT MFGetSupportedMimeTypes([Out] PROPVARIANT* pPropVarMimeTypeArray);
long MFGetSystemTime();
HRESULT MFCreateSystemTimeSource([Out] IMFPresentationTimeSource* ppSystemTimeSource);
HRESULT MFCreatePresentationDescriptor([In] uint cStreamDescriptors, [NativeArrayInfo(CountParamIndex = 0)] [In] [Optional] IMFStreamDescriptor* apStreamDescriptors, [Out] IMFPresentationDescriptor* ppPresentationDescriptor);
HRESULT MFSerializePresentationDescriptor([In] IMFPresentationDescriptor pPD, [Out] uint* pcbData, [MemorySize(BytesParamIndex = 1)] [Out] byte** ppbData);
HRESULT MFDeserializePresentationDescriptor([In] uint cbData, [NativeArrayInfo(CountParamIndex = 0)] [In] byte* pbData, [Out] IMFPresentationDescriptor* ppPD);
HRESULT MFCreateStreamDescriptor([In] uint dwStreamIdentifier, [In] uint cMediaTypes, [NativeArrayInfo(CountParamIndex = 1)] [In] IMFMediaType* apMediaTypes, [Out] IMFStreamDescriptor* ppDescriptor);
HRESULT MFCreateTrackedSample([Out] IMFTrackedSample* ppMFSample);
HRESULT MFCreateMFByteStreamOnStream([In] IStream pStream, [Out] IMFByteStream* ppByteStream);
HRESULT MFCreateStreamOnMFByteStream([In] IMFByteStream pByteStream, [Out] IStream* ppStream);
HRESULT MFCreateMFByteStreamOnStreamEx([In] IUnknown punkStream, [Out] IMFByteStream* ppByteStream);
HRESULT MFCreateStreamOnMFByteStreamEx([In] IMFByteStream pByteStream, [Const] [In] Guid* riid, [Out] void** ppv);
HRESULT MFCreateMediaTypeFromProperties([In] IUnknown punkStream, [Out] IMFMediaType* ppMediaType);
HRESULT MFCreatePropertiesFromMediaType([In] IMFMediaType pMediaType, [Const] [In] Guid* riid, [Out] void** ppv);
HRESULT MFCreateContentProtectionDevice([Const] [In] Guid* ProtectionSystemId, [Out] IMFContentProtectionDevice* ContentProtectionDevice);
HRESULT MFIsContentProtectionDeviceSupported([Const] [In] Guid* ProtectionSystemId, [Out] BOOL* isSupported);
HRESULT MFCreateContentDecryptorContext([Const] [In] Guid* guidMediaProtectionSystemId, [In] [Optional] IMFDXGIDeviceManager pD3DManager, [In] IMFContentProtectionDevice pContentProtectionDevice, [Out] IMFContentDecryptorContext* ppContentDecryptorContext);
HRESULT MFCreateD3D12SynchronizationObject([In] ID3D12Device pDevice, [Const] [In] Guid* riid, [Out] void** ppvSyncObject);
HRESULT MFStartup([In] uint Version, [In] uint dwFlags);
HRESULT MFShutdown();
HRESULT MFLockPlatform();
HRESULT MFUnlockPlatform();
HRESULT MFPutWorkItem([In] uint dwQueue, [In] IMFAsyncCallback pCallback, [In] IUnknown pState);
HRESULT MFPutWorkItem2([In] uint dwQueue, [In] int Priority, [In] IMFAsyncCallback pCallback, [In] [Optional] IUnknown pState);
HRESULT MFPutWorkItemEx([In] uint dwQueue, [In] IMFAsyncResult pResult);
HRESULT MFPutWorkItemEx2([In] uint dwQueue, [In] int Priority, [In] IMFAsyncResult pResult);
HRESULT MFPutWaitingWorkItem([In] HANDLE hEvent, [In] int Priority, [In] IMFAsyncResult pResult, [Out] [Optional] ulong* pKey);
HRESULT MFAllocateSerialWorkQueue([In] uint dwWorkQueue, [Out] uint* pdwWorkQueue);
HRESULT MFScheduleWorkItemEx([In] IMFAsyncResult pResult, [In] long Timeout, [Out] [Optional] ulong* pKey);
HRESULT MFScheduleWorkItem([In] IMFAsyncCallback pCallback, [In] IUnknown pState, [In] long Timeout, [Out] [Optional] ulong* pKey);
HRESULT MFCancelWorkItem([In] ulong Key);
HRESULT MFGetTimerPeriodicity([Out] uint* Periodicity);
HRESULT MFAddPeriodicCallback([In] MFPERIODICCALLBACK Callback, [In] IUnknown pContext, [Out] [Optional] uint* pdwKey);
HRESULT MFRemovePeriodicCallback([In] uint dwKey);
HRESULT MFAllocateWorkQueueEx([In] MFASYNC_WORKQUEUE_TYPE WorkQueueType, [Out] uint* pdwWorkQueue);
HRESULT MFAllocateWorkQueue([Out] uint* pdwWorkQueue);
HRESULT MFLockWorkQueue([In] uint dwWorkQueue);
HRESULT MFUnlockWorkQueue([In] uint dwWorkQueue);
HRESULT MFBeginRegisterWorkQueueWithMMCSS([In] uint dwWorkQueueId, [Const] [In] PWSTR wszClass, [In] uint dwTaskId, [In] IMFAsyncCallback pDoneCallback, [In] IUnknown pDoneState);
HRESULT MFBeginRegisterWorkQueueWithMMCSSEx([In] uint dwWorkQueueId, [Const] [In] PWSTR wszClass, [In] uint dwTaskId, [In] int lPriority, [In] IMFAsyncCallback pDoneCallback, [In] IUnknown pDoneState);
HRESULT MFEndRegisterWorkQueueWithMMCSS([In] IMFAsyncResult pResult, [Out] uint* pdwTaskId);
HRESULT MFBeginUnregisterWorkQueueWithMMCSS([In] uint dwWorkQueueId, [In] IMFAsyncCallback pDoneCallback, [In] IUnknown pDoneState);
HRESULT MFEndUnregisterWorkQueueWithMMCSS([In] IMFAsyncResult pResult);
HRESULT MFGetWorkQueueMMCSSClass([In] uint dwWorkQueueId, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR pwszClass, [In] [Out] uint* pcchClass);
HRESULT MFGetWorkQueueMMCSSTaskId([In] uint dwWorkQueueId, [Out] uint* pdwTaskId);
HRESULT MFRegisterPlatformWithMMCSS([Const] [In] PWSTR wszClass, [In] [Out] uint* pdwTaskId, [In] int lPriority);
HRESULT MFUnregisterPlatformFromMMCSS();
HRESULT MFLockSharedWorkQueue([Const] [In] PWSTR wszClass, [In] int BasePriority, [In] [Out] uint* pdwTaskId, [Out] uint* pID);
HRESULT MFGetWorkQueueMMCSSPriority([In] uint dwWorkQueueId, [Out] int* lPriority);
HRESULT MFCreateAsyncResult([In] IUnknown punkObject, [In] IMFAsyncCallback pCallback, [In] IUnknown punkState, [Out] IMFAsyncResult* ppAsyncResult);
HRESULT MFInvokeCallback([In] IMFAsyncResult pAsyncResult);
HRESULT MFCreateFile([In] MF_FILE_ACCESSMODE AccessMode, [In] MF_FILE_OPENMODE OpenMode, [In] MF_FILE_FLAGS fFlags, [Const] [In] PWSTR pwszFileURL, [Out] IMFByteStream* ppIByteStream);
HRESULT MFCreateTempFile([In] MF_FILE_ACCESSMODE AccessMode, [In] MF_FILE_OPENMODE OpenMode, [In] MF_FILE_FLAGS fFlags, [Out] IMFByteStream* ppIByteStream);
HRESULT MFBeginCreateFile([In] MF_FILE_ACCESSMODE AccessMode, [In] MF_FILE_OPENMODE OpenMode, [In] MF_FILE_FLAGS fFlags, [Const] [In] PWSTR pwszFilePath, [In] IMFAsyncCallback pCallback, [In] IUnknown pState, [Out] IUnknown* ppCancelCookie);
HRESULT MFEndCreateFile([In] IMFAsyncResult pResult, [Out] IMFByteStream* ppFile);
HRESULT MFCancelCreateFile([In] IUnknown pCancelCookie);
HRESULT MFCreateMemoryBuffer([In] uint cbMaxLength, [Out] IMFMediaBuffer* ppBuffer);
HRESULT MFCreateMediaBufferWrapper([In] IMFMediaBuffer pBuffer, [In] uint cbOffset, [In] uint dwLength, [Out] IMFMediaBuffer* ppBuffer);
HRESULT MFCreateLegacyMediaBufferOnMFMediaBuffer([In] [Optional] IMFSample pSample, [In] IMFMediaBuffer pMFMediaBuffer, [In] uint cbOffset, [Out] IMediaBuffer* ppMediaBuffer);
DXGI_FORMAT MFMapDX9FormatToDXGIFormat([In] uint dx9);
uint MFMapDXGIFormatToDX9Format([In] DXGI_FORMAT dx11);
HRESULT MFLockDXGIDeviceManager([Out] [Optional] uint* pResetToken, [Out] IMFDXGIDeviceManager* ppManager);
HRESULT MFUnlockDXGIDeviceManager();
HRESULT MFCreateDXSurfaceBuffer([Const] [In] Guid* riid, [In] IUnknown punkSurface, [In] BOOL fBottomUpWhenLinear, [Out] IMFMediaBuffer* ppBuffer);
HRESULT MFCreateWICBitmapBuffer([Const] [In] Guid* riid, [In] IUnknown punkSurface, [Out] IMFMediaBuffer* ppBuffer);
HRESULT MFCreateDXGISurfaceBuffer([Const] [In] Guid* riid, [In] IUnknown punkSurface, [In] uint uSubresourceIndex, [In] BOOL fBottomUpWhenLinear, [Out] IMFMediaBuffer* ppBuffer);
HRESULT MFCreateVideoSampleAllocatorEx([Const] [In] Guid* riid, [Out] void** ppSampleAllocator);
HRESULT MFCreateDXGIDeviceManager([Out] uint* resetToken, [Out] IMFDXGIDeviceManager* ppDeviceManager);
HRESULT MFCreateAlignedMemoryBuffer([In] uint cbMaxLength, [In] uint cbAligment, [Out] IMFMediaBuffer* ppBuffer);
HRESULT MFCreateMediaEvent([In] uint met, [Const] [In] Guid* guidExtendedType, [In] HRESULT hrStatus, [Const] [In] [Optional] PROPVARIANT* pvValue, [Out] IMFMediaEvent* ppEvent);
HRESULT MFCreateEventQueue([Out] IMFMediaEventQueue* ppMediaEventQueue);
HRESULT MFCreateSample([Out] IMFSample* ppIMFSample);
HRESULT MFCreateAttributes([Out] IMFAttributes* ppMFAttributes, [In] uint cInitialSize);
HRESULT MFInitAttributesFromBlob([In] IMFAttributes pAttributes, [Const] [MemorySize(BytesParamIndex = 2)] [In] byte* pBuf, [In] uint cbBufSize);
HRESULT MFGetAttributesAsBlobSize([In] IMFAttributes pAttributes, [Out] uint* pcbBufSize);
HRESULT MFGetAttributesAsBlob([In] IMFAttributes pAttributes, [MemorySize(BytesParamIndex = 2)] [Out] byte* pBuf, [In] uint cbBufSize);
HRESULT MFTRegister([In] Guid clsidMFT, [In] Guid guidCategory, [In] PWSTR pszName, [In] uint Flags, [In] uint cInputTypes, [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] MFT_REGISTER_TYPE_INFO* pInputTypes, [In] uint cOutputTypes, [NativeArrayInfo(CountParamIndex = 6)] [In] [Optional] MFT_REGISTER_TYPE_INFO* pOutputTypes, [In] [Optional] IMFAttributes pAttributes);
HRESULT MFTUnregister([In] Guid clsidMFT);
HRESULT MFTRegisterLocal([In] IClassFactory pClassFactory, [Const] [In] Guid* guidCategory, [Const] [In] PWSTR pszName, [In] uint Flags, [In] uint cInputTypes, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] MFT_REGISTER_TYPE_INFO* pInputTypes, [In] uint cOutputTypes, [Const] [NativeArrayInfo(CountParamIndex = 6)] [In] [Optional] MFT_REGISTER_TYPE_INFO* pOutputTypes);
HRESULT MFTUnregisterLocal([In] [Optional] IClassFactory pClassFactory);
HRESULT MFTRegisterLocalByCLSID([Const] [In] Guid* clisdMFT, [Const] [In] Guid* guidCategory, [Const] [In] PWSTR pszName, [In] uint Flags, [In] uint cInputTypes, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] [Optional] MFT_REGISTER_TYPE_INFO* pInputTypes, [In] uint cOutputTypes, [Const] [NativeArrayInfo(CountParamIndex = 6)] [In] [Optional] MFT_REGISTER_TYPE_INFO* pOutputTypes);
HRESULT MFTUnregisterLocalByCLSID([In] Guid clsidMFT);
HRESULT MFTEnum([In] Guid guidCategory, [In] uint Flags, [In] [Optional] MFT_REGISTER_TYPE_INFO* pInputType, [In] [Optional] MFT_REGISTER_TYPE_INFO* pOutputType, [In] [Optional] IMFAttributes pAttributes, [Out] Guid** ppclsidMFT, [Out] uint* pcMFTs);
HRESULT MFTEnumEx([In] Guid guidCategory, [In] MFT_ENUM_FLAG Flags, [Const] [In] [Optional] MFT_REGISTER_TYPE_INFO* pInputType, [Const] [In] [Optional] MFT_REGISTER_TYPE_INFO* pOutputType, [Out] IMFActivate** pppMFTActivate, [Out] uint* pnumMFTActivate);
HRESULT MFTEnum2([In] Guid guidCategory, [In] MFT_ENUM_FLAG Flags, [Const] [In] [Optional] MFT_REGISTER_TYPE_INFO* pInputType, [Const] [In] [Optional] MFT_REGISTER_TYPE_INFO* pOutputType, [In] [Optional] IMFAttributes pAttributes, [Out] IMFActivate** pppMFTActivate, [Out] uint* pnumMFTActivate);
HRESULT MFTGetInfo([In] Guid clsidMFT, [Out] [Optional] PWSTR* pszName, [Out] [Optional] MFT_REGISTER_TYPE_INFO** ppInputTypes, [Out] [Optional] uint* pcInputTypes, [Out] [Optional] MFT_REGISTER_TYPE_INFO** ppOutputTypes, [Out] [Optional] uint* pcOutputTypes, [Out] [Optional] IMFAttributes* ppAttributes);
HRESULT MFGetPluginControl([Out] IMFPluginControl* ppPluginControl);
HRESULT MFGetMFTMerit([In] IUnknown pMFT, [In] uint cbVerifier, [Const] [MemorySize(BytesParamIndex = 1)] [In] byte* verifier, [Out] uint* merit);
HRESULT MFRegisterLocalSchemeHandler([Const] [In] PWSTR szScheme, [In] IMFActivate pActivate);
HRESULT MFRegisterLocalByteStreamHandler([Const] [In] PWSTR szFileExtension, [Const] [In] PWSTR szMimeType, [In] IMFActivate pActivate);
HRESULT MFCreateMFByteStreamWrapper([In] IMFByteStream pStream, [Out] IMFByteStream* ppStreamWrapper);
HRESULT MFCreateMediaExtensionActivate([Const] [In] PWSTR szActivatableClassId, [In] [Optional] IUnknown pConfiguration, [Const] [In] Guid* riid, [Out] void** ppvObject);
HRESULT MFCreateMuxStreamAttributes([In] IMFCollection pAttributesToMux, [ComOutPtr] [Out] IMFAttributes* ppMuxAttribs);
HRESULT MFCreateMuxStreamMediaType([In] IMFCollection pMediaTypesToMux, [ComOutPtr] [Out] IMFMediaType* ppMuxMediaType);
HRESULT MFCreateMuxStreamSample([In] IMFCollection pSamplesToMux, [ComOutPtr] [Out] IMFSample* ppMuxSample);
HRESULT MFValidateMediaTypeSize([In] Guid FormatType, [MemorySize(BytesParamIndex = 2)] [In] [Optional] byte* pBlock, [In] uint cbSize);
HRESULT MFCreateMediaType([Out] IMFMediaType* ppMFType);
HRESULT MFCreateMFVideoFormatFromMFMediaType([In] IMFMediaType pMFType, [Out] MFVIDEOFORMAT** ppMFVF, [Out] [Optional] uint* pcbSize);
HRESULT MFCreateWaveFormatExFromMFMediaType([In] IMFMediaType pMFType, [Out] WAVEFORMATEX** ppWF, [Out] [Optional] uint* pcbSize, [In] uint Flags);
HRESULT MFInitMediaTypeFromVideoInfoHeader([In] IMFMediaType pMFType, [Const] [MemorySize(BytesParamIndex = 2)] [In] VIDEOINFOHEADER* pVIH, [In] uint cbBufSize, [Const] [In] [Optional] Guid* pSubtype);
HRESULT MFInitMediaTypeFromVideoInfoHeader2([In] IMFMediaType pMFType, [Const] [MemorySize(BytesParamIndex = 2)] [In] VIDEOINFOHEADER2* pVIH2, [In] uint cbBufSize, [Const] [In] [Optional] Guid* pSubtype);
HRESULT MFInitMediaTypeFromMPEG1VideoInfo([In] IMFMediaType pMFType, [Const] [MemorySize(BytesParamIndex = 2)] [In] MPEG1VIDEOINFO* pMP1VI, [In] uint cbBufSize, [Const] [In] [Optional] Guid* pSubtype);
HRESULT MFInitMediaTypeFromMPEG2VideoInfo([In] IMFMediaType pMFType, [Const] [MemorySize(BytesParamIndex = 2)] [In] MPEG2VIDEOINFO* pMP2VI, [In] uint cbBufSize, [Const] [In] [Optional] Guid* pSubtype);
HRESULT MFCalculateBitmapImageSize([Const] [MemorySize(BytesParamIndex = 1)] [In] BITMAPINFOHEADER* pBMIH, [In] uint cbBufSize, [Out] uint* pcbImageSize, [Out] [Optional] BOOL* pbKnown);
HRESULT MFCalculateImageSize([Const] [In] Guid* guidSubtype, [In] uint unWidth, [In] uint unHeight, [Out] uint* pcbImageSize);
HRESULT MFFrameRateToAverageTimePerFrame([In] uint unNumerator, [In] uint unDenominator, [Out] ulong* punAverageTimePerFrame);
HRESULT MFAverageTimePerFrameToFrameRate([In] ulong unAverageTimePerFrame, [Out] uint* punNumerator, [Out] uint* punDenominator);
HRESULT MFInitMediaTypeFromMFVideoFormat([In] IMFMediaType pMFType, [Const] [MemorySize(BytesParamIndex = 2)] [In] MFVIDEOFORMAT* pMFVF, [In] uint cbBufSize);
HRESULT MFInitMediaTypeFromWaveFormatEx([In] IMFMediaType pMFType, [Const] [MemorySize(BytesParamIndex = 2)] [In] WAVEFORMATEX* pWaveFormat, [In] uint cbBufSize);
HRESULT MFInitMediaTypeFromAMMediaType([In] IMFMediaType pMFType, [Const] [In] AM_MEDIA_TYPE* pAMType);
HRESULT MFInitAMMediaTypeFromMFMediaType([In] IMFMediaType pMFType, [In] Guid guidFormatBlockType, [In] [Out] AM_MEDIA_TYPE* pAMType);
HRESULT MFCreateAMMediaTypeFromMFMediaType([In] IMFMediaType pMFType, [In] Guid guidFormatBlockType, [In] [Out] AM_MEDIA_TYPE** ppAMType);
BOOL MFCompareFullToPartialMediaType([In] IMFMediaType pMFTypeFull, [In] IMFMediaType pMFTypePartial);
HRESULT MFWrapMediaType([In] IMFMediaType pOrig, [Const] [In] Guid* MajorType, [Const] [In] Guid* SubType, [Out] IMFMediaType* ppWrap);
HRESULT MFUnwrapMediaType([In] IMFMediaType pWrap, [Out] IMFMediaType* ppOrig);
HRESULT MFCreateVideoMediaType([Const] [In] MFVIDEOFORMAT* pVideoFormat, [Out] IMFVideoMediaType* ppIVideoMediaType);
HRESULT MFCreateVideoMediaTypeFromSubtype([Const] [In] Guid* pAMSubtype, [Out] IMFVideoMediaType* ppIVideoMediaType);
HRESULT MFCreateVideoMediaTypeFromBitMapInfoHeader([Const] [In] BITMAPINFOHEADER* pbmihBitMapInfoHeader, [In] uint dwPixelAspectRatioX, [In] uint dwPixelAspectRatioY, [In] MFVideoInterlaceMode InterlaceMode, [In] ulong VideoFlags, [In] ulong qwFramesPerSecondNumerator, [In] ulong qwFramesPerSecondDenominator, [In] uint dwMaxBitRate, [Out] IMFVideoMediaType* ppIVideoMediaType);
HRESULT MFGetStrideForBitmapInfoHeader([In] uint format, [In] uint dwWidth, [Out] int* pStride);
HRESULT MFCreateVideoMediaTypeFromBitMapInfoHeaderEx([Const] [MemorySize(BytesParamIndex = 1)] [In] BITMAPINFOHEADER* pbmihBitMapInfoHeader, [In] uint cbBitMapInfoHeader, [In] uint dwPixelAspectRatioX, [In] uint dwPixelAspectRatioY, [In] MFVideoInterlaceMode InterlaceMode, [In] ulong VideoFlags, [In] uint dwFramesPerSecondNumerator, [In] uint dwFramesPerSecondDenominator, [In] uint dwMaxBitRate, [Out] IMFVideoMediaType* ppIVideoMediaType);
HRESULT MFCreateMediaTypeFromRepresentation([In] Guid guidRepresentation, [In] void* pvRepresentation, [Out] IMFMediaType* ppIMediaType);
HRESULT MFCreateAudioMediaType([Const] [In] WAVEFORMATEX* pAudioFormat, [Out] IMFAudioMediaType* ppIAudioMediaType);
uint MFGetUncompressedVideoFormat([Const] [In] MFVIDEOFORMAT* pVideoFormat);
HRESULT MFInitVideoFormat([In] MFVIDEOFORMAT* pVideoFormat, [In] MFStandardVideoFormat type);
HRESULT MFInitVideoFormat_RGB([In] MFVIDEOFORMAT* pVideoFormat, [In] uint dwWidth, [In] uint dwHeight, [In] uint D3Dfmt);
HRESULT MFConvertColorInfoToDXVA([Out] uint* pdwToDXVA, [Const] [In] MFVIDEOFORMAT* pFromFormat);
HRESULT MFConvertColorInfoFromDXVA([In] [Out] MFVIDEOFORMAT* pToFormat, [In] uint dwFromDXVA);
HRESULT MFCopyImage([Out] byte* pDest, [In] int lDestStride, [Const] [In] byte* pSrc, [In] int lSrcStride, [In] uint dwWidthInBytes, [In] uint dwLines);
HRESULT MFConvertFromFP16Array([NativeArrayInfo(CountParamIndex = 2)] [Out] float* pDest, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] ushort* pSrc, [In] uint dwCount);
HRESULT MFConvertToFP16Array([NativeArrayInfo(CountParamIndex = 2)] [Out] ushort* pDest, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] float* pSrc, [In] uint dwCount);
HRESULT MFCreate2DMediaBuffer([In] uint dwWidth, [In] uint dwHeight, [In] uint dwFourCC, [In] BOOL fBottomUp, [Out] IMFMediaBuffer* ppBuffer);
HRESULT MFCreateMediaBufferFromMediaType([In] IMFMediaType pMediaType, [In] long llDuration, [In] uint dwMinLength, [In] uint dwMinAlignment, [Out] IMFMediaBuffer* ppBuffer);
HRESULT MFCreateCollection([Out] IMFCollection* ppIMFCollection);
void* MFHeapAlloc([In] nuint nSize, [In] uint dwFlags, [In] [Optional] PSTR pszFile, [In] int line, [In] EAllocationType eat);
void MFHeapFree([In] [Out] void* pv);
long MFllMulDiv([In] long a, [In] long b, [In] long c, [In] long d);
HRESULT MFGetContentProtectionSystemCLSID([Const] [In] Guid* guidProtectionSystemID, [Out] Guid* pclsid);
HRESULT MFCombineSamples([In] IMFSample pSample, [In] IMFSample pSampleToAdd, [In] uint dwMaxMergedDurationInMS, [Out] BOOL* pMerged);
HRESULT MFSplitSample([In] IMFSample pSample, [NativeArrayInfo(CountParamIndex = 2)] [Out] IMFSample* pOutputSamples, [In] uint dwOutputSampleMaxCount, [Out] uint* pdwOutputSampleCount);
