BOOL SetupGetInfInformationA([Const] [In] void* InfSpec, [In] uint SearchControl, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] SP_INF_INFORMATION* ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetInfInformationW([Const] [In] void* InfSpec, [In] uint SearchControl, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] SP_INF_INFORMATION* ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupQueryInfFileInformationA([In] SP_INF_INFORMATION* InfInformation, [In] uint InfIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupQueryInfFileInformationW([In] SP_INF_INFORMATION* InfInformation, [In] uint InfIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupQueryInfOriginalFileInformationA([In] SP_INF_INFORMATION* InfInformation, [In] uint InfIndex, [In] [Optional] SP_ALTPLATFORM_INFO_V2* AlternatePlatformInfo, [Out] SP_ORIGINAL_FILE_INFO_A* OriginalFileInfo);
BOOL SetupQueryInfOriginalFileInformationW([In] SP_INF_INFORMATION* InfInformation, [In] uint InfIndex, [In] [Optional] SP_ALTPLATFORM_INFO_V2* AlternatePlatformInfo, [Out] SP_ORIGINAL_FILE_INFO_W* OriginalFileInfo);
BOOL SetupQueryInfVersionInformationA([In] SP_INF_INFORMATION* InfInformation, [In] uint InfIndex, [Const] [In] [Optional] PSTR Key, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupQueryInfVersionInformationW([In] SP_INF_INFORMATION* InfInformation, [In] uint InfIndex, [Const] [In] [Optional] PWSTR Key, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetInfDriverStoreLocationA([Const] [In] PSTR FileName, [In] [Optional] SP_ALTPLATFORM_INFO_V2* AlternatePlatformInfo, [Const] [In] [Optional] PSTR LocaleName, [NativeArrayInfo(CountParamIndex = 4)] [Out] PSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetInfDriverStoreLocationW([Const] [In] PWSTR FileName, [In] [Optional] SP_ALTPLATFORM_INFO_V2* AlternatePlatformInfo, [Const] [In] [Optional] PWSTR LocaleName, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetInfPublishedNameA([Const] [In] PSTR DriverStoreLocation, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetInfPublishedNameW([Const] [In] PWSTR DriverStoreLocation, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetInfFileListA([Const] [In] [Optional] PSTR DirectoryPath, [In] uint InfStyle, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetInfFileListW([Const] [In] [Optional] PWSTR DirectoryPath, [In] uint InfStyle, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
void* SetupOpenInfFileW([Const] [In] PWSTR FileName, [Const] [In] [Optional] PWSTR InfClass, [In] uint InfStyle, [Out] [Optional] uint* ErrorLine);
void* SetupOpenInfFileA([Const] [In] PSTR FileName, [Const] [In] [Optional] PSTR InfClass, [In] uint InfStyle, [Out] [Optional] uint* ErrorLine);
void* SetupOpenMasterInf();
BOOL SetupOpenAppendInfFileW([Const] [In] [Optional] PWSTR FileName, [In] void* InfHandle, [Out] [Optional] uint* ErrorLine);
BOOL SetupOpenAppendInfFileA([Const] [In] [Optional] PSTR FileName, [In] void* InfHandle, [Out] [Optional] uint* ErrorLine);
void SetupCloseInfFile([In] void* InfHandle);
BOOL SetupFindFirstLineA([In] void* InfHandle, [Const] [In] PSTR Section, [Const] [In] [Optional] PSTR Key, [Out] INFCONTEXT* Context);
BOOL SetupFindFirstLineW([In] void* InfHandle, [Const] [In] PWSTR Section, [Const] [In] [Optional] PWSTR Key, [Out] INFCONTEXT* Context);
BOOL SetupFindNextLine([In] INFCONTEXT* ContextIn, [Out] INFCONTEXT* ContextOut);
BOOL SetupFindNextMatchLineA([In] INFCONTEXT* ContextIn, [Const] [In] [Optional] PSTR Key, [Out] INFCONTEXT* ContextOut);
BOOL SetupFindNextMatchLineW([In] INFCONTEXT* ContextIn, [Const] [In] [Optional] PWSTR Key, [Out] INFCONTEXT* ContextOut);
BOOL SetupGetLineByIndexA([In] void* InfHandle, [Const] [In] PSTR Section, [In] uint Index, [Out] INFCONTEXT* Context);
BOOL SetupGetLineByIndexW([In] void* InfHandle, [Const] [In] PWSTR Section, [In] uint Index, [Out] INFCONTEXT* Context);
int SetupGetLineCountA([In] void* InfHandle, [Const] [In] PSTR Section);
int SetupGetLineCountW([In] void* InfHandle, [Const] [In] PWSTR Section);
BOOL SetupGetLineTextA([In] [Optional] INFCONTEXT* Context, [In] [Optional] void* InfHandle, [Const] [In] [Optional] PSTR Section, [Const] [In] [Optional] PSTR Key, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetLineTextW([In] [Optional] INFCONTEXT* Context, [In] [Optional] void* InfHandle, [Const] [In] [Optional] PWSTR Section, [Const] [In] [Optional] PWSTR Key, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
uint SetupGetFieldCount([In] INFCONTEXT* Context);
BOOL SetupGetStringFieldA([In] INFCONTEXT* Context, [In] uint FieldIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetStringFieldW([In] INFCONTEXT* Context, [In] uint FieldIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetIntField([In] INFCONTEXT* Context, [In] uint FieldIndex, [Out] int* IntegerValue);
BOOL SetupGetMultiSzFieldA([In] INFCONTEXT* Context, [In] uint FieldIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetMultiSzFieldW([In] INFCONTEXT* Context, [In] uint FieldIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetBinaryField([In] INFCONTEXT* Context, [In] uint FieldIndex, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] byte* ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
uint SetupGetFileCompressionInfoA([Const] [In] PSTR SourceFileName, [Out] PSTR* ActualSourceFileName, [Out] uint* SourceFileSize, [Out] uint* TargetFileSize, [Out] uint* CompressionType);
uint SetupGetFileCompressionInfoW([Const] [In] PWSTR SourceFileName, [Out] PWSTR* ActualSourceFileName, [Out] uint* SourceFileSize, [Out] uint* TargetFileSize, [Out] uint* CompressionType);
BOOL SetupGetFileCompressionInfoExA([Const] [In] PSTR SourceFileName, [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] PSTR ActualSourceFileNameBuffer, [In] uint ActualSourceFileNameBufferLen, [Out] [Optional] uint* RequiredBufferLen, [Out] uint* SourceFileSize, [Out] uint* TargetFileSize, [Out] uint* CompressionType);
BOOL SetupGetFileCompressionInfoExW([Const] [In] PWSTR SourceFileName, [NativeArrayInfo(CountParamIndex = 2)] [In] [Optional] PWSTR ActualSourceFileNameBuffer, [In] uint ActualSourceFileNameBufferLen, [Out] [Optional] uint* RequiredBufferLen, [Out] uint* SourceFileSize, [Out] uint* TargetFileSize, [Out] uint* CompressionType);
uint SetupDecompressOrCopyFileA([Const] [In] PSTR SourceFileName, [Const] [In] PSTR TargetFileName, [In] [Optional] uint* CompressionType);
uint SetupDecompressOrCopyFileW([Const] [In] PWSTR SourceFileName, [Const] [In] PWSTR TargetFileName, [In] [Optional] uint* CompressionType);
BOOL SetupGetSourceFileLocationA([In] void* InfHandle, [In] [Optional] INFCONTEXT* InfContext, [Const] [In] [Optional] PSTR FileName, [Out] uint* SourceId, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetSourceFileLocationW([In] void* InfHandle, [In] [Optional] INFCONTEXT* InfContext, [Const] [In] [Optional] PWSTR FileName, [Out] uint* SourceId, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetSourceFileSizeA([In] void* InfHandle, [In] [Optional] INFCONTEXT* InfContext, [Const] [In] [Optional] PSTR FileName, [Const] [In] [Optional] PSTR Section, [Out] uint* FileSize, [In] uint RoundingFactor);
BOOL SetupGetSourceFileSizeW([In] void* InfHandle, [In] [Optional] INFCONTEXT* InfContext, [Const] [In] [Optional] PWSTR FileName, [Const] [In] [Optional] PWSTR Section, [Out] uint* FileSize, [In] uint RoundingFactor);
BOOL SetupGetTargetPathA([In] void* InfHandle, [In] [Optional] INFCONTEXT* InfContext, [Const] [In] [Optional] PSTR Section, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetTargetPathW([In] void* InfHandle, [In] [Optional] INFCONTEXT* InfContext, [Const] [In] [Optional] PWSTR Section, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupSetSourceListA([In] uint Flags, [NativeArrayInfo(CountParamIndex = 2)] [In] PSTR* SourceList, [In] uint SourceCount);
BOOL SetupSetSourceListW([In] uint Flags, [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR* SourceList, [In] uint SourceCount);
BOOL SetupCancelTemporarySourceList();
BOOL SetupAddToSourceListA([In] uint Flags, [Const] [In] PSTR Source);
BOOL SetupAddToSourceListW([In] uint Flags, [Const] [In] PWSTR Source);
BOOL SetupRemoveFromSourceListA([In] uint Flags, [Const] [In] PSTR Source);
BOOL SetupRemoveFromSourceListW([In] uint Flags, [Const] [In] PWSTR Source);
BOOL SetupQuerySourceListA([In] uint Flags, [Out] PSTR** List, [Out] uint* Count);
BOOL SetupQuerySourceListW([In] uint Flags, [Out] PWSTR** List, [Out] uint* Count);
BOOL SetupFreeSourceListA([NativeArrayInfo(CountParamIndex = 1)] [In] [Out] PSTR** List, [In] uint Count);
BOOL SetupFreeSourceListW([NativeArrayInfo(CountParamIndex = 1)] [In] [Out] PWSTR** List, [In] uint Count);
uint SetupPromptForDiskA([In] HWND hwndParent, [Const] [In] [Optional] PSTR DialogTitle, [Const] [In] [Optional] PSTR DiskName, [Const] [In] [Optional] PSTR PathToSource, [Const] [In] PSTR FileSought, [Const] [In] [Optional] PSTR TagFile, [In] uint DiskPromptStyle, [NativeArrayInfo(CountParamIndex = 8)] [Out] [Optional] PSTR PathBuffer, [In] uint PathBufferSize, [Out] [Optional] uint* PathRequiredSize);
uint SetupPromptForDiskW([In] HWND hwndParent, [Const] [In] [Optional] PWSTR DialogTitle, [Const] [In] [Optional] PWSTR DiskName, [Const] [In] [Optional] PWSTR PathToSource, [Const] [In] PWSTR FileSought, [Const] [In] [Optional] PWSTR TagFile, [In] uint DiskPromptStyle, [NativeArrayInfo(CountParamIndex = 8)] [Out] [Optional] PWSTR PathBuffer, [In] uint PathBufferSize, [Out] [Optional] uint* PathRequiredSize);
uint SetupCopyErrorA([In] HWND hwndParent, [Const] [In] [Optional] PSTR DialogTitle, [Const] [In] [Optional] PSTR DiskName, [Const] [In] PSTR PathToSource, [Const] [In] PSTR SourceFile, [Const] [In] [Optional] PSTR TargetPathFile, [In] uint Win32ErrorCode, [In] uint Style, [NativeArrayInfo(CountParamIndex = 9)] [Out] [Optional] PSTR PathBuffer, [In] uint PathBufferSize, [Out] [Optional] uint* PathRequiredSize);
uint SetupCopyErrorW([In] HWND hwndParent, [Const] [In] [Optional] PWSTR DialogTitle, [Const] [In] [Optional] PWSTR DiskName, [Const] [In] PWSTR PathToSource, [Const] [In] PWSTR SourceFile, [Const] [In] [Optional] PWSTR TargetPathFile, [In] uint Win32ErrorCode, [In] uint Style, [NativeArrayInfo(CountParamIndex = 9)] [Out] [Optional] PWSTR PathBuffer, [In] uint PathBufferSize, [Out] [Optional] uint* PathRequiredSize);
uint SetupRenameErrorA([In] HWND hwndParent, [Const] [In] [Optional] PSTR DialogTitle, [Const] [In] PSTR SourceFile, [Const] [In] PSTR TargetFile, [In] uint Win32ErrorCode, [In] uint Style);
uint SetupRenameErrorW([In] HWND hwndParent, [Const] [In] [Optional] PWSTR DialogTitle, [Const] [In] PWSTR SourceFile, [Const] [In] PWSTR TargetFile, [In] uint Win32ErrorCode, [In] uint Style);
uint SetupDeleteErrorA([In] HWND hwndParent, [Const] [In] [Optional] PSTR DialogTitle, [Const] [In] PSTR File, [In] uint Win32ErrorCode, [In] uint Style);
uint SetupDeleteErrorW([In] HWND hwndParent, [Const] [In] [Optional] PWSTR DialogTitle, [Const] [In] PWSTR File, [In] uint Win32ErrorCode, [In] uint Style);
uint SetupBackupErrorA([In] HWND hwndParent, [Const] [In] [Optional] PSTR DialogTitle, [Const] [In] PSTR SourceFile, [Const] [In] [Optional] PSTR TargetFile, [In] uint Win32ErrorCode, [In] uint Style);
uint SetupBackupErrorW([In] HWND hwndParent, [Const] [In] [Optional] PWSTR DialogTitle, [Const] [In] PWSTR SourceFile, [Const] [In] [Optional] PWSTR TargetFile, [In] uint Win32ErrorCode, [In] uint Style);
BOOL SetupSetDirectoryIdA([In] void* InfHandle, [In] uint Id, [Const] [In] [Optional] PSTR Directory);
BOOL SetupSetDirectoryIdW([In] void* InfHandle, [In] uint Id, [Const] [In] [Optional] PWSTR Directory);
BOOL SetupSetDirectoryIdExA([In] void* InfHandle, [In] uint Id, [Const] [In] [Optional] PSTR Directory, [In] uint Flags, [Reserved] [In] uint Reserved1, [Reserved] [In] [Out] void* Reserved2);
BOOL SetupSetDirectoryIdExW([In] void* InfHandle, [In] uint Id, [Const] [In] [Optional] PWSTR Directory, [In] uint Flags, [Reserved] [In] uint Reserved1, [Reserved] [In] [Out] void* Reserved2);
BOOL SetupGetSourceInfoA([In] void* InfHandle, [In] uint SourceId, [In] uint InfoDesired, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupGetSourceInfoW([In] void* InfHandle, [In] uint SourceId, [In] uint InfoDesired, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupInstallFileA([In] [Optional] void* InfHandle, [In] [Optional] INFCONTEXT* InfContext, [Const] [In] [Optional] PSTR SourceFile, [Const] [In] [Optional] PSTR SourcePathRoot, [Const] [In] [Optional] PSTR DestinationName, [In] SP_COPY_STYLE CopyStyle, [In] [Optional] PSP_FILE_CALLBACK_A CopyMsgHandler, [In] [Optional] void* Context);
BOOL SetupInstallFileW([In] [Optional] void* InfHandle, [In] [Optional] INFCONTEXT* InfContext, [Const] [In] [Optional] PWSTR SourceFile, [Const] [In] [Optional] PWSTR SourcePathRoot, [Const] [In] [Optional] PWSTR DestinationName, [In] SP_COPY_STYLE CopyStyle, [In] [Optional] PSP_FILE_CALLBACK_W CopyMsgHandler, [In] [Optional] void* Context);
BOOL SetupInstallFileExA([In] [Optional] void* InfHandle, [In] [Optional] INFCONTEXT* InfContext, [Const] [In] [Optional] PSTR SourceFile, [Const] [In] [Optional] PSTR SourcePathRoot, [Const] [In] [Optional] PSTR DestinationName, [In] SP_COPY_STYLE CopyStyle, [In] [Optional] PSP_FILE_CALLBACK_A CopyMsgHandler, [In] [Optional] void* Context, [Out] BOOL* FileWasInUse);
BOOL SetupInstallFileExW([In] [Optional] void* InfHandle, [In] [Optional] INFCONTEXT* InfContext, [Const] [In] [Optional] PWSTR SourceFile, [Const] [In] [Optional] PWSTR SourcePathRoot, [Const] [In] [Optional] PWSTR DestinationName, [In] SP_COPY_STYLE CopyStyle, [In] [Optional] PSP_FILE_CALLBACK_W CopyMsgHandler, [In] [Optional] void* Context, [Out] BOOL* FileWasInUse);
void* SetupOpenFileQueue();
BOOL SetupCloseFileQueue([In] void* QueueHandle);
BOOL SetupSetFileQueueAlternatePlatformA([In] void* QueueHandle, [In] [Optional] SP_ALTPLATFORM_INFO_V2* AlternatePlatformInfo, [Const] [In] [Optional] PSTR AlternateDefaultCatalogFile);
BOOL SetupSetFileQueueAlternatePlatformW([In] void* QueueHandle, [In] [Optional] SP_ALTPLATFORM_INFO_V2* AlternatePlatformInfo, [Const] [In] [Optional] PWSTR AlternateDefaultCatalogFile);
BOOL SetupSetPlatformPathOverrideA([Const] [In] [Optional] PSTR Override);
BOOL SetupSetPlatformPathOverrideW([Const] [In] [Optional] PWSTR Override);
BOOL SetupQueueCopyA([In] void* QueueHandle, [Const] [In] [Optional] PSTR SourceRootPath, [Const] [In] [Optional] PSTR SourcePath, [Const] [In] PSTR SourceFilename, [Const] [In] [Optional] PSTR SourceDescription, [Const] [In] [Optional] PSTR SourceTagfile, [Const] [In] PSTR TargetDirectory, [Const] [In] [Optional] PSTR TargetFilename, [In] uint CopyStyle);
BOOL SetupQueueCopyW([In] void* QueueHandle, [Const] [In] [Optional] PWSTR SourceRootPath, [Const] [In] [Optional] PWSTR SourcePath, [Const] [In] PWSTR SourceFilename, [Const] [In] [Optional] PWSTR SourceDescription, [Const] [In] [Optional] PWSTR SourceTagfile, [Const] [In] PWSTR TargetDirectory, [Const] [In] [Optional] PWSTR TargetFilename, [In] uint CopyStyle);
BOOL SetupQueueCopyIndirectA([In] SP_FILE_COPY_PARAMS_A* CopyParams);
BOOL SetupQueueCopyIndirectW([In] SP_FILE_COPY_PARAMS_W* CopyParams);
BOOL SetupQueueDefaultCopyA([In] void* QueueHandle, [In] void* InfHandle, [Const] [In] [Optional] PSTR SourceRootPath, [Const] [In] PSTR SourceFilename, [Const] [In] [Optional] PSTR TargetFilename, [In] uint CopyStyle);
BOOL SetupQueueDefaultCopyW([In] void* QueueHandle, [In] void* InfHandle, [Const] [In] [Optional] PWSTR SourceRootPath, [Const] [In] PWSTR SourceFilename, [Const] [In] [Optional] PWSTR TargetFilename, [In] uint CopyStyle);
BOOL SetupQueueCopySectionA([In] void* QueueHandle, [Const] [In] [Optional] PSTR SourceRootPath, [In] void* InfHandle, [In] [Optional] void* ListInfHandle, [Const] [In] PSTR Section, [In] uint CopyStyle);
BOOL SetupQueueCopySectionW([In] void* QueueHandle, [Const] [In] [Optional] PWSTR SourceRootPath, [In] void* InfHandle, [In] [Optional] void* ListInfHandle, [Const] [In] PWSTR Section, [In] uint CopyStyle);
BOOL SetupQueueDeleteA([In] void* QueueHandle, [Const] [In] PSTR PathPart1, [Const] [In] [Optional] PSTR PathPart2);
BOOL SetupQueueDeleteW([In] void* QueueHandle, [Const] [In] PWSTR PathPart1, [Const] [In] [Optional] PWSTR PathPart2);
BOOL SetupQueueDeleteSectionA([In] void* QueueHandle, [In] void* InfHandle, [In] [Optional] void* ListInfHandle, [Const] [In] PSTR Section);
BOOL SetupQueueDeleteSectionW([In] void* QueueHandle, [In] void* InfHandle, [In] [Optional] void* ListInfHandle, [Const] [In] PWSTR Section);
BOOL SetupQueueRenameA([In] void* QueueHandle, [Const] [In] PSTR SourcePath, [Const] [In] [Optional] PSTR SourceFilename, [Const] [In] [Optional] PSTR TargetPath, [Const] [In] PSTR TargetFilename);
BOOL SetupQueueRenameW([In] void* QueueHandle, [Const] [In] PWSTR SourcePath, [Const] [In] [Optional] PWSTR SourceFilename, [Const] [In] [Optional] PWSTR TargetPath, [Const] [In] PWSTR TargetFilename);
BOOL SetupQueueRenameSectionA([In] void* QueueHandle, [In] void* InfHandle, [In] [Optional] void* ListInfHandle, [Const] [In] PSTR Section);
BOOL SetupQueueRenameSectionW([In] void* QueueHandle, [In] void* InfHandle, [In] [Optional] void* ListInfHandle, [Const] [In] PWSTR Section);
BOOL SetupCommitFileQueueA([In] [Optional] HWND Owner, [In] void* QueueHandle, [In] PSP_FILE_CALLBACK_A MsgHandler, [In] void* Context);
BOOL SetupCommitFileQueueW([In] [Optional] HWND Owner, [In] void* QueueHandle, [In] PSP_FILE_CALLBACK_W MsgHandler, [In] void* Context);
BOOL SetupScanFileQueueA([In] void* FileQueue, [In] uint Flags, [In] [Optional] HWND Window, [In] [Optional] PSP_FILE_CALLBACK_A CallbackRoutine, [In] [Optional] void* CallbackContext, [Out] uint* Result);
BOOL SetupScanFileQueueW([In] void* FileQueue, [In] uint Flags, [In] [Optional] HWND Window, [In] [Optional] PSP_FILE_CALLBACK_W CallbackRoutine, [In] [Optional] void* CallbackContext, [Out] uint* Result);
BOOL SetupGetFileQueueCount([In] void* FileQueue, [In] uint SubQueueFileOp, [Out] uint* NumOperations);
BOOL SetupGetFileQueueFlags([In] void* FileQueue, [Out] uint* Flags);
BOOL SetupSetFileQueueFlags([In] void* FileQueue, [In] uint FlagMask, [In] uint Flags);
BOOL SetupCopyOEMInfA([Const] [In] PSTR SourceInfFileName, [Const] [In] [Optional] PSTR OEMSourceMediaLocation, [In] OEM_SOURCE_MEDIA_TYPE OEMSourceMediaType, [In] uint CopyStyle, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR DestinationInfFileName, [In] uint DestinationInfFileNameSize, [Out] [Optional] uint* RequiredSize, [Out] [Optional] PSTR* DestinationInfFileNameComponent);
BOOL SetupCopyOEMInfW([Const] [In] PWSTR SourceInfFileName, [Const] [In] [Optional] PWSTR OEMSourceMediaLocation, [In] OEM_SOURCE_MEDIA_TYPE OEMSourceMediaType, [In] uint CopyStyle, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR DestinationInfFileName, [In] uint DestinationInfFileNameSize, [Out] [Optional] uint* RequiredSize, [Out] [Optional] PWSTR* DestinationInfFileNameComponent);
BOOL SetupUninstallOEMInfA([Const] [In] PSTR InfFileName, [In] uint Flags, [Reserved] [In] [Out] void* Reserved);
BOOL SetupUninstallOEMInfW([Const] [In] PWSTR InfFileName, [In] uint Flags, [Reserved] [In] [Out] void* Reserved);
BOOL SetupUninstallNewlyCopiedInfs([In] void* FileQueue, [In] uint Flags, [Reserved] [In] [Out] void* Reserved);
void* SetupCreateDiskSpaceListA([Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2, [In] uint Flags);
void* SetupCreateDiskSpaceListW([Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2, [In] uint Flags);
void* SetupDuplicateDiskSpaceListA([In] void* DiskSpace, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2, [In] uint Flags);
void* SetupDuplicateDiskSpaceListW([In] void* DiskSpace, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2, [In] uint Flags);
BOOL SetupDestroyDiskSpaceList([In] [Out] void* DiskSpace);
BOOL SetupQueryDrivesInDiskSpaceListA([In] void* DiskSpace, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupQueryDrivesInDiskSpaceListW([In] void* DiskSpace, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR ReturnBuffer, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupQuerySpaceRequiredOnDriveA([In] void* DiskSpace, [Const] [In] PSTR DriveSpec, [Out] long* SpaceRequired, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupQuerySpaceRequiredOnDriveW([In] void* DiskSpace, [Const] [In] PWSTR DriveSpec, [Out] long* SpaceRequired, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupAdjustDiskSpaceListA([In] void* DiskSpace, [Const] [In] PSTR DriveRoot, [In] long Amount, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupAdjustDiskSpaceListW([In] void* DiskSpace, [Const] [In] PWSTR DriveRoot, [In] long Amount, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupAddToDiskSpaceListA([In] void* DiskSpace, [Const] [In] PSTR TargetFilespec, [In] long FileSize, [In] SETUP_FILE_OPERATION Operation, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupAddToDiskSpaceListW([In] void* DiskSpace, [Const] [In] PWSTR TargetFilespec, [In] long FileSize, [In] SETUP_FILE_OPERATION Operation, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupAddSectionToDiskSpaceListA([In] void* DiskSpace, [In] void* InfHandle, [In] [Optional] void* ListInfHandle, [Const] [In] PSTR SectionName, [In] SETUP_FILE_OPERATION Operation, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupAddSectionToDiskSpaceListW([In] void* DiskSpace, [In] void* InfHandle, [In] [Optional] void* ListInfHandle, [Const] [In] PWSTR SectionName, [In] SETUP_FILE_OPERATION Operation, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupAddInstallSectionToDiskSpaceListA([In] void* DiskSpace, [In] void* InfHandle, [In] [Optional] void* LayoutInfHandle, [Const] [In] PSTR SectionName, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupAddInstallSectionToDiskSpaceListW([In] void* DiskSpace, [In] void* InfHandle, [In] [Optional] void* LayoutInfHandle, [Const] [In] PWSTR SectionName, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupRemoveFromDiskSpaceListA([In] void* DiskSpace, [Const] [In] PSTR TargetFilespec, [In] SETUP_FILE_OPERATION Operation, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupRemoveFromDiskSpaceListW([In] void* DiskSpace, [Const] [In] PWSTR TargetFilespec, [In] SETUP_FILE_OPERATION Operation, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupRemoveSectionFromDiskSpaceListA([In] void* DiskSpace, [In] void* InfHandle, [In] [Optional] void* ListInfHandle, [Const] [In] PSTR SectionName, [In] SETUP_FILE_OPERATION Operation, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupRemoveSectionFromDiskSpaceListW([In] void* DiskSpace, [In] void* InfHandle, [In] [Optional] void* ListInfHandle, [Const] [In] PWSTR SectionName, [In] SETUP_FILE_OPERATION Operation, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupRemoveInstallSectionFromDiskSpaceListA([In] void* DiskSpace, [In] void* InfHandle, [In] [Optional] void* LayoutInfHandle, [Const] [In] PSTR SectionName, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupRemoveInstallSectionFromDiskSpaceListW([In] void* DiskSpace, [In] void* InfHandle, [In] [Optional] void* LayoutInfHandle, [Const] [In] PWSTR SectionName, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] uint Reserved2);
BOOL SetupIterateCabinetA([Const] [In] PSTR CabinetFile, [Reserved] [In] uint Reserved, [In] PSP_FILE_CALLBACK_A MsgHandler, [In] void* Context);
BOOL SetupIterateCabinetW([Const] [In] PWSTR CabinetFile, [Reserved] [In] uint Reserved, [In] PSP_FILE_CALLBACK_W MsgHandler, [In] void* Context);
int SetupPromptReboot([In] [Optional] void* FileQueue, [In] [Optional] HWND Owner, [In] BOOL ScanOnly);
void* SetupInitDefaultQueueCallback([In] [Optional] HWND OwnerWindow);
void* SetupInitDefaultQueueCallbackEx([In] [Optional] HWND OwnerWindow, [In] [Optional] HWND AlternateProgressWindow, [In] uint ProgressMessage, [Reserved] [In] uint Reserved1, [Reserved] [In] [Out] void* Reserved2);
void SetupTermDefaultQueueCallback([In] void* Context);
uint SetupDefaultQueueCallbackA([In] void* Context, [In] uint Notification, [In] nuint Param1, [In] nuint Param2);
uint SetupDefaultQueueCallbackW([In] void* Context, [In] uint Notification, [In] nuint Param1, [In] nuint Param2);
BOOL SetupInstallFromInfSectionA([In] [Optional] HWND Owner, [In] void* InfHandle, [Const] [In] PSTR SectionName, [In] uint Flags, [In] [Optional] HKEY RelativeKeyRoot, [Const] [In] [Optional] PSTR SourceRootPath, [In] uint CopyFlags, [In] [Optional] PSP_FILE_CALLBACK_A MsgHandler, [In] [Optional] void* Context, [In] [Optional] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupInstallFromInfSectionW([In] [Optional] HWND Owner, [In] void* InfHandle, [Const] [In] PWSTR SectionName, [In] uint Flags, [In] [Optional] HKEY RelativeKeyRoot, [Const] [In] [Optional] PWSTR SourceRootPath, [In] uint CopyFlags, [In] [Optional] PSP_FILE_CALLBACK_W MsgHandler, [In] [Optional] void* Context, [In] [Optional] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupInstallFilesFromInfSectionA([In] void* InfHandle, [In] [Optional] void* LayoutInfHandle, [In] void* FileQueue, [Const] [In] PSTR SectionName, [Const] [In] [Optional] PSTR SourceRootPath, [In] uint CopyFlags);
BOOL SetupInstallFilesFromInfSectionW([In] void* InfHandle, [In] [Optional] void* LayoutInfHandle, [In] void* FileQueue, [Const] [In] PWSTR SectionName, [Const] [In] [Optional] PWSTR SourceRootPath, [In] uint CopyFlags);
BOOL SetupInstallServicesFromInfSectionA([In] void* InfHandle, [Const] [In] PSTR SectionName, [In] uint Flags);
BOOL SetupInstallServicesFromInfSectionW([In] void* InfHandle, [Const] [In] PWSTR SectionName, [In] uint Flags);
BOOL SetupInstallServicesFromInfSectionExA([In] void* InfHandle, [Const] [In] PSTR SectionName, [In] uint Flags, [In] [Optional] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] [Out] void* Reserved2);
BOOL SetupInstallServicesFromInfSectionExW([In] void* InfHandle, [Const] [In] PWSTR SectionName, [In] uint Flags, [In] [Optional] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] [Out] void* Reserved2);
void InstallHinfSectionA([In] HWND Window, [In] HINSTANCE ModuleHandle, [Const] [In] PSTR CommandLine, [In] int ShowCommand);
void InstallHinfSectionW([In] HWND Window, [In] HINSTANCE ModuleHandle, [Const] [In] PWSTR CommandLine, [In] int ShowCommand);
void* SetupInitializeFileLogA([Const] [In] [Optional] PSTR LogFileName, [In] uint Flags);
void* SetupInitializeFileLogW([Const] [In] [Optional] PWSTR LogFileName, [In] uint Flags);
BOOL SetupTerminateFileLog([In] void* FileLogHandle);
BOOL SetupLogFileA([In] void* FileLogHandle, [Const] [In] [Optional] PSTR LogSectionName, [Const] [In] PSTR SourceFilename, [Const] [In] PSTR TargetFilename, [In] uint Checksum, [Const] [In] [Optional] PSTR DiskTagfile, [Const] [In] [Optional] PSTR DiskDescription, [Const] [In] [Optional] PSTR OtherInfo, [In] uint Flags);
BOOL SetupLogFileW([In] void* FileLogHandle, [Const] [In] [Optional] PWSTR LogSectionName, [Const] [In] PWSTR SourceFilename, [Const] [In] PWSTR TargetFilename, [In] uint Checksum, [Const] [In] [Optional] PWSTR DiskTagfile, [Const] [In] [Optional] PWSTR DiskDescription, [Const] [In] [Optional] PWSTR OtherInfo, [In] uint Flags);
BOOL SetupRemoveFileLogEntryA([In] void* FileLogHandle, [Const] [In] [Optional] PSTR LogSectionName, [Const] [In] [Optional] PSTR TargetFilename);
BOOL SetupRemoveFileLogEntryW([In] void* FileLogHandle, [Const] [In] [Optional] PWSTR LogSectionName, [Const] [In] [Optional] PWSTR TargetFilename);
BOOL SetupQueryFileLogA([In] void* FileLogHandle, [Const] [In] [Optional] PSTR LogSectionName, [Const] [In] PSTR TargetFilename, [In] SetupFileLogInfo DesiredInfo, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR DataOut, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupQueryFileLogW([In] void* FileLogHandle, [Const] [In] [Optional] PWSTR LogSectionName, [Const] [In] PWSTR TargetFilename, [In] SetupFileLogInfo DesiredInfo, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR DataOut, [In] uint ReturnBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupOpenLog([In] BOOL Erase);
BOOL SetupLogErrorA([Const] [In] PSTR MessageString, [In] uint Severity);
BOOL SetupLogErrorW([Const] [In] PWSTR MessageString, [In] uint Severity);
void SetupCloseLog();
ulong SetupGetThreadLogToken();
void SetupSetThreadLogToken([In] ulong LogToken);
void SetupWriteTextLog([In] ulong LogToken, [In] uint Category, [In] uint Flags, [Const] [In] PSTR MessageStr, ...);
void SetupWriteTextLogError([In] ulong LogToken, [In] uint Category, [In] uint LogFlags, [In] uint Error, [Const] [In] PSTR MessageStr, ...);
void SetupWriteTextLogInfLine([In] ulong LogToken, [In] uint Flags, [In] void* InfHandle, [In] INFCONTEXT* Context);
BOOL SetupGetBackupInformationA([In] void* QueueHandle, [In] [Out] SP_BACKUP_QUEUE_PARAMS_V2_A* BackupParams);
BOOL SetupGetBackupInformationW([In] void* QueueHandle, [In] [Out] SP_BACKUP_QUEUE_PARAMS_V2_W* BackupParams);
BOOL SetupPrepareQueueForRestoreA([In] void* QueueHandle, [Const] [In] PSTR BackupPath, [In] uint RestoreFlags);
BOOL SetupPrepareQueueForRestoreW([In] void* QueueHandle, [Const] [In] PWSTR BackupPath, [In] uint RestoreFlags);
BOOL SetupSetNonInteractiveMode([In] BOOL NonInteractiveFlag);
BOOL SetupGetNonInteractiveMode();
HDEVINFO SetupDiCreateDeviceInfoList([Const] [In] [Optional] Guid* ClassGuid, [In] [Optional] HWND hwndParent);
HDEVINFO SetupDiCreateDeviceInfoListExA([Const] [In] [Optional] Guid* ClassGuid, [In] [Optional] HWND hwndParent, [Const] [In] [Optional] PSTR MachineName, [Reserved] [In] [Out] void* Reserved);
HDEVINFO SetupDiCreateDeviceInfoListExW([Const] [In] [Optional] Guid* ClassGuid, [In] [Optional] HWND hwndParent, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetDeviceInfoListClass([In] HDEVINFO DeviceInfoSet, [Out] Guid* ClassGuid);
BOOL SetupDiGetDeviceInfoListDetailA([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVINFO_LIST_DETAIL_DATA_A* DeviceInfoSetDetailData);
BOOL SetupDiGetDeviceInfoListDetailW([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVINFO_LIST_DETAIL_DATA_W* DeviceInfoSetDetailData);
BOOL SetupDiCreateDeviceInfoA([In] HDEVINFO DeviceInfoSet, [Const] [In] PSTR DeviceName, [Const] [In] Guid* ClassGuid, [Const] [In] [Optional] PSTR DeviceDescription, [In] [Optional] HWND hwndParent, [In] uint CreationFlags, [In] [Out] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiCreateDeviceInfoW([In] HDEVINFO DeviceInfoSet, [Const] [In] PWSTR DeviceName, [Const] [In] Guid* ClassGuid, [Const] [In] [Optional] PWSTR DeviceDescription, [In] [Optional] HWND hwndParent, [In] uint CreationFlags, [In] [Out] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiOpenDeviceInfoA([In] HDEVINFO DeviceInfoSet, [Const] [In] PSTR DeviceInstanceId, [In] [Optional] HWND hwndParent, [In] uint OpenFlags, [In] [Out] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiOpenDeviceInfoW([In] HDEVINFO DeviceInfoSet, [Const] [In] PWSTR DeviceInstanceId, [In] [Optional] HWND hwndParent, [In] uint OpenFlags, [In] [Out] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiGetDeviceInstanceIdA([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR DeviceInstanceId, [In] uint DeviceInstanceIdSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiGetDeviceInstanceIdW([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR DeviceInstanceId, [In] uint DeviceInstanceIdSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiDeleteDeviceInfo([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiEnumDeviceInfo([In] HDEVINFO DeviceInfoSet, [In] uint MemberIndex, [In] [Out] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiDestroyDeviceInfoList([In] HDEVINFO DeviceInfoSet);
BOOL SetupDiEnumDeviceInterfaces([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [Const] [In] Guid* InterfaceClassGuid, [In] uint MemberIndex, [In] [Out] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData);
BOOL SetupDiCreateDeviceInterfaceA([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [Const] [In] Guid* InterfaceClassGuid, [Const] [In] [Optional] PSTR ReferenceString, [In] uint CreationFlags, [In] [Out] [Optional] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData);
BOOL SetupDiCreateDeviceInterfaceW([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [Const] [In] Guid* InterfaceClassGuid, [Const] [In] [Optional] PWSTR ReferenceString, [In] uint CreationFlags, [In] [Out] [Optional] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData);
BOOL SetupDiOpenDeviceInterfaceA([In] HDEVINFO DeviceInfoSet, [Const] [In] PSTR DevicePath, [In] uint OpenFlags, [In] [Out] [Optional] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData);
BOOL SetupDiOpenDeviceInterfaceW([In] HDEVINFO DeviceInfoSet, [Const] [In] PWSTR DevicePath, [In] uint OpenFlags, [In] [Out] [Optional] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData);
BOOL SetupDiGetDeviceInterfaceAlias([In] HDEVINFO DeviceInfoSet, [In] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData, [Const] [In] Guid* AliasInterfaceClassGuid, [In] [Out] SP_DEVICE_INTERFACE_DATA* AliasDeviceInterfaceData);
BOOL SetupDiDeleteDeviceInterfaceData([In] HDEVINFO DeviceInfoSet, [In] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData);
BOOL SetupDiRemoveDeviceInterface([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData);
BOOL SetupDiGetDeviceInterfaceDetailA([In] HDEVINFO DeviceInfoSet, [In] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData, [MemorySize(BytesParamIndex = 3)] [In] [Out] [Optional] SP_DEVICE_INTERFACE_DETAIL_DATA_A* DeviceInterfaceDetailData, [In] uint DeviceInterfaceDetailDataSize, [Out] [Optional] uint* RequiredSize, [In] [Out] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiGetDeviceInterfaceDetailW([In] HDEVINFO DeviceInfoSet, [In] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] SP_DEVICE_INTERFACE_DETAIL_DATA_W* DeviceInterfaceDetailData, [In] uint DeviceInterfaceDetailDataSize, [Out] [Optional] uint* RequiredSize, [In] [Out] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiInstallDeviceInterfaces([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiSetDeviceInterfaceDefault([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData, [In] uint Flags, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiRegisterDeviceInfo([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVINFO_DATA* DeviceInfoData, [In] uint Flags, [In] [Optional] PSP_DETSIG_CMPPROC CompareProc, [In] [Optional] void* CompareContext, [In] [Out] [Optional] SP_DEVINFO_DATA* DupDeviceInfoData);
BOOL SetupDiBuildDriverInfoList([In] HDEVINFO DeviceInfoSet, [In] [Out] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] SETUP_DI_BUILD_DRIVER_DRIVER_TYPE DriverType);
BOOL SetupDiCancelDriverInfoSearch([In] HDEVINFO DeviceInfoSet);
BOOL SetupDiEnumDriverInfoA([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] uint DriverType, [In] uint MemberIndex, [In] [Out] SP_DRVINFO_DATA_V2_A* DriverInfoData);
BOOL SetupDiEnumDriverInfoW([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] uint DriverType, [In] uint MemberIndex, [In] [Out] SP_DRVINFO_DATA_V2_W* DriverInfoData);
BOOL SetupDiGetSelectedDriverA([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] [Out] SP_DRVINFO_DATA_V2_A* DriverInfoData);
BOOL SetupDiGetSelectedDriverW([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] [Out] SP_DRVINFO_DATA_V2_W* DriverInfoData);
BOOL SetupDiSetSelectedDriverA([In] HDEVINFO DeviceInfoSet, [In] [Out] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] [Out] [Optional] SP_DRVINFO_DATA_V2_A* DriverInfoData);
BOOL SetupDiSetSelectedDriverW([In] HDEVINFO DeviceInfoSet, [In] [Out] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] [Out] [Optional] SP_DRVINFO_DATA_V2_W* DriverInfoData);
BOOL SetupDiGetDriverInfoDetailA([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] SP_DRVINFO_DATA_V2_A* DriverInfoData, [MemorySize(BytesParamIndex = 4)] [In] [Out] [Optional] SP_DRVINFO_DETAIL_DATA_A* DriverInfoDetailData, [In] uint DriverInfoDetailDataSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiGetDriverInfoDetailW([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] SP_DRVINFO_DATA_V2_W* DriverInfoData, [MemorySize(BytesParamIndex = 4)] [In] [Out] [Optional] SP_DRVINFO_DETAIL_DATA_W* DriverInfoDetailData, [In] uint DriverInfoDetailDataSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiDestroyDriverInfoList([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] uint DriverType);
HDEVINFO SetupDiGetClassDevsA([Const] [In] [Optional] Guid* ClassGuid, [Const] [In] [Optional] PSTR Enumerator, [In] [Optional] HWND hwndParent, [In] uint Flags);
HDEVINFO SetupDiGetClassDevsW([Const] [In] [Optional] Guid* ClassGuid, [Const] [In] [Optional] PWSTR Enumerator, [In] [Optional] HWND hwndParent, [In] uint Flags);
HDEVINFO SetupDiGetClassDevsExA([Const] [In] [Optional] Guid* ClassGuid, [Const] [In] [Optional] PSTR Enumerator, [In] [Optional] HWND hwndParent, [In] uint Flags, [In] [Optional] HDEVINFO DeviceInfoSet, [Const] [In] [Optional] PSTR MachineName, [Reserved] [In] [Out] void* Reserved);
HDEVINFO SetupDiGetClassDevsExW([Const] [In] [Optional] Guid* ClassGuid, [Const] [In] [Optional] PWSTR Enumerator, [In] [Optional] HWND hwndParent, [In] uint Flags, [In] [Optional] HDEVINFO DeviceInfoSet, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetINFClassA([Const] [In] PSTR InfName, [Out] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR ClassName, [In] uint ClassNameSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiGetINFClassW([Const] [In] PWSTR InfName, [Out] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR ClassName, [In] uint ClassNameSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiBuildClassInfoList([In] uint Flags, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] Guid* ClassGuidList, [In] uint ClassGuidListSize, [Out] uint* RequiredSize);
BOOL SetupDiBuildClassInfoListExA([In] uint Flags, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] Guid* ClassGuidList, [In] uint ClassGuidListSize, [Out] uint* RequiredSize, [Const] [In] [Optional] PSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiBuildClassInfoListExW([In] uint Flags, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] Guid* ClassGuidList, [In] uint ClassGuidListSize, [Out] uint* RequiredSize, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetClassDescriptionA([Const] [In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR ClassDescription, [In] uint ClassDescriptionSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiGetClassDescriptionW([Const] [In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR ClassDescription, [In] uint ClassDescriptionSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiGetClassDescriptionExA([Const] [In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR ClassDescription, [In] uint ClassDescriptionSize, [Out] [Optional] uint* RequiredSize, [Const] [In] [Optional] PSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetClassDescriptionExW([Const] [In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR ClassDescription, [In] uint ClassDescriptionSize, [Out] [Optional] uint* RequiredSize, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiCallClassInstaller([In] uint InstallFunction, [In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiSelectDevice([In] HDEVINFO DeviceInfoSet, [In] [Out] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiSelectBestCompatDrv([In] HDEVINFO DeviceInfoSet, [In] [Out] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiInstallDevice([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiInstallDriverFiles([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiRegisterCoDeviceInstallers([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiRemoveDevice([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiUnremoveDevice([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiRestartDevices([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiChangeState([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiInstallClassA([In] [Optional] HWND hwndParent, [Const] [In] PSTR InfFileName, [In] uint Flags, [In] [Optional] void* FileQueue);
BOOL SetupDiInstallClassW([In] [Optional] HWND hwndParent, [Const] [In] PWSTR InfFileName, [In] uint Flags, [In] [Optional] void* FileQueue);
BOOL SetupDiInstallClassExA([In] [Optional] HWND hwndParent, [Const] [In] [Optional] PSTR InfFileName, [In] uint Flags, [In] [Optional] void* FileQueue, [Const] [In] [Optional] Guid* InterfaceClassGuid, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] [Out] void* Reserved2);
BOOL SetupDiInstallClassExW([In] [Optional] HWND hwndParent, [Const] [In] [Optional] PWSTR InfFileName, [In] uint Flags, [In] [Optional] void* FileQueue, [Const] [In] [Optional] Guid* InterfaceClassGuid, [Reserved] [In] [Out] void* Reserved1, [Reserved] [In] [Out] void* Reserved2);
HKEY SetupDiOpenClassRegKey([Const] [In] [Optional] Guid* ClassGuid, [In] uint samDesired);
HKEY SetupDiOpenClassRegKeyExA([Const] [In] [Optional] Guid* ClassGuid, [In] uint samDesired, [In] uint Flags, [Const] [In] [Optional] PSTR MachineName, [Reserved] [In] [Out] void* Reserved);
HKEY SetupDiOpenClassRegKeyExW([Const] [In] [Optional] Guid* ClassGuid, [In] uint samDesired, [In] uint Flags, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
HKEY SetupDiCreateDeviceInterfaceRegKeyA([In] HDEVINFO DeviceInfoSet, [In] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData, [Reserved] [In] uint Reserved, [In] uint samDesired, [In] [Optional] void* InfHandle, [Const] [In] [Optional] PSTR InfSectionName);
HKEY SetupDiCreateDeviceInterfaceRegKeyW([In] HDEVINFO DeviceInfoSet, [In] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData, [Reserved] [In] uint Reserved, [In] uint samDesired, [In] [Optional] void* InfHandle, [Const] [In] [Optional] PWSTR InfSectionName);
HKEY SetupDiOpenDeviceInterfaceRegKey([In] HDEVINFO DeviceInfoSet, [In] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData, [Reserved] [In] uint Reserved, [In] uint samDesired);
BOOL SetupDiDeleteDeviceInterfaceRegKey([In] HDEVINFO DeviceInfoSet, [In] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData, [Reserved] [In] uint Reserved);
HKEY SetupDiCreateDevRegKeyA([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [In] uint Scope, [In] uint HwProfile, [In] uint KeyType, [In] [Optional] void* InfHandle, [Const] [In] [Optional] PSTR InfSectionName);
HKEY SetupDiCreateDevRegKeyW([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [In] uint Scope, [In] uint HwProfile, [In] uint KeyType, [In] [Optional] void* InfHandle, [Const] [In] [Optional] PWSTR InfSectionName);
HKEY SetupDiOpenDevRegKey([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [In] uint Scope, [In] uint HwProfile, [In] uint KeyType, [In] uint samDesired);
BOOL SetupDiDeleteDevRegKey([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [In] uint Scope, [In] uint HwProfile, [In] uint KeyType);
BOOL SetupDiGetHwProfileList([NativeArrayInfo(CountParamIndex = 1)] [Out] uint* HwProfileList, [In] uint HwProfileListSize, [Out] uint* RequiredSize, [Out] [Optional] uint* CurrentlyActiveIndex);
BOOL SetupDiGetHwProfileListExA([NativeArrayInfo(CountParamIndex = 1)] [Out] uint* HwProfileList, [In] uint HwProfileListSize, [Out] uint* RequiredSize, [Out] [Optional] uint* CurrentlyActiveIndex, [Const] [In] [Optional] PSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetHwProfileListExW([NativeArrayInfo(CountParamIndex = 1)] [Out] uint* HwProfileList, [In] uint HwProfileListSize, [Out] uint* RequiredSize, [Out] [Optional] uint* CurrentlyActiveIndex, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetDevicePropertyKeys([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] DEVPROPKEY* PropertyKeyArray, [In] uint PropertyKeyCount, [Out] [Optional] uint* RequiredPropertyKeyCount, [In] uint Flags);
BOOL SetupDiGetDevicePropertyW([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [Const] [In] DEVPROPKEY* PropertyKey, [Out] uint* PropertyType, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [Out] [Optional] uint* RequiredSize, [In] uint Flags);
BOOL SetupDiSetDevicePropertyW([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [Const] [In] DEVPROPKEY* PropertyKey, [In] uint PropertyType, [Const] [MemorySize(BytesParamIndex = 5)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [In] uint Flags);
BOOL SetupDiGetDeviceInterfacePropertyKeys([In] HDEVINFO DeviceInfoSet, [In] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] DEVPROPKEY* PropertyKeyArray, [In] uint PropertyKeyCount, [Out] [Optional] uint* RequiredPropertyKeyCount, [In] uint Flags);
BOOL SetupDiGetDeviceInterfacePropertyW([In] HDEVINFO DeviceInfoSet, [In] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData, [Const] [In] DEVPROPKEY* PropertyKey, [Out] uint* PropertyType, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [Out] [Optional] uint* RequiredSize, [In] uint Flags);
BOOL SetupDiSetDeviceInterfacePropertyW([In] HDEVINFO DeviceInfoSet, [In] SP_DEVICE_INTERFACE_DATA* DeviceInterfaceData, [Const] [In] DEVPROPKEY* PropertyKey, [In] uint PropertyType, [Const] [MemorySize(BytesParamIndex = 5)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [In] uint Flags);
BOOL SetupDiGetClassPropertyKeys([Const] [In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] DEVPROPKEY* PropertyKeyArray, [In] uint PropertyKeyCount, [Out] [Optional] uint* RequiredPropertyKeyCount, [In] uint Flags);
BOOL SetupDiGetClassPropertyKeysExW([Const] [In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] DEVPROPKEY* PropertyKeyArray, [In] uint PropertyKeyCount, [Out] [Optional] uint* RequiredPropertyKeyCount, [In] uint Flags, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetClassPropertyW([Const] [In] Guid* ClassGuid, [Const] [In] DEVPROPKEY* PropertyKey, [Out] uint* PropertyType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [Out] [Optional] uint* RequiredSize, [In] uint Flags);
BOOL SetupDiGetClassPropertyExW([Const] [In] Guid* ClassGuid, [Const] [In] DEVPROPKEY* PropertyKey, [Out] uint* PropertyType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [Out] [Optional] uint* RequiredSize, [In] uint Flags, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiSetClassPropertyW([Const] [In] Guid* ClassGuid, [Const] [In] DEVPROPKEY* PropertyKey, [In] uint PropertyType, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [In] uint Flags);
BOOL SetupDiSetClassPropertyExW([Const] [In] Guid* ClassGuid, [Const] [In] DEVPROPKEY* PropertyKey, [In] uint PropertyType, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [In] uint Flags, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetDeviceRegistryPropertyA([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [In] uint Property, [Out] [Optional] uint* PropertyRegDataType, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiGetDeviceRegistryPropertyW([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [In] uint Property, [Out] [Optional] uint* PropertyRegDataType, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiGetClassRegistryPropertyA([Const] [In] Guid* ClassGuid, [In] uint Property, [Out] [Optional] uint* PropertyRegDataType, [MemorySize(BytesParamIndex = 4)] [Out] byte* PropertyBuffer, [In] uint PropertyBufferSize, [Out] [Optional] uint* RequiredSize, [Const] [In] [Optional] PSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetClassRegistryPropertyW([Const] [In] Guid* ClassGuid, [In] uint Property, [Out] [Optional] uint* PropertyRegDataType, [MemorySize(BytesParamIndex = 4)] [Out] byte* PropertyBuffer, [In] uint PropertyBufferSize, [Out] [Optional] uint* RequiredSize, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiSetDeviceRegistryPropertyA([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVINFO_DATA* DeviceInfoData, [In] uint Property, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize);
BOOL SetupDiSetDeviceRegistryPropertyW([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVINFO_DATA* DeviceInfoData, [In] uint Property, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize);
BOOL SetupDiSetClassRegistryPropertyA([Const] [In] Guid* ClassGuid, [In] uint Property, [Const] [MemorySize(BytesParamIndex = 3)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [Const] [In] [Optional] PSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiSetClassRegistryPropertyW([Const] [In] Guid* ClassGuid, [In] uint Property, [Const] [MemorySize(BytesParamIndex = 3)] [In] [Optional] byte* PropertyBuffer, [In] uint PropertyBufferSize, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetDeviceInstallParamsA([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] [Out] SP_DEVINSTALL_PARAMS_A* DeviceInstallParams);
BOOL SetupDiGetDeviceInstallParamsW([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] [Out] SP_DEVINSTALL_PARAMS_W* DeviceInstallParams);
BOOL SetupDiGetClassInstallParamsA([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] SP_CLASSINSTALL_HEADER* ClassInstallParams, [In] uint ClassInstallParamsSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiGetClassInstallParamsW([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [MemorySize(BytesParamIndex = 3)] [Out] [Optional] SP_CLASSINSTALL_HEADER* ClassInstallParams, [In] uint ClassInstallParamsSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiSetDeviceInstallParamsA([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] SP_DEVINSTALL_PARAMS_A* DeviceInstallParams);
BOOL SetupDiSetDeviceInstallParamsW([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] SP_DEVINSTALL_PARAMS_W* DeviceInstallParams);
BOOL SetupDiSetClassInstallParamsA([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [MemorySize(BytesParamIndex = 3)] [In] [Optional] SP_CLASSINSTALL_HEADER* ClassInstallParams, [In] uint ClassInstallParamsSize);
BOOL SetupDiSetClassInstallParamsW([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [MemorySize(BytesParamIndex = 3)] [In] [Optional] SP_CLASSINSTALL_HEADER* ClassInstallParams, [In] uint ClassInstallParamsSize);
BOOL SetupDiGetDriverInstallParamsA([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] SP_DRVINFO_DATA_V2_A* DriverInfoData, [Out] SP_DRVINSTALL_PARAMS* DriverInstallParams);
BOOL SetupDiGetDriverInstallParamsW([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] SP_DRVINFO_DATA_V2_W* DriverInfoData, [Out] SP_DRVINSTALL_PARAMS* DriverInstallParams);
BOOL SetupDiSetDriverInstallParamsA([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] SP_DRVINFO_DATA_V2_A* DriverInfoData, [In] SP_DRVINSTALL_PARAMS* DriverInstallParams);
BOOL SetupDiSetDriverInstallParamsW([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] SP_DRVINFO_DATA_V2_W* DriverInfoData, [In] SP_DRVINSTALL_PARAMS* DriverInstallParams);
BOOL SetupDiLoadClassIcon([Const] [In] Guid* ClassGuid, [Out] [Optional] HICON* LargeIcon, [Out] [Optional] int* MiniIconIndex);
BOOL SetupDiLoadDeviceIcon([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [In] uint cxIcon, [In] uint cyIcon, [In] uint Flags, [Out] HICON* hIcon);
int SetupDiDrawMiniIcon([In] HDC hdc, [In] RECT rc, [In] int MiniIconIndex, [In] uint Flags);
BOOL SetupDiGetClassBitmapIndex([Const] [In] [Optional] Guid* ClassGuid, [Out] int* MiniIconIndex);
BOOL SetupDiGetClassImageList([Out] SP_CLASSIMAGELIST_DATA* ClassImageListData);
BOOL SetupDiGetClassImageListExA([Out] SP_CLASSIMAGELIST_DATA* ClassImageListData, [Const] [In] [Optional] PSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetClassImageListExW([Out] SP_CLASSIMAGELIST_DATA* ClassImageListData, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetClassImageIndex([In] SP_CLASSIMAGELIST_DATA* ClassImageListData, [Const] [In] Guid* ClassGuid, [Out] int* ImageIndex);
BOOL SetupDiDestroyClassImageList([In] SP_CLASSIMAGELIST_DATA* ClassImageListData);
BOOL SetupDiGetClassDevPropertySheetsA([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] PROPSHEETHEADERA_V2* PropertySheetHeader, [In] uint PropertySheetHeaderPageListSize, [Out] [Optional] uint* RequiredSize, [In] uint PropertySheetType);
BOOL SetupDiGetClassDevPropertySheetsW([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] PROPSHEETHEADERW_V2* PropertySheetHeader, [In] uint PropertySheetHeaderPageListSize, [Out] [Optional] uint* RequiredSize, [In] uint PropertySheetType);
BOOL SetupDiAskForOEMDisk([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiSelectOEMDrv([In] [Optional] HWND hwndParent, [In] HDEVINFO DeviceInfoSet, [In] [Out] [Optional] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiClassNameFromGuidA([Const] [In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR ClassName, [In] uint ClassNameSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiClassNameFromGuidW([Const] [In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR ClassName, [In] uint ClassNameSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiClassNameFromGuidExA([Const] [In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR ClassName, [In] uint ClassNameSize, [Out] [Optional] uint* RequiredSize, [Const] [In] [Optional] PSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiClassNameFromGuidExW([Const] [In] Guid* ClassGuid, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR ClassName, [In] uint ClassNameSize, [Out] [Optional] uint* RequiredSize, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiClassGuidsFromNameA([Const] [In] PSTR ClassName, [NativeArrayInfo(CountParamIndex = 2)] [Out] Guid* ClassGuidList, [In] uint ClassGuidListSize, [Out] uint* RequiredSize);
BOOL SetupDiClassGuidsFromNameW([Const] [In] PWSTR ClassName, [NativeArrayInfo(CountParamIndex = 2)] [Out] Guid* ClassGuidList, [In] uint ClassGuidListSize, [Out] uint* RequiredSize);
BOOL SetupDiClassGuidsFromNameExA([Const] [In] PSTR ClassName, [NativeArrayInfo(CountParamIndex = 2)] [Out] Guid* ClassGuidList, [In] uint ClassGuidListSize, [Out] uint* RequiredSize, [Const] [In] [Optional] PSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiClassGuidsFromNameExW([Const] [In] PWSTR ClassName, [NativeArrayInfo(CountParamIndex = 2)] [Out] Guid* ClassGuidList, [In] uint ClassGuidListSize, [Out] uint* RequiredSize, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetHwProfileFriendlyNameA([In] uint HwProfile, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR FriendlyName, [In] uint FriendlyNameSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiGetHwProfileFriendlyNameW([In] uint HwProfile, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR FriendlyName, [In] uint FriendlyNameSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiGetHwProfileFriendlyNameExA([In] uint HwProfile, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR FriendlyName, [In] uint FriendlyNameSize, [Out] [Optional] uint* RequiredSize, [Const] [In] [Optional] PSTR MachineName, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetHwProfileFriendlyNameExW([In] uint HwProfile, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR FriendlyName, [In] uint FriendlyNameSize, [Out] [Optional] uint* RequiredSize, [Const] [In] [Optional] PWSTR MachineName, [Reserved] [In] [Out] void* Reserved);
HPROPSHEETPAGE SetupDiGetWizardPage([In] HDEVINFO DeviceInfoSet, [In] [Optional] SP_DEVINFO_DATA* DeviceInfoData, [In] SP_INSTALLWIZARD_DATA* InstallWizardData, [In] uint PageType, [In] uint Flags);
BOOL SetupDiGetSelectedDevice([In] HDEVINFO DeviceInfoSet, [In] [Out] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiSetSelectedDevice([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData);
BOOL SetupDiGetActualModelsSectionA([In] INFCONTEXT* Context, [In] [Optional] SP_ALTPLATFORM_INFO_V2* AlternatePlatformInfo, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR InfSectionWithExt, [In] uint InfSectionWithExtSize, [Out] [Optional] uint* RequiredSize, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetActualModelsSectionW([In] INFCONTEXT* Context, [In] [Optional] SP_ALTPLATFORM_INFO_V2* AlternatePlatformInfo, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR InfSectionWithExt, [In] uint InfSectionWithExtSize, [Out] [Optional] uint* RequiredSize, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetActualSectionToInstallA([In] void* InfHandle, [Const] [In] PSTR InfSectionName, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR InfSectionWithExt, [In] uint InfSectionWithExtSize, [Out] [Optional] uint* RequiredSize, [Out] [Optional] PSTR* Extension);
BOOL SetupDiGetActualSectionToInstallW([In] void* InfHandle, [Const] [In] PWSTR InfSectionName, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR InfSectionWithExt, [In] uint InfSectionWithExtSize, [Out] [Optional] uint* RequiredSize, [Out] [Optional] PWSTR* Extension);
BOOL SetupDiGetActualSectionToInstallExA([In] void* InfHandle, [Const] [In] PSTR InfSectionName, [In] [Optional] SP_ALTPLATFORM_INFO_V2* AlternatePlatformInfo, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR InfSectionWithExt, [In] uint InfSectionWithExtSize, [Out] [Optional] uint* RequiredSize, [Out] [Optional] PSTR* Extension, [Reserved] [In] [Out] void* Reserved);
BOOL SetupDiGetActualSectionToInstallExW([In] void* InfHandle, [Const] [In] PWSTR InfSectionName, [In] [Optional] SP_ALTPLATFORM_INFO_V2* AlternatePlatformInfo, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR InfSectionWithExt, [In] uint InfSectionWithExtSize, [Out] [Optional] uint* RequiredSize, [Out] [Optional] PWSTR* Extension, [Reserved] [In] [Out] void* Reserved);
BOOL SetupEnumInfSectionsA([In] void* InfHandle, [In] uint Index, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR Buffer, [In] uint Size, [Out] [Optional] uint* SizeNeeded);
BOOL SetupEnumInfSectionsW([In] void* InfHandle, [In] uint Index, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR Buffer, [In] uint Size, [Out] [Optional] uint* SizeNeeded);
BOOL SetupVerifyInfFileA([Const] [In] PSTR InfName, [In] [Optional] SP_ALTPLATFORM_INFO_V2* AltPlatformInfo, [In] [Out] SP_INF_SIGNER_INFO_V2_A* InfSignerInfo);
BOOL SetupVerifyInfFileW([Const] [In] PWSTR InfName, [In] [Optional] SP_ALTPLATFORM_INFO_V2* AltPlatformInfo, [In] [Out] SP_INF_SIGNER_INFO_V2_W* InfSignerInfo);
BOOL SetupDiGetCustomDevicePropertyA([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [Const] [In] PSTR CustomPropertyName, [In] uint Flags, [Out] [Optional] uint* PropertyRegDataType, [MemorySize(BytesParamIndex = 6)] [Out] byte* PropertyBuffer, [In] uint PropertyBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupDiGetCustomDevicePropertyW([In] HDEVINFO DeviceInfoSet, [In] SP_DEVINFO_DATA* DeviceInfoData, [Const] [In] PWSTR CustomPropertyName, [In] uint Flags, [Out] [Optional] uint* PropertyRegDataType, [MemorySize(BytesParamIndex = 6)] [Out] byte* PropertyBuffer, [In] uint PropertyBufferSize, [Out] [Optional] uint* RequiredSize);
BOOL SetupConfigureWmiFromInfSectionA([In] void* InfHandle, [Const] [In] PSTR SectionName, [In] uint Flags);
BOOL SetupConfigureWmiFromInfSectionW([In] void* InfHandle, [Const] [In] PWSTR SectionName, [In] uint Flags);
