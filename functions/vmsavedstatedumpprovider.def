HRESULT LocateSavedStateFiles([Const] [In] PWSTR vmName, [Const] [In] [Optional] PWSTR snapshotName, [Out] PWSTR* binPath, [Out] PWSTR* vsvPath, [Out] PWSTR* vmrsPath);
HRESULT LoadSavedStateFile([Const] [In] PWSTR vmrsFile, [Out] void** vmSavedStateDumpHandle);
HRESULT ApplyPendingSavedStateFileReplayLog([Const] [In] PWSTR vmrsFile);
HRESULT LoadSavedStateFiles([Const] [In] PWSTR binFile, [Const] [In] PWSTR vsvFile, [Out] void** vmSavedStateDumpHandle);
HRESULT ReleaseSavedStateFiles([In] [Out] void* vmSavedStateDumpHandle);
HRESULT GetGuestEnabledVirtualTrustLevels([In] [Out] void* vmSavedStateDumpHandle, [Out] uint* virtualTrustLevels);
HRESULT GetGuestOsInfo([In] [Out] void* vmSavedStateDumpHandle, [In] byte virtualTrustLevel, [Out] GUEST_OS_INFO* guestOsInfo);
HRESULT GetVpCount([In] [Out] void* vmSavedStateDumpHandle, [Out] uint* vpCount);
HRESULT GetArchitecture([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [Out] VIRTUAL_PROCESSOR_ARCH* architecture);
HRESULT ForceArchitecture([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [In] VIRTUAL_PROCESSOR_ARCH architecture);
HRESULT GetActiveVirtualTrustLevel([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [Out] byte* virtualTrustLevel);
HRESULT GetEnabledVirtualTrustLevels([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [In] [Out] uint* virtualTrustLevels);
HRESULT ForceActiveVirtualTrustLevel([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [In] byte virtualTrustLevel);
HRESULT IsActiveVirtualTrustLevelEnabled([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [Out] BOOL* activeVirtualTrustLevelEnabled);
HRESULT IsNestedVirtualizationEnabled([In] [Out] void* vmSavedStateDumpHandle, [Out] BOOL* enabled);
HRESULT GetNestedVirtualizationMode([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [Out] BOOL* enabled);
HRESULT ForceNestedHostMode([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [In] BOOL hostMode, [Out] [Optional] BOOL* oldMode);
HRESULT InKernelSpace([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [Out] BOOL* inKernelSpace);
HRESULT GetRegisterValue([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [In] uint registerId, [Out] VIRTUAL_PROCESSOR_REGISTER* registerValue);
HRESULT GetPagingMode([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [Out] PAGING_MODE* pagingMode);
HRESULT ForcePagingMode([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [In] PAGING_MODE pagingMode);
HRESULT ReadGuestPhysicalAddress([In] [Out] void* vmSavedStateDumpHandle, [In] ulong physicalAddress, [MemorySize(BytesParamIndex = 3)] [Out] void* buffer, [In] uint bufferSize, [Out] [Optional] uint* bytesRead);
HRESULT GuestVirtualAddressToPhysicalAddress([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [Const] [In] ulong virtualAddress, [Out] ulong* physicalAddress, [Out] [Optional] ulong* unmappedRegionSize);
HRESULT GetGuestPhysicalMemoryChunks([In] [Out] void* vmSavedStateDumpHandle, [Out] ulong* memoryChunkPageSize, [Out] GPA_MEMORY_CHUNK* memoryChunks, [In] [Out] ulong* memoryChunkCount);
HRESULT GuestPhysicalAddressToRawSavedMemoryOffset([In] [Out] void* vmSavedStateDumpHandle, [In] ulong physicalAddress, [Out] ulong* rawSavedMemoryOffset);
HRESULT ReadGuestRawSavedMemory([In] [Out] void* vmSavedStateDumpHandle, [In] ulong rawSavedMemoryOffset, [MemorySize(BytesParamIndex = 3)] [Out] void* buffer, [In] uint bufferSize, [Out] [Optional] uint* bytesRead);
HRESULT GetGuestRawSavedMemorySize([In] [Out] void* vmSavedStateDumpHandle, [Out] ulong* guestRawSavedMemorySize);
HRESULT SetMemoryBlockCacheLimit([In] [Out] void* vmSavedStateDumpHandle, [In] ulong memoryBlockCacheLimit);
HRESULT GetMemoryBlockCacheLimit([In] [Out] void* vmSavedStateDumpHandle, [Out] ulong* memoryBlockCacheLimit);
HRESULT ApplyGuestMemoryFix([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [In] ulong virtualAddress, [In] void* fixBuffer, [In] uint fixBufferSize);
HRESULT LoadSavedStateSymbolProvider([In] [Out] void* vmSavedStateDumpHandle, [Const] [In] [Optional] PWSTR userSymbols, [In] BOOL force);
HRESULT ReleaseSavedStateSymbolProvider([In] [Out] void* vmSavedStateDumpHandle);
HANDLE GetSavedStateSymbolProviderHandle([In] [Out] void* vmSavedStateDumpHandle);
HRESULT SetSavedStateSymbolProviderDebugInfoCallback([In] [Out] void* vmSavedStateDumpHandle, [In] GUEST_SYMBOLS_PROVIDER_DEBUG_INFO_CALLBACK Callback);
HRESULT LoadSavedStateModuleSymbols([In] [Out] void* vmSavedStateDumpHandle, [Const] [In] PSTR imageName, [Const] [In] PSTR moduleName, [In] ulong baseAddress, [In] uint sizeOfBase);
HRESULT LoadSavedStateModuleSymbolsEx([In] [Out] void* vmSavedStateDumpHandle, [Const] [In] PSTR imageName, [In] uint imageTimestamp, [Const] [In] PSTR moduleName, [In] ulong baseAddress, [In] uint sizeOfBase);
HRESULT ResolveSavedStateGlobalVariableAddress([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [Const] [In] PSTR globalName, [In] [Out] ulong* virtualAddress, [Out] [Optional] uint* size);
HRESULT ReadSavedStateGlobalVariable([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [Const] [In] PSTR globalName, [Out] void* buffer, [In] uint bufferSize);
HRESULT GetSavedStateSymbolTypeSize([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [Const] [In] PSTR typeName, [In] [Out] uint* size);
HRESULT FindSavedStateSymbolFieldInType([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [Const] [In] PSTR typeName, [Const] [In] PWSTR fieldName, [In] [Out] uint* offset, [In] [Out] BOOL* found);
HRESULT GetSavedStateSymbolFieldInfo([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [Const] [In] PSTR typeName, [In] [Out] PWSTR* typeFieldInfoMap);
HRESULT ScanMemoryForDosImages([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [In] ulong startAddress, [In] ulong endAddress, [In] [Out] void* callbackContext, [In] FOUND_IMAGE_CALLBACK foundImageCallback, [In] ulong* standaloneAddress, [In] uint standaloneAddressCount);
HRESULT CallStackUnwind([In] [Out] void* vmSavedStateDumpHandle, [In] uint vpId, [In] MODULE_INFO* imageInfo, [In] uint imageInfoCount, [In] uint frameCount, [In] [Out] PWSTR* callStack);
