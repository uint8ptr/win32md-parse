HPROPSHEETPAGE CreatePropertySheetPageA([In] [Out] PROPSHEETPAGEA* constPropSheetPagePointer);
HPROPSHEETPAGE CreatePropertySheetPageW([In] [Out] PROPSHEETPAGEW* constPropSheetPagePointer);
BOOL DestroyPropertySheetPage([In] HPROPSHEETPAGE param0);
nint PropertySheetA([In] [Out] PROPSHEETHEADERA_V2* param0);
nint PropertySheetW([In] [Out] PROPSHEETHEADERW_V2* param0);
void InitCommonControls();
BOOL InitCommonControlsEx([Const] [In] INITCOMMONCONTROLSEX* picce);
HIMAGELIST ImageList_Create([In] int cx, [In] int cy, [In] IMAGELIST_CREATION_FLAGS flags, [In] int cInitial, [In] int cGrow);
BOOL ImageList_Destroy([In] [Optional] HIMAGELIST himl);
int ImageList_GetImageCount([In] HIMAGELIST himl);
BOOL ImageList_SetImageCount([In] HIMAGELIST himl, [In] uint uNewCount);
int ImageList_Add([In] HIMAGELIST himl, [In] HBITMAP hbmImage, [In] [Optional] HBITMAP hbmMask);
int ImageList_ReplaceIcon([In] HIMAGELIST himl, [In] int i, [In] HICON hicon);
COLORREF ImageList_SetBkColor([In] HIMAGELIST himl, [In] COLORREF clrBk);
COLORREF ImageList_GetBkColor([In] HIMAGELIST himl);
BOOL ImageList_SetOverlayImage([In] HIMAGELIST himl, [In] int iImage, [In] int iOverlay);
BOOL ImageList_Draw([In] HIMAGELIST himl, [In] int i, [In] HDC hdcDst, [In] int x, [In] int y, [In] IMAGE_LIST_DRAW_STYLE fStyle);
BOOL ImageList_Replace([In] HIMAGELIST himl, [In] int i, [In] HBITMAP hbmImage, [In] [Optional] HBITMAP hbmMask);
int ImageList_AddMasked([In] HIMAGELIST himl, [In] HBITMAP hbmImage, [In] COLORREF crMask);
BOOL ImageList_DrawEx([In] HIMAGELIST himl, [In] int i, [In] HDC hdcDst, [In] int x, [In] int y, [In] int dx, [In] int dy, [In] COLORREF rgbBk, [In] COLORREF rgbFg, [In] IMAGE_LIST_DRAW_STYLE fStyle);
BOOL ImageList_DrawIndirect([In] IMAGELISTDRAWPARAMS* pimldp);
BOOL ImageList_Remove([In] HIMAGELIST himl, [In] int i);
HICON ImageList_GetIcon([In] HIMAGELIST himl, [In] int i, [In] uint flags);
HIMAGELIST ImageList_LoadImageA([In] HINSTANCE hi, [Const] [In] PSTR lpbmp, [In] int cx, [In] int cGrow, [In] COLORREF crMask, [In] uint uType, [In] IMAGE_FLAGS uFlags);
HIMAGELIST ImageList_LoadImageW([In] HINSTANCE hi, [Const] [In] PWSTR lpbmp, [In] int cx, [In] int cGrow, [In] COLORREF crMask, [In] uint uType, [In] IMAGE_FLAGS uFlags);
BOOL ImageList_Copy([In] HIMAGELIST himlDst, [In] int iDst, [In] HIMAGELIST himlSrc, [In] int iSrc, [In] IMAGE_LIST_COPY_FLAGS uFlags);
BOOL ImageList_BeginDrag([In] HIMAGELIST himlTrack, [In] int iTrack, [In] int dxHotspot, [In] int dyHotspot);
void ImageList_EndDrag();
BOOL ImageList_DragEnter([In] HWND hwndLock, [In] int x, [In] int y);
BOOL ImageList_DragLeave([In] HWND hwndLock);
BOOL ImageList_DragMove([In] int x, [In] int y);
BOOL ImageList_SetDragCursorImage([In] HIMAGELIST himlDrag, [In] int iDrag, [In] int dxHotspot, [In] int dyHotspot);
BOOL ImageList_DragShowNolock([In] BOOL fShow);
HIMAGELIST ImageList_GetDragImage([Out] [Optional] POINT* ppt, [Out] [Optional] POINT* pptHotspot);
HIMAGELIST ImageList_Read([In] IStream pstm);
BOOL ImageList_Write([In] HIMAGELIST himl, [In] IStream pstm);
HRESULT ImageList_ReadEx([In] uint dwFlags, [In] IStream pstm, [Const] [In] Guid* riid, [Out] void** ppv);
HRESULT ImageList_WriteEx([In] HIMAGELIST himl, [In] IMAGE_LIST_WRITE_STREAM_FLAGS dwFlags, [In] IStream pstm);
BOOL ImageList_GetIconSize([In] HIMAGELIST himl, [Out] [Optional] int* cx, [Out] [Optional] int* cy);
BOOL ImageList_SetIconSize([In] HIMAGELIST himl, [In] int cx, [In] int cy);
BOOL ImageList_GetImageInfo([In] HIMAGELIST himl, [In] int i, [Out] IMAGEINFO* pImageInfo);
HIMAGELIST ImageList_Merge([In] HIMAGELIST himl1, [In] int i1, [In] HIMAGELIST himl2, [In] int i2, [In] int dx, [In] int dy);
HIMAGELIST ImageList_Duplicate([In] HIMAGELIST himl);
HRESULT HIMAGELIST_QueryInterface([In] HIMAGELIST himl, [Const] [In] Guid* riid, [Out] void** ppv);
HWND CreateToolbarEx([In] HWND hwnd, [In] uint ws, [In] uint wID, [In] int nBitmaps, [In] HINSTANCE hBMInst, [In] nuint wBMID, [In] [Out] TBBUTTON* lpButtons, [In] int iNumButtons, [In] int dxButton, [In] int dyButton, [In] int dxBitmap, [In] int dyBitmap, [In] uint uStructSize);
HBITMAP CreateMappedBitmap([In] HINSTANCE hInstance, [In] nint idBitmap, [In] uint wFlags, [In] [Optional] COLORMAP* lpColorMap, [In] int iNumMaps);
void DrawStatusTextA([In] HDC hDC, [In] [Out] RECT* lprc, [Const] [In] PSTR pszText, [In] uint uFlags);
void DrawStatusTextW([In] HDC hDC, [In] [Out] RECT* lprc, [Const] [In] PWSTR pszText, [In] uint uFlags);
HWND CreateStatusWindowA([In] int style, [Const] [In] PSTR lpszText, [In] HWND hwndParent, [In] uint wID);
HWND CreateStatusWindowW([In] int style, [Const] [In] PWSTR lpszText, [In] HWND hwndParent, [In] uint wID);
void MenuHelp([In] uint uMsg, [In] WPARAM wParam, [In] LPARAM lParam, [In] HMENU hMainMenu, [In] HINSTANCE hInst, [In] HWND hwndStatus, [In] uint* lpwIDs);
BOOL ShowHideMenuCtl([In] HWND hWnd, [In] nuint uFlags, [In] int* lpInfo);
void GetEffectiveClientRect([In] HWND hWnd, [Out] RECT* lprc, [Const] [In] int* lpInfo);
BOOL MakeDragList([In] HWND hLB);
void DrawInsert([In] HWND handParent, [In] HWND hLB, [In] int nItem);
int LBItemFromPt([In] HWND hLB, [In] POINT pt, [In] BOOL bAutoScroll);
HWND CreateUpDownControl([In] uint dwStyle, [In] int x, [In] int y, [In] int cx, [In] int cy, [In] HWND hParent, [In] int nID, [In] HINSTANCE hInst, [In] HWND hBuddy, [In] int nUpper, [In] int nLower, [In] int nPos);
HRESULT TaskDialogIndirect([Const] [In] TASKDIALOGCONFIG* pTaskConfig, [Out] [Optional] int* pnButton, [Out] [Optional] int* pnRadioButton, [Out] [Optional] BOOL* pfVerificationFlagChecked);
HRESULT TaskDialog([In] [Optional] HWND hwndOwner, [In] [Optional] HINSTANCE hInstance, [Const] [In] [Optional] PWSTR pszWindowTitle, [Const] [In] [Optional] PWSTR pszMainInstruction, [Const] [In] [Optional] PWSTR pszContent, [In] TASKDIALOG_COMMON_BUTTON_FLAGS dwCommonButtons, [Const] [In] [Optional] PWSTR pszIcon, [Out] [Optional] int* pnButton);
void InitMUILanguage([In] ushort uiLang);
ushort GetMUILanguage();
HDSA DSA_Create([In] int cbItem, [In] int cItemGrow);
BOOL DSA_Destroy([In] [Optional] HDSA hdsa);
void DSA_DestroyCallback([In] [Optional] HDSA hdsa, [In] PFNDAENUMCALLBACK pfnCB, [In] [Optional] void* pData);
BOOL DSA_DeleteItem([In] HDSA hdsa, [In] int i);
BOOL DSA_DeleteAllItems([In] HDSA hdsa);
void DSA_EnumCallback([In] HDSA hdsa, [In] PFNDAENUMCALLBACK pfnCB, [In] [Optional] void* pData);
int DSA_InsertItem([In] HDSA hdsa, [In] int i, [Const] [In] void* pitem);
void* DSA_GetItemPtr([In] HDSA hdsa, [In] int i);
BOOL DSA_GetItem([In] HDSA hdsa, [In] int i, [Out] void* pitem);
BOOL DSA_SetItem([In] HDSA hdsa, [In] int i, [Const] [In] void* pitem);
HDSA DSA_Clone([In] HDSA hdsa);
ulong DSA_GetSize([In] [Optional] HDSA hdsa);
BOOL DSA_Sort([In] HDSA pdsa, [In] PFNDACOMPARE pfnCompare, [In] LPARAM lParam);
HDPA DPA_Create([In] int cItemGrow);
HDPA DPA_CreateEx([In] int cpGrow, [In] [Optional] HANDLE hheap);
HDPA DPA_Clone([Const] [In] HDPA hdpa, [In] [Optional] HDPA hdpaNew);
BOOL DPA_Destroy([In] [Optional] HDPA hdpa);
void DPA_DestroyCallback([In] [Optional] HDPA hdpa, [In] PFNDAENUMCALLBACK pfnCB, [In] [Optional] void* pData);
void* DPA_DeletePtr([In] HDPA hdpa, [In] int i);
BOOL DPA_DeleteAllPtrs([In] HDPA hdpa);
void DPA_EnumCallback([In] [Optional] HDPA hdpa, [In] [Optional] PFNDAENUMCALLBACK pfnCB, [In] [Optional] void* pData);
BOOL DPA_Grow([In] HDPA pdpa, [In] int cp);
int DPA_InsertPtr([In] HDPA hdpa, [In] int i, [In] [Optional] void* p);
BOOL DPA_SetPtr([In] HDPA hdpa, [In] int i, [In] [Optional] void* p);
void* DPA_GetPtr([In] HDPA hdpa, [In] nint i);
int DPA_GetPtrIndex([In] HDPA hdpa, [Const] [In] [Optional] void* p);
ulong DPA_GetSize([In] [Optional] HDPA hdpa);
BOOL DPA_Sort([In] HDPA hdpa, [In] PFNDACOMPARE pfnCompare, [In] LPARAM lParam);
HRESULT DPA_LoadStream([Out] HDPA* phdpa, [In] PFNDPASTREAM pfn, [In] IStream pstream, [In] [Optional] void* pvInstData);
HRESULT DPA_SaveStream([In] HDPA hdpa, [In] PFNDPASTREAM pfn, [In] IStream pstream, [In] [Optional] void* pvInstData);
BOOL DPA_Merge([In] HDPA hdpaDest, [In] HDPA hdpaSrc, [In] uint dwFlags, [In] PFNDACOMPARE pfnCompare, [In] PFNDPAMERGE pfnMerge, [In] LPARAM lParam);
int DPA_Search([In] HDPA hdpa, [In] [Optional] void* pFind, [In] int iStart, [In] PFNDACOMPARE pfnCompare, [In] LPARAM lParam, [In] uint options);
BOOL Str_SetPtrW([In] [Out] PWSTR* ppsz, [Const] [In] [Optional] PWSTR psz);
BOOL FlatSB_EnableScrollBar([In] HWND param0, [In] int param1, [In] uint param2);
BOOL FlatSB_ShowScrollBar([In] HWND param0, [In] SCROLLBAR_CONSTANTS code, [In] BOOL param2);
BOOL FlatSB_GetScrollRange([In] HWND param0, [In] SCROLLBAR_CONSTANTS code, [In] [Out] int* param2, [In] [Out] int* param3);
BOOL FlatSB_GetScrollInfo([In] HWND param0, [In] SCROLLBAR_CONSTANTS code, [In] [Out] SCROLLINFO* param2);
int FlatSB_GetScrollPos([In] HWND param0, [In] SCROLLBAR_CONSTANTS code);
BOOL FlatSB_GetScrollProp([In] HWND param0, [In] WSB_PROP propIndex, [In] [Out] int* param2);
int FlatSB_SetScrollPos([In] HWND param0, [In] SCROLLBAR_CONSTANTS code, [In] int pos, [In] BOOL fRedraw);
int FlatSB_SetScrollInfo([In] HWND param0, [In] SCROLLBAR_CONSTANTS code, [In] [Out] SCROLLINFO* psi, [In] BOOL fRedraw);
int FlatSB_SetScrollRange([In] HWND param0, [In] SCROLLBAR_CONSTANTS code, [In] int min, [In] int max, [In] BOOL fRedraw);
BOOL FlatSB_SetScrollProp([In] HWND param0, [In] WSB_PROP index, [In] nint newValue, [In] BOOL param3);
BOOL InitializeFlatSB([In] HWND param0);
HRESULT UninitializeFlatSB([In] HWND param0);
HRESULT LoadIconMetric([In] HINSTANCE hinst, [Const] [In] PWSTR pszName, [In] _LI_METRIC lims, [Out] HICON* phico);
HRESULT LoadIconWithScaleDown([In] HINSTANCE hinst, [Const] [In] PWSTR pszName, [In] int cx, [In] int cy, [Out] HICON* phico);
int DrawShadowText([In] HDC hdc, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR pszText, [In] uint cch, [In] RECT* prc, [In] uint dwFlags, [In] COLORREF crText, [In] COLORREF crShadow, [In] int ixOffset, [In] int iyOffset);
HRESULT ImageList_CoCreateInstance([Const] [In] Guid* rclsid, [Const] [In] [Optional] IUnknown punkOuter, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
BOOL _TrackMouseEvent([In] [Out] TRACKMOUSEEVENT* lpEventTrack);
BOOL SetWindowSubclass([In] HWND hWnd, [In] SUBCLASSPROC pfnSubclass, [In] nuint uIdSubclass, [In] nuint dwRefData);
BOOL GetWindowSubclass([In] HWND hWnd, [In] SUBCLASSPROC pfnSubclass, [In] nuint uIdSubclass, [Out] [Optional] nuint* pdwRefData);
BOOL RemoveWindowSubclass([In] HWND hWnd, [In] SUBCLASSPROC pfnSubclass, [In] nuint uIdSubclass);
LRESULT DefSubclassProc([In] HWND hWnd, [In] uint uMsg, [In] WPARAM wParam, [In] LPARAM lParam);
