HRESULT IUnknown_QueryInterface_Proxy([In] IUnknown This, [Const] [In] Guid* riid, [Out] void** ppvObject);
uint IUnknown_AddRef_Proxy([In] IUnknown This);
uint IUnknown_Release_Proxy([In] IUnknown This);
RPC_STATUS RpcBindingCopy([In] void* SourceBinding, [Out] void** DestinationBinding);
RPC_STATUS RpcBindingFree([In] [Out] void** Binding);
RPC_STATUS RpcBindingSetOption([In] void* hBinding, [In] uint option, [In] nuint optionValue);
RPC_STATUS RpcBindingInqOption([In] void* hBinding, [In] uint option, [Out] nuint* pOptionValue);
RPC_STATUS RpcBindingFromStringBindingA([In] byte* StringBinding, [Out] void** Binding);
RPC_STATUS RpcBindingFromStringBindingW([In] ushort* StringBinding, [Out] void** Binding);
RPC_STATUS RpcSsGetContextBinding([In] void* ContextHandle, [Out] void** Binding);
RPC_STATUS RpcBindingInqMaxCalls([In] void* Binding, [Out] uint* MaxCalls);
RPC_STATUS RpcBindingInqObject([In] void* Binding, [Out] Guid* ObjectUuid);
RPC_STATUS RpcBindingReset([In] void* Binding);
RPC_STATUS RpcBindingSetObject([In] void* Binding, [In] Guid* ObjectUuid);
RPC_STATUS RpcMgmtInqDefaultProtectLevel([In] uint AuthnSvc, [Out] uint* AuthnLevel);
RPC_STATUS RpcBindingToStringBindingA([In] void* Binding, [Out] byte** StringBinding);
RPC_STATUS RpcBindingToStringBindingW([In] void* Binding, [Out] ushort** StringBinding);
RPC_STATUS RpcBindingVectorFree([In] [Out] RPC_BINDING_VECTOR** BindingVector);
RPC_STATUS RpcStringBindingComposeA([In] [Optional] byte* ObjUuid, [In] [Optional] byte* ProtSeq, [In] [Optional] byte* NetworkAddr, [In] [Optional] byte* Endpoint, [In] [Optional] byte* Options, [Out] [Optional] byte** StringBinding);
RPC_STATUS RpcStringBindingComposeW([In] [Optional] ushort* ObjUuid, [In] [Optional] ushort* ProtSeq, [In] [Optional] ushort* NetworkAddr, [In] [Optional] ushort* Endpoint, [In] [Optional] ushort* Options, [Out] [Optional] ushort** StringBinding);
RPC_STATUS RpcStringBindingParseA([In] byte* StringBinding, [Out] [Optional] byte** ObjUuid, [Out] [Optional] byte** Protseq, [Out] [Optional] byte** NetworkAddr, [Out] [Optional] byte** Endpoint, [Out] [Optional] byte** NetworkOptions);
RPC_STATUS RpcStringBindingParseW([In] ushort* StringBinding, [Out] [Optional] ushort** ObjUuid, [Out] [Optional] ushort** Protseq, [Out] [Optional] ushort** NetworkAddr, [Out] [Optional] ushort** Endpoint, [Out] [Optional] ushort** NetworkOptions);
RPC_STATUS RpcStringFreeA([In] [Out] byte** String);
RPC_STATUS RpcStringFreeW([In] [Out] ushort** String);
RPC_STATUS RpcIfInqId([In] void* RpcIfHandle, [Out] RPC_IF_ID* RpcIfId);
RPC_STATUS RpcNetworkIsProtseqValidA([In] byte* Protseq);
RPC_STATUS RpcNetworkIsProtseqValidW([In] ushort* Protseq);
RPC_STATUS RpcMgmtInqComTimeout([In] void* Binding, [Out] uint* Timeout);
RPC_STATUS RpcMgmtSetComTimeout([In] void* Binding, [In] uint Timeout);
RPC_STATUS RpcMgmtSetCancelTimeout([In] int Timeout);
RPC_STATUS RpcNetworkInqProtseqsA([Out] RPC_PROTSEQ_VECTORA** ProtseqVector);
RPC_STATUS RpcNetworkInqProtseqsW([Out] RPC_PROTSEQ_VECTORW** ProtseqVector);
RPC_STATUS RpcObjectInqType([In] Guid* ObjUuid, [Out] [Optional] Guid* TypeUuid);
RPC_STATUS RpcObjectSetInqFn([In] RPC_OBJECT_INQ_FN InquiryFn);
RPC_STATUS RpcObjectSetType([In] Guid* ObjUuid, [In] [Optional] Guid* TypeUuid);
RPC_STATUS RpcProtseqVectorFreeA([In] [Out] RPC_PROTSEQ_VECTORA** ProtseqVector);
RPC_STATUS RpcProtseqVectorFreeW([In] [Out] RPC_PROTSEQ_VECTORW** ProtseqVector);
RPC_STATUS RpcServerInqBindings([Out] RPC_BINDING_VECTOR** BindingVector);
RPC_STATUS RpcServerInqBindingsEx([In] [Optional] void* SecurityDescriptor, [Out] RPC_BINDING_VECTOR** BindingVector);
RPC_STATUS RpcServerInqIf([In] void* IfSpec, [In] [Optional] Guid* MgrTypeUuid, [Out] void** MgrEpv);
RPC_STATUS RpcServerListen([In] uint MinimumCallThreads, [In] uint MaxCalls, [In] uint DontWait);
RPC_STATUS RpcServerRegisterIf([In] void* IfSpec, [In] [Optional] Guid* MgrTypeUuid, [In] [Optional] void* MgrEpv);
RPC_STATUS RpcServerRegisterIfEx([In] void* IfSpec, [In] [Optional] Guid* MgrTypeUuid, [In] [Optional] void* MgrEpv, [In] uint Flags, [In] uint MaxCalls, [In] [Optional] RPC_IF_CALLBACK_FN IfCallback);
RPC_STATUS RpcServerRegisterIf2([In] void* IfSpec, [In] [Optional] Guid* MgrTypeUuid, [In] [Optional] void* MgrEpv, [In] uint Flags, [In] uint MaxCalls, [In] uint MaxRpcSize, [In] [Optional] RPC_IF_CALLBACK_FN IfCallbackFn);
RPC_STATUS RpcServerRegisterIf3([In] void* IfSpec, [In] [Optional] Guid* MgrTypeUuid, [In] [Optional] void* MgrEpv, [In] uint Flags, [In] uint MaxCalls, [In] uint MaxRpcSize, [In] [Optional] RPC_IF_CALLBACK_FN IfCallback, [In] [Optional] void* SecurityDescriptor);
RPC_STATUS RpcServerUnregisterIf([In] [Optional] void* IfSpec, [In] [Optional] Guid* MgrTypeUuid, [In] uint WaitForCallsToComplete);
RPC_STATUS RpcServerUnregisterIfEx([In] [Optional] void* IfSpec, [In] [Optional] Guid* MgrTypeUuid, [In] int RundownContextHandles);
RPC_STATUS RpcServerUseAllProtseqs([In] uint MaxCalls, [In] [Optional] void* SecurityDescriptor);
RPC_STATUS RpcServerUseAllProtseqsEx([In] uint MaxCalls, [In] [Optional] void* SecurityDescriptor, [In] RPC_POLICY* Policy);
RPC_STATUS RpcServerUseAllProtseqsIf([In] uint MaxCalls, [In] void* IfSpec, [In] [Optional] void* SecurityDescriptor);
RPC_STATUS RpcServerUseAllProtseqsIfEx([In] uint MaxCalls, [In] void* IfSpec, [In] [Optional] void* SecurityDescriptor, [In] RPC_POLICY* Policy);
RPC_STATUS RpcServerUseProtseqA([In] byte* Protseq, [In] uint MaxCalls, [In] [Optional] void* SecurityDescriptor);
RPC_STATUS RpcServerUseProtseqExA([In] byte* Protseq, [In] uint MaxCalls, [In] [Optional] void* SecurityDescriptor, [In] RPC_POLICY* Policy);
RPC_STATUS RpcServerUseProtseqW([In] ushort* Protseq, [In] uint MaxCalls, [In] [Optional] void* SecurityDescriptor);
RPC_STATUS RpcServerUseProtseqExW([In] ushort* Protseq, [In] uint MaxCalls, [In] [Optional] void* SecurityDescriptor, [In] RPC_POLICY* Policy);
RPC_STATUS RpcServerUseProtseqEpA([In] byte* Protseq, [In] uint MaxCalls, [In] byte* Endpoint, [In] [Optional] void* SecurityDescriptor);
RPC_STATUS RpcServerUseProtseqEpExA([In] byte* Protseq, [In] uint MaxCalls, [In] byte* Endpoint, [In] [Optional] void* SecurityDescriptor, [In] RPC_POLICY* Policy);
RPC_STATUS RpcServerUseProtseqEpW([In] ushort* Protseq, [In] uint MaxCalls, [In] ushort* Endpoint, [In] [Optional] void* SecurityDescriptor);
RPC_STATUS RpcServerUseProtseqEpExW([In] ushort* Protseq, [In] uint MaxCalls, [In] ushort* Endpoint, [In] [Optional] void* SecurityDescriptor, [In] RPC_POLICY* Policy);
RPC_STATUS RpcServerUseProtseqIfA([In] byte* Protseq, [In] uint MaxCalls, [In] void* IfSpec, [In] [Optional] void* SecurityDescriptor);
RPC_STATUS RpcServerUseProtseqIfExA([In] byte* Protseq, [In] uint MaxCalls, [In] void* IfSpec, [In] [Optional] void* SecurityDescriptor, [In] RPC_POLICY* Policy);
RPC_STATUS RpcServerUseProtseqIfW([In] ushort* Protseq, [In] uint MaxCalls, [In] void* IfSpec, [In] [Optional] void* SecurityDescriptor);
RPC_STATUS RpcServerUseProtseqIfExW([In] ushort* Protseq, [In] uint MaxCalls, [In] void* IfSpec, [In] [Optional] void* SecurityDescriptor, [In] RPC_POLICY* Policy);
void RpcServerYield();
RPC_STATUS RpcMgmtStatsVectorFree([In] [Out] RPC_STATS_VECTOR** StatsVector);
RPC_STATUS RpcMgmtInqStats([In] [Optional] void* Binding, [Out] RPC_STATS_VECTOR** Statistics);
RPC_STATUS RpcMgmtIsServerListening([In] [Optional] void* Binding);
RPC_STATUS RpcMgmtStopServerListening([In] [Optional] void* Binding);
RPC_STATUS RpcMgmtWaitServerListen();
RPC_STATUS RpcMgmtSetServerStackSize([In] uint ThreadStackSize);
void RpcSsDontSerializeContext();
RPC_STATUS RpcMgmtEnableIdleCleanup();
RPC_STATUS RpcMgmtInqIfIds([In] [Optional] void* Binding, [Out] RPC_IF_ID_VECTOR** IfIdVector);
RPC_STATUS RpcMgmtInqServerPrincNameA([In] [Optional] void* Binding, [In] uint AuthnSvc, [Out] byte** ServerPrincName);
RPC_STATUS RpcMgmtInqServerPrincNameW([In] [Optional] void* Binding, [In] uint AuthnSvc, [Out] ushort** ServerPrincName);
RPC_STATUS RpcServerInqDefaultPrincNameA([In] uint AuthnSvc, [Out] byte** PrincName);
RPC_STATUS RpcServerInqDefaultPrincNameW([In] uint AuthnSvc, [Out] ushort** PrincName);
RPC_STATUS RpcEpResolveBinding([In] void* Binding, [In] void* IfSpec);
RPC_STATUS RpcNsBindingInqEntryNameA([In] void* Binding, [In] uint EntryNameSyntax, [Out] byte** EntryName);
RPC_STATUS RpcNsBindingInqEntryNameW([In] void* Binding, [In] uint EntryNameSyntax, [Out] ushort** EntryName);
RPC_STATUS RpcBindingCreateA([In] RPC_BINDING_HANDLE_TEMPLATE_V1_A* Template, [In] [Optional] RPC_BINDING_HANDLE_SECURITY_V1_A* Security, [In] [Optional] RPC_BINDING_HANDLE_OPTIONS_V1* Options, [Out] void** Binding);
RPC_STATUS RpcBindingCreateW([In] RPC_BINDING_HANDLE_TEMPLATE_V1_W* Template, [In] [Optional] RPC_BINDING_HANDLE_SECURITY_V1_W* Security, [In] [Optional] RPC_BINDING_HANDLE_OPTIONS_V1* Options, [Out] void** Binding);
RPC_STATUS RpcServerInqBindingHandle([Out] void** Binding);
RPC_STATUS RpcImpersonateClient([In] [Optional] void* BindingHandle);
RPC_STATUS RpcImpersonateClient2([In] [Optional] void* BindingHandle);
RPC_STATUS RpcRevertToSelfEx([In] [Optional] void* BindingHandle);
RPC_STATUS RpcRevertToSelf();
RPC_STATUS RpcImpersonateClientContainer([In] [Optional] void* BindingHandle);
RPC_STATUS RpcRevertContainerImpersonation();
RPC_STATUS RpcBindingInqAuthClientA([In] [Optional] void* ClientBinding, [Out] void** Privs, [Out] [Optional] byte** ServerPrincName, [Out] [Optional] uint* AuthnLevel, [Out] [Optional] uint* AuthnSvc, [Out] [Optional] uint* AuthzSvc);
RPC_STATUS RpcBindingInqAuthClientW([In] [Optional] void* ClientBinding, [Out] void** Privs, [Out] [Optional] ushort** ServerPrincName, [Out] [Optional] uint* AuthnLevel, [Out] [Optional] uint* AuthnSvc, [Out] [Optional] uint* AuthzSvc);
RPC_STATUS RpcBindingInqAuthClientExA([In] [Optional] void* ClientBinding, [Out] void** Privs, [Out] [Optional] byte** ServerPrincName, [Out] [Optional] uint* AuthnLevel, [Out] [Optional] uint* AuthnSvc, [Out] [Optional] uint* AuthzSvc, [In] uint Flags);
RPC_STATUS RpcBindingInqAuthClientExW([In] [Optional] void* ClientBinding, [Out] void** Privs, [Out] [Optional] ushort** ServerPrincName, [Out] [Optional] uint* AuthnLevel, [Out] [Optional] uint* AuthnSvc, [Out] [Optional] uint* AuthzSvc, [In] uint Flags);
RPC_STATUS RpcBindingInqAuthInfoA([In] void* Binding, [Out] [Optional] byte** ServerPrincName, [Out] [Optional] uint* AuthnLevel, [Out] [Optional] uint* AuthnSvc, [Out] [Optional] void** AuthIdentity, [Out] [Optional] uint* AuthzSvc);
RPC_STATUS RpcBindingInqAuthInfoW([In] void* Binding, [Out] [Optional] ushort** ServerPrincName, [Out] [Optional] uint* AuthnLevel, [Out] [Optional] uint* AuthnSvc, [Out] [Optional] void** AuthIdentity, [Out] [Optional] uint* AuthzSvc);
RPC_STATUS RpcBindingSetAuthInfoA([In] void* Binding, [In] [Optional] byte* ServerPrincName, [In] uint AuthnLevel, [In] uint AuthnSvc, [In] [Optional] void* AuthIdentity, [In] uint AuthzSvc);
RPC_STATUS RpcBindingSetAuthInfoExA([In] void* Binding, [In] [Optional] byte* ServerPrincName, [In] uint AuthnLevel, [In] uint AuthnSvc, [In] [Optional] void* AuthIdentity, [In] uint AuthzSvc, [In] [Optional] RPC_SECURITY_QOS* SecurityQos);
RPC_STATUS RpcBindingSetAuthInfoW([In] void* Binding, [In] [Optional] ushort* ServerPrincName, [In] uint AuthnLevel, [In] uint AuthnSvc, [In] [Optional] void* AuthIdentity, [In] uint AuthzSvc);
RPC_STATUS RpcBindingSetAuthInfoExW([In] void* Binding, [In] [Optional] ushort* ServerPrincName, [In] uint AuthnLevel, [In] uint AuthnSvc, [In] [Optional] void* AuthIdentity, [In] uint AuthzSvc, [In] [Optional] RPC_SECURITY_QOS* SecurityQOS);
RPC_STATUS RpcBindingInqAuthInfoExA([In] void* Binding, [Out] [Optional] byte** ServerPrincName, [Out] [Optional] uint* AuthnLevel, [Out] [Optional] uint* AuthnSvc, [Out] [Optional] void** AuthIdentity, [Out] [Optional] uint* AuthzSvc, [In] uint RpcQosVersion, [Out] [Optional] RPC_SECURITY_QOS* SecurityQOS);
RPC_STATUS RpcBindingInqAuthInfoExW([In] void* Binding, [Out] [Optional] ushort** ServerPrincName, [Out] [Optional] uint* AuthnLevel, [Out] [Optional] uint* AuthnSvc, [Out] [Optional] void** AuthIdentity, [Out] [Optional] uint* AuthzSvc, [In] uint RpcQosVersion, [Out] [Optional] RPC_SECURITY_QOS* SecurityQOS);
RPC_STATUS RpcServerCompleteSecurityCallback([In] void* BindingHandle, [In] RPC_STATUS Status);
RPC_STATUS RpcServerRegisterAuthInfoA([In] [Optional] byte* ServerPrincName, [In] uint AuthnSvc, [In] [Optional] RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, [In] [Optional] void* Arg);
RPC_STATUS RpcServerRegisterAuthInfoW([In] [Optional] ushort* ServerPrincName, [In] uint AuthnSvc, [In] [Optional] RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, [In] [Optional] void* Arg);
RPC_STATUS RpcBindingServerFromClient([In] [Optional] void* ClientBinding, [Out] void** ServerBinding);
void RpcRaiseException([In] RPC_STATUS exception);
RPC_STATUS RpcTestCancel();
RPC_STATUS RpcServerTestCancel([In] [Optional] void* BindingHandle);
RPC_STATUS RpcCancelThread([In] void* Thread);
RPC_STATUS RpcCancelThreadEx([In] void* Thread, [In] int Timeout);
RPC_STATUS UuidCreate([Out] Guid* Uuid);
RPC_STATUS UuidCreateSequential([Out] Guid* Uuid);
RPC_STATUS UuidToStringA([Const] [In] Guid* Uuid, [Out] byte** StringUuid);
RPC_STATUS UuidFromStringA([In] [Optional] byte* StringUuid, [Out] Guid* Uuid);
RPC_STATUS UuidToStringW([Const] [In] Guid* Uuid, [Out] ushort** StringUuid);
RPC_STATUS UuidFromStringW([In] [Optional] ushort* StringUuid, [Out] Guid* Uuid);
int UuidCompare([In] Guid* Uuid1, [In] Guid* Uuid2, [Out] RPC_STATUS* Status);
RPC_STATUS UuidCreateNil([Out] Guid* NilUuid);
int UuidEqual([In] Guid* Uuid1, [In] Guid* Uuid2, [Out] RPC_STATUS* Status);
ushort UuidHash([In] Guid* Uuid, [Out] RPC_STATUS* Status);
int UuidIsNil([In] Guid* Uuid, [Out] RPC_STATUS* Status);
RPC_STATUS RpcEpRegisterNoReplaceA([In] void* IfSpec, [In] RPC_BINDING_VECTOR* BindingVector, [In] [Optional] UUID_VECTOR* UuidVector, [In] [Optional] byte* Annotation);
RPC_STATUS RpcEpRegisterNoReplaceW([In] void* IfSpec, [In] RPC_BINDING_VECTOR* BindingVector, [In] [Optional] UUID_VECTOR* UuidVector, [In] [Optional] ushort* Annotation);
RPC_STATUS RpcEpRegisterA([In] void* IfSpec, [In] RPC_BINDING_VECTOR* BindingVector, [In] [Optional] UUID_VECTOR* UuidVector, [In] [Optional] byte* Annotation);
RPC_STATUS RpcEpRegisterW([In] void* IfSpec, [In] RPC_BINDING_VECTOR* BindingVector, [In] [Optional] UUID_VECTOR* UuidVector, [In] [Optional] ushort* Annotation);
RPC_STATUS RpcEpUnregister([In] void* IfSpec, [In] RPC_BINDING_VECTOR* BindingVector, [In] [Optional] UUID_VECTOR* UuidVector);
RPC_STATUS DceErrorInqTextA([In] RPC_STATUS RpcStatus, [NativeArrayInfo(CountConst = 256)] [Out] byte* ErrorText);
RPC_STATUS DceErrorInqTextW([In] RPC_STATUS RpcStatus, [NativeArrayInfo(CountConst = 256)] [Out] ushort* ErrorText);
RPC_STATUS RpcMgmtEpEltInqBegin([In] [Optional] void* EpBinding, [In] uint InquiryType, [In] [Optional] RPC_IF_ID* IfId, [In] [Optional] uint VersOption, [In] [Optional] Guid* ObjectUuid, [Out] void*** InquiryContext);
RPC_STATUS RpcMgmtEpEltInqDone([In] [Out] void*** InquiryContext);
RPC_STATUS RpcMgmtEpEltInqNextA([In] void** InquiryContext, [Out] RPC_IF_ID* IfId, [Out] [Optional] void** Binding, [Out] [Optional] Guid* ObjectUuid, [Out] [Optional] byte** Annotation);
RPC_STATUS RpcMgmtEpEltInqNextW([In] void** InquiryContext, [Out] RPC_IF_ID* IfId, [Out] [Optional] void** Binding, [Out] [Optional] Guid* ObjectUuid, [Out] [Optional] ushort** Annotation);
RPC_STATUS RpcMgmtEpUnregister([In] [Optional] void* EpBinding, [In] RPC_IF_ID* IfId, [In] void* Binding, [In] [Optional] Guid* ObjectUuid);
RPC_STATUS RpcMgmtSetAuthorizationFn([In] RPC_MGMT_AUTHORIZATION_FN AuthorizationFn);
int RpcExceptionFilter([In] uint ExceptionCode);
RPC_STATUS RpcServerInterfaceGroupCreateW([NativeArrayInfo(CountParamIndex = 1)] [In] RPC_INTERFACE_TEMPLATEW* Interfaces, [In] uint NumIfs, [NativeArrayInfo(CountParamIndex = 3)] [In] RPC_ENDPOINT_TEMPLATEW* Endpoints, [In] uint NumEndpoints, [In] uint IdlePeriod, [In] RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, [In] void* IdleCallbackContext, [Out] void** IfGroup);
RPC_STATUS RpcServerInterfaceGroupCreateA([NativeArrayInfo(CountParamIndex = 1)] [In] RPC_INTERFACE_TEMPLATEA* Interfaces, [In] uint NumIfs, [NativeArrayInfo(CountParamIndex = 3)] [In] RPC_ENDPOINT_TEMPLATEA* Endpoints, [In] uint NumEndpoints, [In] uint IdlePeriod, [In] RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, [In] void* IdleCallbackContext, [Out] void** IfGroup);
RPC_STATUS RpcServerInterfaceGroupClose([In] void* IfGroup);
RPC_STATUS RpcServerInterfaceGroupActivate([In] void* IfGroup);
RPC_STATUS RpcServerInterfaceGroupDeactivate([In] void* IfGroup, [In] uint ForceDeactivation);
RPC_STATUS RpcServerInterfaceGroupInqBindings([In] void* IfGroup, [Out] RPC_BINDING_VECTOR** BindingVector);
RPC_STATUS I_RpcNegotiateTransferSyntax([In] [Out] RPC_MESSAGE* Message);
RPC_STATUS I_RpcGetBuffer([In] [Out] RPC_MESSAGE* Message);
RPC_STATUS I_RpcGetBufferWithObject([In] [Out] RPC_MESSAGE* Message, [In] [Out] Guid* ObjectUuid);
RPC_STATUS I_RpcSendReceive([In] [Out] RPC_MESSAGE* Message);
RPC_STATUS I_RpcFreeBuffer([In] [Out] RPC_MESSAGE* Message);
RPC_STATUS I_RpcSend([In] [Out] RPC_MESSAGE* Message);
RPC_STATUS I_RpcReceive([In] [Out] RPC_MESSAGE* Message, [In] uint Size);
RPC_STATUS I_RpcFreePipeBuffer([In] [Out] RPC_MESSAGE* Message);
RPC_STATUS I_RpcReallocPipeBuffer([In] RPC_MESSAGE* Message, [In] uint NewSize);
void I_RpcRequestMutex([In] [Out] void** Mutex);
void I_RpcClearMutex([In] [Out] void* Mutex);
void I_RpcDeleteMutex([In] [Out] void* Mutex);
void* I_RpcAllocate([In] uint Size);
void I_RpcFree([In] [Out] void* Object);
void I_RpcPauseExecution([In] uint Milliseconds);
RPC_STATUS I_RpcGetExtendedError();
RPC_STATUS I_RpcSystemHandleTypeSpecificWork([In] [Out] void* Handle, [In] byte ActualType, [In] byte IdlType, [In] LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection);
void* I_RpcGetCurrentCallHandle();
RPC_STATUS I_RpcNsInterfaceExported([In] uint EntryNameSyntax, [In] ushort* EntryName, [In] RPC_SERVER_INTERFACE* RpcInterfaceInformation);
RPC_STATUS I_RpcNsInterfaceUnexported([In] uint EntryNameSyntax, [In] [Out] ushort* EntryName, [In] [Out] RPC_SERVER_INTERFACE* RpcInterfaceInformation);
RPC_STATUS I_RpcBindingToStaticStringBindingW([In] [Out] void* Binding, [In] [Out] ushort** StringBinding);
RPC_STATUS I_RpcBindingInqSecurityContext([In] [Out] void* Binding, [In] [Out] void** SecurityContextHandle);
RPC_STATUS I_RpcBindingInqSecurityContextKeyInfo([In] [Optional] void* Binding, [In] [Out] void* KeyInfo);
RPC_STATUS I_RpcBindingInqWireIdForSnego([In] void* Binding, [Out] byte* WireId);
RPC_STATUS I_RpcBindingInqMarshalledTargetInfo([In] void* Binding, [Out] uint* MarshalledTargetInfoSize, [Out] byte** MarshalledTargetInfo);
RPC_STATUS I_RpcBindingInqLocalClientPID([In] [Out] void* Binding, [In] [Out] uint* Pid);
RPC_STATUS I_RpcBindingHandleToAsyncHandle([In] [Out] void* Binding, [In] [Out] void** AsyncHandle);
RPC_STATUS I_RpcNsBindingSetEntryNameW([In] void* Binding, [In] uint EntryNameSyntax, [In] ushort* EntryName);
RPC_STATUS I_RpcNsBindingSetEntryNameA([In] void* Binding, [In] uint EntryNameSyntax, [In] byte* EntryName);
RPC_STATUS I_RpcServerUseProtseqEp2A([In] [Optional] byte* NetworkAddress, [In] byte* Protseq, [In] uint MaxCalls, [In] byte* Endpoint, [In] [Optional] void* SecurityDescriptor, [In] void* Policy);
RPC_STATUS I_RpcServerUseProtseqEp2W([In] [Optional] ushort* NetworkAddress, [In] ushort* Protseq, [In] uint MaxCalls, [In] ushort* Endpoint, [In] [Optional] void* SecurityDescriptor, [In] void* Policy);
RPC_STATUS I_RpcServerUseProtseq2W([In] [Optional] ushort* NetworkAddress, [In] ushort* Protseq, [In] uint MaxCalls, [In] [Optional] void* SecurityDescriptor, [In] void* Policy);
RPC_STATUS I_RpcServerUseProtseq2A([In] [Optional] byte* NetworkAddress, [In] byte* Protseq, [In] uint MaxCalls, [In] [Optional] void* SecurityDescriptor, [In] void* Policy);
RPC_STATUS I_RpcServerStartService([In] ushort* Protseq, [In] ushort* Endpoint, [In] void* IfSpec);
RPC_STATUS I_RpcBindingInqDynamicEndpointW([In] void* Binding, [Out] [Optional] ushort** DynamicEndpoint);
RPC_STATUS I_RpcBindingInqDynamicEndpointA([In] void* Binding, [Out] [Optional] byte** DynamicEndpoint);
RPC_STATUS I_RpcServerCheckClientRestriction([In] [Out] void* Context);
RPC_STATUS I_RpcBindingInqTransportType([In] [Out] void* Binding, [In] [Out] uint* Type);
RPC_STATUS I_RpcIfInqTransferSyntaxes([In] [Out] void* RpcIfHandle, [In] [Out] RPC_TRANSFER_SYNTAX* TransferSyntaxes, [In] uint TransferSyntaxSize, [In] [Out] uint* TransferSyntaxCount);
RPC_STATUS I_UuidCreate([In] [Out] Guid* Uuid);
RPC_STATUS I_RpcBindingCopy([In] [Out] void* SourceBinding, [In] [Out] void** DestinationBinding);
RPC_STATUS I_RpcBindingIsClientLocal([In] [Out] void* BindingHandle, [In] [Out] uint* ClientLocalFlag);
RPC_STATUS I_RpcBindingCreateNP([In] ushort* ServerName, [In] ushort* ServiceName, [In] ushort* NetworkOptions, [Out] void** Binding);
void I_RpcSsDontSerializeContext();
RPC_STATUS I_RpcServerRegisterForwardFunction([In] [Out] RPC_FORWARD_FUNCTION* pForwardFunction);
RPC_ADDRESS_CHANGE_FN* I_RpcServerInqAddressChangeFn();
RPC_STATUS I_RpcServerSetAddressChangeFn([In] [Out] RPC_ADDRESS_CHANGE_FN* pAddressChangeFn);
RPC_STATUS I_RpcServerInqLocalConnAddress([In] [Out] void* Binding, [In] [Out] void* Buffer, [In] [Out] uint* BufferSize, [In] [Out] uint* AddressFormat);
RPC_STATUS I_RpcServerInqRemoteConnAddress([In] [Out] void* Binding, [In] [Out] void* Buffer, [In] [Out] uint* BufferSize, [In] [Out] uint* AddressFormat);
void I_RpcSessionStrictContextHandle();
RPC_STATUS I_RpcTurnOnEEInfoPropagation();
RPC_STATUS I_RpcServerInqTransportType([In] [Out] uint* Type);
int I_RpcMapWin32Status([In] RPC_STATUS Status);
void I_RpcRecordCalloutFailure([In] RPC_STATUS RpcStatus, [In] [Out] RDR_CALLOUT_STATE* CallOutState, [In] [Out] ushort* DllName);
RPC_STATUS I_RpcMgmtEnableDedicatedThreadPool();
RPC_STATUS I_RpcGetDefaultSD([Out] void** ppSecurityDescriptor);
RPC_STATUS I_RpcOpenClientProcess([In] [Optional] void* Binding, [In] uint DesiredAccess, [Out] void** ClientProcess);
RPC_STATUS I_RpcBindingIsServerLocal([In] void* Binding, [Out] uint* ServerLocalFlag);
RPC_STATUS I_RpcBindingSetPrivateOption([In] void* hBinding, [In] uint option, [In] nuint optionValue);
RPC_STATUS I_RpcServerSubscribeForDisconnectNotification([In] [Optional] void* Binding, [In] [Optional] void* hEvent);
RPC_STATUS I_RpcServerGetAssociationID([In] [Optional] void* Binding, [Out] uint* AssociationID);
int I_RpcServerDisableExceptionFilter();
RPC_STATUS I_RpcServerSubscribeForDisconnectNotification2([In] [Optional] void* Binding, [In] void* hEvent, [Out] Guid* SubscriptionId);
RPC_STATUS I_RpcServerUnsubscribeForDisconnectNotification([In] [Optional] void* Binding, [In] Guid SubscriptionId);
RPC_STATUS RpcAsyncRegisterInfo([In] RPC_ASYNC_STATE* pAsync);
RPC_STATUS RpcAsyncInitializeHandle([MemorySize(BytesParamIndex = 1)] [Out] RPC_ASYNC_STATE* pAsync, [In] uint Size);
RPC_STATUS RpcAsyncGetCallStatus([In] RPC_ASYNC_STATE* pAsync);
RPC_STATUS RpcAsyncCompleteCall([In] [Out] RPC_ASYNC_STATE* pAsync, [Out] [Optional] void* Reply);
RPC_STATUS RpcAsyncAbortCall([In] [Out] RPC_ASYNC_STATE* pAsync, [In] uint ExceptionCode);
RPC_STATUS RpcAsyncCancelCall([In] [Out] RPC_ASYNC_STATE* pAsync, [In] BOOL fAbort);
RPC_STATUS RpcErrorStartEnumeration([Out] RPC_ERROR_ENUM_HANDLE* EnumHandle);
RPC_STATUS RpcErrorGetNextRecord([In] RPC_ERROR_ENUM_HANDLE* EnumHandle, [In] BOOL CopyStrings, [Out] RPC_EXTENDED_ERROR_INFO* ErrorInfo);
RPC_STATUS RpcErrorEndEnumeration([In] [Out] RPC_ERROR_ENUM_HANDLE* EnumHandle);
RPC_STATUS RpcErrorResetEnumeration([In] [Out] RPC_ERROR_ENUM_HANDLE* EnumHandle);
RPC_STATUS RpcErrorGetNumberOfRecords([In] RPC_ERROR_ENUM_HANDLE* EnumHandle, [Out] int* Records);
RPC_STATUS RpcErrorSaveErrorInfo([In] RPC_ERROR_ENUM_HANDLE* EnumHandle, [Out] void** ErrorBlob, [Out] nuint* BlobSize);
RPC_STATUS RpcErrorLoadErrorInfo([MemorySize(BytesParamIndex = 1)] [In] void* ErrorBlob, [In] nuint BlobSize, [Out] RPC_ERROR_ENUM_HANDLE* EnumHandle);
RPC_STATUS RpcErrorAddRecord([In] RPC_EXTENDED_ERROR_INFO* ErrorInfo);
void RpcErrorClearInformation();
RPC_STATUS RpcGetAuthorizationContextForClient([In] [Optional] void* ClientBinding, [In] BOOL ImpersonateOnReturn, [In] [Optional] void* Reserved1, [In] [Optional] LARGE_INTEGER* pExpirationTime, [In] LUID Reserved2, [In] uint Reserved3, [In] [Optional] void* Reserved4, [Out] void** pAuthzClientContext);
RPC_STATUS RpcFreeAuthorizationContext([In] [Out] void** pAuthzClientContext);
RPC_STATUS RpcSsContextLockExclusive([In] [Optional] void* ServerBindingHandle, [In] void* UserContext);
RPC_STATUS RpcSsContextLockShared([In] void* ServerBindingHandle, [In] void* UserContext);
RPC_STATUS RpcServerInqCallAttributesW([In] [Optional] void* ClientBinding, [In] [Out] void* RpcCallAttributes);
RPC_STATUS RpcServerInqCallAttributesA([In] [Optional] void* ClientBinding, [In] [Out] void* RpcCallAttributes);
RPC_STATUS RpcServerSubscribeForNotification([In] [Optional] void* Binding, [In] RPC_NOTIFICATIONS Notification, [In] RPC_NOTIFICATION_TYPES NotificationType, [In] RPC_ASYNC_NOTIFICATION_INFO* NotificationInfo);
RPC_STATUS RpcServerUnsubscribeForNotification([In] [Optional] void* Binding, [In] RPC_NOTIFICATIONS Notification, [Out] uint* NotificationsQueued);
RPC_STATUS RpcBindingBind([In] [Optional] RPC_ASYNC_STATE* pAsync, [In] void* Binding, [In] void* IfSpec);
RPC_STATUS RpcBindingUnbind([In] void* Binding);
RPC_STATUS I_RpcAsyncSetHandle([In] RPC_MESSAGE* Message, [In] RPC_ASYNC_STATE* pAsync);
RPC_STATUS I_RpcAsyncAbortCall([In] RPC_ASYNC_STATE* pAsync, [In] uint ExceptionCode);
int I_RpcExceptionFilter([In] uint ExceptionCode);
RPC_STATUS I_RpcBindingInqClientTokenAttributes([In] void* Binding, [Out] [Optional] LUID* TokenId, [Out] [Optional] LUID* AuthenticationId, [Out] [Optional] LUID* ModifiedId);
void* NDRCContextBinding([In] nint CContext);
void NDRCContextMarshall([In] [Optional] nint CContext, [Out] void* pBuff);
void NDRCContextUnmarshall([In] [Out] [Optional] nint* pCContext, [In] void* hBinding, [In] void* pBuff, [In] uint DataRepresentation);
void NDRSContextMarshall([In] NDR_SCONTEXT_1* CContext, [Out] void* pBuff, [In] NDR_RUNDOWN userRunDownIn);
NDR_SCONTEXT_1* NDRSContextUnmarshall([In] void* pBuff, [In] uint DataRepresentation);
void NDRSContextMarshallEx([In] void* BindingHandle, [In] NDR_SCONTEXT_1* CContext, [Out] void* pBuff, [In] NDR_RUNDOWN userRunDownIn);
void NDRSContextMarshall2([In] void* BindingHandle, [In] NDR_SCONTEXT_1* CContext, [Out] void* pBuff, [In] NDR_RUNDOWN userRunDownIn, [In] [Optional] void* CtxGuard, [In] uint Flags);
NDR_SCONTEXT_1* NDRSContextUnmarshallEx([In] void* BindingHandle, [In] void* pBuff, [In] uint DataRepresentation);
NDR_SCONTEXT_1* NDRSContextUnmarshall2([In] void* BindingHandle, [In] [Optional] void* pBuff, [In] uint DataRepresentation, [In] [Optional] void* CtxGuard, [In] uint Flags);
void RpcSsDestroyClientContext([In] void** ContextHandle);
void NdrSimpleTypeMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] byte FormatChar);
byte* NdrPointerMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrSimpleStructMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrConformantStructMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrConformantVaryingStructMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrComplexStructMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrFixedArrayMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrConformantArrayMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrConformantVaryingArrayMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrVaryingArrayMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrComplexArrayMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrNonConformantStringMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrConformantStringMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrEncapsulatedUnionMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrNonEncapsulatedUnionMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrByteCountPointerMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrXmitOrRepAsMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrUserMarshalMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
byte* NdrInterfacePointerMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrClientContextMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] nint ContextHandle, [In] int fCheck);
void NdrServerContextMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] NDR_SCONTEXT_1* ContextHandle, [In] NDR_RUNDOWN RundownRoutine);
void NdrServerContextNewMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] NDR_SCONTEXT_1* ContextHandle, [In] NDR_RUNDOWN RundownRoutine, [In] [Out] byte* pFormat);
void NdrSimpleTypeUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] byte FormatChar);
byte* NdrRangeUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
void NdrCorrelationInitialize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] void* pMemory, [In] uint CacheSize, [In] uint flags);
void NdrCorrelationPass([In] [Out] MIDL_STUB_MESSAGE* pStubMsg);
void NdrCorrelationFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg);
byte* NdrPointerUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrSimpleStructUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrConformantStructUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrConformantVaryingStructUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrComplexStructUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrFixedArrayUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrConformantArrayUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrConformantVaryingArrayUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrVaryingArrayUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrComplexArrayUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrNonConformantStringUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrConformantStringUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrEncapsulatedUnionUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrNonEncapsulatedUnionUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrByteCountPointerUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrXmitOrRepAsUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrUserMarshalUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
byte* NdrInterfacePointerUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte** ppMemory, [In] [Out] byte* pFormat, [In] byte fMustAlloc);
void NdrClientContextUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] nint* pContextHandle, [In] [Out] void* BindHandle);
NDR_SCONTEXT_1* NdrServerContextUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg);
NDR_SCONTEXT_1* NdrContextHandleInitialize([In] MIDL_STUB_MESSAGE* pStubMsg, [In] byte* pFormat);
NDR_SCONTEXT_1* NdrServerContextNewUnmarshall([In] MIDL_STUB_MESSAGE* pStubMsg, [In] byte* pFormat);
void NdrPointerBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrSimpleStructBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrConformantStructBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrConformantVaryingStructBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrComplexStructBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrFixedArrayBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrConformantArrayBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrConformantVaryingArrayBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrVaryingArrayBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrComplexArrayBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrConformantStringBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrNonConformantStringBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrEncapsulatedUnionBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrNonEncapsulatedUnionBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrByteCountPointerBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrXmitOrRepAsBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrUserMarshalBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrInterfacePointerBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrContextHandleSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
uint NdrPointerMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrSimpleStructMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrConformantStructMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrConformantVaryingStructMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrComplexStructMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrFixedArrayMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrConformantArrayMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrConformantVaryingArrayMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrVaryingArrayMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrComplexArrayMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrConformantStringMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrNonConformantStringMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrEncapsulatedUnionMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrNonEncapsulatedUnionMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrXmitOrRepAsMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrUserMarshalMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
uint NdrInterfacePointerMemorySize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
void NdrPointerFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrSimpleStructFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrConformantStructFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrConformantVaryingStructFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrComplexStructFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrFixedArrayFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrConformantArrayFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrConformantVaryingArrayFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrVaryingArrayFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrComplexArrayFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrEncapsulatedUnionFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrNonEncapsulatedUnionFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrByteCountPointerFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrXmitOrRepAsFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrUserMarshalFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrInterfacePointerFree([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pMemory, [In] [Out] byte* pFormat);
void NdrConvert2([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat, [In] int NumberParams);
void NdrConvert([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat);
byte* NdrUserMarshalSimpleTypeConvert([In] [Out] uint* pFlags, [In] [Out] byte* pBuffer, [In] byte FormatChar);
void NdrClientInitializeNew([In] [Out] RPC_MESSAGE* pRpcMsg, [In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] MIDL_STUB_DESC* pStubDescriptor, [In] uint ProcNum);
byte* NdrServerInitializeNew([In] [Out] RPC_MESSAGE* pRpcMsg, [In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] MIDL_STUB_DESC* pStubDescriptor);
void NdrServerInitializePartial([In] [Out] RPC_MESSAGE* pRpcMsg, [In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] MIDL_STUB_DESC* pStubDescriptor, [In] uint RequestedBufferSize);
void NdrClientInitialize([In] [Out] RPC_MESSAGE* pRpcMsg, [In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] MIDL_STUB_DESC* pStubDescriptor, [In] uint ProcNum);
byte* NdrServerInitialize([In] [Out] RPC_MESSAGE* pRpcMsg, [In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] MIDL_STUB_DESC* pStubDescriptor);
byte* NdrServerInitializeUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] MIDL_STUB_DESC* pStubDescriptor, [In] [Out] RPC_MESSAGE* pRpcMsg);
void NdrServerInitializeMarshall([In] [Out] RPC_MESSAGE* pRpcMsg, [In] [Out] MIDL_STUB_MESSAGE* pStubMsg);
byte* NdrGetBuffer([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] uint BufferLength, [In] [Out] void* Handle);
byte* NdrNsGetBuffer([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] uint BufferLength, [In] [Out] void* Handle);
byte* NdrSendReceive([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pBufferEnd);
byte* NdrNsSendReceive([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pBufferEnd, [In] [Out] void** pAutoHandle);
void NdrFreeBuffer([In] [Out] MIDL_STUB_MESSAGE* pStubMsg);
HRESULT NdrGetDcomProtocolVersion([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] RPC_VERSION* pVersion);
CLIENT_CALL_RETURN NdrClientCall2([In] [Out] MIDL_STUB_DESC* pStubDescriptor, [In] [Out] byte* pFormat, ...);
CLIENT_CALL_RETURN NdrAsyncClientCall([In] [Out] MIDL_STUB_DESC* pStubDescriptor, [In] [Out] byte* pFormat, ...);
CLIENT_CALL_RETURN NdrDcomAsyncClientCall([In] [Out] MIDL_STUB_DESC* pStubDescriptor, [In] [Out] byte* pFormat, ...);
void NdrAsyncServerCall([In] [Out] RPC_MESSAGE* pRpcMsg);
int NdrDcomAsyncStubCall([In] IRpcStubBuffer pThis, [In] IRpcChannelBuffer pChannel, [In] [Out] RPC_MESSAGE* pRpcMsg, [In] [Out] uint* pdwStubPhase);
int NdrStubCall2([In] [Out] void* pThis, [In] [Out] void* pChannel, [In] [Out] RPC_MESSAGE* pRpcMsg, [In] [Out] uint* pdwStubPhase);
void NdrServerCall2([In] [Out] RPC_MESSAGE* pRpcMsg);
RPC_STATUS NdrMapCommAndFaultStatus([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] uint* pCommStatus, [In] [Out] uint* pFaultStatus, [In] RPC_STATUS Status);
void* RpcSsAllocate([In] nuint Size);
void RpcSsDisableAllocate();
void RpcSsEnableAllocate();
void RpcSsFree([In] void* NodeToFree);
void* RpcSsGetThreadHandle();
void RpcSsSetClientAllocFree([In] RPC_CLIENT_ALLOC ClientAlloc, [In] RPC_CLIENT_FREE ClientFree);
void RpcSsSetThreadHandle([In] void* Id);
void RpcSsSwapClientAllocFree([In] RPC_CLIENT_ALLOC ClientAlloc, [In] RPC_CLIENT_FREE ClientFree, [Out] RPC_CLIENT_ALLOC* OldClientAlloc, [Out] RPC_CLIENT_FREE* OldClientFree);
void* RpcSmAllocate([In] nuint Size, [Out] RPC_STATUS* pStatus);
RPC_STATUS RpcSmClientFree([In] void* pNodeToFree);
RPC_STATUS RpcSmDestroyClientContext([In] void** ContextHandle);
RPC_STATUS RpcSmDisableAllocate();
RPC_STATUS RpcSmEnableAllocate();
RPC_STATUS RpcSmFree([In] void* NodeToFree);
void* RpcSmGetThreadHandle([Out] RPC_STATUS* pStatus);
RPC_STATUS RpcSmSetClientAllocFree([In] RPC_CLIENT_ALLOC ClientAlloc, [In] RPC_CLIENT_FREE ClientFree);
RPC_STATUS RpcSmSetThreadHandle([In] void* Id);
RPC_STATUS RpcSmSwapClientAllocFree([In] RPC_CLIENT_ALLOC ClientAlloc, [In] RPC_CLIENT_FREE ClientFree, [Out] RPC_CLIENT_ALLOC* OldClientAlloc, [Out] RPC_CLIENT_FREE* OldClientFree);
void NdrRpcSsEnableAllocate([In] [Out] MIDL_STUB_MESSAGE* pMessage);
void NdrRpcSsDisableAllocate([In] [Out] MIDL_STUB_MESSAGE* pMessage);
void NdrRpcSmSetClientToOsf([In] [Out] MIDL_STUB_MESSAGE* pMessage);
void* NdrRpcSmClientAllocate([In] nuint Size);
void NdrRpcSmClientFree([In] void* NodeToFree);
void* NdrRpcSsDefaultAllocate([In] nuint Size);
void NdrRpcSsDefaultFree([In] void* NodeToFree);
FULL_PTR_XLAT_TABLES* NdrFullPointerXlatInit([In] uint NumberOfPointers, [In] XLAT_SIDE XlatSide);
void NdrFullPointerXlatFree([In] [Out] FULL_PTR_XLAT_TABLES* pXlatTables);
void* NdrAllocate([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] nuint Len);
void NdrClearOutParameters([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] byte* pFormat, [In] [Out] void* ArgAddr);
void* NdrOleAllocate([In] nuint Size);
void NdrOleFree([In] void* NodeToFree);
RPC_STATUS NdrGetUserMarshalInfo([In] uint* pFlags, [In] uint InformationLevel, [Out] NDR_USER_MARSHAL_INFO* pMarshalInfo);
RPC_STATUS NdrCreateServerInterfaceFromStub([In] IRpcStubBuffer pStub, [In] [Out] RPC_SERVER_INTERFACE* pServerIf);
CLIENT_CALL_RETURN NdrClientCall3([In] [Out] MIDL_STUBLESS_PROXY_INFO* pProxyInfo, [In] uint nProcNum, [In] [Out] void* pReturnValue, ...);
CLIENT_CALL_RETURN Ndr64AsyncClientCall([In] [Out] MIDL_STUBLESS_PROXY_INFO* pProxyInfo, [In] uint nProcNum, [In] [Out] void* pReturnValue, ...);
CLIENT_CALL_RETURN Ndr64DcomAsyncClientCall([In] [Out] MIDL_STUBLESS_PROXY_INFO* pProxyInfo, [In] uint nProcNum, [In] [Out] void* pReturnValue, ...);
void Ndr64AsyncServerCall64([In] [Out] RPC_MESSAGE* pRpcMsg);
void Ndr64AsyncServerCallAll([In] [Out] RPC_MESSAGE* pRpcMsg);
int Ndr64DcomAsyncStubCall([In] IRpcStubBuffer pThis, [In] IRpcChannelBuffer pChannel, [In] [Out] RPC_MESSAGE* pRpcMsg, [In] [Out] uint* pdwStubPhase);
int NdrStubCall3([In] [Out] void* pThis, [In] [Out] void* pChannel, [In] [Out] RPC_MESSAGE* pRpcMsg, [In] [Out] uint* pdwStubPhase);
void NdrServerCallAll([In] [Out] RPC_MESSAGE* pRpcMsg);
void NdrServerCallNdr64([In] [Out] RPC_MESSAGE* pRpcMsg);
void NdrPartialIgnoreClientMarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] void* pMemory);
void NdrPartialIgnoreServerUnmarshall([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] void** ppMemory);
void NdrPartialIgnoreClientBufferSize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] void* pMemory);
void NdrPartialIgnoreServerInitialize([In] [Out] MIDL_STUB_MESSAGE* pStubMsg, [In] [Out] void** ppMemory, [In] [Out] byte* pFormat);
void RpcUserFree([In] [Out] void* AsyncHandle, [In] [Out] void* pBuffer);
RPC_STATUS MesEncodeIncrementalHandleCreate([In] [Out] void* UserState, [In] MIDL_ES_ALLOC AllocFn, [In] MIDL_ES_WRITE WriteFn, [In] [Out] void** pHandle);
RPC_STATUS MesDecodeIncrementalHandleCreate([In] [Out] void* UserState, [In] MIDL_ES_READ ReadFn, [In] [Out] void** pHandle);
RPC_STATUS MesIncrementalHandleReset([In] [Out] void* Handle, [In] [Out] void* UserState, [In] MIDL_ES_ALLOC AllocFn, [In] MIDL_ES_WRITE WriteFn, [In] MIDL_ES_READ ReadFn, [In] MIDL_ES_CODE Operation);
RPC_STATUS MesEncodeFixedBufferHandleCreate([MemorySize(BytesParamIndex = 1)] [Out] PSTR pBuffer, [In] uint BufferSize, [Out] uint* pEncodedSize, [Out] void** pHandle);
RPC_STATUS MesEncodeDynBufferHandleCreate([Out] sbyte** pBuffer, [Out] uint* pEncodedSize, [Out] void** pHandle);
RPC_STATUS MesDecodeBufferHandleCreate([MemorySize(BytesParamIndex = 1)] [In] PSTR Buffer, [In] uint BufferSize, [Out] void** pHandle);
RPC_STATUS MesBufferHandleReset([In] void* Handle, [In] uint HandleStyle, [In] MIDL_ES_CODE Operation, [MemorySize(BytesParamIndex = 4)] [In] [Optional] sbyte** pBuffer, [In] uint BufferSize, [Out] [Optional] uint* pEncodedSize);
RPC_STATUS MesHandleFree([In] [Out] void* Handle);
RPC_STATUS MesInqProcEncodingId([In] [Out] void* Handle, [In] [Out] RPC_SYNTAX_IDENTIFIER* pInterfaceId, [In] [Out] uint* pProcNum);
nuint NdrMesSimpleTypeAlignSize([In] [Out] void* param0);
void NdrMesSimpleTypeDecode([In] [Out] void* Handle, [In] [Out] void* pObject, [In] short Size);
void NdrMesSimpleTypeEncode([In] [Out] void* Handle, [Const] [In] MIDL_STUB_DESC* pStubDesc, [Const] [In] void* pObject, [In] short Size);
nuint NdrMesTypeAlignSize([In] [Out] void* Handle, [Const] [In] MIDL_STUB_DESC* pStubDesc, [In] [Out] byte* pFormatString, [Const] [In] void* pObject);
void NdrMesTypeEncode([In] [Out] void* Handle, [Const] [In] MIDL_STUB_DESC* pStubDesc, [In] [Out] byte* pFormatString, [Const] [In] void* pObject);
void NdrMesTypeDecode([In] [Out] void* Handle, [Const] [In] MIDL_STUB_DESC* pStubDesc, [In] [Out] byte* pFormatString, [In] [Out] void* pObject);
nuint NdrMesTypeAlignSize2([In] [Out] void* Handle, [Const] [In] MIDL_TYPE_PICKLING_INFO* pPicklingInfo, [Const] [In] MIDL_STUB_DESC* pStubDesc, [In] [Out] byte* pFormatString, [Const] [In] void* pObject);
void NdrMesTypeEncode2([In] [Out] void* Handle, [Const] [In] MIDL_TYPE_PICKLING_INFO* pPicklingInfo, [Const] [In] MIDL_STUB_DESC* pStubDesc, [In] [Out] byte* pFormatString, [Const] [In] void* pObject);
void NdrMesTypeDecode2([In] [Out] void* Handle, [Const] [In] MIDL_TYPE_PICKLING_INFO* pPicklingInfo, [Const] [In] MIDL_STUB_DESC* pStubDesc, [In] [Out] byte* pFormatString, [In] [Out] void* pObject);
void NdrMesTypeFree2([In] [Out] void* Handle, [Const] [In] MIDL_TYPE_PICKLING_INFO* pPicklingInfo, [Const] [In] MIDL_STUB_DESC* pStubDesc, [In] [Out] byte* pFormatString, [In] [Out] void* pObject);
void NdrMesProcEncodeDecode([In] [Out] void* Handle, [Const] [In] MIDL_STUB_DESC* pStubDesc, [In] [Out] byte* pFormatString, ...);
CLIENT_CALL_RETURN NdrMesProcEncodeDecode2([In] [Out] void* Handle, [Const] [In] MIDL_STUB_DESC* pStubDesc, [In] [Out] byte* pFormatString, ...);
nuint NdrMesTypeAlignSize3([In] [Out] void* Handle, [Const] [In] MIDL_TYPE_PICKLING_INFO* pPicklingInfo, [Const] [In] MIDL_STUBLESS_PROXY_INFO* pProxyInfo, [Const] [In] uint** ArrTypeOffset, [In] uint nTypeIndex, [Const] [In] void* pObject);
void NdrMesTypeEncode3([In] [Out] void* Handle, [Const] [In] MIDL_TYPE_PICKLING_INFO* pPicklingInfo, [Const] [In] MIDL_STUBLESS_PROXY_INFO* pProxyInfo, [Const] [In] uint** ArrTypeOffset, [In] uint nTypeIndex, [Const] [In] void* pObject);
void NdrMesTypeDecode3([In] [Out] void* Handle, [Const] [In] MIDL_TYPE_PICKLING_INFO* pPicklingInfo, [Const] [In] MIDL_STUBLESS_PROXY_INFO* pProxyInfo, [Const] [In] uint** ArrTypeOffset, [In] uint nTypeIndex, [In] [Out] void* pObject);
void NdrMesTypeFree3([In] [Out] void* Handle, [Const] [In] MIDL_TYPE_PICKLING_INFO* pPicklingInfo, [Const] [In] MIDL_STUBLESS_PROXY_INFO* pProxyInfo, [Const] [In] uint** ArrTypeOffset, [In] uint nTypeIndex, [In] [Out] void* pObject);
CLIENT_CALL_RETURN NdrMesProcEncodeDecode3([In] [Out] void* Handle, [Const] [In] MIDL_STUBLESS_PROXY_INFO* pProxyInfo, [In] uint nProcNum, [In] [Out] void* pReturnValue, ...);
void NdrMesSimpleTypeDecodeAll([In] [Out] void* Handle, [Const] [In] MIDL_STUBLESS_PROXY_INFO* pProxyInfo, [In] [Out] void* pObject, [In] short Size);
void NdrMesSimpleTypeEncodeAll([In] [Out] void* Handle, [Const] [In] MIDL_STUBLESS_PROXY_INFO* pProxyInfo, [Const] [In] void* pObject, [In] short Size);
nuint NdrMesSimpleTypeAlignSizeAll([In] [Out] void* Handle, [Const] [In] MIDL_STUBLESS_PROXY_INFO* pProxyInfo);
RPC_STATUS RpcCertGeneratePrincipalNameW([Const] [In] CERT_CONTEXT* Context, [In] uint Flags, [Out] ushort** pBuffer);
RPC_STATUS RpcCertGeneratePrincipalNameA([Const] [In] CERT_CONTEXT* Context, [In] uint Flags, [Out] byte** pBuffer);
