HRESULT MFCreateMediaSession([In] IMFAttributes pConfiguration, [Out] IMFMediaSession* ppMediaSession);
HRESULT MFCreatePMPMediaSession([In] uint dwCreationFlags, [In] IMFAttributes pConfiguration, [Out] IMFMediaSession* ppMediaSession, [Out] [Optional] IMFActivate* ppEnablerActivate);
HRESULT MFCreateTopology([Out] IMFTopology* ppTopo);
HRESULT MFCreateTopologyNode([In] MF_TOPOLOGY_TYPE NodeType, [Out] IMFTopologyNode* ppNode);
HRESULT MFGetTopoNodeCurrentType([In] IMFTopologyNode pNode, [In] uint dwStreamIndex, [In] BOOL fOutput, [Out] IMFMediaType* ppType);
HRESULT MFGetService([In] IUnknown punkObject, [Const] [In] Guid* guidService, [Const] [In] Guid* riid, [Out] void** ppvObject);
HRESULT MFCreatePresentationClock([Out] IMFPresentationClock* ppPresentationClock);
HRESULT MFRequireProtectedEnvironment([In] IMFPresentationDescriptor pPresentationDescriptor);
HRESULT MFCreateSimpleTypeHandler([Out] IMFMediaTypeHandler* ppHandler);
HRESULT MFShutdownObject([In] IUnknown pUnk);
HRESULT MFCreateAudioRenderer([In] IMFAttributes pAudioAttributes, [Out] IMFMediaSink* ppSink);
HRESULT MFCreateAudioRendererActivate([Out] IMFActivate* ppActivate);
HRESULT MFCreateVideoRendererActivate([In] HWND hwndVideo, [Out] IMFActivate* ppActivate);
HRESULT MFCreateMPEG4MediaSink([In] IMFByteStream pIByteStream, [In] [Optional] IMFMediaType pVideoMediaType, [In] [Optional] IMFMediaType pAudioMediaType, [Out] IMFMediaSink* ppIMediaSink);
HRESULT MFCreate3GPMediaSink([In] IMFByteStream pIByteStream, [In] [Optional] IMFMediaType pVideoMediaType, [In] [Optional] IMFMediaType pAudioMediaType, [Out] IMFMediaSink* ppIMediaSink);
HRESULT MFCreateMP3MediaSink([In] IMFByteStream pTargetByteStream, [Out] IMFMediaSink* ppMediaSink);
HRESULT MFCreateAC3MediaSink([In] IMFByteStream pTargetByteStream, [In] IMFMediaType pAudioMediaType, [Out] IMFMediaSink* ppMediaSink);
HRESULT MFCreateADTSMediaSink([In] IMFByteStream pTargetByteStream, [In] IMFMediaType pAudioMediaType, [Out] IMFMediaSink* ppMediaSink);
HRESULT MFCreateMuxSink([In] Guid guidOutputSubType, [In] [Optional] IMFAttributes pOutputAttributes, [In] [Optional] IMFByteStream pOutputByteStream, [Out] IMFMediaSink* ppMuxSink);
HRESULT MFCreateFMPEG4MediaSink([In] IMFByteStream pIByteStream, [In] [Optional] IMFMediaType pVideoMediaType, [In] [Optional] IMFMediaType pAudioMediaType, [Out] IMFMediaSink* ppIMediaSink);
HRESULT MFCreateTopoLoader([Out] IMFTopoLoader* ppObj);
HRESULT MFCreateSampleGrabberSinkActivate([In] IMFMediaType pIMFMediaType, [In] IMFSampleGrabberSinkCallback pIMFSampleGrabberSinkCallback, [Out] IMFActivate* ppIActivate);
HRESULT MFCreateStandardQualityManager([Out] IMFQualityManager* ppQualityManager);
HRESULT MFCreateSequencerSource([In] IUnknown pReserved, [Out] IMFSequencerSource* ppSequencerSource);
HRESULT MFCreateSequencerSegmentOffset([In] uint dwId, [In] long hnsOffset, [Out] PROPVARIANT* pvarSegmentOffset);
HRESULT MFCreateAggregateSource([In] IMFCollection pSourceCollection, [Out] IMFMediaSource* ppAggSource);
HRESULT MFCreateCredentialCache([Out] IMFNetCredentialCache* ppCache);
HRESULT MFCreateProxyLocator([Const] [In] PWSTR pszProtocol, [In] IPropertyStore pProxyConfig, [Out] IMFNetProxyLocator* ppProxyLocator);
HRESULT MFCreateNetSchemePlugin([Const] [In] Guid* riid, [In] [Out] void** ppvHandler);
HRESULT MFCreatePMPServer([In] uint dwCreationFlags, [Out] IMFPMPServer* ppPMPServer);
HRESULT MFCreateRemoteDesktopPlugin([Out] IMFRemoteDesktopPlugin* ppPlugin);
HRESULT CreateNamedPropertyStore([Out] INamedPropertyStore* ppStore);
HRESULT MFCreateSampleCopierMFT([Out] IMFTransform* ppCopierMFT);
HRESULT MFCreateTranscodeProfile([Out] IMFTranscodeProfile* ppTranscodeProfile);
HRESULT MFCreateTranscodeTopology([In] IMFMediaSource pSrc, [Const] [In] PWSTR pwszOutputFilePath, [In] IMFTranscodeProfile pProfile, [Out] IMFTopology* ppTranscodeTopo);
HRESULT MFCreateTranscodeTopologyFromByteStream([In] IMFMediaSource pSrc, [In] IMFByteStream pOutputStream, [In] IMFTranscodeProfile pProfile, [Out] IMFTopology* ppTranscodeTopo);
HRESULT MFTranscodeGetAudioOutputAvailableTypes([Const] [In] Guid* guidSubType, [In] uint dwMFTFlags, [In] [Optional] IMFAttributes pCodecConfig, [Out] IMFCollection* ppAvailableTypes);
HRESULT MFCreateTranscodeSinkActivate([Out] IMFActivate* ppActivate);
HRESULT MFEnumDeviceSources([In] IMFAttributes pAttributes, [Out] IMFActivate** pppSourceActivate, [Out] uint* pcSourceActivate);
HRESULT MFCreateDeviceSource([In] IMFAttributes pAttributes, [Out] IMFMediaSource* ppSource);
HRESULT MFCreateDeviceSourceActivate([In] IMFAttributes pAttributes, [Out] IMFActivate* ppActivate);
HRESULT MFCreateProtectedEnvironmentAccess([Out] IMFProtectedEnvironmentAccess* ppAccess);
HRESULT MFLoadSignedLibrary([Const] [In] PWSTR pszName, [Out] IMFSignedLibrary* ppLib);
HRESULT MFGetSystemId([Out] IMFSystemId* ppId);
HRESULT MFGetLocalId([Const] [MemorySize(BytesParamIndex = 1)] [In] byte* verifier, [In] uint size, [Out] PWSTR* id);
HRESULT MFCreateASFContentInfo([Out] IMFASFContentInfo* ppIContentInfo);
HRESULT MFCreateASFIndexer([Out] IMFASFIndexer* ppIIndexer);
HRESULT MFCreateASFIndexerByteStream([In] IMFByteStream pIContentByteStream, [In] ulong cbIndexStartOffset, [Out] IMFByteStream* pIIndexByteStream);
HRESULT MFCreateASFSplitter([Out] IMFASFSplitter* ppISplitter);
HRESULT MFCreateASFProfile([Out] IMFASFProfile* ppIProfile);
HRESULT MFCreateASFProfileFromPresentationDescriptor([In] IMFPresentationDescriptor pIPD, [Out] IMFASFProfile* ppIProfile);
HRESULT MFCreatePresentationDescriptorFromASFProfile([In] IMFASFProfile pIProfile, [Out] IMFPresentationDescriptor* ppIPD);
HRESULT MFCreateASFMultiplexer([Out] IMFASFMultiplexer* ppIMultiplexer);
HRESULT MFCreateASFStreamSelector([In] IMFASFProfile pIASFProfile, [Out] IMFASFStreamSelector* ppSelector);
HRESULT MFCreateASFMediaSink([In] IMFByteStream pIByteStream, [Out] IMFMediaSink* ppIMediaSink);
HRESULT MFCreateASFMediaSinkActivate([Const] [In] PWSTR pwszFileName, [In] IMFASFContentInfo pContentInfo, [Out] IMFActivate* ppIActivate);
HRESULT MFCreateWMVEncoderActivate([In] IMFMediaType pMediaType, [In] IPropertyStore pEncodingConfigurationProperties, [Out] IMFActivate* ppActivate);
HRESULT MFCreateWMAEncoderActivate([In] IMFMediaType pMediaType, [In] IPropertyStore pEncodingConfigurationProperties, [Out] IMFActivate* ppActivate);
HRESULT MFCreateASFStreamingMediaSink([In] IMFByteStream pIByteStream, [Out] IMFMediaSink* ppIMediaSink);
HRESULT MFCreateASFStreamingMediaSinkActivate([In] IMFActivate pByteStreamActivate, [In] IMFASFContentInfo pContentInfo, [Out] IMFActivate* ppIActivate);
HRESULT MFCreateVideoRenderer([Const] [In] Guid* riidRenderer, [Out] [Optional] void** ppVideoRenderer);
HRESULT MFCreateEncryptedMediaExtensionsStoreActivate([In] IMFPMPHostApp pmpHost, [In] IStream objectStream, [Const] [In] PWSTR classId, [Out] IMFActivate* activate);
