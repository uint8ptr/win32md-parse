uint DsMakeSpnW([Const] [In] PWSTR ServiceClass, [Const] [In] PWSTR ServiceName, [Const] [In] [Optional] PWSTR InstanceName, [In] ushort InstancePort, [Const] [In] [Optional] PWSTR Referrer, [In] [Out] uint* pcSpnLength, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR pszSpn);
uint DsMakeSpnA([Const] [In] PSTR ServiceClass, [Const] [In] PSTR ServiceName, [Const] [In] [Optional] PSTR InstanceName, [In] ushort InstancePort, [Const] [In] [Optional] PSTR Referrer, [In] [Out] uint* pcSpnLength, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR pszSpn);
uint DsCrackSpnA([Const] [In] PSTR pszSpn, [In] [Out] [Optional] uint* pcServiceClass, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PSTR ServiceClass, [In] [Out] [Optional] uint* pcServiceName, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR ServiceName, [In] [Out] [Optional] uint* pcInstanceName, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR InstanceName, [Out] [Optional] ushort* pInstancePort);
uint DsCrackSpnW([Const] [In] PWSTR pszSpn, [In] [Out] [Optional] uint* pcServiceClass, [NativeArrayInfo(CountParamIndex = 1)] [Out] [Optional] PWSTR ServiceClass, [In] [Out] [Optional] uint* pcServiceName, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR ServiceName, [In] [Out] [Optional] uint* pcInstanceName, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR InstanceName, [Out] [Optional] ushort* pInstancePort);
uint DsQuoteRdnValueW([In] uint cUnquotedRdnValueLength, [Const] [NativeArrayInfo(CountParamIndex = 0)] [In] PWSTR psUnquotedRdnValue, [In] [Out] uint* pcQuotedRdnValueLength, [NotNullTerminated] [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR psQuotedRdnValue);
uint DsQuoteRdnValueA([In] uint cUnquotedRdnValueLength, [Const] [NotNullTerminated] [NativeArrayInfo(CountParamIndex = 0)] [In] PSTR psUnquotedRdnValue, [In] [Out] uint* pcQuotedRdnValueLength, [NotNullTerminated] [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR psQuotedRdnValue);
uint DsUnquoteRdnValueW([In] uint cQuotedRdnValueLength, [Const] [NativeArrayInfo(CountParamIndex = 0)] [In] PWSTR psQuotedRdnValue, [In] [Out] uint* pcUnquotedRdnValueLength, [NotNullTerminated] [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR psUnquotedRdnValue);
uint DsUnquoteRdnValueA([In] uint cQuotedRdnValueLength, [Const] [NotNullTerminated] [NativeArrayInfo(CountParamIndex = 0)] [In] PSTR psQuotedRdnValue, [In] [Out] uint* pcUnquotedRdnValueLength, [NotNullTerminated] [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR psUnquotedRdnValue);
uint DsGetRdnW([NativeArrayInfo(CountParamIndex = 1)] [In] [Out] PWSTR* ppDN, [In] [Out] uint* pcDN, [Out] PWSTR* ppKey, [Out] uint* pcKey, [Out] PWSTR* ppVal, [Out] uint* pcVal);
BOOL DsCrackUnquotedMangledRdnW([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PWSTR pszRDN, [In] uint cchRDN, [Out] [Optional] Guid* pGuid, [Out] [Optional] DS_MANGLE_FOR* peDsMangleFor);
BOOL DsCrackUnquotedMangledRdnA([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PSTR pszRDN, [In] uint cchRDN, [Out] [Optional] Guid* pGuid, [Out] [Optional] DS_MANGLE_FOR* peDsMangleFor);
BOOL DsIsMangledRdnValueW([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PWSTR pszRdn, [In] uint cRdn, [In] DS_MANGLE_FOR eDsMangleForDesired);
BOOL DsIsMangledRdnValueA([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PSTR pszRdn, [In] uint cRdn, [In] DS_MANGLE_FOR eDsMangleForDesired);
BOOL DsIsMangledDnA([Const] [In] PSTR pszDn, [In] DS_MANGLE_FOR eDsMangleFor);
BOOL DsIsMangledDnW([Const] [In] PWSTR pszDn, [In] DS_MANGLE_FOR eDsMangleFor);
uint DsCrackSpn2A([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PSTR pszSpn, [In] uint cSpn, [In] [Out] [Optional] uint* pcServiceClass, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR ServiceClass, [In] [Out] [Optional] uint* pcServiceName, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PSTR ServiceName, [In] [Out] [Optional] uint* pcInstanceName, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PSTR InstanceName, [Out] [Optional] ushort* pInstancePort);
uint DsCrackSpn2W([Const] [NativeArrayInfo(CountParamIndex = 1)] [In] PWSTR pszSpn, [In] uint cSpn, [In] [Out] [Optional] uint* pcServiceClass, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR ServiceClass, [In] [Out] [Optional] uint* pcServiceName, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] PWSTR ServiceName, [In] [Out] [Optional] uint* pcInstanceName, [NativeArrayInfo(CountParamIndex = 6)] [Out] [Optional] PWSTR InstanceName, [Out] [Optional] ushort* pInstancePort);
uint DsCrackSpn3W([Const] [In] PWSTR pszSpn, [In] uint cSpn, [In] [Out] uint* pcHostName, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR HostName, [In] [Out] uint* pcInstanceName, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR InstanceName, [In] [Out] ushort* pPortNumber, [In] [Out] uint* pcDomainName, [NativeArrayInfo(CountParamIndex = 7)] [Out] PWSTR DomainName, [In] [Out] uint* pcRealmName, [NativeArrayInfo(CountParamIndex = 9)] [Out] PWSTR RealmName);
uint DsCrackSpn4W([Const] [In] PWSTR pszSpn, [In] uint cSpn, [In] [Out] uint* pcHostName, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR HostName, [In] [Out] uint* pcInstanceName, [NativeArrayInfo(CountParamIndex = 4)] [Out] PWSTR InstanceName, [In] [Out] uint* pcPortName, [NativeArrayInfo(CountParamIndex = 6)] [Out] PWSTR PortName, [In] [Out] uint* pcDomainName, [NativeArrayInfo(CountParamIndex = 8)] [Out] PWSTR DomainName, [In] [Out] uint* pcRealmName, [NativeArrayInfo(CountParamIndex = 10)] [Out] PWSTR RealmName);
