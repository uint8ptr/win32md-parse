int WSASetSocketSecurity([In] SOCKET Socket, [Const] [MemorySize(BytesParamIndex = 2)] [In] [Optional] SOCKET_SECURITY_SETTINGS* SecuritySettings, [In] uint SecuritySettingsLen, [In] [Optional] OVERLAPPED* Overlapped, [In] [Optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine);
int WSAQuerySocketSecurity([In] SOCKET Socket, [Const] [MemorySize(BytesParamIndex = 2)] [In] [Optional] SOCKET_SECURITY_QUERY_TEMPLATE* SecurityQueryTemplate, [In] uint SecurityQueryTemplateLen, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] SOCKET_SECURITY_QUERY_INFO* SecurityQueryInfo, [In] [Out] uint* SecurityQueryInfoLen, [In] [Optional] OVERLAPPED* Overlapped, [In] [Optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine);
int WSASetSocketPeerTargetName([In] SOCKET Socket, [Const] [MemorySize(BytesParamIndex = 2)] [In] SOCKET_PEER_TARGET_NAME* PeerTargetName, [In] uint PeerTargetNameLen, [In] [Optional] OVERLAPPED* Overlapped, [In] [Optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine);
int WSADeleteSocketPeerTargetName([In] SOCKET Socket, [Const] [MemorySize(BytesParamIndex = 2)] [In] SOCKADDR* PeerAddr, [In] uint PeerAddrLen, [In] [Optional] OVERLAPPED* Overlapped, [In] [Optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine);
int WSAImpersonateSocketPeer([In] SOCKET Socket, [Const] [MemorySize(BytesParamIndex = 2)] [In] [Optional] SOCKADDR* PeerAddr, [In] uint PeerAddrLen);
int WSARevertImpersonation();
void FwpmFreeMemory0([In] [Out] void** p);
uint FwpmEngineOpen0([Const] [In] [Optional] PWSTR serverName, [In] uint authnService, [In] [Optional] SEC_WINNT_AUTH_IDENTITY_W* authIdentity, [Const] [In] [Optional] FWPM_SESSION0* session, [Out] HANDLE* engineHandle);
uint FwpmEngineClose0([In] HANDLE engineHandle);
uint FwpmEngineGetOption0([In] HANDLE engineHandle, [In] FWPM_ENGINE_OPTION option, [Out] FWP_VALUE0** value);
uint FwpmEngineSetOption0([In] HANDLE engineHandle, [In] FWPM_ENGINE_OPTION option, [Const] [In] FWP_VALUE0* newValue);
uint FwpmEngineGetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint FwpmEngineSetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint FwpmSessionCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] FWPM_SESSION_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint FwpmSessionEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_SESSION0*** entries, [Out] uint* numEntriesReturned);
uint FwpmSessionDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint FwpmTransactionBegin0([In] HANDLE engineHandle, [In] uint flags);
uint FwpmTransactionCommit0([In] HANDLE engineHandle);
uint FwpmTransactionAbort0([In] HANDLE engineHandle);
uint FwpmProviderAdd0([In] HANDLE engineHandle, [Const] [In] FWPM_PROVIDER0* provider, [In] [Optional] PSECURITY_DESCRIPTOR sd);
uint FwpmProviderDeleteByKey0([In] HANDLE engineHandle, [Const] [In] Guid* key);
uint FwpmProviderGetByKey0([In] HANDLE engineHandle, [Const] [In] Guid* key, [Out] FWPM_PROVIDER0** provider);
uint FwpmProviderCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] FWPM_PROVIDER_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint FwpmProviderEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_PROVIDER0*** entries, [Out] uint* numEntriesReturned);
uint FwpmProviderDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint FwpmProviderGetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [In] [Optional] Guid* key, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint FwpmProviderSetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [In] [Optional] Guid* key, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint FwpmProviderSubscribeChanges0([In] HANDLE engineHandle, [Const] [In] FWPM_PROVIDER_SUBSCRIPTION0* subscription, [In] FWPM_PROVIDER_CHANGE_CALLBACK0 callback, [In] [Optional] void* context, [Out] HANDLE* changeHandle);
uint FwpmProviderUnsubscribeChanges0([In] HANDLE engineHandle, [In] HANDLE changeHandle);
uint FwpmProviderSubscriptionsGet0([In] HANDLE engineHandle, [Out] FWPM_PROVIDER_SUBSCRIPTION0*** entries, [Out] uint* numEntries);
uint FwpmProviderContextAdd0([In] HANDLE engineHandle, [Const] [In] FWPM_PROVIDER_CONTEXT0* providerContext, [In] [Optional] PSECURITY_DESCRIPTOR sd, [Out] [Optional] ulong* id);
uint FwpmProviderContextAdd1([In] HANDLE engineHandle, [Const] [In] FWPM_PROVIDER_CONTEXT1* providerContext, [In] [Optional] PSECURITY_DESCRIPTOR sd, [Out] [Optional] ulong* id);
uint FwpmProviderContextAdd2([In] HANDLE engineHandle, [Const] [In] FWPM_PROVIDER_CONTEXT2* providerContext, [In] [Optional] PSECURITY_DESCRIPTOR sd, [Out] [Optional] ulong* id);
uint FwpmProviderContextAdd3([In] HANDLE engineHandle, [Const] [In] FWPM_PROVIDER_CONTEXT3* providerContext, [In] [Optional] PSECURITY_DESCRIPTOR sd, [Out] [Optional] ulong* id);
uint FwpmProviderContextDeleteById0([In] HANDLE engineHandle, [In] ulong id);
uint FwpmProviderContextDeleteByKey0([In] HANDLE engineHandle, [Const] [In] Guid* key);
uint FwpmProviderContextGetById0([In] HANDLE engineHandle, [In] ulong id, [Out] FWPM_PROVIDER_CONTEXT0** providerContext);
uint FwpmProviderContextGetById1([In] HANDLE engineHandle, [In] ulong id, [Out] FWPM_PROVIDER_CONTEXT1** providerContext);
uint FwpmProviderContextGetById2([In] HANDLE engineHandle, [In] ulong id, [Out] FWPM_PROVIDER_CONTEXT2** providerContext);
uint FwpmProviderContextGetById3([In] HANDLE engineHandle, [In] ulong id, [Out] FWPM_PROVIDER_CONTEXT3** providerContext);
uint FwpmProviderContextGetByKey0([In] HANDLE engineHandle, [Const] [In] Guid* key, [Out] FWPM_PROVIDER_CONTEXT0** providerContext);
uint FwpmProviderContextGetByKey1([In] HANDLE engineHandle, [Const] [In] Guid* key, [Out] FWPM_PROVIDER_CONTEXT1** providerContext);
uint FwpmProviderContextGetByKey2([In] HANDLE engineHandle, [Const] [In] Guid* key, [Out] FWPM_PROVIDER_CONTEXT2** providerContext);
uint FwpmProviderContextGetByKey3([In] HANDLE engineHandle, [Const] [In] Guid* key, [Out] FWPM_PROVIDER_CONTEXT3** providerContext);
uint FwpmProviderContextCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint FwpmProviderContextEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_PROVIDER_CONTEXT0*** entries, [Out] uint* numEntriesReturned);
uint FwpmProviderContextEnum1([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_PROVIDER_CONTEXT1*** entries, [Out] uint* numEntriesReturned);
uint FwpmProviderContextEnum2([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_PROVIDER_CONTEXT2*** entries, [Out] uint* numEntriesReturned);
uint FwpmProviderContextEnum3([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_PROVIDER_CONTEXT3*** entries, [Out] uint* numEntriesReturned);
uint FwpmProviderContextDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint FwpmProviderContextGetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [In] [Optional] Guid* key, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint FwpmProviderContextSetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [In] [Optional] Guid* key, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint FwpmProviderContextSubscribeChanges0([In] HANDLE engineHandle, [Const] [In] FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0* subscription, [In] FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0 callback, [In] [Optional] void* context, [Out] HANDLE* changeHandle);
uint FwpmProviderContextUnsubscribeChanges0([In] HANDLE engineHandle, [In] HANDLE changeHandle);
uint FwpmProviderContextSubscriptionsGet0([In] HANDLE engineHandle, [Out] FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0*** entries, [Out] uint* numEntries);
uint FwpmSubLayerAdd0([In] HANDLE engineHandle, [Const] [In] FWPM_SUBLAYER0* subLayer, [In] [Optional] PSECURITY_DESCRIPTOR sd);
uint FwpmSubLayerDeleteByKey0([In] HANDLE engineHandle, [Const] [In] Guid* key);
uint FwpmSubLayerGetByKey0([In] HANDLE engineHandle, [Const] [In] Guid* key, [Out] FWPM_SUBLAYER0** subLayer);
uint FwpmSubLayerCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] FWPM_SUBLAYER_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint FwpmSubLayerEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_SUBLAYER0*** entries, [Out] uint* numEntriesReturned);
uint FwpmSubLayerDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint FwpmSubLayerGetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [In] [Optional] Guid* key, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint FwpmSubLayerSetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [In] [Optional] Guid* key, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint FwpmSubLayerSubscribeChanges0([In] HANDLE engineHandle, [Const] [In] FWPM_SUBLAYER_SUBSCRIPTION0* subscription, [In] FWPM_SUBLAYER_CHANGE_CALLBACK0 callback, [In] [Optional] void* context, [Out] HANDLE* changeHandle);
uint FwpmSubLayerUnsubscribeChanges0([In] HANDLE engineHandle, [In] HANDLE changeHandle);
uint FwpmSubLayerSubscriptionsGet0([In] HANDLE engineHandle, [Out] FWPM_SUBLAYER_SUBSCRIPTION0*** entries, [Out] uint* numEntries);
uint FwpmLayerGetById0([In] HANDLE engineHandle, [In] ushort id, [Out] FWPM_LAYER0** layer);
uint FwpmLayerGetByKey0([In] HANDLE engineHandle, [Const] [In] Guid* key, [Out] FWPM_LAYER0** layer);
uint FwpmLayerCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] FWPM_LAYER_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint FwpmLayerEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_LAYER0*** entries, [Out] uint* numEntriesReturned);
uint FwpmLayerDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint FwpmLayerGetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [In] [Optional] Guid* key, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint FwpmLayerSetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [In] [Optional] Guid* key, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint FwpmCalloutAdd0([In] HANDLE engineHandle, [Const] [In] FWPM_CALLOUT0* callout, [In] [Optional] PSECURITY_DESCRIPTOR sd, [Out] [Optional] uint* id);
uint FwpmCalloutDeleteById0([In] HANDLE engineHandle, [In] uint id);
uint FwpmCalloutDeleteByKey0([In] HANDLE engineHandle, [Const] [In] Guid* key);
uint FwpmCalloutGetById0([In] HANDLE engineHandle, [In] uint id, [Out] FWPM_CALLOUT0** callout);
uint FwpmCalloutGetByKey0([In] HANDLE engineHandle, [Const] [In] Guid* key, [Out] FWPM_CALLOUT0** callout);
uint FwpmCalloutCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] FWPM_CALLOUT_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint FwpmCalloutEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_CALLOUT0*** entries, [Out] uint* numEntriesReturned);
uint FwpmCalloutDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint FwpmCalloutGetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [In] [Optional] Guid* key, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint FwpmCalloutSetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [In] [Optional] Guid* key, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint FwpmCalloutSubscribeChanges0([In] HANDLE engineHandle, [Const] [In] FWPM_CALLOUT_SUBSCRIPTION0* subscription, [In] FWPM_CALLOUT_CHANGE_CALLBACK0 callback, [In] [Optional] void* context, [Out] HANDLE* changeHandle);
uint FwpmCalloutUnsubscribeChanges0([In] HANDLE engineHandle, [In] HANDLE changeHandle);
uint FwpmCalloutSubscriptionsGet0([In] HANDLE engineHandle, [Out] FWPM_CALLOUT_SUBSCRIPTION0*** entries, [Out] uint* numEntries);
uint FwpmFilterAdd0([In] HANDLE engineHandle, [Const] [In] FWPM_FILTER0* filter, [In] [Optional] PSECURITY_DESCRIPTOR sd, [Out] [Optional] ulong* id);
uint FwpmFilterDeleteById0([In] HANDLE engineHandle, [In] ulong id);
uint FwpmFilterDeleteByKey0([In] HANDLE engineHandle, [Const] [In] Guid* key);
uint FwpmFilterGetById0([In] HANDLE engineHandle, [In] ulong id, [Out] FWPM_FILTER0** filter);
uint FwpmFilterGetByKey0([In] HANDLE engineHandle, [Const] [In] Guid* key, [Out] FWPM_FILTER0** filter);
uint FwpmFilterCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] FWPM_FILTER_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint FwpmFilterEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_FILTER0*** entries, [Out] uint* numEntriesReturned);
uint FwpmFilterDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint FwpmFilterGetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [In] [Optional] Guid* key, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint FwpmFilterSetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [In] [Optional] Guid* key, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint FwpmFilterSubscribeChanges0([In] HANDLE engineHandle, [Const] [In] FWPM_FILTER_SUBSCRIPTION0* subscription, [In] FWPM_FILTER_CHANGE_CALLBACK0 callback, [In] [Optional] void* context, [Out] HANDLE* changeHandle);
uint FwpmFilterUnsubscribeChanges0([In] HANDLE engineHandle, [In] HANDLE changeHandle);
uint FwpmFilterSubscriptionsGet0([In] HANDLE engineHandle, [Out] FWPM_FILTER_SUBSCRIPTION0*** entries, [Out] uint* numEntries);
uint FwpmGetAppIdFromFileName0([Const] [In] PWSTR fileName, [Out] FWP_BYTE_BLOB** appId);
uint FwpmIPsecTunnelAdd0([In] HANDLE engineHandle, [In] uint flags, [Const] [In] [Optional] FWPM_PROVIDER_CONTEXT0* mainModePolicy, [Const] [In] FWPM_PROVIDER_CONTEXT0* tunnelPolicy, [In] uint numFilterConditions, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] FWPM_FILTER_CONDITION0* filterConditions, [In] [Optional] PSECURITY_DESCRIPTOR sd);
uint FwpmIPsecTunnelAdd1([In] HANDLE engineHandle, [In] uint flags, [Const] [In] [Optional] FWPM_PROVIDER_CONTEXT1* mainModePolicy, [Const] [In] FWPM_PROVIDER_CONTEXT1* tunnelPolicy, [In] uint numFilterConditions, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] FWPM_FILTER_CONDITION0* filterConditions, [Const] [In] [Optional] Guid* keyModKey, [In] [Optional] PSECURITY_DESCRIPTOR sd);
uint FwpmIPsecTunnelAdd2([In] HANDLE engineHandle, [In] uint flags, [Const] [In] [Optional] FWPM_PROVIDER_CONTEXT2* mainModePolicy, [Const] [In] FWPM_PROVIDER_CONTEXT2* tunnelPolicy, [In] uint numFilterConditions, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] FWPM_FILTER_CONDITION0* filterConditions, [Const] [In] [Optional] Guid* keyModKey, [In] [Optional] PSECURITY_DESCRIPTOR sd);
uint FwpmIPsecTunnelAdd3([In] HANDLE engineHandle, [In] uint flags, [Const] [In] [Optional] FWPM_PROVIDER_CONTEXT3* mainModePolicy, [Const] [In] FWPM_PROVIDER_CONTEXT3* tunnelPolicy, [In] uint numFilterConditions, [Const] [NativeArrayInfo(CountParamIndex = 4)] [In] FWPM_FILTER_CONDITION0* filterConditions, [Const] [In] [Optional] Guid* keyModKey, [In] [Optional] PSECURITY_DESCRIPTOR sd);
uint FwpmIPsecTunnelDeleteByKey0([In] HANDLE engineHandle, [Const] [In] Guid* key);
uint IPsecGetStatistics0([In] HANDLE engineHandle, [Out] IPSEC_STATISTICS0* ipsecStatistics);
uint IPsecGetStatistics1([In] HANDLE engineHandle, [Out] IPSEC_STATISTICS1* ipsecStatistics);
uint IPsecSaContextCreate0([In] HANDLE engineHandle, [Const] [In] IPSEC_TRAFFIC0* outboundTraffic, [Out] [Optional] ulong* inboundFilterId, [Out] ulong* id);
uint IPsecSaContextCreate1([In] HANDLE engineHandle, [Const] [In] IPSEC_TRAFFIC1* outboundTraffic, [Const] [In] [Optional] IPSEC_VIRTUAL_IF_TUNNEL_INFO0* virtualIfTunnelInfo, [Out] [Optional] ulong* inboundFilterId, [Out] ulong* id);
uint IPsecSaContextDeleteById0([In] HANDLE engineHandle, [In] ulong id);
uint IPsecSaContextGetById0([In] HANDLE engineHandle, [In] ulong id, [Out] IPSEC_SA_CONTEXT0** saContext);
uint IPsecSaContextGetById1([In] HANDLE engineHandle, [In] ulong id, [Out] IPSEC_SA_CONTEXT1** saContext);
uint IPsecSaContextGetSpi0([In] HANDLE engineHandle, [In] ulong id, [Const] [In] IPSEC_GETSPI0* getSpi, [Out] uint* inboundSpi);
uint IPsecSaContextGetSpi1([In] HANDLE engineHandle, [In] ulong id, [Const] [In] IPSEC_GETSPI1* getSpi, [Out] uint* inboundSpi);
uint IPsecSaContextSetSpi0([In] HANDLE engineHandle, [In] ulong id, [Const] [In] IPSEC_GETSPI1* getSpi, [In] uint inboundSpi);
uint IPsecSaContextAddInbound0([In] HANDLE engineHandle, [In] ulong id, [Const] [In] IPSEC_SA_BUNDLE0* inboundBundle);
uint IPsecSaContextAddOutbound0([In] HANDLE engineHandle, [In] ulong id, [Const] [In] IPSEC_SA_BUNDLE0* outboundBundle);
uint IPsecSaContextAddInbound1([In] HANDLE engineHandle, [In] ulong id, [Const] [In] IPSEC_SA_BUNDLE1* inboundBundle);
uint IPsecSaContextAddOutbound1([In] HANDLE engineHandle, [In] ulong id, [Const] [In] IPSEC_SA_BUNDLE1* outboundBundle);
uint IPsecSaContextExpire0([In] HANDLE engineHandle, [In] ulong id);
uint IPsecSaContextUpdate0([In] HANDLE engineHandle, [In] ulong flags, [Const] [In] IPSEC_SA_CONTEXT1* newValues);
uint IPsecSaContextCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] IPSEC_SA_CONTEXT_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint IPsecSaContextEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] IPSEC_SA_CONTEXT0*** entries, [Out] uint* numEntriesReturned);
uint IPsecSaContextEnum1([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] IPSEC_SA_CONTEXT1*** entries, [Out] uint* numEntriesReturned);
uint IPsecSaContextDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint IPsecSaContextSubscribe0([In] HANDLE engineHandle, [Const] [In] IPSEC_SA_CONTEXT_SUBSCRIPTION0* subscription, [In] IPSEC_SA_CONTEXT_CALLBACK0 callback, [In] [Optional] void* context, [Out] HANDLE* eventsHandle);
uint IPsecSaContextUnsubscribe0([In] HANDLE engineHandle, [In] HANDLE eventsHandle);
uint IPsecSaContextSubscriptionsGet0([In] HANDLE engineHandle, [Out] IPSEC_SA_CONTEXT_SUBSCRIPTION0*** entries, [Out] uint* numEntries);
uint IPsecSaCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] IPSEC_SA_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint IPsecSaEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] IPSEC_SA_DETAILS0*** entries, [Out] uint* numEntriesReturned);
uint IPsecSaEnum1([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] IPSEC_SA_DETAILS1*** entries, [Out] uint* numEntriesReturned);
uint IPsecSaDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint IPsecSaDbGetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint IPsecSaDbSetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint IPsecDospGetStatistics0([In] HANDLE engineHandle, [Out] IPSEC_DOSP_STATISTICS0* idpStatistics);
uint IPsecDospStateCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] IPSEC_DOSP_STATE_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint IPsecDospStateEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] IPSEC_DOSP_STATE0*** entries, [Out] uint* numEntries);
uint IPsecDospStateDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint IPsecDospGetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint IPsecDospSetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint IPsecKeyManagerAddAndRegister0([In] HANDLE engineHandle, [Const] [In] IPSEC_KEY_MANAGER0* keyManager, [Const] [In] IPSEC_KEY_MANAGER_CALLBACKS0* keyManagerCallbacks, [Out] HANDLE* keyMgmtHandle);
uint IPsecKeyManagerUnregisterAndDelete0([In] HANDLE engineHandle, [In] HANDLE keyMgmtHandle);
uint IPsecKeyManagersGet0([In] HANDLE engineHandle, [Out] IPSEC_KEY_MANAGER0*** entries, [Out] uint* numEntries);
uint IPsecKeyManagerGetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [Reserved] [In] void* reserved, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint IPsecKeyManagerSetSecurityInfoByKey0([In] HANDLE engineHandle, [Const] [Reserved] [In] void* reserved, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint IkeextGetStatistics0([In] HANDLE engineHandle, [Out] IKEEXT_STATISTICS0* ikeextStatistics);
uint IkeextGetStatistics1([In] HANDLE engineHandle, [Out] IKEEXT_STATISTICS1* ikeextStatistics);
uint IkeextSaDeleteById0([In] HANDLE engineHandle, [In] ulong id);
uint IkeextSaGetById0([In] HANDLE engineHandle, [In] ulong id, [Out] IKEEXT_SA_DETAILS0** sa);
uint IkeextSaGetById1([In] HANDLE engineHandle, [In] ulong id, [In] [Optional] Guid* saLookupContext, [Out] IKEEXT_SA_DETAILS1** sa);
uint IkeextSaGetById2([In] HANDLE engineHandle, [In] ulong id, [In] [Optional] Guid* saLookupContext, [Out] IKEEXT_SA_DETAILS2** sa);
uint IkeextSaCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] IKEEXT_SA_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint IkeextSaEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] IKEEXT_SA_DETAILS0*** entries, [Out] uint* numEntriesReturned);
uint IkeextSaEnum1([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] IKEEXT_SA_DETAILS1*** entries, [Out] uint* numEntriesReturned);
uint IkeextSaEnum2([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] IKEEXT_SA_DETAILS2*** entries, [Out] uint* numEntriesReturned);
uint IkeextSaDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint IkeextSaDbGetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint IkeextSaDbSetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint FwpmNetEventCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] FWPM_NET_EVENT_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint FwpmNetEventEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_NET_EVENT0*** entries, [Out] uint* numEntriesReturned);
uint FwpmNetEventEnum1([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_NET_EVENT1*** entries, [Out] uint* numEntriesReturned);
uint FwpmNetEventEnum2([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_NET_EVENT2*** entries, [Out] uint* numEntriesReturned);
uint FwpmNetEventEnum3([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_NET_EVENT3*** entries, [Out] uint* numEntriesReturned);
uint FwpmNetEventEnum4([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_NET_EVENT4*** entries, [Out] uint* numEntriesReturned);
uint FwpmNetEventEnum5([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_NET_EVENT5*** entries, [Out] uint* numEntriesReturned);
uint FwpmNetEventDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint FwpmNetEventsGetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint FwpmNetEventsSetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint FwpmNetEventSubscribe0([In] HANDLE engineHandle, [Const] [In] FWPM_NET_EVENT_SUBSCRIPTION0* subscription, [In] FWPM_NET_EVENT_CALLBACK0 callback, [In] [Optional] void* context, [Out] HANDLE* eventsHandle);
uint FwpmNetEventUnsubscribe0([In] HANDLE engineHandle, [In] HANDLE eventsHandle);
uint FwpmNetEventSubscriptionsGet0([In] HANDLE engineHandle, [Out] FWPM_NET_EVENT_SUBSCRIPTION0*** entries, [Out] uint* numEntries);
uint FwpmNetEventSubscribe1([In] HANDLE engineHandle, [Const] [In] FWPM_NET_EVENT_SUBSCRIPTION0* subscription, [In] FWPM_NET_EVENT_CALLBACK1 callback, [In] [Optional] void* context, [Out] HANDLE* eventsHandle);
uint FwpmNetEventSubscribe2([In] HANDLE engineHandle, [Const] [In] FWPM_NET_EVENT_SUBSCRIPTION0* subscription, [In] FWPM_NET_EVENT_CALLBACK2 callback, [In] [Optional] void* context, [Out] HANDLE* eventsHandle);
uint FwpmNetEventSubscribe3([In] HANDLE engineHandle, [Const] [In] FWPM_NET_EVENT_SUBSCRIPTION0* subscription, [In] FWPM_NET_EVENT_CALLBACK3 callback, [In] [Optional] void* context, [Out] HANDLE* eventsHandle);
uint FwpmNetEventSubscribe4([In] HANDLE engineHandle, [Const] [In] FWPM_NET_EVENT_SUBSCRIPTION0* subscription, [In] FWPM_NET_EVENT_CALLBACK4 callback, [In] [Optional] void* context, [Out] HANDLE* eventsHandle);
uint FwpmDynamicKeywordSubscribe0([In] uint flags, [In] FWPM_DYNAMIC_KEYWORD_CALLBACK0 callback, [In] [Optional] void* context, [Out] HANDLE* subscriptionHandle);
uint FwpmDynamicKeywordUnsubscribe0([In] HANDLE subscriptionHandle);
uint FwpmSystemPortsGet0([In] [Optional] HANDLE engineHandle, [Out] FWPM_SYSTEM_PORTS0** sysPorts);
uint FwpmSystemPortsSubscribe0([In] [Optional] HANDLE engineHandle, [Reserved] [In] [Out] void* reserved, [In] FWPM_SYSTEM_PORTS_CALLBACK0 callback, [In] [Optional] void* context, [Out] HANDLE* sysPortsHandle);
uint FwpmSystemPortsUnsubscribe0([In] [Optional] HANDLE engineHandle, [In] HANDLE sysPortsHandle);
uint FwpmConnectionGetById0([In] HANDLE engineHandle, [In] ulong id, [Out] FWPM_CONNECTION0** connection);
uint FwpmConnectionEnum0([In] HANDLE engineHandle, [In] HANDLE enumHandle, [In] uint numEntriesRequested, [Out] FWPM_CONNECTION0*** entries, [Out] uint* numEntriesReturned);
uint FwpmConnectionCreateEnumHandle0([In] HANDLE engineHandle, [Const] [In] [Optional] FWPM_CONNECTION_ENUM_TEMPLATE0* enumTemplate, [Out] HANDLE* enumHandle);
uint FwpmConnectionDestroyEnumHandle0([In] HANDLE engineHandle, [In] HANDLE enumHandle);
uint FwpmConnectionGetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint FwpmConnectionSetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
uint FwpmConnectionSubscribe0([In] HANDLE engineHandle, [Const] [In] FWPM_CONNECTION_SUBSCRIPTION0* subscription, [In] FWPM_CONNECTION_CALLBACK0 callback, [In] [Optional] void* context, [Out] HANDLE* eventsHandle);
uint FwpmConnectionUnsubscribe0([In] HANDLE engineHandle, [In] HANDLE eventsHandle);
uint FwpmvSwitchEventSubscribe0([In] HANDLE engineHandle, [Const] [In] FWPM_VSWITCH_EVENT_SUBSCRIPTION0* subscription, [In] FWPM_VSWITCH_EVENT_CALLBACK0 callback, [In] [Optional] void* context, [Out] HANDLE* subscriptionHandle);
uint FwpmvSwitchEventUnsubscribe0([In] HANDLE engineHandle, [In] HANDLE subscriptionHandle);
uint FwpmvSwitchEventsGetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Out] [Optional] PSID* sidOwner, [Out] [Optional] PSID* sidGroup, [Out] [Optional] ACL** dacl, [Out] [Optional] ACL** sacl, [Out] PSECURITY_DESCRIPTOR* securityDescriptor);
uint FwpmvSwitchEventsSetSecurityInfo0([In] HANDLE engineHandle, [In] uint securityInfo, [Const] [In] [Optional] SID* sidOwner, [Const] [In] [Optional] SID* sidGroup, [Const] [In] [Optional] ACL* dacl, [Const] [In] [Optional] ACL* sacl);
