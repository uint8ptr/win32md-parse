int ShellMessageBoxA([In] [Optional] HINSTANCE hAppInst, [In] [Optional] HWND hWnd, [Const] [In] PSTR lpcText, [Const] [In] [Optional] PSTR lpcTitle, [In] MESSAGEBOX_STYLE fuStyle, ...);
int ShellMessageBoxW([In] [Optional] HINSTANCE hAppInst, [In] [Optional] HWND hWnd, [Const] [In] PWSTR lpcText, [Const] [In] [Optional] PWSTR lpcTitle, [In] MESSAGEBOX_STYLE fuStyle, ...);
PSTR StrChrA([Const] [In] PSTR pszStart, [In] ushort wMatch);
PWSTR StrChrW([Const] [In] PWSTR pszStart, [In] wchar wMatch);
PSTR StrChrIA([Const] [In] PSTR pszStart, [In] ushort wMatch);
PWSTR StrChrIW([Const] [In] PWSTR pszStart, [In] wchar wMatch);
PWSTR StrChrNW([Const] [In] PWSTR pszStart, [In] wchar wMatch, [In] uint cchMax);
PWSTR StrChrNIW([Const] [In] PWSTR pszStart, [In] wchar wMatch, [In] uint cchMax);
int StrCmpNA([Const] [In] PSTR psz1, [Const] [In] PSTR psz2, [In] int nChar);
int StrCmpNW([Const] [In] PWSTR psz1, [Const] [In] PWSTR psz2, [In] int nChar);
int StrCmpNIA([Const] [In] PSTR psz1, [Const] [In] PSTR psz2, [In] int nChar);
int StrCmpNIW([Const] [In] PWSTR psz1, [Const] [In] PWSTR psz2, [In] int nChar);
int StrCSpnA([Const] [In] PSTR pszStr, [Const] [In] PSTR pszSet);
int StrCSpnW([Const] [In] PWSTR pszStr, [Const] [In] PWSTR pszSet);
int StrCSpnIA([Const] [In] PSTR pszStr, [Const] [In] PSTR pszSet);
int StrCSpnIW([Const] [In] PWSTR pszStr, [Const] [In] PWSTR pszSet);
PSTR StrDupA([Const] [In] PSTR pszSrch);
PWSTR StrDupW([Const] [In] PWSTR pszSrch);
HRESULT StrFormatByteSizeEx([In] ulong ull, [In] SFBS_FLAGS flags, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pszBuf, [In] uint cchBuf);
PSTR StrFormatByteSizeA([In] uint dw, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszBuf, [In] uint cchBuf);
PSTR StrFormatByteSize64A([In] long qdw, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszBuf, [In] uint cchBuf);
PWSTR StrFormatByteSizeW([In] long qdw, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszBuf, [In] uint cchBuf);
PWSTR StrFormatKBSizeW([In] long qdw, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszBuf, [In] uint cchBuf);
PSTR StrFormatKBSizeA([In] long qdw, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszBuf, [In] uint cchBuf);
int StrFromTimeIntervalA([NativeArrayInfo(CountParamIndex = 1)] [Out] PSTR pszOut, [In] uint cchMax, [In] uint dwTimeMS, [In] int digits);
int StrFromTimeIntervalW([NativeArrayInfo(CountParamIndex = 1)] [Out] PWSTR pszOut, [In] uint cchMax, [In] uint dwTimeMS, [In] int digits);
BOOL StrIsIntlEqualA([In] BOOL fCaseSens, [Const] [In] PSTR pszString1, [Const] [In] PSTR pszString2, [In] int nChar);
BOOL StrIsIntlEqualW([In] BOOL fCaseSens, [Const] [In] PWSTR pszString1, [Const] [In] PWSTR pszString2, [In] int nChar);
PSTR StrNCatA([NativeArrayInfo(CountParamIndex = 2)] [In] [Out] PSTR psz1, [Const] [In] PSTR psz2, [In] int cchMax);
PWSTR StrNCatW([NativeArrayInfo(CountParamIndex = 2)] [In] [Out] PWSTR psz1, [Const] [In] PWSTR psz2, [In] int cchMax);
PSTR StrPBrkA([Const] [In] PSTR psz, [Const] [In] PSTR pszSet);
PWSTR StrPBrkW([Const] [In] PWSTR psz, [Const] [In] PWSTR pszSet);
PSTR StrRChrA([Const] [In] PSTR pszStart, [Const] [In] [Optional] PSTR pszEnd, [In] ushort wMatch);
PWSTR StrRChrW([Const] [In] PWSTR pszStart, [Const] [In] [Optional] PWSTR pszEnd, [In] wchar wMatch);
PSTR StrRChrIA([Const] [In] PSTR pszStart, [Const] [In] [Optional] PSTR pszEnd, [In] ushort wMatch);
PWSTR StrRChrIW([Const] [In] PWSTR pszStart, [Const] [In] [Optional] PWSTR pszEnd, [In] wchar wMatch);
PSTR StrRStrIA([Const] [In] PSTR pszSource, [Const] [In] [Optional] PSTR pszLast, [Const] [In] PSTR pszSrch);
PWSTR StrRStrIW([Const] [In] PWSTR pszSource, [Const] [In] [Optional] PWSTR pszLast, [Const] [In] PWSTR pszSrch);
int StrSpnA([Const] [In] PSTR psz, [Const] [In] PSTR pszSet);
int StrSpnW([Const] [In] PWSTR psz, [Const] [In] PWSTR pszSet);
PSTR StrStrA([Const] [In] PSTR pszFirst, [Const] [In] PSTR pszSrch);
PWSTR StrStrW([Const] [In] PWSTR pszFirst, [Const] [In] PWSTR pszSrch);
PSTR StrStrIA([Const] [In] PSTR pszFirst, [Const] [In] PSTR pszSrch);
PWSTR StrStrIW([Const] [In] PWSTR pszFirst, [Const] [In] PWSTR pszSrch);
PWSTR StrStrNW([Const] [In] PWSTR pszFirst, [Const] [In] PWSTR pszSrch, [In] uint cchMax);
PWSTR StrStrNIW([Const] [In] PWSTR pszFirst, [Const] [In] PWSTR pszSrch, [In] uint cchMax);
int StrToIntA([Const] [In] PSTR pszSrc);
int StrToIntW([Const] [In] PWSTR pszSrc);
BOOL StrToIntExA([Const] [In] PSTR pszString, [In] int dwFlags, [Out] int* piRet);
BOOL StrToIntExW([Const] [In] PWSTR pszString, [In] int dwFlags, [Out] int* piRet);
BOOL StrToInt64ExA([Const] [In] PSTR pszString, [In] int dwFlags, [Out] long* pllRet);
BOOL StrToInt64ExW([Const] [In] PWSTR pszString, [In] int dwFlags, [Out] long* pllRet);
BOOL StrTrimA([In] [Out] PSTR psz, [Const] [In] PSTR pszTrimChars);
BOOL StrTrimW([In] [Out] PWSTR psz, [Const] [In] PWSTR pszTrimChars);
PWSTR StrCatW([In] [Out] PWSTR psz1, [Const] [In] PWSTR psz2);
int StrCmpW([Const] [In] PWSTR psz1, [Const] [In] PWSTR psz2);
int StrCmpIW([Const] [In] PWSTR psz1, [Const] [In] PWSTR psz2);
PWSTR StrCpyW([Out] PWSTR psz1, [Const] [In] PWSTR psz2);
PWSTR StrCpyNW([NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszDst, [Const] [In] PWSTR pszSrc, [In] int cchMax);
PWSTR StrCatBuffW([NativeArrayInfo(CountParamIndex = 2)] [In] [Out] PWSTR pszDest, [Const] [In] PWSTR pszSrc, [In] int cchDestBuffSize);
PSTR StrCatBuffA([NativeArrayInfo(CountParamIndex = 2)] [In] [Out] PSTR pszDest, [Const] [In] PSTR pszSrc, [In] int cchDestBuffSize);
BOOL ChrCmpIA([In] ushort w1, [In] ushort w2);
BOOL ChrCmpIW([In] wchar w1, [In] wchar w2);
int wvnsprintfA([NativeArrayInfo(CountParamIndex = 1)] [Out] PSTR pszDest, [In] int cchDest, [Const] [In] PSTR pszFmt, [In] sbyte* arglist);
int wvnsprintfW([NativeArrayInfo(CountParamIndex = 1)] [Out] PWSTR pszDest, [In] int cchDest, [Const] [In] PWSTR pszFmt, [In] sbyte* arglist);
int wnsprintfA([NativeArrayInfo(CountParamIndex = 1)] [Out] PSTR pszDest, [In] int cchDest, [Const] [In] PSTR pszFmt, ...);
int wnsprintfW([NativeArrayInfo(CountParamIndex = 1)] [Out] PWSTR pszDest, [In] int cchDest, [Const] [In] PWSTR pszFmt, ...);
HRESULT StrRetToStrA([In] [Out] STRRET* pstr, [In] [Optional] ITEMIDLIST* pidl, [Out] PSTR* ppsz);
HRESULT StrRetToStrW([In] [Out] STRRET* pstr, [In] [Optional] ITEMIDLIST* pidl, [Out] PWSTR* ppsz);
HRESULT StrRetToBufA([In] [Out] STRRET* pstr, [In] [Optional] ITEMIDLIST* pidl, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR pszBuf, [In] uint cchBuf);
HRESULT StrRetToBufW([In] [Out] STRRET* pstr, [In] [Optional] ITEMIDLIST* pidl, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pszBuf, [In] uint cchBuf);
HRESULT SHStrDupA([Const] [In] PSTR psz, [Out] PWSTR* ppwsz);
HRESULT SHStrDupW([Const] [In] PWSTR psz, [Out] PWSTR* ppwsz);
int StrCmpLogicalW([Const] [In] PWSTR psz1, [Const] [In] PWSTR psz2);
uint StrCatChainW([NativeArrayInfo(CountParamIndex = 1)] [Out] PWSTR pszDst, [In] uint cchDst, [In] uint ichAt, [Const] [In] PWSTR pszSrc);
HRESULT StrRetToBSTR([In] [Out] STRRET* pstr, [In] [Optional] ITEMIDLIST* pidl, [Out] BSTR* pbstr);
HRESULT SHLoadIndirectString([Const] [In] PWSTR pszSource, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszOutBuf, [In] uint cchOutBuf, [Reserved] [In] [Out] void** ppvReserved);
BOOL IsCharSpaceA([In] CHAR wch);
BOOL IsCharSpaceW([In] wchar wch);
int StrCmpCA([Const] [In] PSTR pszStr1, [Const] [In] PSTR pszStr2);
int StrCmpCW([Const] [In] PWSTR pszStr1, [Const] [In] PWSTR pszStr2);
int StrCmpICA([Const] [In] PSTR pszStr1, [Const] [In] PSTR pszStr2);
int StrCmpICW([Const] [In] PWSTR pszStr1, [Const] [In] PWSTR pszStr2);
int StrCmpNCA([Const] [In] PSTR pszStr1, [Const] [In] PSTR pszStr2, [In] int nChar);
int StrCmpNCW([Const] [In] PWSTR pszStr1, [Const] [In] PWSTR pszStr2, [In] int nChar);
int StrCmpNICA([Const] [In] PSTR pszStr1, [Const] [In] PSTR pszStr2, [In] int nChar);
int StrCmpNICW([Const] [In] PWSTR pszStr1, [Const] [In] PWSTR pszStr2, [In] int nChar);
BOOL IntlStrEqWorkerA([In] BOOL fCaseSens, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] PSTR lpString1, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] PSTR lpString2, [In] int nChar);
BOOL IntlStrEqWorkerW([In] BOOL fCaseSens, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] PWSTR lpString1, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] PWSTR lpString2, [In] int nChar);
PSTR PathAddBackslashA([NativeArrayInfo(CountConst = 260)] [In] [Out] PSTR pszPath);
PWSTR PathAddBackslashW([NativeArrayInfo(CountConst = 260)] [In] [Out] PWSTR pszPath);
BOOL PathAddExtensionA([NativeArrayInfo(CountConst = 260)] [In] [Out] PSTR pszPath, [Const] [In] [Optional] PSTR pszExt);
BOOL PathAddExtensionW([NativeArrayInfo(CountConst = 260)] [In] [Out] PWSTR pszPath, [Const] [In] [Optional] PWSTR pszExt);
BOOL PathAppendA([NativeArrayInfo(CountConst = 260)] [In] [Out] PSTR pszPath, [Const] [In] PSTR pszMore);
BOOL PathAppendW([NativeArrayInfo(CountConst = 260)] [In] [Out] PWSTR pszPath, [Const] [In] PWSTR pszMore);
PSTR PathBuildRootA([NativeArrayInfo(CountConst = 4)] [Out] PSTR pszRoot, [In] int iDrive);
PWSTR PathBuildRootW([NativeArrayInfo(CountConst = 4)] [Out] PWSTR pszRoot, [In] int iDrive);
BOOL PathCanonicalizeA([NativeArrayInfo(CountConst = 260)] [Out] PSTR pszBuf, [Const] [In] PSTR pszPath);
BOOL PathCanonicalizeW([NativeArrayInfo(CountConst = 260)] [Out] PWSTR pszBuf, [Const] [In] PWSTR pszPath);
PSTR PathCombineA([NativeArrayInfo(CountConst = 260)] [Out] PSTR pszDest, [Const] [In] [Optional] PSTR pszDir, [Const] [In] [Optional] PSTR pszFile);
PWSTR PathCombineW([NativeArrayInfo(CountConst = 260)] [Out] PWSTR pszDest, [Const] [In] [Optional] PWSTR pszDir, [Const] [In] [Optional] PWSTR pszFile);
BOOL PathCompactPathA([In] [Optional] HDC hDC, [NativeArrayInfo(CountConst = 260)] [In] [Out] PSTR pszPath, [In] uint dx);
BOOL PathCompactPathW([In] [Optional] HDC hDC, [NativeArrayInfo(CountConst = 260)] [In] [Out] PWSTR pszPath, [In] uint dx);
BOOL PathCompactPathExA([NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszOut, [Const] [In] PSTR pszSrc, [In] uint cchMax, [In] uint dwFlags);
BOOL PathCompactPathExW([NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszOut, [Const] [In] PWSTR pszSrc, [In] uint cchMax, [In] uint dwFlags);
int PathCommonPrefixA([Const] [In] PSTR pszFile1, [Const] [In] PSTR pszFile2, [NativeArrayInfo(CountConst = 260)] [Out] [Optional] PSTR achPath);
int PathCommonPrefixW([Const] [In] PWSTR pszFile1, [Const] [In] PWSTR pszFile2, [NativeArrayInfo(CountConst = 260)] [Out] [Optional] PWSTR achPath);
BOOL PathFileExistsA([Const] [In] PSTR pszPath);
BOOL PathFileExistsW([Const] [In] PWSTR pszPath);
PSTR PathFindExtensionA([Const] [In] PSTR pszPath);
PWSTR PathFindExtensionW([Const] [In] PWSTR pszPath);
PSTR PathFindFileNameA([Const] [In] PSTR pszPath);
PWSTR PathFindFileNameW([Const] [In] PWSTR pszPath);
PSTR PathFindNextComponentA([Const] [In] PSTR pszPath);
PWSTR PathFindNextComponentW([Const] [In] PWSTR pszPath);
BOOL PathFindOnPathA([NativeArrayInfo(CountConst = 260)] [In] [Out] PSTR pszPath, [In] [Optional] sbyte** ppszOtherDirs);
BOOL PathFindOnPathW([NativeArrayInfo(CountConst = 260)] [In] [Out] PWSTR pszPath, [In] [Optional] ushort** ppszOtherDirs);
PSTR PathFindSuffixArrayA([Const] [In] PSTR pszPath, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PSTR* apszSuffix, [In] int iArraySize);
PWSTR PathFindSuffixArrayW([Const] [In] PWSTR pszPath, [Const] [NativeArrayInfo(CountParamIndex = 2)] [In] PWSTR* apszSuffix, [In] int iArraySize);
PSTR PathGetArgsA([Const] [In] PSTR pszPath);
PWSTR PathGetArgsW([Const] [In] PWSTR pszPath);
BOOL PathIsLFNFileSpecA([Const] [In] PSTR pszName);
BOOL PathIsLFNFileSpecW([Const] [In] PWSTR pszName);
uint PathGetCharTypeA([In] byte ch);
uint PathGetCharTypeW([In] wchar ch);
int PathGetDriveNumberA([Const] [In] PSTR pszPath);
int PathGetDriveNumberW([Const] [In] PWSTR pszPath);
BOOL PathIsDirectoryA([Const] [In] PSTR pszPath);
BOOL PathIsDirectoryW([Const] [In] PWSTR pszPath);
BOOL PathIsDirectoryEmptyA([Const] [In] PSTR pszPath);
BOOL PathIsDirectoryEmptyW([Const] [In] PWSTR pszPath);
BOOL PathIsFileSpecA([Const] [In] PSTR pszPath);
BOOL PathIsFileSpecW([Const] [In] PWSTR pszPath);
BOOL PathIsPrefixA([Const] [In] PSTR pszPrefix, [Const] [In] PSTR pszPath);
BOOL PathIsPrefixW([Const] [In] PWSTR pszPrefix, [Const] [In] PWSTR pszPath);
BOOL PathIsRelativeA([Const] [In] PSTR pszPath);
BOOL PathIsRelativeW([Const] [In] PWSTR pszPath);
BOOL PathIsRootA([Const] [In] PSTR pszPath);
BOOL PathIsRootW([Const] [In] PWSTR pszPath);
BOOL PathIsSameRootA([Const] [In] PSTR pszPath1, [Const] [In] PSTR pszPath2);
BOOL PathIsSameRootW([Const] [In] PWSTR pszPath1, [Const] [In] PWSTR pszPath2);
BOOL PathIsUNCA([Const] [In] PSTR pszPath);
BOOL PathIsUNCW([Const] [In] PWSTR pszPath);
BOOL PathIsNetworkPathA([Const] [In] PSTR pszPath);
BOOL PathIsNetworkPathW([Const] [In] PWSTR pszPath);
BOOL PathIsUNCServerA([Const] [In] PSTR pszPath);
BOOL PathIsUNCServerW([Const] [In] PWSTR pszPath);
BOOL PathIsUNCServerShareA([Const] [In] PSTR pszPath);
BOOL PathIsUNCServerShareW([Const] [In] PWSTR pszPath);
BOOL PathIsContentTypeA([Const] [In] PSTR pszPath, [Const] [In] PSTR pszContentType);
BOOL PathIsContentTypeW([Const] [In] PWSTR pszPath, [Const] [In] PWSTR pszContentType);
BOOL PathIsURLA([Const] [In] PSTR pszPath);
BOOL PathIsURLW([Const] [In] PWSTR pszPath);
BOOL PathMakePrettyA([In] [Out] PSTR pszPath);
BOOL PathMakePrettyW([In] [Out] PWSTR pszPath);
BOOL PathMatchSpecA([Const] [In] PSTR pszFile, [Const] [In] PSTR pszSpec);
BOOL PathMatchSpecW([Const] [In] PWSTR pszFile, [Const] [In] PWSTR pszSpec);
HRESULT PathMatchSpecExA([Const] [In] PSTR pszFile, [Const] [In] PSTR pszSpec, [In] uint dwFlags);
HRESULT PathMatchSpecExW([Const] [In] PWSTR pszFile, [Const] [In] PWSTR pszSpec, [In] uint dwFlags);
int PathParseIconLocationA([In] [Out] PSTR pszIconFile);
int PathParseIconLocationW([In] [Out] PWSTR pszIconFile);
BOOL PathQuoteSpacesA([NativeArrayInfo(CountConst = 260)] [In] [Out] PSTR lpsz);
BOOL PathQuoteSpacesW([NativeArrayInfo(CountConst = 260)] [In] [Out] PWSTR lpsz);
BOOL PathRelativePathToA([NativeArrayInfo(CountConst = 260)] [Out] PSTR pszPath, [Const] [In] PSTR pszFrom, [In] uint dwAttrFrom, [Const] [In] PSTR pszTo, [In] uint dwAttrTo);
BOOL PathRelativePathToW([NativeArrayInfo(CountConst = 260)] [Out] PWSTR pszPath, [Const] [In] PWSTR pszFrom, [In] uint dwAttrFrom, [Const] [In] PWSTR pszTo, [In] uint dwAttrTo);
void PathRemoveArgsA([In] [Out] PSTR pszPath);
void PathRemoveArgsW([In] [Out] PWSTR pszPath);
PSTR PathRemoveBackslashA([In] [Out] PSTR pszPath);
PWSTR PathRemoveBackslashW([In] [Out] PWSTR pszPath);
void PathRemoveBlanksA([In] [Out] PSTR pszPath);
void PathRemoveBlanksW([In] [Out] PWSTR pszPath);
void PathRemoveExtensionA([In] [Out] PSTR pszPath);
void PathRemoveExtensionW([In] [Out] PWSTR pszPath);
BOOL PathRemoveFileSpecA([In] [Out] PSTR pszPath);
BOOL PathRemoveFileSpecW([In] [Out] PWSTR pszPath);
BOOL PathRenameExtensionA([NativeArrayInfo(CountConst = 260)] [In] [Out] PSTR pszPath, [Const] [In] PSTR pszExt);
BOOL PathRenameExtensionW([NativeArrayInfo(CountConst = 260)] [In] [Out] PWSTR pszPath, [Const] [In] PWSTR pszExt);
BOOL PathSearchAndQualifyA([Const] [In] PSTR pszPath, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszBuf, [In] uint cchBuf);
BOOL PathSearchAndQualifyW([Const] [In] PWSTR pszPath, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszBuf, [In] uint cchBuf);
void PathSetDlgItemPathA([In] HWND hDlg, [In] int id, [Const] [In] PSTR pszPath);
void PathSetDlgItemPathW([In] HWND hDlg, [In] int id, [Const] [In] PWSTR pszPath);
PSTR PathSkipRootA([Const] [In] PSTR pszPath);
PWSTR PathSkipRootW([Const] [In] PWSTR pszPath);
void PathStripPathA([In] [Out] PSTR pszPath);
void PathStripPathW([In] [Out] PWSTR pszPath);
BOOL PathStripToRootA([In] [Out] PSTR pszPath);
BOOL PathStripToRootW([In] [Out] PWSTR pszPath);
BOOL PathUnquoteSpacesA([In] [Out] PSTR lpsz);
BOOL PathUnquoteSpacesW([In] [Out] PWSTR lpsz);
BOOL PathMakeSystemFolderA([Const] [In] PSTR pszPath);
BOOL PathMakeSystemFolderW([Const] [In] PWSTR pszPath);
BOOL PathUnmakeSystemFolderA([Const] [In] PSTR pszPath);
BOOL PathUnmakeSystemFolderW([Const] [In] PWSTR pszPath);
BOOL PathIsSystemFolderA([Const] [In] [Optional] PSTR pszPath, [In] uint dwAttrb);
BOOL PathIsSystemFolderW([Const] [In] [Optional] PWSTR pszPath, [In] uint dwAttrb);
void PathUndecorateA([In] [Out] PSTR pszPath);
void PathUndecorateW([In] [Out] PWSTR pszPath);
BOOL PathUnExpandEnvStringsA([Const] [In] PSTR pszPath, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszBuf, [In] uint cchBuf);
BOOL PathUnExpandEnvStringsW([Const] [In] PWSTR pszPath, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszBuf, [In] uint cchBuf);
int UrlCompareA([Const] [In] PSTR psz1, [Const] [In] PSTR psz2, [In] BOOL fIgnoreSlash);
int UrlCompareW([Const] [In] PWSTR psz1, [Const] [In] PWSTR psz2, [In] BOOL fIgnoreSlash);
HRESULT UrlCombineA([Const] [In] PSTR pszBase, [Const] [In] PSTR pszRelative, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR pszCombined, [In] [Out] uint* pcchCombined, [In] uint dwFlags);
HRESULT UrlCombineW([Const] [In] PWSTR pszBase, [Const] [In] PWSTR pszRelative, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR pszCombined, [In] [Out] uint* pcchCombined, [In] uint dwFlags);
HRESULT UrlCanonicalizeA([Const] [In] PSTR pszUrl, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszCanonicalized, [In] [Out] uint* pcchCanonicalized, [In] uint dwFlags);
HRESULT UrlCanonicalizeW([Const] [In] PWSTR pszUrl, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszCanonicalized, [In] [Out] uint* pcchCanonicalized, [In] uint dwFlags);
BOOL UrlIsOpaqueA([Const] [In] PSTR pszURL);
BOOL UrlIsOpaqueW([Const] [In] PWSTR pszURL);
BOOL UrlIsNoHistoryA([Const] [In] PSTR pszURL);
BOOL UrlIsNoHistoryW([Const] [In] PWSTR pszURL);
BOOL UrlIsA([Const] [In] PSTR pszUrl, [In] URLIS UrlIs);
BOOL UrlIsW([Const] [In] PWSTR pszUrl, [In] URLIS UrlIs);
PSTR UrlGetLocationA([Const] [In] PSTR pszURL);
PWSTR UrlGetLocationW([Const] [In] PWSTR pszURL);
HRESULT UrlUnescapeA([In] [Out] PSTR pszUrl, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PSTR pszUnescaped, [In] [Out] [Optional] uint* pcchUnescaped, [In] uint dwFlags);
HRESULT UrlUnescapeW([In] [Out] PWSTR pszUrl, [NativeArrayInfo(CountParamIndex = 2)] [Out] [Optional] PWSTR pszUnescaped, [In] [Out] [Optional] uint* pcchUnescaped, [In] uint dwFlags);
HRESULT UrlEscapeA([Const] [In] PSTR pszUrl, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszEscaped, [In] [Out] uint* pcchEscaped, [In] uint dwFlags);
HRESULT UrlEscapeW([Const] [In] PWSTR pszUrl, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszEscaped, [In] [Out] uint* pcchEscaped, [In] uint dwFlags);
HRESULT UrlCreateFromPathA([Const] [In] PSTR pszPath, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszUrl, [In] [Out] uint* pcchUrl, [In] uint dwFlags);
HRESULT UrlCreateFromPathW([Const] [In] PWSTR pszPath, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszUrl, [In] [Out] uint* pcchUrl, [In] uint dwFlags);
HRESULT PathCreateFromUrlA([Const] [In] PSTR pszUrl, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszPath, [In] [Out] uint* pcchPath, [In] uint dwFlags);
HRESULT PathCreateFromUrlW([Const] [In] PWSTR pszUrl, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszPath, [In] [Out] uint* pcchPath, [In] uint dwFlags);
HRESULT PathCreateFromUrlAlloc([Const] [In] PWSTR pszIn, [Out] PWSTR* ppszOut, [In] uint dwFlags);
HRESULT UrlHashA([Const] [In] PSTR pszUrl, [MemorySize(BytesParamIndex = 2)] [Out] byte* pbHash, [In] uint cbHash);
HRESULT UrlHashW([Const] [In] PWSTR pszUrl, [MemorySize(BytesParamIndex = 2)] [Out] byte* pbHash, [In] uint cbHash);
HRESULT UrlGetPartW([Const] [In] PWSTR pszIn, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszOut, [In] [Out] uint* pcchOut, [In] uint dwPart, [In] uint dwFlags);
HRESULT UrlGetPartA([Const] [In] PSTR pszIn, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszOut, [In] [Out] uint* pcchOut, [In] uint dwPart, [In] uint dwFlags);
HRESULT UrlApplySchemeA([Const] [In] PSTR pszIn, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszOut, [In] [Out] uint* pcchOut, [In] uint dwFlags);
HRESULT UrlApplySchemeW([Const] [In] PWSTR pszIn, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszOut, [In] [Out] uint* pcchOut, [In] uint dwFlags);
HRESULT HashData([MemorySize(BytesParamIndex = 1)] [In] byte* pbData, [In] uint cbData, [MemorySize(BytesParamIndex = 3)] [Out] byte* pbHash, [In] uint cbHash);
HRESULT UrlFixupW([Const] [In] PWSTR pcszUrl, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pszTranslatedUrl, [In] uint cchMax);
HRESULT ParseURLA([Const] [In] PSTR pcszURL, [In] [Out] PARSEDURLA* ppu);
HRESULT ParseURLW([Const] [In] PWSTR pcszURL, [In] [Out] PARSEDURLW* ppu);
WIN32_ERROR SHDeleteEmptyKeyA([In] HKEY hkey, [Const] [In] [Optional] PSTR pszSubKey);
WIN32_ERROR SHDeleteEmptyKeyW([In] HKEY hkey, [Const] [In] [Optional] PWSTR pszSubKey);
WIN32_ERROR SHDeleteKeyA([In] HKEY hkey, [Const] [In] [Optional] PSTR pszSubKey);
WIN32_ERROR SHDeleteKeyW([In] HKEY hkey, [Const] [In] [Optional] PWSTR pszSubKey);
HKEY SHRegDuplicateHKey([In] HKEY hkey);
WIN32_ERROR SHDeleteValueA([In] HKEY hkey, [Const] [In] [Optional] PSTR pszSubKey, [Const] [In] PSTR pszValue);
WIN32_ERROR SHDeleteValueW([In] HKEY hkey, [Const] [In] [Optional] PWSTR pszSubKey, [Const] [In] PWSTR pszValue);
WIN32_ERROR SHGetValueA([In] HKEY hkey, [Const] [In] [Optional] PSTR pszSubKey, [Const] [In] [Optional] PSTR pszValue, [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData);
WIN32_ERROR SHGetValueW([In] HKEY hkey, [Const] [In] [Optional] PWSTR pszSubKey, [Const] [In] [Optional] PWSTR pszValue, [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData);
int SHSetValueA([In] HKEY hkey, [Const] [In] [Optional] PSTR pszSubKey, [Const] [In] [Optional] PSTR pszValue, [In] uint dwType, [Const] [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* pvData, [In] uint cbData);
int SHSetValueW([In] HKEY hkey, [Const] [In] [Optional] PWSTR pszSubKey, [Const] [In] [Optional] PWSTR pszValue, [In] uint dwType, [Const] [MemorySize(BytesParamIndex = 5)] [In] [Optional] void* pvData, [In] uint cbData);
WIN32_ERROR SHRegGetValueA([In] HKEY hkey, [Const] [In] [Optional] PSTR pszSubKey, [Const] [In] [Optional] PSTR pszValue, [In] int srrfFlags, [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData);
WIN32_ERROR SHRegGetValueW([In] HKEY hkey, [Const] [In] [Optional] PWSTR pszSubKey, [Const] [In] [Optional] PWSTR pszValue, [In] int srrfFlags, [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData);
WIN32_ERROR SHRegGetValueFromHKCUHKLM([Const] [In] PWSTR pwszKey, [Const] [In] [Optional] PWSTR pwszValue, [In] int srrfFlags, [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData);
WIN32_ERROR SHQueryValueExA([In] HKEY hkey, [Const] [In] [Optional] PSTR pszValue, [Reserved] [In] [Out] uint* pdwReserved, [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData);
WIN32_ERROR SHQueryValueExW([In] HKEY hkey, [Const] [In] [Optional] PWSTR pszValue, [Reserved] [In] [Out] uint* pdwReserved, [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData);
WIN32_ERROR SHEnumKeyExA([In] HKEY hkey, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR pszName, [In] [Out] uint* pcchName);
WIN32_ERROR SHEnumKeyExW([In] HKEY hkey, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pszName, [In] [Out] uint* pcchName);
WIN32_ERROR SHEnumValueA([In] HKEY hkey, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PSTR pszValueName, [In] [Out] [Optional] uint* pcchValueName, [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData);
WIN32_ERROR SHEnumValueW([In] HKEY hkey, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] [Optional] PWSTR pszValueName, [In] [Out] [Optional] uint* pcchValueName, [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData);
WIN32_ERROR SHQueryInfoKeyA([In] HKEY hkey, [Out] [Optional] uint* pcSubKeys, [Out] [Optional] uint* pcchMaxSubKeyLen, [Out] [Optional] uint* pcValues, [Out] [Optional] uint* pcchMaxValueNameLen);
WIN32_ERROR SHQueryInfoKeyW([In] HKEY hkey, [Out] [Optional] uint* pcSubKeys, [Out] [Optional] uint* pcchMaxSubKeyLen, [Out] [Optional] uint* pcValues, [Out] [Optional] uint* pcchMaxValueNameLen);
WIN32_ERROR SHCopyKeyA([In] HKEY hkeySrc, [Const] [In] [Optional] PSTR pszSrcSubKey, [In] HKEY hkeyDest, [Reserved] [In] uint fReserved);
WIN32_ERROR SHCopyKeyW([In] HKEY hkeySrc, [Const] [In] [Optional] PWSTR pszSrcSubKey, [In] HKEY hkeyDest, [Reserved] [In] uint fReserved);
WIN32_ERROR SHRegGetPathA([In] HKEY hKey, [Const] [In] [Optional] PSTR pcszSubKey, [Const] [In] [Optional] PSTR pcszValue, [NativeArrayInfo(CountConst = 260)] [Out] PSTR pszPath, [In] uint dwFlags);
WIN32_ERROR SHRegGetPathW([In] HKEY hKey, [Const] [In] [Optional] PWSTR pcszSubKey, [Const] [In] [Optional] PWSTR pcszValue, [NativeArrayInfo(CountConst = 260)] [Out] PWSTR pszPath, [In] uint dwFlags);
WIN32_ERROR SHRegSetPathA([In] HKEY hKey, [Const] [In] [Optional] PSTR pcszSubKey, [Const] [In] [Optional] PSTR pcszValue, [Const] [In] PSTR pcszPath, [In] uint dwFlags);
WIN32_ERROR SHRegSetPathW([In] HKEY hKey, [Const] [In] [Optional] PWSTR pcszSubKey, [Const] [In] [Optional] PWSTR pcszValue, [Const] [In] PWSTR pcszPath, [In] uint dwFlags);
WIN32_ERROR SHRegCreateUSKeyA([Const] [In] PSTR pszPath, [In] uint samDesired, [In] [Optional] nint hRelativeUSKey, [Out] nint* phNewUSKey, [In] uint dwFlags);
WIN32_ERROR SHRegCreateUSKeyW([Const] [In] PWSTR pwzPath, [In] uint samDesired, [In] [Optional] nint hRelativeUSKey, [Out] nint* phNewUSKey, [In] uint dwFlags);
WIN32_ERROR SHRegOpenUSKeyA([Const] [In] PSTR pszPath, [In] uint samDesired, [In] [Optional] nint hRelativeUSKey, [Out] nint* phNewUSKey, [In] BOOL fIgnoreHKCU);
WIN32_ERROR SHRegOpenUSKeyW([Const] [In] PWSTR pwzPath, [In] uint samDesired, [In] [Optional] nint hRelativeUSKey, [Out] nint* phNewUSKey, [In] BOOL fIgnoreHKCU);
WIN32_ERROR SHRegQueryUSValueA([In] nint hUSKey, [Const] [In] [Optional] PSTR pszValue, [In] [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData, [In] BOOL fIgnoreHKCU, [MemorySize(BytesParamIndex = 7)] [In] [Optional] void* pvDefaultData, [In] [Optional] uint dwDefaultDataSize);
WIN32_ERROR SHRegQueryUSValueW([In] nint hUSKey, [Const] [In] [Optional] PWSTR pszValue, [In] [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData, [In] BOOL fIgnoreHKCU, [MemorySize(BytesParamIndex = 7)] [In] [Optional] void* pvDefaultData, [In] [Optional] uint dwDefaultDataSize);
WIN32_ERROR SHRegWriteUSValueA([In] nint hUSKey, [Const] [In] PSTR pszValue, [In] uint dwType, [Const] [MemorySize(BytesParamIndex = 4)] [In] void* pvData, [In] uint cbData, [In] uint dwFlags);
WIN32_ERROR SHRegWriteUSValueW([In] nint hUSKey, [Const] [In] PWSTR pwzValue, [In] uint dwType, [Const] [MemorySize(BytesParamIndex = 4)] [In] void* pvData, [In] uint cbData, [In] uint dwFlags);
WIN32_ERROR SHRegDeleteUSValueA([In] nint hUSKey, [Const] [In] PSTR pszValue, [In] SHREGDEL_FLAGS delRegFlags);
WIN32_ERROR SHRegDeleteUSValueW([In] nint hUSKey, [Const] [In] PWSTR pwzValue, [In] SHREGDEL_FLAGS delRegFlags);
WIN32_ERROR SHRegDeleteEmptyUSKeyW([In] nint hUSKey, [Const] [In] PWSTR pwzSubKey, [In] SHREGDEL_FLAGS delRegFlags);
WIN32_ERROR SHRegDeleteEmptyUSKeyA([In] nint hUSKey, [Const] [In] PSTR pszSubKey, [In] SHREGDEL_FLAGS delRegFlags);
WIN32_ERROR SHRegEnumUSKeyA([In] nint hUSKey, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR pszName, [In] [Out] uint* pcchName, [In] SHREGENUM_FLAGS enumRegFlags);
WIN32_ERROR SHRegEnumUSKeyW([In] nint hUSKey, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pwzName, [In] [Out] uint* pcchName, [In] SHREGENUM_FLAGS enumRegFlags);
WIN32_ERROR SHRegEnumUSValueA([In] nint hUSkey, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR pszValueName, [In] [Out] uint* pcchValueName, [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData, [In] SHREGENUM_FLAGS enumRegFlags);
WIN32_ERROR SHRegEnumUSValueW([In] nint hUSkey, [In] uint dwIndex, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pszValueName, [In] [Out] uint* pcchValueName, [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData, [In] SHREGENUM_FLAGS enumRegFlags);
WIN32_ERROR SHRegQueryInfoUSKeyA([In] nint hUSKey, [Out] [Optional] uint* pcSubKeys, [Out] [Optional] uint* pcchMaxSubKeyLen, [Out] [Optional] uint* pcValues, [Out] [Optional] uint* pcchMaxValueNameLen, [In] SHREGENUM_FLAGS enumRegFlags);
WIN32_ERROR SHRegQueryInfoUSKeyW([In] nint hUSKey, [Out] [Optional] uint* pcSubKeys, [Out] [Optional] uint* pcchMaxSubKeyLen, [Out] [Optional] uint* pcValues, [Out] [Optional] uint* pcchMaxValueNameLen, [In] SHREGENUM_FLAGS enumRegFlags);
WIN32_ERROR SHRegCloseUSKey([In] nint hUSKey);
WIN32_ERROR SHRegGetUSValueA([Const] [In] PSTR pszSubKey, [Const] [In] [Optional] PSTR pszValue, [In] [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData, [In] BOOL fIgnoreHKCU, [MemorySize(BytesParamIndex = 7)] [In] [Optional] void* pvDefaultData, [In] uint dwDefaultDataSize);
WIN32_ERROR SHRegGetUSValueW([Const] [In] PWSTR pszSubKey, [Const] [In] [Optional] PWSTR pszValue, [In] [Out] [Optional] uint* pdwType, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* pvData, [In] [Out] [Optional] uint* pcbData, [In] BOOL fIgnoreHKCU, [MemorySize(BytesParamIndex = 7)] [In] [Optional] void* pvDefaultData, [In] uint dwDefaultDataSize);
WIN32_ERROR SHRegSetUSValueA([Const] [In] PSTR pszSubKey, [Const] [In] PSTR pszValue, [In] uint dwType, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* pvData, [In] [Optional] uint cbData, [In] [Optional] uint dwFlags);
WIN32_ERROR SHRegSetUSValueW([Const] [In] PWSTR pwzSubKey, [Const] [In] PWSTR pwzValue, [In] uint dwType, [Const] [MemorySize(BytesParamIndex = 4)] [In] [Optional] void* pvData, [In] [Optional] uint cbData, [In] [Optional] uint dwFlags);
WIN32_ERROR SHRegGetIntW([In] HKEY hk, [Const] [In] [Optional] PWSTR pwzKey, [In] int iDefault);
BOOL SHRegGetBoolUSValueA([Const] [In] PSTR pszSubKey, [Const] [In] [Optional] PSTR pszValue, [In] BOOL fIgnoreHKCU, [In] BOOL fDefault);
BOOL SHRegGetBoolUSValueW([Const] [In] PWSTR pszSubKey, [Const] [In] [Optional] PWSTR pszValue, [In] BOOL fIgnoreHKCU, [In] BOOL fDefault);
HRESULT AssocCreate([In] Guid clsid, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT AssocQueryStringA([In] ASSOCF flags, [In] ASSOCSTR str, [Const] [In] PSTR pszAssoc, [Const] [In] [Optional] PSTR pszExtra, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR pszOut, [In] [Out] uint* pcchOut);
HRESULT AssocQueryStringW([In] ASSOCF flags, [In] ASSOCSTR str, [Const] [In] PWSTR pszAssoc, [Const] [In] [Optional] PWSTR pszExtra, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR pszOut, [In] [Out] uint* pcchOut);
HRESULT AssocQueryStringByKeyA([In] ASSOCF flags, [In] ASSOCSTR str, [In] HKEY hkAssoc, [Const] [In] [Optional] PSTR pszExtra, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PSTR pszOut, [In] [Out] uint* pcchOut);
HRESULT AssocQueryStringByKeyW([In] ASSOCF flags, [In] ASSOCSTR str, [In] HKEY hkAssoc, [Const] [In] [Optional] PWSTR pszExtra, [NativeArrayInfo(CountParamIndex = 5)] [Out] [Optional] PWSTR pszOut, [In] [Out] uint* pcchOut);
HRESULT AssocQueryKeyA([In] ASSOCF flags, [In] ASSOCKEY key, [Const] [In] PSTR pszAssoc, [Const] [In] [Optional] PSTR pszExtra, [Out] HKEY* phkeyOut);
HRESULT AssocQueryKeyW([In] ASSOCF flags, [In] ASSOCKEY key, [Const] [In] PWSTR pszAssoc, [Const] [In] [Optional] PWSTR pszExtra, [Out] HKEY* phkeyOut);
BOOL AssocIsDangerous([Const] [In] PWSTR pszAssoc);
HRESULT AssocGetPerceivedType([Const] [In] PWSTR pszExt, [Out] PERCEIVED* ptype, [Out] uint* pflag, [Out] [Optional] PWSTR* ppszType);
IStream SHOpenRegStreamA([In] HKEY hkey, [Const] [In] [Optional] PSTR pszSubkey, [Const] [In] [Optional] PSTR pszValue, [In] uint grfMode);
IStream SHOpenRegStreamW([In] HKEY hkey, [Const] [In] [Optional] PWSTR pszSubkey, [Const] [In] [Optional] PWSTR pszValue, [In] uint grfMode);
IStream SHOpenRegStream2A([In] HKEY hkey, [Const] [In] [Optional] PSTR pszSubkey, [Const] [In] [Optional] PSTR pszValue, [In] uint grfMode);
IStream SHOpenRegStream2W([In] HKEY hkey, [Const] [In] [Optional] PWSTR pszSubkey, [Const] [In] [Optional] PWSTR pszValue, [In] uint grfMode);
HRESULT SHCreateStreamOnFileA([Const] [In] PSTR pszFile, [In] uint grfMode, [Out] IStream* ppstm);
HRESULT SHCreateStreamOnFileW([Const] [In] PWSTR pszFile, [In] uint grfMode, [Out] IStream* ppstm);
HRESULT SHCreateStreamOnFileEx([Const] [In] PWSTR pszFile, [In] uint grfMode, [In] uint dwAttributes, [In] BOOL fCreate, [In] [Optional] IStream pstmTemplate, [Out] IStream* ppstm);
IStream SHCreateMemStream([Const] [MemorySize(BytesParamIndex = 1)] [In] [Optional] byte* pInit, [In] uint cbInit);
HRESULT GetAcceptLanguagesA([NativeArrayInfo(CountParamIndex = 1)] [Out] PSTR pszLanguages, [In] [Out] uint* pcchLanguages);
HRESULT GetAcceptLanguagesW([NativeArrayInfo(CountParamIndex = 1)] [Out] PWSTR pszLanguages, [In] [Out] uint* pcchLanguages);
void IUnknown_Set([In] [Out] IUnknown* ppunk, [In] [Optional] IUnknown punk);
void IUnknown_AtomicRelease([In] [Out] [Optional] void** ppunk);
HRESULT IUnknown_GetWindow([In] IUnknown punk, [Out] HWND* phwnd);
HRESULT IUnknown_SetSite([In] IUnknown punk, [In] [Optional] IUnknown punkSite);
HRESULT IUnknown_GetSite([In] IUnknown punk, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
HRESULT IUnknown_QueryService([In] [Optional] IUnknown punk, [Const] [In] Guid* guidService, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppvOut);
HRESULT IStream_Read([In] IStream pstm, [MemorySize(BytesParamIndex = 2)] [Out] void* pv, [In] uint cb);
HRESULT IStream_Write([In] IStream pstm, [Const] [MemorySize(BytesParamIndex = 2)] [In] void* pv, [In] uint cb);
HRESULT IStream_Reset([In] IStream pstm);
HRESULT IStream_Size([In] IStream pstm, [Out] ULARGE_INTEGER* pui);
HRESULT ConnectToConnectionPoint([In] [Optional] IUnknown punk, [Const] [In] Guid* riidEvent, [In] BOOL fConnect, [In] IUnknown punkTarget, [Out] uint* pdwCookie, [Out] [Optional] IConnectionPoint* ppcpOut);
HRESULT IStream_ReadPidl([In] IStream pstm, [Out] ITEMIDLIST** ppidlOut);
HRESULT IStream_WritePidl([In] IStream pstm, [In] ITEMIDLIST* pidlWrite);
HRESULT IStream_ReadStr([In] IStream pstm, [Out] PWSTR* ppsz);
HRESULT IStream_WriteStr([In] IStream pstm, [Const] [In] PWSTR psz);
HRESULT IStream_Copy([In] IStream pstmFrom, [In] IStream pstmTo, [In] uint cb);
HRESULT SHGetViewStatePropertyBag([In] [Optional] ITEMIDLIST* pidl, [Const] [In] [Optional] PWSTR pszBagName, [In] uint dwFlags, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
int SHFormatDateTimeA([Const] [In] FILETIME* pft, [In] [Out] [Optional] uint* pdwFlags, [NativeArrayInfo(CountParamIndex = 3)] [Out] PSTR pszBuf, [In] uint cchBuf);
int SHFormatDateTimeW([Const] [In] FILETIME* pft, [In] [Out] [Optional] uint* pdwFlags, [NativeArrayInfo(CountParamIndex = 3)] [Out] PWSTR pszBuf, [In] uint cchBuf);
int SHAnsiToUnicode([Const] [In] PSTR pszSrc, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pwszDst, [In] int cwchBuf);
int SHAnsiToAnsi([Const] [In] PSTR pszSrc, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszDst, [In] int cchBuf);
int SHUnicodeToAnsi([Const] [In] PWSTR pwszSrc, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszDst, [In] int cchBuf);
int SHUnicodeToUnicode([Const] [In] PWSTR pwzSrc, [NativeArrayInfo(CountParamIndex = 2)] [Out] PWSTR pwzDst, [In] int cwchBuf);
int SHMessageBoxCheckA([In] [Optional] HWND hwnd, [Const] [In] PSTR pszText, [Const] [In] PSTR pszCaption, [In] uint uType, [In] int iDefault, [Const] [In] PSTR pszRegVal);
int SHMessageBoxCheckW([In] [Optional] HWND hwnd, [Const] [In] PWSTR pszText, [Const] [In] PWSTR pszCaption, [In] uint uType, [In] int iDefault, [Const] [In] PWSTR pszRegVal);
LRESULT SHSendMessageBroadcastA([In] uint uMsg, [In] WPARAM wParam, [In] LPARAM lParam);
LRESULT SHSendMessageBroadcastW([In] uint uMsg, [In] WPARAM wParam, [In] LPARAM lParam);
CHAR SHStripMneumonicA([In] [Out] PSTR pszMenu);
wchar SHStripMneumonicW([In] [Out] PWSTR pszMenu);
BOOL IsOS([In] OS dwOS);
int SHGlobalCounterGetValue([Const] [In] SHGLOBALCOUNTER id);
int SHGlobalCounterIncrement([Const] [In] SHGLOBALCOUNTER id);
int SHGlobalCounterDecrement([Const] [In] SHGLOBALCOUNTER id);
HANDLE SHAllocShared([Const] [MemorySize(BytesParamIndex = 1)] [In] [Optional] void* pvData, [In] uint dwSize, [In] uint dwProcessId);
BOOL SHFreeShared([In] HANDLE hData, [In] uint dwProcessId);
void* SHLockShared([In] HANDLE hData, [In] uint dwProcessId);
BOOL SHUnlockShared([In] void* pvData);
uint WhichPlatform();
HRESULT QISearch([In] [Out] void* that, [In] QITAB* pqit, [Const] [In] Guid* riid, [ComOutPtr] [Out] void** ppv);
BOOL SHIsLowMemoryMachine([In] uint dwType);
int GetMenuPosFromID([In] HMENU hmenu, [In] uint id);
HRESULT SHGetInverseCMAP([MemorySize(BytesParamIndex = 1)] [Out] byte* pbMap, [In] uint cbMap);
HRESULT SHAutoComplete([In] HWND hwndEdit, [In] SHELL_AUTOCOMPLETE_FLAGS dwFlags);
HRESULT SHCreateThreadRef([In] [Out] int* pcRef, [Out] IUnknown* ppunk);
HRESULT SHSetThreadRef([In] [Optional] IUnknown punk);
HRESULT SHGetThreadRef([ComOutPtr] [Out] IUnknown* ppunk);
BOOL SHSkipJunction([In] [Optional] IBindCtx pbc, [Const] [In] Guid* pclsid);
BOOL SHCreateThread([In] LPTHREAD_START_ROUTINE pfnThreadProc, [In] [Optional] void* pData, [In] uint flags, [In] [Optional] LPTHREAD_START_ROUTINE pfnCallback);
BOOL SHCreateThreadWithHandle([In] LPTHREAD_START_ROUTINE pfnThreadProc, [In] [Optional] void* pData, [In] uint flags, [In] [Optional] LPTHREAD_START_ROUTINE pfnCallback, [Out] [Optional] HANDLE* pHandle);
HRESULT SHReleaseThreadRef();
HPALETTE SHCreateShellPalette([In] [Optional] HDC hdc);
void ColorRGBToHLS([In] COLORREF clrRGB, [Out] ushort* pwHue, [Out] ushort* pwLuminance, [Out] ushort* pwSaturation);
COLORREF ColorHLSToRGB([In] ushort wHue, [In] ushort wLuminance, [In] ushort wSaturation);
COLORREF ColorAdjustLuma([In] COLORREF clrRGB, [In] int n, [In] BOOL fScale);
BOOL IsInternetESCEnabled();
