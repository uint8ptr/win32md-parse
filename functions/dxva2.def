BOOL GetNumberOfPhysicalMonitorsFromHMONITOR([In] HMONITOR hMonitor, [Out] uint* pdwNumberOfPhysicalMonitors);
HRESULT GetNumberOfPhysicalMonitorsFromIDirect3DDevice9([In] IDirect3DDevice9 pDirect3DDevice9, [Out] uint* pdwNumberOfPhysicalMonitors);
BOOL GetPhysicalMonitorsFromHMONITOR([In] HMONITOR hMonitor, [In] uint dwPhysicalMonitorArraySize, [NativeArrayInfo(CountParamIndex = 1)] [Out] PHYSICAL_MONITOR* pPhysicalMonitorArray);
HRESULT GetPhysicalMonitorsFromIDirect3DDevice9([In] IDirect3DDevice9 pDirect3DDevice9, [In] uint dwPhysicalMonitorArraySize, [NativeArrayInfo(CountParamIndex = 1)] [Out] PHYSICAL_MONITOR* pPhysicalMonitorArray);
BOOL DestroyPhysicalMonitor([In] HANDLE hMonitor);
BOOL DestroyPhysicalMonitors([In] uint dwPhysicalMonitorArraySize, [NativeArrayInfo(CountParamIndex = 0)] [In] PHYSICAL_MONITOR* pPhysicalMonitorArray);
int GetVCPFeatureAndVCPFeatureReply([In] HANDLE hMonitor, [In] byte bVCPCode, [Out] [Optional] MC_VCP_CODE_TYPE* pvct, [Out] uint* pdwCurrentValue, [Out] [Optional] uint* pdwMaximumValue);
int SetVCPFeature([In] HANDLE hMonitor, [In] byte bVCPCode, [In] uint dwNewValue);
int SaveCurrentSettings([In] HANDLE hMonitor);
int GetCapabilitiesStringLength([In] HANDLE hMonitor, [Out] uint* pdwCapabilitiesStringLengthInCharacters);
int CapabilitiesRequestAndCapabilitiesReply([In] HANDLE hMonitor, [NativeArrayInfo(CountParamIndex = 2)] [Out] PSTR pszASCIICapabilitiesString, [In] uint dwCapabilitiesStringLengthInCharacters);
int GetTimingReport([In] HANDLE hMonitor, [Out] MC_TIMING_REPORT* pmtrMonitorTimingReport);
int GetMonitorCapabilities([In] HANDLE hMonitor, [Out] uint* pdwMonitorCapabilities, [Out] uint* pdwSupportedColorTemperatures);
int SaveCurrentMonitorSettings([In] HANDLE hMonitor);
int GetMonitorTechnologyType([In] HANDLE hMonitor, [In] [Out] MC_DISPLAY_TECHNOLOGY_TYPE* pdtyDisplayTechnologyType);
int GetMonitorBrightness([In] HANDLE hMonitor, [Out] uint* pdwMinimumBrightness, [Out] uint* pdwCurrentBrightness, [Out] uint* pdwMaximumBrightness);
int GetMonitorContrast([In] HANDLE hMonitor, [Out] uint* pdwMinimumContrast, [Out] uint* pdwCurrentContrast, [Out] uint* pdwMaximumContrast);
int GetMonitorColorTemperature([In] HANDLE hMonitor, [Out] MC_COLOR_TEMPERATURE* pctCurrentColorTemperature);
int GetMonitorRedGreenOrBlueDrive([In] HANDLE hMonitor, [In] MC_DRIVE_TYPE dtDriveType, [Out] uint* pdwMinimumDrive, [Out] uint* pdwCurrentDrive, [Out] uint* pdwMaximumDrive);
int GetMonitorRedGreenOrBlueGain([In] HANDLE hMonitor, [In] MC_GAIN_TYPE gtGainType, [Out] uint* pdwMinimumGain, [Out] uint* pdwCurrentGain, [Out] uint* pdwMaximumGain);
int SetMonitorBrightness([In] HANDLE hMonitor, [In] uint dwNewBrightness);
int SetMonitorContrast([In] HANDLE hMonitor, [In] uint dwNewContrast);
int SetMonitorColorTemperature([In] HANDLE hMonitor, [In] MC_COLOR_TEMPERATURE ctCurrentColorTemperature);
int SetMonitorRedGreenOrBlueDrive([In] HANDLE hMonitor, [In] MC_DRIVE_TYPE dtDriveType, [In] uint dwNewDrive);
int SetMonitorRedGreenOrBlueGain([In] HANDLE hMonitor, [In] MC_GAIN_TYPE gtGainType, [In] uint dwNewGain);
int DegaussMonitor([In] HANDLE hMonitor);
int GetMonitorDisplayAreaSize([In] HANDLE hMonitor, [In] MC_SIZE_TYPE stSizeType, [Out] uint* pdwMinimumWidthOrHeight, [Out] uint* pdwCurrentWidthOrHeight, [Out] uint* pdwMaximumWidthOrHeight);
int GetMonitorDisplayAreaPosition([In] HANDLE hMonitor, [In] MC_POSITION_TYPE ptPositionType, [Out] uint* pdwMinimumPosition, [Out] uint* pdwCurrentPosition, [Out] uint* pdwMaximumPosition);
int SetMonitorDisplayAreaSize([In] HANDLE hMonitor, [In] MC_SIZE_TYPE stSizeType, [In] uint dwNewDisplayAreaWidthOrHeight);
int SetMonitorDisplayAreaPosition([In] HANDLE hMonitor, [In] MC_POSITION_TYPE ptPositionType, [In] uint dwNewPosition);
int RestoreMonitorFactoryColorDefaults([In] HANDLE hMonitor);
int RestoreMonitorFactoryDefaults([In] HANDLE hMonitor);
HRESULT DXVAHD_CreateDevice([In] IDirect3DDevice9Ex pD3DDevice, [Const] [In] DXVAHD_CONTENT_DESC* pContentDesc, [In] DXVAHD_DEVICE_USAGE Usage, [In] [Optional] PDXVAHDSW_Plugin pPlugin, [Out] IDXVAHD_Device* ppDevice);
HRESULT DXVA2CreateDirect3DDeviceManager9([Out] uint* pResetToken, [Out] IDirect3DDeviceManager9* ppDeviceManager);
HRESULT DXVA2CreateVideoService([In] IDirect3DDevice9 pDD, [Const] [In] Guid* riid, [Out] void** ppService);
HRESULT OPMGetVideoOutputsFromHMONITOR([In] HMONITOR hMonitor, [In] OPM_VIDEO_OUTPUT_SEMANTICS vos, [Out] uint* pulNumVideoOutputs, [Out] IOPMVideoOutput** pppOPMVideoOutputArray);
HRESULT OPMGetVideoOutputForTarget([In] LUID* pAdapterLuid, [In] uint VidPnTarget, [In] OPM_VIDEO_OUTPUT_SEMANTICS vos, [ComOutPtr] [Out] IOPMVideoOutput* ppOPMVideoOutput);
HRESULT OPMGetVideoOutputsFromIDirect3DDevice9Object([In] IDirect3DDevice9 pDirect3DDevice9, [In] OPM_VIDEO_OUTPUT_SEMANTICS vos, [Out] uint* pulNumVideoOutputs, [Out] IOPMVideoOutput** pppOPMVideoOutputArray);
