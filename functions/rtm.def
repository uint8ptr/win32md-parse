uint MgmRegisterMProtocol([In] [Out] ROUTING_PROTOCOL_CONFIG* prpiInfo, [In] uint dwProtocolId, [In] uint dwComponentId, [In] [Out] HANDLE* phProtocol);
uint MgmDeRegisterMProtocol([In] HANDLE hProtocol);
uint MgmTakeInterfaceOwnership([In] HANDLE hProtocol, [In] uint dwIfIndex, [In] uint dwIfNextHopAddr);
uint MgmReleaseInterfaceOwnership([In] HANDLE hProtocol, [In] uint dwIfIndex, [In] uint dwIfNextHopAddr);
uint MgmGetProtocolOnInterface([In] uint dwIfIndex, [In] uint dwIfNextHopAddr, [In] [Out] uint* pdwIfProtocolId, [In] [Out] uint* pdwIfComponentId);
uint MgmAddGroupMembershipEntry([In] HANDLE hProtocol, [In] uint dwSourceAddr, [In] uint dwSourceMask, [In] uint dwGroupAddr, [In] uint dwGroupMask, [In] uint dwIfIndex, [In] uint dwIfNextHopIPAddr, [In] uint dwFlags);
uint MgmDeleteGroupMembershipEntry([In] HANDLE hProtocol, [In] uint dwSourceAddr, [In] uint dwSourceMask, [In] uint dwGroupAddr, [In] uint dwGroupMask, [In] uint dwIfIndex, [In] uint dwIfNextHopIPAddr, [In] uint dwFlags);
uint MgmGetMfe([In] [Out] MIB_IPMCAST_MFE* pimm, [In] [Out] uint* pdwBufferSize, [In] [Out] byte* pbBuffer);
uint MgmGetFirstMfe([In] [Out] uint* pdwBufferSize, [In] [Out] byte* pbBuffer, [In] [Out] uint* pdwNumEntries);
uint MgmGetNextMfe([In] [Out] MIB_IPMCAST_MFE* pimmStart, [In] [Out] uint* pdwBufferSize, [In] [Out] byte* pbBuffer, [In] [Out] uint* pdwNumEntries);
uint MgmGetMfeStats([In] [Out] MIB_IPMCAST_MFE* pimm, [In] [Out] uint* pdwBufferSize, [In] [Out] byte* pbBuffer, [In] uint dwFlags);
uint MgmGetFirstMfeStats([In] [Out] uint* pdwBufferSize, [In] [Out] byte* pbBuffer, [In] [Out] uint* pdwNumEntries, [In] uint dwFlags);
uint MgmGetNextMfeStats([In] [Out] MIB_IPMCAST_MFE* pimmStart, [In] [Out] uint* pdwBufferSize, [In] [Out] byte* pbBuffer, [In] [Out] uint* pdwNumEntries, [In] uint dwFlags);
uint MgmGroupEnumerationStart([In] HANDLE hProtocol, [In] MGM_ENUM_TYPES metEnumType, [In] [Out] HANDLE* phEnumHandle);
uint MgmGroupEnumerationGetNext([In] HANDLE hEnum, [In] [Out] uint* pdwBufferSize, [In] [Out] byte* pbBuffer, [In] [Out] uint* pdwNumEntries);
uint MgmGroupEnumerationEnd([In] HANDLE hEnum);
uint RtmConvertNetAddressToIpv6AddressAndLength([In] [Out] RTM_NET_ADDRESS* pNetAddress, [In] [Out] IN6_ADDR* pAddress, [In] [Out] uint* pLength, [In] uint dwAddressSize);
uint RtmConvertIpv6AddressAndLengthToNetAddress([In] [Out] RTM_NET_ADDRESS* pNetAddress, [In] IN6_ADDR Address, [In] uint dwLength, [In] uint dwAddressSize);
uint RtmRegisterEntity([In] [Out] RTM_ENTITY_INFO* RtmEntityInfo, [In] [Out] RTM_ENTITY_EXPORT_METHODS* ExportMethods, [In] RTM_EVENT_CALLBACK EventCallback, [In] BOOL ReserveOpaquePointer, [In] [Out] RTM_REGN_PROFILE* RtmRegProfile, [In] [Out] nint* RtmRegHandle);
uint RtmDeregisterEntity([In] nint RtmRegHandle);
uint RtmGetRegisteredEntities([In] nint RtmRegHandle, [In] [Out] uint* NumEntities, [In] [Out] nint* EntityHandles, [In] [Out] RTM_ENTITY_INFO* EntityInfos);
uint RtmReleaseEntities([In] nint RtmRegHandle, [In] uint NumEntities, [In] [Out] nint* EntityHandles);
uint RtmLockDestination([In] nint RtmRegHandle, [In] nint DestHandle, [In] BOOL Exclusive, [In] BOOL LockDest);
uint RtmGetOpaqueInformationPointer([In] nint RtmRegHandle, [In] nint DestHandle, [In] [Out] void** OpaqueInfoPointer);
uint RtmGetEntityMethods([In] nint RtmRegHandle, [In] nint EntityHandle, [In] [Out] uint* NumMethods, [In] [Out] RTM_ENTITY_EXPORT_METHOD* ExptMethods);
uint RtmInvokeMethod([In] nint RtmRegHandle, [In] nint EntityHandle, [In] [Out] RTM_ENTITY_METHOD_INPUT* Input, [In] [Out] uint* OutputSize, [In] [Out] RTM_ENTITY_METHOD_OUTPUT* Output);
uint RtmBlockMethods([In] nint RtmRegHandle, [In] HANDLE TargetHandle, [In] byte TargetType, [In] uint BlockingFlag);
uint RtmGetEntityInfo([In] nint RtmRegHandle, [In] nint EntityHandle, [In] [Out] RTM_ENTITY_INFO* EntityInfo);
uint RtmGetDestInfo([In] nint RtmRegHandle, [In] nint DestHandle, [In] uint ProtocolId, [In] uint TargetViews, [In] [Out] RTM_DEST_INFO* DestInfo);
uint RtmGetRouteInfo([In] nint RtmRegHandle, [In] nint RouteHandle, [In] [Out] RTM_ROUTE_INFO* RouteInfo, [In] [Out] RTM_NET_ADDRESS* DestAddress);
uint RtmGetNextHopInfo([In] nint RtmRegHandle, [In] nint NextHopHandle, [In] [Out] RTM_NEXTHOP_INFO* NextHopInfo);
uint RtmReleaseEntityInfo([In] nint RtmRegHandle, [In] [Out] RTM_ENTITY_INFO* EntityInfo);
uint RtmReleaseDestInfo([In] nint RtmRegHandle, [In] [Out] RTM_DEST_INFO* DestInfo);
uint RtmReleaseRouteInfo([In] nint RtmRegHandle, [In] [Out] RTM_ROUTE_INFO* RouteInfo);
uint RtmReleaseNextHopInfo([In] nint RtmRegHandle, [In] [Out] RTM_NEXTHOP_INFO* NextHopInfo);
uint RtmAddRouteToDest([In] nint RtmRegHandle, [In] [Out] nint* RouteHandle, [In] [Out] RTM_NET_ADDRESS* DestAddress, [In] [Out] RTM_ROUTE_INFO* RouteInfo, [In] uint TimeToLive, [In] nint RouteListHandle, [In] uint NotifyType, [In] nint NotifyHandle, [In] [Out] uint* ChangeFlags);
uint RtmDeleteRouteToDest([In] nint RtmRegHandle, [In] nint RouteHandle, [In] [Out] uint* ChangeFlags);
uint RtmHoldDestination([In] nint RtmRegHandle, [In] nint DestHandle, [In] uint TargetViews, [In] uint HoldTime);
uint RtmGetRoutePointer([In] nint RtmRegHandle, [In] nint RouteHandle, [In] [Out] RTM_ROUTE_INFO** RoutePointer);
uint RtmLockRoute([In] nint RtmRegHandle, [In] nint RouteHandle, [In] BOOL Exclusive, [In] BOOL LockRoute, [In] [Out] RTM_ROUTE_INFO** RoutePointer);
uint RtmUpdateAndUnlockRoute([In] nint RtmRegHandle, [In] nint RouteHandle, [In] uint TimeToLive, [In] nint RouteListHandle, [In] uint NotifyType, [In] nint NotifyHandle, [In] [Out] uint* ChangeFlags);
uint RtmGetExactMatchDestination([In] nint RtmRegHandle, [In] [Out] RTM_NET_ADDRESS* DestAddress, [In] uint ProtocolId, [In] uint TargetViews, [In] [Out] RTM_DEST_INFO* DestInfo);
uint RtmGetMostSpecificDestination([In] nint RtmRegHandle, [In] [Out] RTM_NET_ADDRESS* DestAddress, [In] uint ProtocolId, [In] uint TargetViews, [In] [Out] RTM_DEST_INFO* DestInfo);
uint RtmGetLessSpecificDestination([In] nint RtmRegHandle, [In] nint DestHandle, [In] uint ProtocolId, [In] uint TargetViews, [In] [Out] RTM_DEST_INFO* DestInfo);
uint RtmGetExactMatchRoute([In] nint RtmRegHandle, [In] [Out] RTM_NET_ADDRESS* DestAddress, [In] uint MatchingFlags, [In] [Out] RTM_ROUTE_INFO* RouteInfo, [In] uint InterfaceIndex, [In] uint TargetViews, [In] [Out] nint* RouteHandle);
uint RtmIsBestRoute([In] nint RtmRegHandle, [In] nint RouteHandle, [In] [Out] uint* BestInViews);
uint RtmAddNextHop([In] nint RtmRegHandle, [In] [Out] RTM_NEXTHOP_INFO* NextHopInfo, [In] [Out] nint* NextHopHandle, [In] [Out] uint* ChangeFlags);
uint RtmFindNextHop([In] nint RtmRegHandle, [In] [Out] RTM_NEXTHOP_INFO* NextHopInfo, [In] [Out] nint* NextHopHandle, [In] [Out] RTM_NEXTHOP_INFO** NextHopPointer);
uint RtmDeleteNextHop([In] nint RtmRegHandle, [In] nint NextHopHandle, [In] [Out] RTM_NEXTHOP_INFO* NextHopInfo);
uint RtmGetNextHopPointer([In] nint RtmRegHandle, [In] nint NextHopHandle, [In] [Out] RTM_NEXTHOP_INFO** NextHopPointer);
uint RtmLockNextHop([In] nint RtmRegHandle, [In] nint NextHopHandle, [In] BOOL Exclusive, [In] BOOL LockNextHop, [In] [Out] RTM_NEXTHOP_INFO** NextHopPointer);
uint RtmCreateDestEnum([In] nint RtmRegHandle, [In] uint TargetViews, [In] uint EnumFlags, [In] [Out] RTM_NET_ADDRESS* NetAddress, [In] uint ProtocolId, [In] [Out] nint* RtmEnumHandle);
uint RtmGetEnumDests([In] nint RtmRegHandle, [In] nint EnumHandle, [In] [Out] uint* NumDests, [In] [Out] RTM_DEST_INFO* DestInfos);
uint RtmReleaseDests([In] nint RtmRegHandle, [In] uint NumDests, [In] [Out] RTM_DEST_INFO* DestInfos);
uint RtmCreateRouteEnum([In] nint RtmRegHandle, [In] nint DestHandle, [In] uint TargetViews, [In] uint EnumFlags, [In] [Out] RTM_NET_ADDRESS* StartDest, [In] uint MatchingFlags, [In] [Out] RTM_ROUTE_INFO* CriteriaRoute, [In] uint CriteriaInterface, [In] [Out] nint* RtmEnumHandle);
uint RtmGetEnumRoutes([In] nint RtmRegHandle, [In] nint EnumHandle, [In] [Out] uint* NumRoutes, [In] [Out] nint* RouteHandles);
uint RtmReleaseRoutes([In] nint RtmRegHandle, [In] uint NumRoutes, [In] [Out] nint* RouteHandles);
uint RtmCreateNextHopEnum([In] nint RtmRegHandle, [In] uint EnumFlags, [In] [Out] RTM_NET_ADDRESS* NetAddress, [In] [Out] nint* RtmEnumHandle);
uint RtmGetEnumNextHops([In] nint RtmRegHandle, [In] nint EnumHandle, [In] [Out] uint* NumNextHops, [In] [Out] nint* NextHopHandles);
uint RtmReleaseNextHops([In] nint RtmRegHandle, [In] uint NumNextHops, [In] [Out] nint* NextHopHandles);
uint RtmDeleteEnumHandle([In] nint RtmRegHandle, [In] nint EnumHandle);
uint RtmRegisterForChangeNotification([In] nint RtmRegHandle, [In] uint TargetViews, [In] uint NotifyFlags, [In] [Out] void* NotifyContext, [In] [Out] nint* NotifyHandle);
uint RtmGetChangedDests([In] nint RtmRegHandle, [In] nint NotifyHandle, [In] [Out] uint* NumDests, [In] [Out] RTM_DEST_INFO* ChangedDests);
uint RtmReleaseChangedDests([In] nint RtmRegHandle, [In] nint NotifyHandle, [In] uint NumDests, [In] [Out] RTM_DEST_INFO* ChangedDests);
uint RtmIgnoreChangedDests([In] nint RtmRegHandle, [In] nint NotifyHandle, [In] uint NumDests, [In] [Out] nint* ChangedDests);
uint RtmGetChangeStatus([In] nint RtmRegHandle, [In] nint NotifyHandle, [In] nint DestHandle, [In] [Out] BOOL* ChangeStatus);
uint RtmMarkDestForChangeNotification([In] nint RtmRegHandle, [In] nint NotifyHandle, [In] nint DestHandle, [In] BOOL MarkDest);
uint RtmIsMarkedForChangeNotification([In] nint RtmRegHandle, [In] nint NotifyHandle, [In] nint DestHandle, [In] [Out] BOOL* DestMarked);
uint RtmDeregisterFromChangeNotification([In] nint RtmRegHandle, [In] nint NotifyHandle);
uint RtmCreateRouteList([In] nint RtmRegHandle, [In] [Out] nint* RouteListHandle);
uint RtmInsertInRouteList([In] nint RtmRegHandle, [In] nint RouteListHandle, [In] uint NumRoutes, [In] [Out] nint* RouteHandles);
uint RtmCreateRouteListEnum([In] nint RtmRegHandle, [In] nint RouteListHandle, [In] [Out] nint* RtmEnumHandle);
uint RtmGetListEnumRoutes([In] nint RtmRegHandle, [In] nint EnumHandle, [In] [Out] uint* NumRoutes, [NativeArrayInfo(CountParamIndex = 2)] [Out] nint* RouteHandles);
uint RtmDeleteRouteList([In] nint RtmRegHandle, [In] nint RouteListHandle);
uint RtmReferenceHandles([In] nint RtmRegHandle, [In] uint NumHandles, [In] [Out] HANDLE* RtmHandles);
int CreateTable([In] [Out] Guid* lpInterface, [In] LPALLOCATEBUFFER lpAllocateBuffer, [In] LPALLOCATEMORE lpAllocateMore, [In] LPFREEBUFFER lpFreeBuffer, [In] [Out] void* lpvReserved, [In] uint ulTableType, [In] uint ulPropTagIndexColumn, [In] [Out] SPropTagArray* lpSPropTagArrayColumns, [Out] ITableData* lppTableData);
