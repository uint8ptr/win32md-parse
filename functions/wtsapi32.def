BOOL WTSStopRemoteControlSession([In] uint LogonId);
BOOL WTSStartRemoteControlSessionW([In] PWSTR pTargetServerName, [In] uint TargetLogonId, [In] byte HotkeyVk, [In] ushort HotkeyModifiers);
BOOL WTSStartRemoteControlSessionA([In] PSTR pTargetServerName, [In] uint TargetLogonId, [In] byte HotkeyVk, [In] ushort HotkeyModifiers);
BOOL WTSConnectSessionA([In] uint LogonId, [In] uint TargetLogonId, [In] PSTR pPassword, [In] BOOL bWait);
BOOL WTSConnectSessionW([In] uint LogonId, [In] uint TargetLogonId, [In] PWSTR pPassword, [In] BOOL bWait);
BOOL WTSEnumerateServersW([In] PWSTR pDomainName, [In] uint Reserved, [In] uint Version, [Out] WTS_SERVER_INFOW** ppServerInfo, [Out] uint* pCount);
BOOL WTSEnumerateServersA([In] PSTR pDomainName, [In] uint Reserved, [In] uint Version, [Out] WTS_SERVER_INFOA** ppServerInfo, [Out] uint* pCount);
HANDLE WTSOpenServerW([In] PWSTR pServerName);
HANDLE WTSOpenServerA([In] PSTR pServerName);
HANDLE WTSOpenServerExW([In] PWSTR pServerName);
HANDLE WTSOpenServerExA([In] PSTR pServerName);
void WTSCloseServer([In] HANDLE hServer);
BOOL WTSEnumerateSessionsW([In] HANDLE hServer, [In] uint Reserved, [In] uint Version, [Out] WTS_SESSION_INFOW** ppSessionInfo, [Out] uint* pCount);
BOOL WTSEnumerateSessionsA([In] HANDLE hServer, [In] uint Reserved, [In] uint Version, [Out] WTS_SESSION_INFOA** ppSessionInfo, [Out] uint* pCount);
BOOL WTSEnumerateSessionsExW([In] HANDLE hServer, [In] [Out] uint* pLevel, [In] uint Filter, [Out] WTS_SESSION_INFO_1W** ppSessionInfo, [Out] uint* pCount);
BOOL WTSEnumerateSessionsExA([In] HANDLE hServer, [In] [Out] uint* pLevel, [In] uint Filter, [Out] WTS_SESSION_INFO_1A** ppSessionInfo, [Out] uint* pCount);
BOOL WTSEnumerateProcessesW([In] HANDLE hServer, [In] uint Reserved, [In] uint Version, [In] [Out] WTS_PROCESS_INFOW** ppProcessInfo, [In] [Out] uint* pCount);
BOOL WTSEnumerateProcessesA([In] HANDLE hServer, [In] uint Reserved, [In] uint Version, [In] [Out] WTS_PROCESS_INFOA** ppProcessInfo, [In] [Out] uint* pCount);
BOOL WTSTerminateProcess([In] HANDLE hServer, [In] uint ProcessId, [In] uint ExitCode);
BOOL WTSQuerySessionInformationW([In] HANDLE hServer, [In] uint SessionId, [In] WTS_INFO_CLASS WTSInfoClass, [Out] PWSTR* ppBuffer, [Out] uint* pBytesReturned);
BOOL WTSQuerySessionInformationA([In] HANDLE hServer, [In] uint SessionId, [In] WTS_INFO_CLASS WTSInfoClass, [Out] PSTR* ppBuffer, [Out] uint* pBytesReturned);
BOOL WTSQueryUserConfigW([In] PWSTR pServerName, [In] PWSTR pUserName, [In] WTS_CONFIG_CLASS WTSConfigClass, [Out] PWSTR* ppBuffer, [Out] uint* pBytesReturned);
BOOL WTSQueryUserConfigA([In] PSTR pServerName, [In] PSTR pUserName, [In] WTS_CONFIG_CLASS WTSConfigClass, [Out] PSTR* ppBuffer, [Out] uint* pBytesReturned);
BOOL WTSSetUserConfigW([In] PWSTR pServerName, [In] PWSTR pUserName, [In] WTS_CONFIG_CLASS WTSConfigClass, [MemorySize(BytesParamIndex = 4)] [In] PWSTR pBuffer, [In] uint DataLength);
BOOL WTSSetUserConfigA([In] PSTR pServerName, [In] PSTR pUserName, [In] WTS_CONFIG_CLASS WTSConfigClass, [MemorySize(BytesParamIndex = 4)] [In] PSTR pBuffer, [In] uint DataLength);
BOOL WTSSendMessageW([In] HANDLE hServer, [In] uint SessionId, [MemorySize(BytesParamIndex = 3)] [In] PWSTR pTitle, [In] uint TitleLength, [MemorySize(BytesParamIndex = 5)] [In] PWSTR pMessage, [In] uint MessageLength, [In] MESSAGEBOX_STYLE Style, [In] uint Timeout, [Out] MESSAGEBOX_RESULT* pResponse, [In] BOOL bWait);
BOOL WTSSendMessageA([In] HANDLE hServer, [In] uint SessionId, [MemorySize(BytesParamIndex = 3)] [In] PSTR pTitle, [In] uint TitleLength, [MemorySize(BytesParamIndex = 5)] [In] PSTR pMessage, [In] uint MessageLength, [In] MESSAGEBOX_STYLE Style, [In] uint Timeout, [Out] MESSAGEBOX_RESULT* pResponse, [In] BOOL bWait);
BOOL WTSDisconnectSession([In] HANDLE hServer, [In] uint SessionId, [In] BOOL bWait);
BOOL WTSLogoffSession([In] HANDLE hServer, [In] uint SessionId, [In] BOOL bWait);
BOOL WTSShutdownSystem([In] HANDLE hServer, [In] uint ShutdownFlag);
BOOL WTSWaitSystemEvent([In] HANDLE hServer, [In] uint EventMask, [In] [Out] uint* pEventFlags);
HwtsVirtualChannelHandle WTSVirtualChannelOpen([In] HANDLE hServer, [In] uint SessionId, [In] PSTR pVirtualName);
HwtsVirtualChannelHandle WTSVirtualChannelOpenEx([In] uint SessionId, [In] PSTR pVirtualName, [In] uint flags);
BOOL WTSVirtualChannelClose([In] HANDLE hChannelHandle);
BOOL WTSVirtualChannelRead([In] HANDLE hChannelHandle, [In] uint TimeOut, [NotNullTerminated] [MemorySize(BytesParamIndex = 3)] [Out] PSTR Buffer, [In] uint BufferSize, [Out] uint* pBytesRead);
BOOL WTSVirtualChannelWrite([In] HANDLE hChannelHandle, [NotNullTerminated] [MemorySize(BytesParamIndex = 2)] [In] PSTR Buffer, [In] uint Length, [Out] uint* pBytesWritten);
BOOL WTSVirtualChannelPurgeInput([In] HANDLE hChannelHandle);
BOOL WTSVirtualChannelPurgeOutput([In] HANDLE hChannelHandle);
BOOL WTSVirtualChannelQuery([In] HANDLE hChannelHandle, [In] WTS_VIRTUAL_CLASS param1, [In] [Out] void** ppBuffer, [In] [Out] uint* pBytesReturned);
void WTSFreeMemory([In] [Out] void* pMemory);
BOOL WTSRegisterSessionNotification([In] HWND hWnd, [In] uint dwFlags);
BOOL WTSUnRegisterSessionNotification([In] HWND hWnd);
BOOL WTSRegisterSessionNotificationEx([In] HANDLE hServer, [In] HWND hWnd, [In] uint dwFlags);
BOOL WTSUnRegisterSessionNotificationEx([In] HANDLE hServer, [In] HWND hWnd);
BOOL WTSQueryUserToken([In] uint SessionId, [In] [Out] HANDLE* phToken);
BOOL WTSFreeMemoryExW([In] WTS_TYPE_CLASS WTSTypeClass, [In] void* pMemory, [In] uint NumberOfEntries);
BOOL WTSFreeMemoryExA([In] WTS_TYPE_CLASS WTSTypeClass, [In] void* pMemory, [In] uint NumberOfEntries);
BOOL WTSEnumerateProcessesExW([In] HANDLE hServer, [In] [Out] uint* pLevel, [In] uint SessionId, [Out] PWSTR* ppProcessInfo, [Out] uint* pCount);
BOOL WTSEnumerateProcessesExA([In] HANDLE hServer, [In] [Out] uint* pLevel, [In] uint SessionId, [Out] PSTR* ppProcessInfo, [Out] uint* pCount);
BOOL WTSEnumerateListenersW([In] HANDLE hServer, [In] void* pReserved, [In] uint Reserved, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] ushort** pListeners, [In] [Out] uint* pCount);
BOOL WTSEnumerateListenersA([In] HANDLE hServer, [In] void* pReserved, [In] uint Reserved, [NativeArrayInfo(CountParamIndex = 4)] [Out] [Optional] sbyte** pListeners, [In] [Out] uint* pCount);
BOOL WTSQueryListenerConfigW([In] HANDLE hServer, [In] void* pReserved, [In] uint Reserved, [In] PWSTR pListenerName, [Out] WTSLISTENERCONFIGW* pBuffer);
BOOL WTSQueryListenerConfigA([In] HANDLE hServer, [In] void* pReserved, [In] uint Reserved, [In] PSTR pListenerName, [Out] WTSLISTENERCONFIGA* pBuffer);
BOOL WTSCreateListenerW([In] HANDLE hServer, [In] void* pReserved, [In] uint Reserved, [In] PWSTR pListenerName, [In] WTSLISTENERCONFIGW* pBuffer, [In] uint flag);
BOOL WTSCreateListenerA([In] HANDLE hServer, [In] void* pReserved, [In] uint Reserved, [In] PSTR pListenerName, [In] WTSLISTENERCONFIGA* pBuffer, [In] uint flag);
BOOL WTSSetListenerSecurityW([In] HANDLE hServer, [In] void* pReserved, [In] uint Reserved, [In] PWSTR pListenerName, [In] uint SecurityInformation, [In] PSECURITY_DESCRIPTOR pSecurityDescriptor);
BOOL WTSSetListenerSecurityA([In] HANDLE hServer, [In] void* pReserved, [In] uint Reserved, [In] PSTR pListenerName, [In] uint SecurityInformation, [In] PSECURITY_DESCRIPTOR pSecurityDescriptor);
BOOL WTSGetListenerSecurityW([In] HANDLE hServer, [In] void* pReserved, [In] uint Reserved, [In] PWSTR pListenerName, [In] uint SecurityInformation, [Out] [Optional] PSECURITY_DESCRIPTOR pSecurityDescriptor, [In] uint nLength, [Out] uint* lpnLengthNeeded);
BOOL WTSGetListenerSecurityA([In] HANDLE hServer, [In] void* pReserved, [In] uint Reserved, [In] PSTR pListenerName, [In] uint SecurityInformation, [Out] [Optional] PSECURITY_DESCRIPTOR pSecurityDescriptor, [In] uint nLength, [Out] uint* lpnLengthNeeded);
BOOL WTSEnableChildSessions([In] BOOL bEnable);
BOOL WTSIsChildSessionsEnabled([Out] BOOL* pbEnabled);
BOOL WTSGetChildSessionId([Out] uint* pSessionId);
HRESULT WTSSetRenderHint([In] [Out] ulong* pRenderHintID, [In] HWND hwndOwner, [In] uint renderHintType, [In] uint cbHintDataLength, [MemorySize(BytesParamIndex = 3)] [In] [Optional] byte* pHintData);
