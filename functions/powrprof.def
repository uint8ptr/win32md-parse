NTSTATUS CallNtPowerInformation([In] POWER_INFORMATION_LEVEL InformationLevel, [MemorySize(BytesParamIndex = 2)] [In] [Optional] void* InputBuffer, [In] uint InputBufferLength, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] void* OutputBuffer, [In] uint OutputBufferLength);
BOOLEAN GetPwrCapabilities([Out] SYSTEM_POWER_CAPABILITIES* lpspc);
POWER_PLATFORM_ROLE PowerDeterminePlatformRoleEx([In] POWER_PLATFORM_ROLE_VERSION Version);
WIN32_ERROR PowerRegisterSuspendResumeNotification([In] uint Flags, [In] HANDLE Recipient, [Out] void** RegistrationHandle);
WIN32_ERROR PowerUnregisterSuspendResumeNotification([In] HPOWERNOTIFY RegistrationHandle);
WIN32_ERROR PowerReadACValue([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [Out] [Optional] uint* Type, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* Buffer, [In] [Out] [Optional] uint* BufferSize);
WIN32_ERROR PowerReadDCValue([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [Out] [Optional] uint* Type, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* Buffer, [In] [Out] uint* BufferSize);
uint PowerWriteACValueIndex([In] [Optional] HKEY RootPowerKey, [Const] [In] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [In] uint AcValueIndex);
uint PowerWriteDCValueIndex([In] [Optional] HKEY RootPowerKey, [Const] [In] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [In] uint DcValueIndex);
WIN32_ERROR PowerGetActiveScheme([In] [Optional] HKEY UserRootPowerKey, [Out] Guid** ActivePolicyGuid);
WIN32_ERROR PowerSetActiveScheme([In] [Optional] HKEY UserRootPowerKey, [Const] [In] [Optional] Guid* SchemeGuid);
WIN32_ERROR PowerSettingRegisterNotification([Const] [In] Guid* SettingGuid, [In] POWER_SETTING_REGISTER_NOTIFICATION_FLAGS Flags, [In] HANDLE Recipient, [Out] void** RegistrationHandle);
WIN32_ERROR PowerSettingUnregisterNotification([In] HPOWERNOTIFY RegistrationHandle);
HRESULT PowerRegisterForEffectivePowerModeNotifications([In] uint Version, [In] EFFECTIVE_POWER_MODE_CALLBACK Callback, [In] [Optional] void* Context, [Out] void** RegistrationHandle);
HRESULT PowerUnregisterFromEffectivePowerModeNotifications([In] void* RegistrationHandle);
BOOLEAN GetPwrDiskSpindownRange([Out] uint* puiMax, [Out] uint* puiMin);
BOOLEAN EnumPwrSchemes([In] PWRSCHEMESENUMPROC lpfn, [In] LPARAM lParam);
BOOLEAN ReadGlobalPwrPolicy([In] GLOBAL_POWER_POLICY* pGlobalPowerPolicy);
BOOLEAN ReadPwrScheme([In] uint uiID, [Out] POWER_POLICY* pPowerPolicy);
BOOLEAN WritePwrScheme([In] uint* puiID, [Const] [In] PWSTR lpszSchemeName, [Const] [In] [Optional] PWSTR lpszDescription, [In] POWER_POLICY* lpScheme);
BOOLEAN WriteGlobalPwrPolicy([In] GLOBAL_POWER_POLICY* pGlobalPowerPolicy);
BOOLEAN DeletePwrScheme([In] uint uiID);
BOOLEAN GetActivePwrScheme([Out] uint* puiID);
BOOLEAN SetActivePwrScheme([In] uint uiID, [In] [Optional] GLOBAL_POWER_POLICY* pGlobalPowerPolicy, [In] [Optional] POWER_POLICY* pPowerPolicy);
BOOLEAN IsPwrSuspendAllowed();
BOOLEAN IsPwrHibernateAllowed();
BOOLEAN IsPwrShutdownAllowed();
BOOLEAN IsAdminOverrideActive([In] ADMINISTRATOR_POWER_POLICY* papp);
BOOLEAN SetSuspendState([In] BOOLEAN bHibernate, [In] BOOLEAN bForce, [In] BOOLEAN bWakeupEventsDisabled);
BOOLEAN GetCurrentPowerPolicies([Out] GLOBAL_POWER_POLICY* pGlobalPowerPolicy, [Out] POWER_POLICY* pPowerPolicy);
BOOLEAN CanUserWritePwrScheme();
BOOLEAN ReadProcessorPwrScheme([In] uint uiID, [Out] MACHINE_PROCESSOR_POWER_POLICY* pMachineProcessorPowerPolicy);
BOOLEAN WriteProcessorPwrScheme([In] uint uiID, [In] MACHINE_PROCESSOR_POWER_POLICY* pMachineProcessorPowerPolicy);
BOOLEAN ValidatePowerPolicies([In] [Out] [Optional] GLOBAL_POWER_POLICY* pGlobalPowerPolicy, [In] [Out] [Optional] POWER_POLICY* pPowerPolicy);
BOOLEAN PowerIsSettingRangeDefined([Const] [In] [Optional] Guid* SubKeyGuid, [Const] [In] [Optional] Guid* SettingGuid);
WIN32_ERROR PowerSettingAccessCheckEx([In] POWER_DATA_ACCESSOR AccessFlags, [Const] [In] [Optional] Guid* PowerGuid, [In] REG_SAM_FLAGS AccessType);
WIN32_ERROR PowerSettingAccessCheck([In] POWER_DATA_ACCESSOR AccessFlags, [Const] [In] [Optional] Guid* PowerGuid);
uint PowerReadACValueIndex([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [Out] uint* AcValueIndex);
uint PowerReadDCValueIndex([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [Out] uint* DcValueIndex);
WIN32_ERROR PowerReadFriendlyName([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* Buffer, [In] [Out] uint* BufferSize);
WIN32_ERROR PowerReadDescription([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* Buffer, [In] [Out] uint* BufferSize);
WIN32_ERROR PowerReadPossibleValue([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [Out] [Optional] uint* Type, [In] uint PossibleSettingIndex, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* Buffer, [In] [Out] uint* BufferSize);
WIN32_ERROR PowerReadPossibleFriendlyName([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [In] uint PossibleSettingIndex, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* Buffer, [In] [Out] uint* BufferSize);
WIN32_ERROR PowerReadPossibleDescription([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [In] uint PossibleSettingIndex, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* Buffer, [In] [Out] uint* BufferSize);
WIN32_ERROR PowerReadValueMin([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [Out] uint* ValueMinimum);
WIN32_ERROR PowerReadValueMax([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [Out] uint* ValueMaximum);
WIN32_ERROR PowerReadValueIncrement([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [Out] uint* ValueIncrement);
WIN32_ERROR PowerReadValueUnitsSpecifier([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* Buffer, [In] [Out] uint* BufferSize);
uint PowerReadACDefaultIndex([In] [Optional] HKEY RootPowerKey, [Const] [In] Guid* SchemePersonalityGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] Guid* PowerSettingGuid, [Out] uint* AcDefaultIndex);
uint PowerReadDCDefaultIndex([In] [Optional] HKEY RootPowerKey, [Const] [In] Guid* SchemePersonalityGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] Guid* PowerSettingGuid, [Out] uint* DcDefaultIndex);
WIN32_ERROR PowerReadIconResourceSpecifier([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [MemorySize(BytesParamIndex = 5)] [Out] [Optional] byte* Buffer, [In] [Out] uint* BufferSize);
uint PowerReadSettingAttributes([Const] [In] [Optional] Guid* SubGroupGuid, [Const] [In] [Optional] Guid* PowerSettingGuid);
WIN32_ERROR PowerWriteFriendlyName([In] [Optional] HKEY RootPowerKey, [Const] [In] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [MemorySize(BytesParamIndex = 5)] [In] byte* Buffer, [In] uint BufferSize);
WIN32_ERROR PowerWriteDescription([In] [Optional] HKEY RootPowerKey, [Const] [In] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [MemorySize(BytesParamIndex = 5)] [In] byte* Buffer, [In] uint BufferSize);
WIN32_ERROR PowerWritePossibleValue([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [In] uint Type, [In] uint PossibleSettingIndex, [MemorySize(BytesParamIndex = 6)] [In] byte* Buffer, [In] uint BufferSize);
WIN32_ERROR PowerWritePossibleFriendlyName([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [In] uint PossibleSettingIndex, [MemorySize(BytesParamIndex = 5)] [In] byte* Buffer, [In] uint BufferSize);
WIN32_ERROR PowerWritePossibleDescription([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [In] uint PossibleSettingIndex, [MemorySize(BytesParamIndex = 5)] [In] byte* Buffer, [In] uint BufferSize);
WIN32_ERROR PowerWriteValueMin([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [In] uint ValueMinimum);
WIN32_ERROR PowerWriteValueMax([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [In] uint ValueMaximum);
WIN32_ERROR PowerWriteValueIncrement([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [In] uint ValueIncrement);
WIN32_ERROR PowerWriteValueUnitsSpecifier([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [MemorySize(BytesParamIndex = 4)] [In] byte* Buffer, [In] uint BufferSize);
uint PowerWriteACDefaultIndex([In] [Optional] HKEY RootSystemPowerKey, [Const] [In] Guid* SchemePersonalityGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] Guid* PowerSettingGuid, [In] uint DefaultAcIndex);
uint PowerWriteDCDefaultIndex([In] [Optional] HKEY RootSystemPowerKey, [Const] [In] Guid* SchemePersonalityGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] Guid* PowerSettingGuid, [In] uint DefaultDcIndex);
WIN32_ERROR PowerWriteIconResourceSpecifier([In] [Optional] HKEY RootPowerKey, [Const] [In] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [MemorySize(BytesParamIndex = 5)] [In] byte* Buffer, [In] uint BufferSize);
WIN32_ERROR PowerWriteSettingAttributes([Const] [In] [Optional] Guid* SubGroupGuid, [Const] [In] [Optional] Guid* PowerSettingGuid, [In] uint Attributes);
WIN32_ERROR PowerDuplicateScheme([In] [Optional] HKEY RootPowerKey, [Const] [In] Guid* SourceSchemeGuid, [In] [Out] Guid** DestinationSchemeGuid);
WIN32_ERROR PowerImportPowerScheme([In] [Optional] HKEY RootPowerKey, [Const] [In] PWSTR ImportFileNamePath, [In] [Out] Guid** DestinationSchemeGuid);
WIN32_ERROR PowerDeleteScheme([In] [Optional] HKEY RootPowerKey, [Const] [In] Guid* SchemeGuid);
WIN32_ERROR PowerRemovePowerSetting([Const] [In] Guid* PowerSettingSubKeyGuid, [Const] [In] Guid* PowerSettingGuid);
WIN32_ERROR PowerCreateSetting([In] [Optional] HKEY RootSystemPowerKey, [Const] [In] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] Guid* PowerSettingGuid);
WIN32_ERROR PowerCreatePossibleSetting([In] [Optional] HKEY RootSystemPowerKey, [Const] [In] Guid* SubGroupOfPowerSettingsGuid, [Const] [In] Guid* PowerSettingGuid, [In] uint PossibleSettingIndex);
WIN32_ERROR PowerEnumerate([In] [Optional] HKEY RootPowerKey, [Const] [In] [Optional] Guid* SchemeGuid, [Const] [In] [Optional] Guid* SubGroupOfPowerSettingsGuid, [In] POWER_DATA_ACCESSOR AccessFlags, [In] uint Index, [MemorySize(BytesParamIndex = 6)] [Out] [Optional] byte* Buffer, [In] [Out] uint* BufferSize);
uint PowerOpenUserPowerKey([Out] HKEY* phUserPowerKey, [In] uint Access, [In] BOOL OpenExisting);
uint PowerOpenSystemPowerKey([Out] HKEY* phSystemPowerKey, [In] uint Access, [In] BOOL OpenExisting);
WIN32_ERROR PowerCanRestoreIndividualDefaultPowerScheme([Const] [In] Guid* SchemeGuid);
WIN32_ERROR PowerRestoreIndividualDefaultPowerScheme([Const] [In] Guid* SchemeGuid);
WIN32_ERROR PowerRestoreDefaultPowerSchemes();
uint PowerReplaceDefaultPowerSchemes();
POWER_PLATFORM_ROLE PowerDeterminePlatformRole();
BOOLEAN DevicePowerEnumDevices([In] uint QueryIndex, [In] uint QueryInterpretationFlags, [In] uint QueryFlags, [MemorySize(BytesParamIndex = 4)] [Out] [Optional] byte* pReturnBuffer, [In] [Out] uint* pBufferSize);
uint DevicePowerSetDeviceState([Const] [In] PWSTR DeviceDescription, [In] uint SetFlags, [In] [Optional] void* SetData);
BOOLEAN DevicePowerOpen([In] [Optional] uint DebugMask);
BOOLEAN DevicePowerClose();
WIN32_ERROR PowerReportThermalEvent([In] THERMAL_EVENT* Event);
