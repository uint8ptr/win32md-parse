void PeerFreeData([Const] [In] [Optional] void* pvData);
HRESULT PeerGetItemCount([In] void* hPeerEnum, [Out] uint* pCount);
HRESULT PeerGetNextItem([In] void* hPeerEnum, [In] [Out] uint* pCount, [Out] void*** pppvItems);
HRESULT PeerEndEnumeration([In] void* hPeerEnum);
HRESULT PeerGroupStartup([In] ushort wVersionRequested, [Out] PEER_VERSION_DATA* pVersionData);
HRESULT PeerGroupShutdown();
HRESULT PeerGroupCreate([In] PEER_GROUP_PROPERTIES* pProperties, [Out] void** phGroup);
HRESULT PeerGroupOpen([Const] [In] PWSTR pwzIdentity, [Const] [In] PWSTR pwzGroupPeerName, [Const] [In] [Optional] PWSTR pwzCloud, [Out] void** phGroup);
HRESULT PeerGroupJoin([Const] [In] PWSTR pwzIdentity, [Const] [In] PWSTR pwzInvitation, [Const] [In] [Optional] PWSTR pwzCloud, [Out] void** phGroup);
HRESULT PeerGroupPasswordJoin([Const] [In] PWSTR pwzIdentity, [Const] [In] PWSTR pwzInvitation, [Const] [In] PWSTR pwzPassword, [Const] [In] [Optional] PWSTR pwzCloud, [Out] void** phGroup);
HRESULT PeerGroupConnect([In] void* hGroup);
HRESULT PeerGroupConnectByAddress([In] void* hGroup, [In] uint cAddresses, [NativeArrayInfo(CountParamIndex = 1)] [In] PEER_ADDRESS* pAddresses);
HRESULT PeerGroupClose([In] void* hGroup);
HRESULT PeerGroupDelete([Const] [In] PWSTR pwzIdentity, [Const] [In] PWSTR pwzGroupPeerName);
HRESULT PeerGroupCreateInvitation([In] void* hGroup, [Const] [In] PWSTR pwzIdentityInfo, [In] [Optional] FILETIME* pftExpiration, [In] uint cRoles, [Const] [NativeArrayInfo(CountParamIndex = 3)] [In] [Optional] Guid* pRoles, [Out] PWSTR* ppwzInvitation);
HRESULT PeerGroupCreatePasswordInvitation([In] void* hGroup, [Out] PWSTR* ppwzInvitation);
HRESULT PeerGroupParseInvitation([Const] [In] PWSTR pwzInvitation, [Out] PEER_INVITATION_INFO** ppInvitationInfo);
HRESULT PeerGroupGetStatus([In] void* hGroup, [Out] uint* pdwStatus);
HRESULT PeerGroupGetProperties([In] void* hGroup, [Out] PEER_GROUP_PROPERTIES** ppProperties);
HRESULT PeerGroupSetProperties([In] void* hGroup, [In] PEER_GROUP_PROPERTIES* pProperties);
HRESULT PeerGroupEnumMembers([In] void* hGroup, [In] uint dwFlags, [Const] [In] [Optional] PWSTR pwzIdentity, [Out] void** phPeerEnum);
HRESULT PeerGroupOpenDirectConnection([In] void* hGroup, [Const] [In] PWSTR pwzIdentity, [In] PEER_ADDRESS* pAddress, [Out] ulong* pullConnectionId);
HRESULT PeerGroupCloseDirectConnection([In] void* hGroup, [In] ulong ullConnectionId);
HRESULT PeerGroupEnumConnections([In] void* hGroup, [In] uint dwFlags, [Out] void** phPeerEnum);
HRESULT PeerGroupSendData([In] void* hGroup, [In] ulong ullConnectionId, [Const] [In] Guid* pType, [In] uint cbData, [MemorySize(BytesParamIndex = 3)] [In] void* pvData);
HRESULT PeerGroupRegisterEvent([In] void* hGroup, [In] HANDLE hEvent, [In] uint cEventRegistration, [NativeArrayInfo(CountParamIndex = 2)] [In] PEER_GROUP_EVENT_REGISTRATION* pEventRegistrations, [Out] void** phPeerEvent);
HRESULT PeerGroupUnregisterEvent([In] void* hPeerEvent);
HRESULT PeerGroupGetEventData([In] void* hPeerEvent, [Out] PEER_GROUP_EVENT_DATA** ppEventData);
HRESULT PeerGroupGetRecord([In] void* hGroup, [Const] [In] Guid* pRecordId, [Out] PEER_RECORD** ppRecord);
HRESULT PeerGroupAddRecord([In] void* hGroup, [In] PEER_RECORD* pRecord, [Out] Guid* pRecordId);
HRESULT PeerGroupUpdateRecord([In] void* hGroup, [In] PEER_RECORD* pRecord);
HRESULT PeerGroupDeleteRecord([In] void* hGroup, [Const] [In] Guid* pRecordId);
HRESULT PeerGroupEnumRecords([In] void* hGroup, [Const] [In] [Optional] Guid* pRecordType, [Out] void** phPeerEnum);
HRESULT PeerGroupSearchRecords([In] void* hGroup, [Const] [In] PWSTR pwzCriteria, [Out] void** phPeerEnum);
HRESULT PeerGroupExportDatabase([In] void* hGroup, [Const] [In] PWSTR pwzFilePath);
HRESULT PeerGroupImportDatabase([In] void* hGroup, [Const] [In] PWSTR pwzFilePath);
HRESULT PeerGroupIssueCredentials([In] void* hGroup, [Const] [In] PWSTR pwzSubjectIdentity, [In] [Optional] PEER_CREDENTIAL_INFO* pCredentialInfo, [In] uint dwFlags, [Out] [Optional] PWSTR* ppwzInvitation);
HRESULT PeerGroupExportConfig([In] void* hGroup, [Const] [In] PWSTR pwzPassword, [Out] PWSTR* ppwzXML);
HRESULT PeerGroupImportConfig([Const] [In] PWSTR pwzXML, [Const] [In] PWSTR pwzPassword, [In] BOOL fOverwrite, [Out] PWSTR* ppwzIdentity, [Out] PWSTR* ppwzGroup);
HRESULT PeerGroupPeerTimeToUniversalTime([In] void* hGroup, [In] FILETIME* pftPeerTime, [Out] FILETIME* pftUniversalTime);
HRESULT PeerGroupUniversalTimeToPeerTime([In] void* hGroup, [In] FILETIME* pftUniversalTime, [Out] FILETIME* pftPeerTime);
HRESULT PeerGroupResumePasswordAuthentication([In] void* hGroup, [In] void* hPeerEventHandle);
HRESULT PeerIdentityCreate([Const] [In] [Optional] PWSTR pwzClassifier, [Const] [In] [Optional] PWSTR pwzFriendlyName, [In] [Optional] nuint hCryptProv, [Out] PWSTR* ppwzIdentity);
HRESULT PeerIdentityGetFriendlyName([Const] [In] [Optional] PWSTR pwzIdentity, [Out] PWSTR* ppwzFriendlyName);
HRESULT PeerIdentitySetFriendlyName([Const] [In] [Optional] PWSTR pwzIdentity, [Const] [In] PWSTR pwzFriendlyName);
HRESULT PeerIdentityGetCryptKey([Const] [In] [Optional] PWSTR pwzIdentity, [Out] nuint* phCryptProv);
HRESULT PeerIdentityDelete([Const] [In] PWSTR pwzIdentity);
HRESULT PeerEnumIdentities([Out] void** phPeerEnum);
HRESULT PeerEnumGroups([Const] [In] PWSTR pwzIdentity, [Out] void** phPeerEnum);
HRESULT PeerCreatePeerName([Const] [In] [Optional] PWSTR pwzIdentity, [Const] [In] [Optional] PWSTR pwzClassifier, [Out] PWSTR* ppwzPeerName);
HRESULT PeerIdentityGetXML([Const] [In] [Optional] PWSTR pwzIdentity, [Out] PWSTR* ppwzIdentityXML);
HRESULT PeerIdentityExport([Const] [In] [Optional] PWSTR pwzIdentity, [Const] [In] PWSTR pwzPassword, [Out] PWSTR* ppwzExportXML);
HRESULT PeerIdentityImport([Const] [In] PWSTR pwzImportXML, [Const] [In] PWSTR pwzPassword, [Out] PWSTR* ppwzIdentity);
HRESULT PeerIdentityGetDefault([Out] PWSTR* ppwzPeerName);
HRESULT PeerCollabStartup([In] ushort wVersionRequested);
HRESULT PeerCollabShutdown();
HRESULT PeerCollabSignin([In] [Optional] HWND hwndParent, [In] uint dwSigninOptions);
HRESULT PeerCollabSignout([In] uint dwSigninOptions);
HRESULT PeerCollabGetSigninOptions([Out] uint* pdwSigninOptions);
HRESULT PeerCollabAsyncInviteContact([In] [Optional] PEER_CONTACT* pcContact, [In] PEER_ENDPOINT* pcEndpoint, [In] PEER_INVITATION* pcInvitation, [In] [Optional] HANDLE hEvent, [Out] [Optional] HANDLE* phInvitation);
HRESULT PeerCollabGetInvitationResponse([In] HANDLE hInvitation, [Out] PEER_INVITATION_RESPONSE** ppInvitationResponse);
HRESULT PeerCollabCancelInvitation([In] HANDLE hInvitation);
HRESULT PeerCollabCloseHandle([In] HANDLE hInvitation);
HRESULT PeerCollabInviteContact([In] [Optional] PEER_CONTACT* pcContact, [In] PEER_ENDPOINT* pcEndpoint, [In] PEER_INVITATION* pcInvitation, [Out] PEER_INVITATION_RESPONSE** ppResponse);
HRESULT PeerCollabAsyncInviteEndpoint([In] PEER_ENDPOINT* pcEndpoint, [In] PEER_INVITATION* pcInvitation, [In] [Optional] HANDLE hEvent, [Out] [Optional] HANDLE* phInvitation);
HRESULT PeerCollabInviteEndpoint([In] PEER_ENDPOINT* pcEndpoint, [In] PEER_INVITATION* pcInvitation, [Out] PEER_INVITATION_RESPONSE** ppResponse);
HRESULT PeerCollabGetAppLaunchInfo([Out] PEER_APP_LAUNCH_INFO** ppLaunchInfo);
HRESULT PeerCollabRegisterApplication([In] PEER_APPLICATION_REGISTRATION_INFO* pcApplication, [In] PEER_APPLICATION_REGISTRATION_TYPE registrationType);
HRESULT PeerCollabUnregisterApplication([Const] [In] Guid* pApplicationId, [In] PEER_APPLICATION_REGISTRATION_TYPE registrationType);
HRESULT PeerCollabGetApplicationRegistrationInfo([Const] [In] Guid* pApplicationId, [In] PEER_APPLICATION_REGISTRATION_TYPE registrationType, [Out] PEER_APPLICATION_REGISTRATION_INFO** ppApplication);
HRESULT PeerCollabEnumApplicationRegistrationInfo([In] PEER_APPLICATION_REGISTRATION_TYPE registrationType, [Out] void** phPeerEnum);
HRESULT PeerCollabGetPresenceInfo([In] [Optional] PEER_ENDPOINT* pcEndpoint, [Out] PEER_PRESENCE_INFO** ppPresenceInfo);
HRESULT PeerCollabEnumApplications([In] [Optional] PEER_ENDPOINT* pcEndpoint, [Const] [In] [Optional] Guid* pApplicationId, [Out] void** phPeerEnum);
HRESULT PeerCollabEnumObjects([In] [Optional] PEER_ENDPOINT* pcEndpoint, [Const] [In] [Optional] Guid* pObjectId, [Out] void** phPeerEnum);
HRESULT PeerCollabEnumEndpoints([In] [Optional] PEER_CONTACT* pcContact, [Out] void** phPeerEnum);
HRESULT PeerCollabRefreshEndpointData([In] PEER_ENDPOINT* pcEndpoint);
HRESULT PeerCollabDeleteEndpointData([In] PEER_ENDPOINT* pcEndpoint);
HRESULT PeerCollabQueryContactData([In] [Optional] PEER_ENDPOINT* pcEndpoint, [Out] PWSTR* ppwzContactData);
HRESULT PeerCollabSubscribeEndpointData([Const] [In] PEER_ENDPOINT* pcEndpoint);
HRESULT PeerCollabUnsubscribeEndpointData([Const] [In] PEER_ENDPOINT* pcEndpoint);
HRESULT PeerCollabSetPresenceInfo([In] PEER_PRESENCE_INFO* pcPresenceInfo);
HRESULT PeerCollabGetEndpointName([Out] PWSTR* ppwzEndpointName);
HRESULT PeerCollabSetEndpointName([Const] [In] PWSTR pwzEndpointName);
HRESULT PeerCollabSetObject([In] PEER_OBJECT* pcObject);
HRESULT PeerCollabDeleteObject([Const] [In] Guid* pObjectId);
HRESULT PeerCollabRegisterEvent([In] HANDLE hEvent, [In] uint cEventRegistration, [NativeArrayInfo(CountParamIndex = 1)] [In] PEER_COLLAB_EVENT_REGISTRATION* pEventRegistrations, [Out] void** phPeerEvent);
HRESULT PeerCollabGetEventData([In] void* hPeerEvent, [Out] PEER_COLLAB_EVENT_DATA** ppEventData);
HRESULT PeerCollabUnregisterEvent([In] void* hPeerEvent);
HRESULT PeerCollabEnumPeopleNearMe([Out] void** phPeerEnum);
HRESULT PeerCollabAddContact([Const] [In] PWSTR pwzContactData, [Out] [Optional] PEER_CONTACT** ppContact);
HRESULT PeerCollabDeleteContact([Const] [In] PWSTR pwzPeerName);
HRESULT PeerCollabGetContact([Const] [In] [Optional] PWSTR pwzPeerName, [Out] PEER_CONTACT** ppContact);
HRESULT PeerCollabUpdateContact([In] PEER_CONTACT* pContact);
HRESULT PeerCollabEnumContacts([Out] void** phPeerEnum);
HRESULT PeerCollabExportContact([Const] [In] [Optional] PWSTR pwzPeerName, [Out] PWSTR* ppwzContactData);
HRESULT PeerCollabParseContact([Const] [In] PWSTR pwzContactData, [Out] PEER_CONTACT** ppContact);
HRESULT PeerNameToPeerHostName([Const] [In] PWSTR pwzPeerName, [Out] PWSTR* ppwzHostName);
HRESULT PeerHostNameToPeerName([Const] [In] PWSTR pwzHostName, [Out] PWSTR* ppwzPeerName);
HRESULT PeerPnrpStartup([In] ushort wVersionRequested);
HRESULT PeerPnrpShutdown();
HRESULT PeerPnrpRegister([Const] [In] PWSTR pcwzPeerName, [In] [Optional] PEER_PNRP_REGISTRATION_INFO* pRegistrationInfo, [Out] void** phRegistration);
HRESULT PeerPnrpUpdateRegistration([In] void* hRegistration, [In] PEER_PNRP_REGISTRATION_INFO* pRegistrationInfo);
HRESULT PeerPnrpUnregister([In] void* hRegistration);
HRESULT PeerPnrpResolve([Const] [In] PWSTR pcwzPeerName, [Const] [In] [Optional] PWSTR pcwzCloudName, [In] [Out] uint* pcEndpoints, [Out] PEER_PNRP_ENDPOINT_INFO** ppEndpoints);
HRESULT PeerPnrpStartResolve([Const] [In] PWSTR pcwzPeerName, [Const] [In] [Optional] PWSTR pcwzCloudName, [In] [Optional] uint cMaxEndpoints, [In] HANDLE hEvent, [Out] void** phResolve);
HRESULT PeerPnrpGetCloudInfo([Out] uint* pcNumClouds, [Out] PEER_PNRP_CLOUD_INFO** ppCloudInfo);
HRESULT PeerPnrpGetEndpoint([In] void* hResolve, [Out] PEER_PNRP_ENDPOINT_INFO** ppEndpoint);
HRESULT PeerPnrpEndResolve([In] void* hResolve);
